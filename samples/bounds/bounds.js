// Generated by Haxe 3.4.4
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var h3d_IDrawable = function() { };
$hxClasses["h3d.IDrawable"] = h3d_IDrawable;
h3d_IDrawable.__name__ = ["h3d","IDrawable"];
h3d_IDrawable.prototype = {
	__class__: h3d_IDrawable
};
var hxd_App = function() {
	var _gthis = this;
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.engine = engine;
		engine.onReady = $bind(this,this.setup);
		haxe_Timer.delay($bind(this,this.setup),0);
	} else {
		hxd_System.start(function() {
			engine = new h3d_Engine();
			_gthis.engine = engine;
			engine.onReady = $bind(_gthis,_gthis.setup);
			engine.init();
		});
	}
};
$hxClasses["hxd.App"] = hxd_App;
hxd_App.__name__ = ["hxd","App"];
hxd_App.__interfaces__ = [h3d_IDrawable];
hxd_App.staticHandler = function() {
};
hxd_App.prototype = {
	get_wantedFPS: function() {
		return hxd_Timer.wantedFPS;
	}
	,set_wantedFPS: function(fps) {
		return hxd_Timer.wantedFPS = fps;
	}
	,onResize: function() {
	}
	,setScene: function(scene,disposePrevious) {
		if(disposePrevious == null) {
			disposePrevious = true;
		}
		var new2D = (scene instanceof h2d_Scene) ? scene : null;
		var new3D = (scene instanceof h3d_scene_Scene) ? scene : null;
		if(new2D != null) {
			this.sevents.removeScene(this.s2d);
		}
		if(new3D != null) {
			this.sevents.removeScene(this.s3d);
		}
		this.sevents.addScene(scene);
		if(disposePrevious) {
			if(new2D != null) {
				this.s2d.dispose();
			} else if(new3D != null) {
				this.s3d.dispose();
			} else {
				throw new js__$Boot_HaxeError("Can't dispose previous scene");
			}
		}
		if(new2D != null) {
			this.s2d = new2D;
		}
		if(new3D != null) {
			this.s3d = new3D;
		}
	}
	,setScene2D: function(s2d,disposePrevious) {
		if(disposePrevious == null) {
			disposePrevious = true;
		}
		this.sevents.removeScene(this.s2d);
		this.sevents.addScene(s2d,0);
		if(disposePrevious) {
			this.s2d.dispose();
		}
		this.s2d = s2d;
	}
	,render: function(e) {
		this.s3d.render(e);
		this.s2d.render(e);
	}
	,setup: function() {
		var _gthis = this;
		var initDone = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			if(initDone) {
				_gthis.onResize();
			}
		};
		this.s3d = new h3d_scene_Scene();
		this.s2d = new h2d_Scene();
		this.sevents = new hxd_SceneEvents();
		this.sevents.addScene(this.s2d);
		this.sevents.addScene(this.s3d);
		this.loadAssets(function() {
			initDone = true;
			_gthis.init();
			hxd_Timer.skip();
			_gthis.mainLoop();
			hxd_System.setLoop($bind(_gthis,_gthis.mainLoop));
			hxd_Key.initialize();
		});
	}
	,dispose: function() {
		this.engine.onResized = hxd_App.staticHandler;
		this.engine.onContextLost = hxd_App.staticHandler;
		this.isDisposed = true;
		this.s2d.dispose();
		this.s3d.dispose();
		this.sevents.dispose();
	}
	,loadAssets: function(onLoaded) {
		onLoaded();
	}
	,init: function() {
	}
	,mainLoop: function() {
		hxd_Timer.update();
		this.sevents.checkEvents();
		if(this.isDisposed) {
			return;
		}
		this.update(hxd_Timer.tmod);
		if(this.isDisposed) {
			return;
		}
		this.s2d.setElapsedTime(hxd_Timer.tmod / 60);
		this.s3d.setElapsedTime(hxd_Timer.tmod / 60);
		this.engine.render(this);
	}
	,update: function(dt) {
	}
	,__class__: hxd_App
};
var Bounds = function() {
	this.time = 0.;
	this.colors = [16711680,65280,255,16711935];
	hxd_App.call(this);
};
$hxClasses["Bounds"] = Bounds;
Bounds.__name__ = ["Bounds"];
Bounds.main = function() {
	hxd_Res.set_loader(new hxd_res_Loader(new hxd_fs_EmbedFileSystem(haxe_Unserializer.run("oy14:customFont.fntty14:customFont.pngty10:hxlogo.pngty13:normalmap.pngty16:trueTypeFont.ttfty15:gravityFont.fntty15:gravityFont.pngtg"))));
	new Bounds();
};
Bounds.__super__ = hxd_App;
Bounds.prototype = $extend(hxd_App.prototype,{
	init: function() {
		this.boxes = [];
		this.g = new h2d_Graphics(this.s2d);
		var _g1 = 0;
		var _g = this.colors.length;
		while(_g1 < _g) {
			var i = _g1++;
			var size = 200 / (i + 4) | 0;
			var c = this.colors[i];
			var b = new h2d_Bitmap(h2d_Tile.fromColor(c,size,size,0.5).sub(0,0,size,size,-Std.random(size),-Std.random(size)),i == 0 ? this.s2d : this.boxes[i - 1]);
			b.addChild(new h2d_Bitmap(h2d_Tile.fromColor(16777215,8,8).sub(0,0,8,8,-4,-4)));
			if(i == 0) {
				b.posChanged = true;
				b.x = this.s2d.width * 0.5;
				b.posChanged = true;
				b.y = this.s2d.height * 0.5;
			} else {
				var v = Std.random(50) - 25;
				b.posChanged = true;
				b.x = v;
				var v1 = Std.random(50) - 25;
				b.posChanged = true;
				b.y = v1;
				if(b.x < 0) {
					var _g2 = b;
					_g2.posChanged = true;
					_g2.x -= size * 1.5;
				} else {
					var _g21 = b;
					_g21.posChanged = true;
					_g21.x += size * 1.5;
				}
				if(b.y < 0) {
					var _g22 = b;
					_g22.posChanged = true;
					_g22.y -= size * 1.5;
				} else {
					var _g23 = b;
					_g23.posChanged = true;
					_g23.y += size * 1.5;
				}
			}
			var v2 = 1.2 - i * 0.1;
			var _g3 = b;
			_g3.posChanged = true;
			_g3.scaleX *= v2;
			var _g4 = b;
			_g4.posChanged = true;
			_g4.scaleY *= v2;
			this.boxes.push(b);
		}
		var _g5 = 0;
		var _g11 = this.boxes;
		while(_g5 < _g11.length) {
			var b1 = _g11[_g5];
			++_g5;
			new h2d_Graphics(b1);
		}
		var tf = new h2d_Text(hxd_Res.get_loader().loadBitmapFont("customFont.fnt").toFont(),this.boxes[0]);
		tf.set_text("Some quite long rotating text");
		tf.posChanged = true;
		tf.x = -5;
		tf.posChanged = true;
		tf.y = 15;
		tf.smooth = true;
	}
	,update: function(dt) {
		this.time += dt;
		this.g.clear();
		var _g1 = 0;
		var _g = this.boxes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var b = this.boxes[i];
			var _g2 = b;
			_g2.posChanged = true;
			_g2.rotation += (i + 1) * dt * 0.001;
			var v = 1 + Math.sin(this.time * 0.1 / (i + 2)) * 0.2;
			b.posChanged = true;
			b.scaleX = v;
			b.posChanged = true;
			b.scaleY = v;
			var b1 = b.getBounds();
			this.g.beginFill(this.colors[i] >> 2 & 4144959);
			this.g.drawRect(b1.xMin,b1.yMin,b1.xMax - b1.xMin,b1.yMax - b1.yMin);
		}
		var _g3 = 1;
		while(_g3 < 2) {
			var i1 = _g3++;
			var prev = this.boxes[i1 - 1];
			var b2 = this.boxes[i1].getBounds(prev);
			var value = prev.children[2];
			var g = (value instanceof h2d_Graphics) ? value : null;
			g.clear();
			g.beginFill(16777215,0.5);
			g.drawRect(b2.xMin,b2.yMin,b2.xMax - b2.xMin,b2.yMax - b2.yMin);
		}
	}
	,__class__: Bounds
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var i = $iterator(it)();
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $iterator(it)();
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		if(a[0] != b[0]) {
			return false;
		}
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) {
				return false;
			}
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) {
			return false;
		}
	} catch( e1 ) {
		return false;
	}
	return true;
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var format_gif_Block = $hxClasses["format.gif.Block"] = { __ename__ : true, __constructs__ : ["BFrame","BExtension","BEOF"] };
format_gif_Block.BFrame = function(frame) { var $x = ["BFrame",0,frame]; $x.__enum__ = format_gif_Block; $x.toString = $estr; return $x; };
format_gif_Block.BExtension = function(extension) { var $x = ["BExtension",1,extension]; $x.__enum__ = format_gif_Block; $x.toString = $estr; return $x; };
format_gif_Block.BEOF = ["BEOF",2];
format_gif_Block.BEOF.toString = $estr;
format_gif_Block.BEOF.__enum__ = format_gif_Block;
format_gif_Block.__empty_constructs__ = [format_gif_Block.BEOF];
var format_gif_Extension = $hxClasses["format.gif.Extension"] = { __ename__ : true, __constructs__ : ["EGraphicControl","EComment","EText","EApplicationExtension","EUnknown"] };
format_gif_Extension.EGraphicControl = function(gce) { var $x = ["EGraphicControl",0,gce]; $x.__enum__ = format_gif_Extension; $x.toString = $estr; return $x; };
format_gif_Extension.EComment = function(text) { var $x = ["EComment",1,text]; $x.__enum__ = format_gif_Extension; $x.toString = $estr; return $x; };
format_gif_Extension.EText = function(pte) { var $x = ["EText",2,pte]; $x.__enum__ = format_gif_Extension; $x.toString = $estr; return $x; };
format_gif_Extension.EApplicationExtension = function(ext) { var $x = ["EApplicationExtension",3,ext]; $x.__enum__ = format_gif_Extension; $x.toString = $estr; return $x; };
format_gif_Extension.EUnknown = function(id,data) { var $x = ["EUnknown",4,id,data]; $x.__enum__ = format_gif_Extension; $x.toString = $estr; return $x; };
format_gif_Extension.__empty_constructs__ = [];
var format_gif_ApplicationExtension = $hxClasses["format.gif.ApplicationExtension"] = { __ename__ : true, __constructs__ : ["AENetscapeLooping","AEUnknown"] };
format_gif_ApplicationExtension.AENetscapeLooping = function(loops) { var $x = ["AENetscapeLooping",0,loops]; $x.__enum__ = format_gif_ApplicationExtension; $x.toString = $estr; return $x; };
format_gif_ApplicationExtension.AEUnknown = function(name,version,data) { var $x = ["AEUnknown",1,name,version,data]; $x.__enum__ = format_gif_ApplicationExtension; $x.toString = $estr; return $x; };
format_gif_ApplicationExtension.__empty_constructs__ = [];
var format_gif_Version = $hxClasses["format.gif.Version"] = { __ename__ : true, __constructs__ : ["GIF87a","GIF89a","Unknown"] };
format_gif_Version.GIF87a = ["GIF87a",0];
format_gif_Version.GIF87a.toString = $estr;
format_gif_Version.GIF87a.__enum__ = format_gif_Version;
format_gif_Version.GIF89a = ["GIF89a",1];
format_gif_Version.GIF89a.toString = $estr;
format_gif_Version.GIF89a.__enum__ = format_gif_Version;
format_gif_Version.Unknown = function(version) { var $x = ["Unknown",2,version]; $x.__enum__ = format_gif_Version; $x.toString = $estr; return $x; };
format_gif_Version.__empty_constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a];
var format_gif_DisposalMethod = $hxClasses["format.gif.DisposalMethod"] = { __ename__ : true, __constructs__ : ["UNSPECIFIED","NO_ACTION","FILL_BACKGROUND","RENDER_PREVIOUS","UNDEFINED"] };
format_gif_DisposalMethod.UNSPECIFIED = ["UNSPECIFIED",0];
format_gif_DisposalMethod.UNSPECIFIED.toString = $estr;
format_gif_DisposalMethod.UNSPECIFIED.__enum__ = format_gif_DisposalMethod;
format_gif_DisposalMethod.NO_ACTION = ["NO_ACTION",1];
format_gif_DisposalMethod.NO_ACTION.toString = $estr;
format_gif_DisposalMethod.NO_ACTION.__enum__ = format_gif_DisposalMethod;
format_gif_DisposalMethod.FILL_BACKGROUND = ["FILL_BACKGROUND",2];
format_gif_DisposalMethod.FILL_BACKGROUND.toString = $estr;
format_gif_DisposalMethod.FILL_BACKGROUND.__enum__ = format_gif_DisposalMethod;
format_gif_DisposalMethod.RENDER_PREVIOUS = ["RENDER_PREVIOUS",3];
format_gif_DisposalMethod.RENDER_PREVIOUS.toString = $estr;
format_gif_DisposalMethod.RENDER_PREVIOUS.__enum__ = format_gif_DisposalMethod;
format_gif_DisposalMethod.UNDEFINED = function(index) { var $x = ["UNDEFINED",4,index]; $x.__enum__ = format_gif_DisposalMethod; $x.toString = $estr; return $x; };
format_gif_DisposalMethod.__empty_constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS];
var format_gif_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.gif.Reader"] = format_gif_Reader;
format_gif_Reader.__name__ = ["format","gif","Reader"];
format_gif_Reader.prototype = {
	read: function() {
		var _g = 0;
		var _g1 = [71,73,70];
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(this.i.readByte() != b) {
				throw new js__$Boot_HaxeError("Invalid header");
			}
		}
		var gifVer = this.i.readString(3);
		var version = format_gif_Version.GIF89a;
		switch(gifVer) {
		case "87a":
			version = format_gif_Version.GIF87a;
			break;
		case "89a":
			version = format_gif_Version.GIF89a;
			break;
		default:
			version = format_gif_Version.Unknown(gifVer);
		}
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packedField = this.i.readByte();
		var bgIndex = this.i.readByte();
		var pixelAspectRatio = this.i.readByte();
		if(pixelAspectRatio != 0) {
			pixelAspectRatio = (pixelAspectRatio + 15) / 64;
		} else {
			pixelAspectRatio = 1;
		}
		var lsd = { width : width, height : height, hasGlobalColorTable : (packedField & 128) == 128, colorResolution : (packedField & 112) >>> 4, sorted : (packedField & 8) == 8, globalColorTableSize : 2 << (packedField & 7), backgroundColorIndex : bgIndex, pixelAspectRatio : pixelAspectRatio};
		var gct = null;
		if(lsd.hasGlobalColorTable) {
			gct = this.readColorTable(lsd.globalColorTableSize);
		}
		var blocks = new List();
		while(true) {
			var b1 = this.readBlock();
			blocks.add(b1);
			if(b1 == format_gif_Block.BEOF) {
				break;
			}
		}
		return { version : version, logicalScreenDescriptor : lsd, globalColorTable : gct, blocks : blocks};
	}
	,readBlock: function() {
		var blockID = this.i.readByte();
		switch(blockID) {
		case 33:
			return this.readExtension();
		case 44:
			return this.readImage();
		case 59:
			return format_gif_Block.BEOF;
		}
		return format_gif_Block.BEOF;
	}
	,readImage: function() {
		var x = this.i.readUInt16();
		var y = this.i.readUInt16();
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packed = this.i.readByte();
		var localColorTable = (packed & 128) == 128;
		var interlaced = (packed & 64) == 64;
		var sorted = (packed & 32) == 32;
		var localColorTableSize = 2 << (packed & 7);
		var lct = null;
		if(localColorTable) {
			lct = this.readColorTable(localColorTableSize);
		}
		return format_gif_Block.BFrame({ x : x, y : y, width : width, height : height, localColorTable : localColorTable, interlaced : interlaced, sorted : sorted, localColorTableSize : localColorTableSize, pixels : this.readPixels(width,height,interlaced), colorTable : lct});
	}
	,readPixels: function(width,height,interlaced) {
		var input = this.i;
		var pixelsCount = width * height;
		var pixels = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
		var minCodeSize = input.readByte();
		var blockSize = input.readByte() - 1;
		var bits = input.readByte();
		var bitsCount = 8;
		var clearCode = 1 << minCodeSize;
		var eoiCode = clearCode + 1;
		var codeSize = minCodeSize + 1;
		var codeSizeLimit = 1 << codeSize;
		var codeMask = codeSizeLimit - 1;
		var baseDict = [];
		var _g1 = 0;
		var _g = clearCode;
		while(_g1 < _g) {
			var i = _g1++;
			baseDict[i] = [i];
		}
		var dict = [];
		var dictLen = clearCode + 2;
		var newRecord;
		var i1 = 0;
		var code = 0;
		var last;
		while(i1 < pixelsCount) {
			last = code;
			while(bitsCount < codeSize) {
				if(blockSize == 0) {
					break;
				}
				bits |= input.readByte() << bitsCount;
				bitsCount += 8;
				--blockSize;
				if(blockSize == 0) {
					blockSize = input.readByte();
				}
			}
			code = bits & codeMask;
			bits >>= codeSize;
			bitsCount -= codeSize;
			if(code == clearCode) {
				dict = baseDict.slice();
				dictLen = clearCode + 2;
				codeSize = minCodeSize + 1;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
				continue;
			}
			if(code == eoiCode) {
				break;
			}
			if(code < dictLen) {
				if(last != clearCode) {
					newRecord = dict[last].slice();
					newRecord.push(dict[code][0]);
					dict[dictLen++] = newRecord;
				}
			} else {
				if(code != dictLen) {
					throw new js__$Boot_HaxeError("Invalid LZW code. Excepted: " + dictLen + ", got: " + code);
				}
				newRecord = dict[last].slice();
				newRecord.push(newRecord[0]);
				dict[dictLen++] = newRecord;
			}
			newRecord = dict[code];
			var _g2 = 0;
			while(_g2 < newRecord.length) {
				var item = newRecord[_g2];
				++_g2;
				pixels.b[i1++] = item & 255;
			}
			if(dictLen == codeSizeLimit && codeSize < 12) {
				++codeSize;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
			}
		}
		while(blockSize > 0) {
			input.readByte();
			--blockSize;
			if(blockSize == 0) {
				blockSize = input.readByte();
			}
		}
		while(i1 < pixelsCount) pixels.b[i1++] = 0;
		if(interlaced) {
			var buffer = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
			var offset = this.deinterlace(pixels,buffer,8,0,0,width,height);
			offset = this.deinterlace(pixels,buffer,8,4,offset,width,height);
			offset = this.deinterlace(pixels,buffer,4,2,offset,width,height);
			this.deinterlace(pixels,buffer,2,1,offset,width,height);
			pixels = buffer;
		}
		return pixels;
	}
	,deinterlace: function(input,output,step,y,offset,width,height) {
		while(y < height) {
			output.blit(y * width,input,offset,width);
			offset += width;
			y += step;
		}
		return offset;
	}
	,readExtension: function() {
		var subId = this.i.readByte();
		switch(subId) {
		case 1:
			if(this.i.readByte() != 12) {
				throw new js__$Boot_HaxeError("Incorrect size of Plain Text Extension introducer block.");
			}
			var tmp = this.i.readUInt16();
			var tmp1 = this.i.readUInt16();
			var tmp2 = this.i.readUInt16();
			var tmp3 = this.i.readUInt16();
			var tmp4 = this.i.readByte();
			var tmp5 = this.i.readByte();
			var tmp6 = this.i.readByte();
			var tmp7 = this.i.readByte();
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EText({ textGridX : tmp, textGridY : tmp1, textGridWidth : tmp2, textGridHeight : tmp3, charCellWidth : tmp4, charCellHeight : tmp5, textForegroundColorIndex : tmp6, textBackgroundColorIndex : tmp7, text : bytes.toString()}));
		case 249:
			if(this.i.readByte() != 4) {
				throw new js__$Boot_HaxeError("Incorrect Graphic Control Extension block size!");
			}
			var packed = this.i.readByte();
			var disposalMethod;
			var _g = (packed & 28) >> 2;
			switch(_g) {
			case 0:
				disposalMethod = format_gif_DisposalMethod.UNSPECIFIED;
				break;
			case 1:
				disposalMethod = format_gif_DisposalMethod.NO_ACTION;
				break;
			case 2:
				disposalMethod = format_gif_DisposalMethod.FILL_BACKGROUND;
				break;
			case 3:
				disposalMethod = format_gif_DisposalMethod.RENDER_PREVIOUS;
				break;
			default:
				disposalMethod = format_gif_DisposalMethod.UNDEFINED((packed & 28) >> 2);
			}
			var b = format_gif_Block.BExtension(format_gif_Extension.EGraphicControl({ disposalMethod : disposalMethod, userInput : (packed & 2) == 2, hasTransparentColor : (packed & 1) == 1, delay : this.i.readUInt16(), transparentIndex : this.i.readByte()}));
			this.i.readByte();
			return b;
		case 254:
			var buffer1 = new haxe_io_BytesOutput();
			var bytes1 = new haxe_io_Bytes(new ArrayBuffer(255));
			var len1 = this.i.readByte();
			while(len1 != 0) {
				this.i.readBytes(bytes1,0,len1);
				buffer1.writeBytes(bytes1,0,len1);
				len1 = this.i.readByte();
			}
			buffer1.flush();
			bytes1 = buffer1.getBytes();
			buffer1.close();
			return format_gif_Block.BExtension(format_gif_Extension.EComment(bytes1.toString()));
		case 255:
			return this.readApplicationExtension();
		default:
			var buffer2 = new haxe_io_BytesOutput();
			var bytes2 = new haxe_io_Bytes(new ArrayBuffer(255));
			var len2 = this.i.readByte();
			while(len2 != 0) {
				this.i.readBytes(bytes2,0,len2);
				buffer2.writeBytes(bytes2,0,len2);
				len2 = this.i.readByte();
			}
			buffer2.flush();
			bytes2 = buffer2.getBytes();
			buffer2.close();
			return format_gif_Block.BExtension(format_gif_Extension.EUnknown(subId,bytes2));
		}
	}
	,readApplicationExtension: function() {
		if(this.i.readByte() != 11) {
			throw new js__$Boot_HaxeError("Incorrect size of Application Extension introducer block.");
		}
		var name = this.i.readString(8);
		var version = this.i.readString(3);
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		var data = bytes;
		if(name == "NETSCAPE" && version == "2.0" && data.b[0] == 1) {
			return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AENetscapeLooping(data.b[1] | data.b[2] << 8)));
		}
		return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AEUnknown(name,version,data)));
	}
	,readBlocks: function() {
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		return bytes;
	}
	,readColorTable: function(size) {
		size *= 3;
		var output = new haxe_io_Bytes(new ArrayBuffer(size));
		var c = 0;
		while(c < size) {
			var v = this.i.readByte();
			output.b[c] = v & 255;
			var v1 = this.i.readByte();
			output.b[c + 1] = v1 & 255;
			var v2 = this.i.readByte();
			output.b[c + 2] = v2 & 255;
			c += 3;
		}
		return output;
	}
	,__class__: format_gif_Reader
};
var format_gif_Tools = function() { };
$hxClasses["format.gif.Tools"] = format_gif_Tools;
format_gif_Tools.__name__ = ["format","gif","Tools"];
format_gif_Tools.framesCount = function(data) {
	var frames = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		if(block[1] == 0) {
			++frames;
		}
	}
	return frames;
};
format_gif_Tools.frame = function(data,frameIndex) {
	var counter = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		if(block[1] == 0) {
			var frame = block[2];
			if(counter == frameIndex) {
				return frame;
			}
			++counter;
		}
	}
	return null;
};
format_gif_Tools.graphicControl = function(data,frameIndex) {
	var counter = 0;
	var gce = null;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block[1]) {
		case 0:
			var frame = block[2];
			if(counter == frameIndex) {
				return gce;
			}
			gce = null;
			++counter;
			break;
		case 1:
			if(block[2][1] == 0) {
				var g = block[2][2];
				gce = g;
			}
			break;
		default:
		}
	}
	return null;
};
format_gif_Tools.extractBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block[1]) {
		case 0:
			var frame = block[2];
			if(frameCaret == frameIndex) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(frame.width * frame.height * 4));
				var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
				if(ct == null) {
					throw new js__$Boot_HaxeError("Frame does not have a color table!");
				}
				var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
				var writeCaret = 0;
				var _g1 = 0;
				var _g = frame.pixels.length;
				while(_g1 < _g) {
					var i = _g1++;
					var index = frame.pixels.b[i] * 3;
					bytes.b[writeCaret] = ct.b[index + 2] & 255;
					bytes.b[writeCaret + 1] = ct.b[index + 1] & 255;
					bytes.b[writeCaret + 2] = ct.b[index] & 255;
					if(transparentIndex == index) {
						bytes.b[writeCaret + 3] = 0;
					} else {
						bytes.b[writeCaret + 3] = 255;
					}
					writeCaret += 4;
				}
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block[2];
			if(ext[1] == 0) {
				var g = ext[2];
				gce = g;
			}
			break;
		default:
		}
	}
	return null;
};
format_gif_Tools.extractRGBA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block[1]) {
		case 0:
			var frame = block[2];
			if(frameCaret == frameIndex) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(frame.width * frame.height * 4));
				var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
				if(ct == null) {
					throw new js__$Boot_HaxeError("Frame does not have a color table!");
				}
				var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
				var writeCaret = 0;
				var _g1 = 0;
				var _g = frame.pixels.length;
				while(_g1 < _g) {
					var i = _g1++;
					var index = frame.pixels.b[i] * 3;
					bytes.b[writeCaret] = ct.b[index] & 255;
					bytes.b[writeCaret + 1] = ct.b[index + 1] & 255;
					bytes.b[writeCaret + 2] = ct.b[index + 2] & 255;
					if(transparentIndex == index) {
						bytes.b[writeCaret + 3] = 0;
					} else {
						bytes.b[writeCaret + 3] = 255;
					}
					writeCaret += 4;
				}
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block[2];
			if(ext[1] == 0) {
				var g = ext[2];
				gce = g;
			}
			break;
		default:
		}
	}
	return null;
};
format_gif_Tools.extractFullBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block[1]) {
		case 0:
			var frame = block[2];
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw new js__$Boot_HaxeError("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod[1]) {
			case 2:
				var _g1 = 0;
				var _g = pixels.length;
				while(_g1 < _g) {
					var i = _g1++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g11 = 0;
				var _g2 = pixels.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index + 2] & 255;
						bytes.b[writeCaret + 1] = ct.b[index + 1] & 255;
						bytes.b[writeCaret + 2] = ct.b[index] & 255;
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block[2];
			if(ext[1] == 0) {
				var g = ext[2];
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
format_gif_Tools.extractFullRGBA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block[1]) {
		case 0:
			var frame = block[2];
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw new js__$Boot_HaxeError("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod[1]) {
			case 2:
				var _g1 = 0;
				var _g = pixels.length;
				while(_g1 < _g) {
					var i = _g1++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g11 = 0;
				var _g2 = pixels.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index] & 255;
						bytes.b[writeCaret + 1] = ct.b[index + 1] & 255;
						bytes.b[writeCaret + 2] = ct.b[index + 2] & 255;
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block[2];
			if(ext[1] == 0) {
				var g = ext[2];
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
format_gif_Tools.loopCount = function(data) {
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		if(block[1] == 1) {
			if(block[2][1] == 3) {
				if(block[2][2][1] == 0) {
					var loops = block[2][2][2];
					return loops;
				}
			}
		}
	}
	return 1;
};
format_gif_Tools.log2 = function(val) {
	return Math.log(val) / format_gif_Tools.LN2;
};
var format_mp3_SamplingRate = $hxClasses["format.mp3.SamplingRate"] = { __ename__ : true, __constructs__ : ["SR_8000","SR_11025","SR_12000","SR_22050","SR_24000","SR_32000","SR_44100","SR_48000","SR_Bad"] };
format_mp3_SamplingRate.SR_8000 = ["SR_8000",0];
format_mp3_SamplingRate.SR_8000.toString = $estr;
format_mp3_SamplingRate.SR_8000.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_11025 = ["SR_11025",1];
format_mp3_SamplingRate.SR_11025.toString = $estr;
format_mp3_SamplingRate.SR_11025.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_12000 = ["SR_12000",2];
format_mp3_SamplingRate.SR_12000.toString = $estr;
format_mp3_SamplingRate.SR_12000.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_22050 = ["SR_22050",3];
format_mp3_SamplingRate.SR_22050.toString = $estr;
format_mp3_SamplingRate.SR_22050.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_24000 = ["SR_24000",4];
format_mp3_SamplingRate.SR_24000.toString = $estr;
format_mp3_SamplingRate.SR_24000.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_32000 = ["SR_32000",5];
format_mp3_SamplingRate.SR_32000.toString = $estr;
format_mp3_SamplingRate.SR_32000.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_44100 = ["SR_44100",6];
format_mp3_SamplingRate.SR_44100.toString = $estr;
format_mp3_SamplingRate.SR_44100.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_48000 = ["SR_48000",7];
format_mp3_SamplingRate.SR_48000.toString = $estr;
format_mp3_SamplingRate.SR_48000.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.SR_Bad = ["SR_Bad",8];
format_mp3_SamplingRate.SR_Bad.toString = $estr;
format_mp3_SamplingRate.SR_Bad.__enum__ = format_mp3_SamplingRate;
format_mp3_SamplingRate.__empty_constructs__ = [format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_Bad];
var format_mp3_Bitrate = $hxClasses["format.mp3.Bitrate"] = { __ename__ : true, __constructs__ : ["BR_8","BR_16","BR_24","BR_32","BR_40","BR_48","BR_56","BR_64","BR_80","BR_96","BR_112","BR_128","BR_144","BR_160","BR_176","BR_192","BR_224","BR_256","BR_288","BR_320","BR_352","BR_384","BR_416","BR_448","BR_Free","BR_Bad"] };
format_mp3_Bitrate.BR_8 = ["BR_8",0];
format_mp3_Bitrate.BR_8.toString = $estr;
format_mp3_Bitrate.BR_8.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_16 = ["BR_16",1];
format_mp3_Bitrate.BR_16.toString = $estr;
format_mp3_Bitrate.BR_16.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_24 = ["BR_24",2];
format_mp3_Bitrate.BR_24.toString = $estr;
format_mp3_Bitrate.BR_24.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_32 = ["BR_32",3];
format_mp3_Bitrate.BR_32.toString = $estr;
format_mp3_Bitrate.BR_32.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_40 = ["BR_40",4];
format_mp3_Bitrate.BR_40.toString = $estr;
format_mp3_Bitrate.BR_40.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_48 = ["BR_48",5];
format_mp3_Bitrate.BR_48.toString = $estr;
format_mp3_Bitrate.BR_48.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_56 = ["BR_56",6];
format_mp3_Bitrate.BR_56.toString = $estr;
format_mp3_Bitrate.BR_56.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_64 = ["BR_64",7];
format_mp3_Bitrate.BR_64.toString = $estr;
format_mp3_Bitrate.BR_64.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_80 = ["BR_80",8];
format_mp3_Bitrate.BR_80.toString = $estr;
format_mp3_Bitrate.BR_80.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_96 = ["BR_96",9];
format_mp3_Bitrate.BR_96.toString = $estr;
format_mp3_Bitrate.BR_96.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_112 = ["BR_112",10];
format_mp3_Bitrate.BR_112.toString = $estr;
format_mp3_Bitrate.BR_112.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_128 = ["BR_128",11];
format_mp3_Bitrate.BR_128.toString = $estr;
format_mp3_Bitrate.BR_128.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_144 = ["BR_144",12];
format_mp3_Bitrate.BR_144.toString = $estr;
format_mp3_Bitrate.BR_144.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_160 = ["BR_160",13];
format_mp3_Bitrate.BR_160.toString = $estr;
format_mp3_Bitrate.BR_160.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_176 = ["BR_176",14];
format_mp3_Bitrate.BR_176.toString = $estr;
format_mp3_Bitrate.BR_176.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_192 = ["BR_192",15];
format_mp3_Bitrate.BR_192.toString = $estr;
format_mp3_Bitrate.BR_192.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_224 = ["BR_224",16];
format_mp3_Bitrate.BR_224.toString = $estr;
format_mp3_Bitrate.BR_224.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_256 = ["BR_256",17];
format_mp3_Bitrate.BR_256.toString = $estr;
format_mp3_Bitrate.BR_256.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_288 = ["BR_288",18];
format_mp3_Bitrate.BR_288.toString = $estr;
format_mp3_Bitrate.BR_288.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_320 = ["BR_320",19];
format_mp3_Bitrate.BR_320.toString = $estr;
format_mp3_Bitrate.BR_320.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_352 = ["BR_352",20];
format_mp3_Bitrate.BR_352.toString = $estr;
format_mp3_Bitrate.BR_352.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_384 = ["BR_384",21];
format_mp3_Bitrate.BR_384.toString = $estr;
format_mp3_Bitrate.BR_384.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_416 = ["BR_416",22];
format_mp3_Bitrate.BR_416.toString = $estr;
format_mp3_Bitrate.BR_416.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_448 = ["BR_448",23];
format_mp3_Bitrate.BR_448.toString = $estr;
format_mp3_Bitrate.BR_448.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_Free = ["BR_Free",24];
format_mp3_Bitrate.BR_Free.toString = $estr;
format_mp3_Bitrate.BR_Free.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.BR_Bad = ["BR_Bad",25];
format_mp3_Bitrate.BR_Bad.toString = $estr;
format_mp3_Bitrate.BR_Bad.__enum__ = format_mp3_Bitrate;
format_mp3_Bitrate.__empty_constructs__ = [format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_Bad];
var format_mp3_MPEG = function() { };
$hxClasses["format.mp3.MPEG"] = format_mp3_MPEG;
format_mp3_MPEG.__name__ = ["format","mp3","MPEG"];
format_mp3_MPEG.enum2Num = function(m) {
	switch(m[1]) {
	case 0:
		return 3;
	case 1:
		return 2;
	case 2:
		return 0;
	case 3:
		return format_mp3_MPEG.Reserved;
	}
};
format_mp3_MPEG.num2Enum = function(m) {
	switch(m) {
	case 0:
		return format_mp3_MPEGVersion.MPEG_V25;
	case 2:
		return format_mp3_MPEGVersion.MPEG_V2;
	case 3:
		return format_mp3_MPEGVersion.MPEG_V1;
	default:
		return format_mp3_MPEGVersion.MPEG_Reserved;
	}
};
format_mp3_MPEG.srNum2Enum = function(sr) {
	switch(sr) {
	case 8000:
		return format_mp3_SamplingRate.SR_8000;
	case 11025:
		return format_mp3_SamplingRate.SR_11025;
	case 12000:
		return format_mp3_SamplingRate.SR_12000;
	case 22050:
		return format_mp3_SamplingRate.SR_22050;
	case 24000:
		return format_mp3_SamplingRate.SR_24000;
	case 32000:
		return format_mp3_SamplingRate.SR_32000;
	case 44100:
		return format_mp3_SamplingRate.SR_44100;
	case 48000:
		return format_mp3_SamplingRate.SR_48000;
	default:
		return format_mp3_SamplingRate.SR_Bad;
	}
};
format_mp3_MPEG.srEnum2Num = function(sr) {
	switch(sr[1]) {
	case 0:
		return 8000;
	case 1:
		return 11025;
	case 2:
		return 12000;
	case 3:
		return 22050;
	case 4:
		return 24000;
	case 5:
		return 32000;
	case 6:
		return 44100;
	case 7:
		return 48000;
	case 8:
		return -1;
	}
};
format_mp3_MPEG.getBitrateIdx = function(br,mpeg,layer) {
	var arr = (mpeg == format_mp3_MPEGVersion.MPEG_V1 ? format_mp3_MPEG.V1_Bitrates : format_mp3_MPEG.V2_Bitrates)[format_mp3_CLayer.enum2Num(layer)];
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		if(arr[i] == br) {
			return i;
		}
	}
	throw new js__$Boot_HaxeError("Bitrate index not found");
};
format_mp3_MPEG.getSamplingRateIdx = function(sr,mpeg) {
	var arr = format_mp3_MPEG.SamplingRates[format_mp3_MPEG.enum2Num(mpeg)];
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		if(arr[i] == sr) {
			return i;
		}
	}
	throw new js__$Boot_HaxeError("Sampling rate index not found");
};
format_mp3_MPEG.bitrateEnum2Num = function(br) {
	switch(br[1]) {
	case 0:
		return 8;
	case 1:
		return 16;
	case 2:
		return 24;
	case 3:
		return 32;
	case 4:
		return 40;
	case 5:
		return 48;
	case 6:
		return 56;
	case 7:
		return 64;
	case 8:
		return 80;
	case 9:
		return 96;
	case 10:
		return 112;
	case 11:
		return 128;
	case 12:
		return 144;
	case 13:
		return 160;
	case 14:
		return 176;
	case 15:
		return 192;
	case 16:
		return 224;
	case 17:
		return 256;
	case 18:
		return 288;
	case 19:
		return 320;
	case 20:
		return 352;
	case 21:
		return 384;
	case 22:
		return 416;
	case 23:
		return 448;
	case 24:
		return 0;
	case 25:
		return -1;
	}
};
format_mp3_MPEG.bitrateNum2Enum = function(br) {
	switch(br) {
	case 0:
		return format_mp3_Bitrate.BR_Free;
	case 8:
		return format_mp3_Bitrate.BR_8;
	case 16:
		return format_mp3_Bitrate.BR_16;
	case 24:
		return format_mp3_Bitrate.BR_24;
	case 32:
		return format_mp3_Bitrate.BR_32;
	case 40:
		return format_mp3_Bitrate.BR_40;
	case 48:
		return format_mp3_Bitrate.BR_48;
	case 56:
		return format_mp3_Bitrate.BR_56;
	case 64:
		return format_mp3_Bitrate.BR_64;
	case 80:
		return format_mp3_Bitrate.BR_80;
	case 96:
		return format_mp3_Bitrate.BR_96;
	case 112:
		return format_mp3_Bitrate.BR_112;
	case 128:
		return format_mp3_Bitrate.BR_128;
	case 144:
		return format_mp3_Bitrate.BR_144;
	case 160:
		return format_mp3_Bitrate.BR_160;
	case 176:
		return format_mp3_Bitrate.BR_176;
	case 192:
		return format_mp3_Bitrate.BR_192;
	case 224:
		return format_mp3_Bitrate.BR_224;
	case 256:
		return format_mp3_Bitrate.BR_256;
	case 288:
		return format_mp3_Bitrate.BR_288;
	case 320:
		return format_mp3_Bitrate.BR_320;
	case 352:
		return format_mp3_Bitrate.BR_352;
	case 384:
		return format_mp3_Bitrate.BR_384;
	case 416:
		return format_mp3_Bitrate.BR_416;
	case 448:
		return format_mp3_Bitrate.BR_448;
	default:
		return format_mp3_Bitrate.BR_Bad;
	}
};
var format_mp3_CLayer = function() { };
$hxClasses["format.mp3.CLayer"] = format_mp3_CLayer;
format_mp3_CLayer.__name__ = ["format","mp3","CLayer"];
format_mp3_CLayer.enum2Num = function(l) {
	switch(l[1]) {
	case 0:
		return format_mp3_CLayer.LReserved;
	case 1:
		return format_mp3_CLayer.LLayer3;
	case 2:
		return format_mp3_CLayer.LLayer2;
	case 3:
		return format_mp3_CLayer.LLayer1;
	}
};
format_mp3_CLayer.num2Enum = function(l) {
	switch(l) {
	case 1:
		return format_mp3_Layer.Layer3;
	case 2:
		return format_mp3_Layer.Layer2;
	case 3:
		return format_mp3_Layer.Layer1;
	default:
		return format_mp3_Layer.LayerReserved;
	}
};
var format_mp3_CChannelMode = function() { };
$hxClasses["format.mp3.CChannelMode"] = format_mp3_CChannelMode;
format_mp3_CChannelMode.__name__ = ["format","mp3","CChannelMode"];
format_mp3_CChannelMode.enum2Num = function(c) {
	switch(c[1]) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	case 3:
		return 3;
	}
};
format_mp3_CChannelMode.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_ChannelMode.Stereo;
	case 1:
		return format_mp3_ChannelMode.JointStereo;
	case 2:
		return format_mp3_ChannelMode.DualChannel;
	case 3:
		return format_mp3_ChannelMode.Mono;
	default:
		throw new js__$Boot_HaxeError("assert");
	}
};
var format_mp3_CEmphasis = function() { };
$hxClasses["format.mp3.CEmphasis"] = format_mp3_CEmphasis;
format_mp3_CEmphasis.__name__ = ["format","mp3","CEmphasis"];
format_mp3_CEmphasis.enum2Num = function(c) {
	switch(c[1]) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 3;
	case 3:
		return 2;
	}
};
format_mp3_CEmphasis.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_Emphasis.NoEmphasis;
	case 1:
		return format_mp3_Emphasis.Ms50_15;
	case 2:
		return format_mp3_Emphasis.InvalidEmphasis;
	case 3:
		return format_mp3_Emphasis.CCIT_J17;
	default:
		throw new js__$Boot_HaxeError("assert");
	}
};
var format_mp3_MPEGVersion = $hxClasses["format.mp3.MPEGVersion"] = { __ename__ : true, __constructs__ : ["MPEG_V1","MPEG_V2","MPEG_V25","MPEG_Reserved"] };
format_mp3_MPEGVersion.MPEG_V1 = ["MPEG_V1",0];
format_mp3_MPEGVersion.MPEG_V1.toString = $estr;
format_mp3_MPEGVersion.MPEG_V1.__enum__ = format_mp3_MPEGVersion;
format_mp3_MPEGVersion.MPEG_V2 = ["MPEG_V2",1];
format_mp3_MPEGVersion.MPEG_V2.toString = $estr;
format_mp3_MPEGVersion.MPEG_V2.__enum__ = format_mp3_MPEGVersion;
format_mp3_MPEGVersion.MPEG_V25 = ["MPEG_V25",2];
format_mp3_MPEGVersion.MPEG_V25.toString = $estr;
format_mp3_MPEGVersion.MPEG_V25.__enum__ = format_mp3_MPEGVersion;
format_mp3_MPEGVersion.MPEG_Reserved = ["MPEG_Reserved",3];
format_mp3_MPEGVersion.MPEG_Reserved.toString = $estr;
format_mp3_MPEGVersion.MPEG_Reserved.__enum__ = format_mp3_MPEGVersion;
format_mp3_MPEGVersion.__empty_constructs__ = [format_mp3_MPEGVersion.MPEG_V1,format_mp3_MPEGVersion.MPEG_V2,format_mp3_MPEGVersion.MPEG_V25,format_mp3_MPEGVersion.MPEG_Reserved];
var format_mp3_Layer = $hxClasses["format.mp3.Layer"] = { __ename__ : true, __constructs__ : ["LayerReserved","Layer3","Layer2","Layer1"] };
format_mp3_Layer.LayerReserved = ["LayerReserved",0];
format_mp3_Layer.LayerReserved.toString = $estr;
format_mp3_Layer.LayerReserved.__enum__ = format_mp3_Layer;
format_mp3_Layer.Layer3 = ["Layer3",1];
format_mp3_Layer.Layer3.toString = $estr;
format_mp3_Layer.Layer3.__enum__ = format_mp3_Layer;
format_mp3_Layer.Layer2 = ["Layer2",2];
format_mp3_Layer.Layer2.toString = $estr;
format_mp3_Layer.Layer2.__enum__ = format_mp3_Layer;
format_mp3_Layer.Layer1 = ["Layer1",3];
format_mp3_Layer.Layer1.toString = $estr;
format_mp3_Layer.Layer1.__enum__ = format_mp3_Layer;
format_mp3_Layer.__empty_constructs__ = [format_mp3_Layer.LayerReserved,format_mp3_Layer.Layer3,format_mp3_Layer.Layer2,format_mp3_Layer.Layer1];
var format_mp3_ChannelMode = $hxClasses["format.mp3.ChannelMode"] = { __ename__ : true, __constructs__ : ["Stereo","JointStereo","DualChannel","Mono"] };
format_mp3_ChannelMode.Stereo = ["Stereo",0];
format_mp3_ChannelMode.Stereo.toString = $estr;
format_mp3_ChannelMode.Stereo.__enum__ = format_mp3_ChannelMode;
format_mp3_ChannelMode.JointStereo = ["JointStereo",1];
format_mp3_ChannelMode.JointStereo.toString = $estr;
format_mp3_ChannelMode.JointStereo.__enum__ = format_mp3_ChannelMode;
format_mp3_ChannelMode.DualChannel = ["DualChannel",2];
format_mp3_ChannelMode.DualChannel.toString = $estr;
format_mp3_ChannelMode.DualChannel.__enum__ = format_mp3_ChannelMode;
format_mp3_ChannelMode.Mono = ["Mono",3];
format_mp3_ChannelMode.Mono.toString = $estr;
format_mp3_ChannelMode.Mono.__enum__ = format_mp3_ChannelMode;
format_mp3_ChannelMode.__empty_constructs__ = [format_mp3_ChannelMode.Stereo,format_mp3_ChannelMode.JointStereo,format_mp3_ChannelMode.DualChannel,format_mp3_ChannelMode.Mono];
var format_mp3_Emphasis = $hxClasses["format.mp3.Emphasis"] = { __ename__ : true, __constructs__ : ["NoEmphasis","Ms50_15","CCIT_J17","InvalidEmphasis"] };
format_mp3_Emphasis.NoEmphasis = ["NoEmphasis",0];
format_mp3_Emphasis.NoEmphasis.toString = $estr;
format_mp3_Emphasis.NoEmphasis.__enum__ = format_mp3_Emphasis;
format_mp3_Emphasis.Ms50_15 = ["Ms50_15",1];
format_mp3_Emphasis.Ms50_15.toString = $estr;
format_mp3_Emphasis.Ms50_15.__enum__ = format_mp3_Emphasis;
format_mp3_Emphasis.CCIT_J17 = ["CCIT_J17",2];
format_mp3_Emphasis.CCIT_J17.toString = $estr;
format_mp3_Emphasis.CCIT_J17.__enum__ = format_mp3_Emphasis;
format_mp3_Emphasis.InvalidEmphasis = ["InvalidEmphasis",3];
format_mp3_Emphasis.InvalidEmphasis.toString = $estr;
format_mp3_Emphasis.InvalidEmphasis.__enum__ = format_mp3_Emphasis;
format_mp3_Emphasis.__empty_constructs__ = [format_mp3_Emphasis.NoEmphasis,format_mp3_Emphasis.Ms50_15,format_mp3_Emphasis.CCIT_J17,format_mp3_Emphasis.InvalidEmphasis];
var format_mp3_FrameType = $hxClasses["format.mp3.FrameType"] = { __ename__ : true, __constructs__ : ["FT_MP3","FT_NONE"] };
format_mp3_FrameType.FT_MP3 = ["FT_MP3",0];
format_mp3_FrameType.FT_MP3.toString = $estr;
format_mp3_FrameType.FT_MP3.__enum__ = format_mp3_FrameType;
format_mp3_FrameType.FT_NONE = ["FT_NONE",1];
format_mp3_FrameType.FT_NONE.toString = $estr;
format_mp3_FrameType.FT_NONE.__enum__ = format_mp3_FrameType;
format_mp3_FrameType.__empty_constructs__ = [format_mp3_FrameType.FT_MP3,format_mp3_FrameType.FT_NONE];
var format_mp3_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.bits = new format_tools_BitsInput(i);
	this.samples = 0;
	this.sampleSize = 0;
	this.any_read = false;
};
$hxClasses["format.mp3.Reader"] = format_mp3_Reader;
format_mp3_Reader.__name__ = ["format","mp3","Reader"];
format_mp3_Reader.prototype = {
	skipID3v2: function() {
		this.id3v2_version = this.i.readUInt16();
		this.id3v2_flags = this.i.readByte();
		var size = this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		this.id3v2_data = this.i.read(size);
	}
	,seekFrame: function() {
		var found = false;
		try {
			var b;
			while(true) {
				b = this.i.readByte();
				if(!this.any_read) {
					this.any_read = true;
					if(b == 73) {
						b = this.i.readByte();
						if(b == 68) {
							b = this.i.readByte();
							if(b == 51) {
								this.skipID3v2();
							}
						}
					}
				}
				if(b == 255) {
					this.bits.nbits = 0;
					b = this.bits.readBits(3);
					if(b == 7) {
						return format_mp3_FrameType.FT_MP3;
					}
				}
			}
		} catch( ex ) {
			if (ex instanceof js__$Boot_HaxeError) ex = ex.val;
			if( js_Boot.__instanceof(ex,haxe_io_Eof) ) {
				return format_mp3_FrameType.FT_NONE;
			} else throw(ex);
		}
	}
	,readFrames: function() {
		var frames = [];
		var ft;
		while(true) {
			ft = this.seekFrame();
			if(!(ft != format_mp3_FrameType.FT_NONE)) {
				break;
			}
			switch(ft[1]) {
			case 0:
				var f = this.readFrame();
				if(f != null) {
					frames.push(f);
				}
				break;
			case 1:
				break;
			}
		}
		return frames;
	}
	,readFrameHeader: function() {
		var version = this.bits.readBits(2);
		var layer = this.bits.readBits(2);
		var hasCrc = !this.bits.readBit();
		if(version == format_mp3_MPEG.Reserved || layer == format_mp3_CLayer.LReserved) {
			return null;
		}
		var bitrateIdx = this.bits.readBits(4);
		var bitrate = format_mp3_Tools.getBitrate(version,layer,bitrateIdx);
		var samplingRateIdx = this.bits.readBits(2);
		var samplingRate = format_mp3_Tools.getSamplingRate(version,samplingRateIdx);
		var isPadded = this.bits.readBit();
		var privateBit = this.bits.readBit();
		if(bitrate == format_mp3_Bitrate.BR_Bad || bitrate == format_mp3_Bitrate.BR_Free || samplingRate == format_mp3_SamplingRate.SR_Bad) {
			return null;
		}
		var channelMode = this.bits.readBits(2);
		var isIntensityStereo = this.bits.readBit();
		var isMSStereo = this.bits.readBit();
		var isCopyrighted = this.bits.readBit();
		var isOriginal = this.bits.readBit();
		var emphasis = this.bits.readBits(2);
		var crc16 = 0;
		if(hasCrc) {
			crc16 = this.i.readUInt16();
		}
		return { version : format_mp3_MPEG.num2Enum(version), layer : format_mp3_CLayer.num2Enum(layer), hasCrc : hasCrc, crc16 : crc16, bitrate : bitrate, samplingRate : samplingRate, isPadded : isPadded, privateBit : privateBit, channelMode : format_mp3_CChannelMode.num2Enum(channelMode), isIntensityStereo : isIntensityStereo, isMSStereo : isMSStereo, isCopyrighted : isCopyrighted, isOriginal : isOriginal, emphasis : format_mp3_CEmphasis.num2Enum(emphasis)};
	}
	,readFrame: function() {
		var header = this.readFrameHeader();
		if(header == null || format_mp3_Tools.isInvalidFrameHeader(header)) {
			return null;
		}
		try {
			var data = this.i.read(format_mp3_Tools.getSampleDataSizeHdr(header));
			this.samples += format_mp3_Tools.getSampleCountHdr(header);
			this.sampleSize += data.length;
			return { header : header, data : data};
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,haxe_io_Eof) ) {
				return null;
			} else throw(e);
		}
	}
	,read: function() {
		var fs = this.readFrames();
		return { frames : fs, sampleCount : this.samples, sampleSize : this.sampleSize, id3v2 : this.id3v2_data == null ? null : { versionBytes : this.id3v2_version, flagByte : this.id3v2_flags, data : this.id3v2_data}};
	}
	,__class__: format_mp3_Reader
};
var format_mp3_Tools = function() { };
$hxClasses["format.mp3.Tools"] = format_mp3_Tools;
format_mp3_Tools.__name__ = ["format","mp3","Tools"];
format_mp3_Tools.getBitrate = function(mpegVersion,layerIdx,bitrateIdx) {
	if(mpegVersion == format_mp3_MPEG.Reserved || layerIdx == format_mp3_CLayer.LReserved) {
		return format_mp3_Bitrate.BR_Bad;
	}
	return (mpegVersion == 3 ? format_mp3_MPEG.V1_Bitrates : format_mp3_MPEG.V2_Bitrates)[layerIdx][bitrateIdx];
};
format_mp3_Tools.getSamplingRate = function(mpegVersion,samplingRateIdx) {
	return format_mp3_MPEG.SamplingRates[mpegVersion][samplingRateIdx];
};
format_mp3_Tools.isInvalidFrameHeader = function(hdr) {
	if(!(hdr.version == format_mp3_MPEGVersion.MPEG_Reserved || hdr.layer == format_mp3_Layer.LayerReserved || hdr.bitrate == format_mp3_Bitrate.BR_Bad || hdr.bitrate == format_mp3_Bitrate.BR_Free)) {
		return hdr.samplingRate == format_mp3_SamplingRate.SR_Bad;
	} else {
		return true;
	}
};
format_mp3_Tools.getSampleDataSize = function(mpegVersion,bitrate,samplingRate,isPadded,hasCrc) {
	return ((mpegVersion == 3 ? 144 : 72) * bitrate * 1000 / samplingRate | 0) + (isPadded ? 1 : 0) - (hasCrc ? 2 : 0) - 4;
};
format_mp3_Tools.getSampleDataSizeHdr = function(hdr) {
	return format_mp3_Tools.getSampleDataSize(format_mp3_MPEG.enum2Num(hdr.version),format_mp3_MPEG.bitrateEnum2Num(hdr.bitrate),format_mp3_MPEG.srEnum2Num(hdr.samplingRate),hdr.isPadded,hdr.hasCrc);
};
format_mp3_Tools.getSampleCount = function(mpegVersion) {
	if(mpegVersion == 3) {
		return 1152;
	} else {
		return 576;
	}
};
format_mp3_Tools.getSampleCountHdr = function(hdr) {
	return format_mp3_Tools.getSampleCount(format_mp3_MPEG.enum2Num(hdr.version));
};
format_mp3_Tools.getFrameInfo = function(fr) {
	return Std.string(fr.header.version) + ", " + Std.string(fr.header.layer) + ", " + Std.string(fr.header.channelMode) + ", " + Std.string(fr.header.samplingRate) + " Hz, " + Std.string(fr.header.bitrate) + " kbps " + "Emphasis: " + Std.string(fr.header.emphasis) + ", " + (fr.header.hasCrc ? "(CRC) " : "") + (fr.header.isPadded ? "(Padded) " : "") + (fr.header.isIntensityStereo ? "(Intensity Stereo) " : "") + (fr.header.isMSStereo ? "(MS Stereo) " : "") + (fr.header.isCopyrighted ? "(Copyrighted) " : "") + (fr.header.isOriginal ? "(Original) " : "");
};
var format_png_Color = $hxClasses["format.png.Color"] = { __ename__ : true, __constructs__ : ["ColGrey","ColTrue","ColIndexed"] };
format_png_Color.ColGrey = function(alpha) { var $x = ["ColGrey",0,alpha]; $x.__enum__ = format_png_Color; $x.toString = $estr; return $x; };
format_png_Color.ColTrue = function(alpha) { var $x = ["ColTrue",1,alpha]; $x.__enum__ = format_png_Color; $x.toString = $estr; return $x; };
format_png_Color.ColIndexed = ["ColIndexed",2];
format_png_Color.ColIndexed.toString = $estr;
format_png_Color.ColIndexed.__enum__ = format_png_Color;
format_png_Color.__empty_constructs__ = [format_png_Color.ColIndexed];
var format_png_Chunk = $hxClasses["format.png.Chunk"] = { __ename__ : true, __constructs__ : ["CEnd","CHeader","CData","CPalette","CUnknown"] };
format_png_Chunk.CEnd = ["CEnd",0];
format_png_Chunk.CEnd.toString = $estr;
format_png_Chunk.CEnd.__enum__ = format_png_Chunk;
format_png_Chunk.CHeader = function(h) { var $x = ["CHeader",1,h]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CData = function(b) { var $x = ["CData",2,b]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CPalette = function(b) { var $x = ["CPalette",3,b]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CUnknown = function(id,data) { var $x = ["CUnknown",4,id,data]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.__empty_constructs__ = [format_png_Chunk.CEnd];
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
$hxClasses["format.png.Reader"] = format_png_Reader;
format_png_Reader.__name__ = ["format","png","Reader"];
format_png_Reader.prototype = {
	read: function() {
		var _g = 0;
		var _g1 = [137,80,78,71,13,10,26,10];
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(this.i.readByte() != b) {
				throw new js__$Boot_HaxeError("Invalid header");
			}
		}
		var l = new List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c = new haxe_crypto_Crc32();
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				c["byte"](HxOverrides.cca(id,i));
			}
			c.update(data,0,data.length);
			if(c.get() != crc) {
				throw new js__$Boot_HaxeError("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
$hxClasses["format.png.Tools"] = format_png_Tools;
format_png_Tools.__name__ = ["format","png","Tools"];
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 1) {
			var h = c[2];
			return h;
		}
	}
	throw new js__$Boot_HaxeError("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 3) {
			var b = c[2];
			return b;
		}
	}
	return null;
};
format_png_Tools.filter = function(data,x,y,stride,prev,p,numChannels) {
	if(numChannels == null) {
		numChannels = 4;
	}
	var b = y == 0 ? 0 : data.b[p - stride];
	var c = x == 0 || y == 0 ? 0 : data.b[p - stride - numChannels];
	var k = prev + b - c;
	var pa = k - prev;
	if(pa < 0) {
		pa = -pa;
	}
	var pb = k - b;
	if(pb < 0) {
		pb = -pb;
	}
	var pc = k - c;
	if(pc < 0) {
		pc = -pc;
	}
	if(pa <= pb && pa <= pc) {
		return prev;
	} else if(pb <= pc) {
		return b;
	} else {
		return c;
	}
};
format_png_Tools.reverseBytes = function(b) {
	var p = 0;
	var _g1 = 0;
	var _g = b.length >> 2;
	while(_g1 < _g) {
		var i = _g1++;
		var b1 = b.b[p];
		var g = b.b[p + 1];
		var r = b.b[p + 2];
		var a = b.b[p + 3];
		b.b[p++] = a & 255;
		b.b[p++] = r & 255;
		b.b[p++] = g & 255;
		b.b[p++] = b1 & 255;
	}
};
format_png_Tools.extractGrey = function(d) {
	var h = format_png_Tools.getHeader(d);
	var grey = new haxe_io_Bytes(new ArrayBuffer(h.width * h.height));
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 2) {
			var b = c[2];
			if(fullData != null) {
				var b1 = fullData.b;
				var b2 = b.b;
				var _g1 = 0;
				var _g = b.length;
				while(_g1 < _g) {
					var i = _g1++;
					fullData.b.push(b2[i]);
				}
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				var b11 = fullData.b;
				var b21 = data.b;
				var _g11 = 0;
				var _g2 = data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					fullData.b.push(b21[i1]);
				}
				var b12 = fullData.b;
				var b22 = b.b;
				var _g12 = 0;
				var _g3 = b.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					fullData.b.push(b22[i2]);
				}
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw new js__$Boot_HaxeError("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var _g4 = h.color;
	if(_g4[1] == 0) {
		var alpha = _g4[2];
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var rinc = alpha ? 2 : 1;
		var _g13 = 0;
		var _g5 = h.height;
		while(_g13 < _g5) {
			var y = _g13++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				var _g31 = 0;
				var _g21 = width;
				while(_g31 < _g21) {
					var x = _g31++;
					var v = data.b[r];
					r += rinc;
					grey.b[w++] = v & 255;
				}
				break;
			case 1:
				var cv = 0;
				var _g32 = 0;
				var _g22 = width;
				while(_g32 < _g22) {
					var x1 = _g32++;
					cv += data.b[r];
					r += rinc;
					grey.b[w++] = cv & 255;
				}
				break;
			case 2:
				var stride1 = y == 0 ? 0 : width;
				var _g33 = 0;
				var _g23 = width;
				while(_g33 < _g23) {
					var x2 = _g33++;
					var v1 = data.b[r] + grey.b[w - stride1];
					r += rinc;
					grey.b[w++] = v1 & 255;
				}
				break;
			case 3:
				var cv1 = 0;
				var stride2 = y == 0 ? 0 : width;
				var _g34 = 0;
				var _g24 = width;
				while(_g34 < _g24) {
					var x3 = _g34++;
					cv1 = data.b[r] + (cv1 + grey.b[w - stride2] >> 1) & 255;
					r += rinc;
					grey.b[w++] = cv1 & 255;
				}
				break;
			case 4:
				var stride3 = width;
				var cv2 = 0;
				var _g35 = 0;
				var _g25 = width;
				while(_g35 < _g25) {
					var x4 = _g35++;
					var b3 = y == 0 ? 0 : grey.b[w - stride3];
					var c1 = x4 == 0 || y == 0 ? 0 : grey.b[w - stride3 - 1];
					var k = cv2 + b3 - c1;
					var pa = k - cv2;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b3;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c1;
					if(pc < 0) {
						pc = -pc;
					}
					cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b3 : c1) + data.b[r] & 255;
					r += rinc;
					grey.b[w++] = cv2 & 255;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f);
			}
		}
	} else {
		throw new js__$Boot_HaxeError("Unsupported color mode");
	}
	return grey;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra = bytes == null ? new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c[1] == 2) {
			var b = c[2];
			if(fullData != null) {
				var b1 = fullData.b;
				var b2 = b.b;
				var _g1 = 0;
				var _g = b.length;
				while(_g1 < _g) {
					var i = _g1++;
					fullData.b.push(b2[i]);
				}
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				var b11 = fullData.b;
				var b21 = data.b;
				var _g11 = 0;
				var _g2 = data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					fullData.b.push(b21[i1]);
				}
				var b12 = fullData.b;
				var b22 = b.b;
				var _g12 = 0;
				var _g3 = b.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					fullData.b.push(b22[i2]);
				}
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw new js__$Boot_HaxeError("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1 = flipY ? -1 : 1;
	var _g4 = h.color;
	switch(_g4[1]) {
	case 0:
		var alpha = _g4[2];
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphvaIdx = -1;
		if(!alpha) {
			var _g_head1 = d.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var t = val1;
				if(t[1] == 4) {
					if(t[2] == "tRNS") {
						var data1 = t[3];
						if(data1.length >= 2) {
							alphvaIdx = data1.b[1];
						}
						break;
					}
				}
			}
		}
		var _g13 = 0;
		var _g5 = h.height;
		while(_g13 < _g5) {
			var y = _g13++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g31 = 0;
					var _g21 = width;
					while(_g31 < _g21) {
						var x = _g31++;
						var v = data.b[r++];
						bgra.b[w++] = v & 255;
						bgra.b[w++] = v & 255;
						bgra.b[w++] = v & 255;
						bgra.b[w++] = data.b[r++] & 255;
					}
				} else {
					var _g32 = 0;
					var _g22 = width;
					while(_g32 < _g22) {
						var x1 = _g32++;
						var v1 = data.b[r++];
						bgra.b[w++] = v1 & 255;
						bgra.b[w++] = v1 & 255;
						bgra.b[w++] = v1 & 255;
						bgra.b[w++] = (v1 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 1:
				var cv = 0;
				var ca = 0;
				if(alpha) {
					var _g33 = 0;
					var _g23 = width;
					while(_g33 < _g23) {
						var x2 = _g33++;
						cv += data.b[r++];
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						ca += data.b[r++];
						bgra.b[w++] = ca & 255;
					}
				} else {
					var _g34 = 0;
					var _g24 = width;
					while(_g34 < _g24) {
						var x3 = _g34++;
						cv += data.b[r++];
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = cv & 255;
						bgra.b[w++] = (cv == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 2:
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g35 = 0;
					var _g25 = width;
					while(_g35 < _g25) {
						var x4 = _g35++;
						var v2 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v2 & 255;
						bgra.b[w++] = v2 & 255;
						bgra.b[w++] = v2 & 255;
						bgra.b[w++] = data.b[r++] + bgra.b[w - stride1] & 255;
					}
				} else {
					var _g36 = 0;
					var _g26 = width;
					while(_g36 < _g26) {
						var x5 = _g36++;
						var v3 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v3 & 255;
						bgra.b[w++] = v3 & 255;
						bgra.b[w++] = v3 & 255;
						bgra.b[w++] = (v3 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 3:
				var cv1 = 0;
				var ca1 = 0;
				var stride2 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g37 = 0;
					var _g27 = width;
					while(_g37 < _g27) {
						var x6 = _g37++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						ca1 = data.b[r++] + (ca1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = ca1 & 255;
					}
				} else {
					var _g38 = 0;
					var _g28 = width;
					while(_g38 < _g28) {
						var x7 = _g38++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = cv1 & 255;
						bgra.b[w++] = (cv1 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			case 4:
				var stride3 = width * 4 * flipY1;
				var cv2 = 0;
				var ca2 = 0;
				if(alpha) {
					var _g39 = 0;
					var _g29 = width;
					while(_g39 < _g29) {
						var x8 = _g39++;
						var b3 = y == 0 ? 0 : bgra.b[w - stride3];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k = cv2 + b3 - c1;
						var pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b3;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c1;
						if(pc < 0) {
							pc = -pc;
						}
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b3 : c1) + data.b[r++] & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						var b4 = y == 0 ? 0 : bgra.b[w - stride3];
						var c2 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k1 = ca2 + b4 - c2;
						var pa1 = k1 - ca2;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b4;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c2;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b4 : c2) + data.b[r++] & 255;
						bgra.b[w++] = ca2 & 255;
					}
				} else {
					var _g310 = 0;
					var _g210 = width;
					while(_g310 < _g210) {
						var x9 = _g310++;
						var b5 = y == 0 ? 0 : bgra.b[w - stride3];
						var c3 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k2 = cv2 + b5 - c3;
						var pa2 = k2 - cv2;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b5;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c3;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						cv2 = (pa2 <= pb2 && pa2 <= pc2 ? cv2 : pb2 <= pc2 ? b5 : c3) + data.b[r++] & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = cv2 & 255;
						bgra.b[w++] = (cv2 == alphvaIdx ? 0 : 255) & 255;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 1:
		var alpha1 = _g4[2];
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width1 = h.width;
		var stride4 = (alpha1 ? 4 : 3) * width1 + 1;
		if(data.length < h.height * stride4) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphaRed = -1;
		var alphaGreen = -1;
		var alphaBlue = -1;
		if(!alpha1) {
			var _g_head2 = d.h;
			while(_g_head2 != null) {
				var val2 = _g_head2.item;
				_g_head2 = _g_head2.next;
				var t1 = val2;
				if(t1[1] == 4) {
					if(t1[2] == "tRNS") {
						var data2 = t1[3];
						if(data2.length >= 6) {
							alphaRed = data2.b[1];
							alphaGreen = data2.b[3];
							alphaBlue = data2.b[5];
						}
						break;
					}
				}
			}
		}
		var cr = 0;
		var cg = 0;
		var cb = 0;
		var ca3 = 0;
		var _g14 = 0;
		var _g6 = h.height;
		while(_g14 < _g6) {
			var y1 = _g14++;
			var f1 = data.b[r++];
			switch(f1) {
			case 0:
				if(alpha1) {
					var _g311 = 0;
					var _g211 = width1;
					while(_g311 < _g211) {
						var x10 = _g311++;
						bgra.b[w++] = data.b[r + 2] & 255;
						bgra.b[w++] = data.b[r + 1] & 255;
						bgra.b[w++] = data.b[r] & 255;
						bgra.b[w++] = data.b[r + 3] & 255;
						r += 4;
					}
				} else {
					var _g312 = 0;
					var _g212 = width1;
					while(_g312 < _g212) {
						var x11 = _g312++;
						cb = data.b[r + 2];
						bgra.b[w++] = cb & 255;
						cg = data.b[r + 1];
						bgra.b[w++] = cg & 255;
						cr = data.b[r];
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 1:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g313 = 0;
					var _g213 = width1;
					while(_g313 < _g213) {
						var x12 = _g313++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb & 255;
						cg += data.b[r + 1];
						bgra.b[w++] = cg & 255;
						cr += data.b[r];
						bgra.b[w++] = cr & 255;
						ca3 += data.b[r + 3];
						bgra.b[w++] = ca3 & 255;
						r += 4;
					}
				} else {
					var _g314 = 0;
					var _g214 = width1;
					while(_g314 < _g214) {
						var x13 = _g314++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb & 255;
						cg += data.b[r + 1];
						bgra.b[w++] = cg & 255;
						cr += data.b[r];
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 2:
				var stride5 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g315 = 0;
					var _g215 = width1;
					while(_g315 < _g215) {
						var x14 = _g315++;
						bgra.b[w] = data.b[r + 2] + bgra.b[w - stride5] & 255;
						++w;
						bgra.b[w] = data.b[r + 1] + bgra.b[w - stride5] & 255;
						++w;
						bgra.b[w] = data.b[r] + bgra.b[w - stride5] & 255;
						++w;
						bgra.b[w] = data.b[r + 3] + bgra.b[w - stride5] & 255;
						++w;
						r += 4;
					}
				} else {
					var _g316 = 0;
					var _g216 = width1;
					while(_g316 < _g216) {
						var x15 = _g316++;
						cb = data.b[r + 2] + bgra.b[w - stride5];
						bgra.b[w] = cb & 255;
						++w;
						cg = data.b[r + 1] + bgra.b[w - stride5];
						bgra.b[w] = cg & 255;
						++w;
						cr = data.b[r] + bgra.b[w - stride5];
						bgra.b[w] = cr & 255;
						++w;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 3:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				var stride6 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g317 = 0;
					var _g217 = width1;
					while(_g317 < _g217) {
						var x16 = _g317++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb & 255;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg & 255;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr & 255;
						ca3 = data.b[r + 3] + (ca3 + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = ca3 & 255;
						r += 4;
					}
				} else {
					var _g318 = 0;
					var _g218 = width1;
					while(_g318 < _g218) {
						var x17 = _g318++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb & 255;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg & 255;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			case 4:
				var stride7 = width1 * 4 * flipY1;
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g319 = 0;
					var _g219 = width1;
					while(_g319 < _g219) {
						var x18 = _g319++;
						var b6 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c4 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k3 = cb + b6 - c4;
						var pa3 = k3 - cb;
						if(pa3 < 0) {
							pa3 = -pa3;
						}
						var pb3 = k3 - b6;
						if(pb3 < 0) {
							pb3 = -pb3;
						}
						var pc3 = k3 - c4;
						if(pc3 < 0) {
							pc3 = -pc3;
						}
						cb = (pa3 <= pb3 && pa3 <= pc3 ? cb : pb3 <= pc3 ? b6 : c4) + data.b[r + 2] & 255;
						bgra.b[w++] = cb & 255;
						var b7 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c5 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k4 = cg + b7 - c5;
						var pa4 = k4 - cg;
						if(pa4 < 0) {
							pa4 = -pa4;
						}
						var pb4 = k4 - b7;
						if(pb4 < 0) {
							pb4 = -pb4;
						}
						var pc4 = k4 - c5;
						if(pc4 < 0) {
							pc4 = -pc4;
						}
						cg = (pa4 <= pb4 && pa4 <= pc4 ? cg : pb4 <= pc4 ? b7 : c5) + data.b[r + 1] & 255;
						bgra.b[w++] = cg & 255;
						var b8 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c6 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k5 = cr + b8 - c6;
						var pa5 = k5 - cr;
						if(pa5 < 0) {
							pa5 = -pa5;
						}
						var pb5 = k5 - b8;
						if(pb5 < 0) {
							pb5 = -pb5;
						}
						var pc5 = k5 - c6;
						if(pc5 < 0) {
							pc5 = -pc5;
						}
						cr = (pa5 <= pb5 && pa5 <= pc5 ? cr : pb5 <= pc5 ? b8 : c6) + data.b[r] & 255;
						bgra.b[w++] = cr & 255;
						var b9 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c7 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k6 = ca3 + b9 - c7;
						var pa6 = k6 - ca3;
						if(pa6 < 0) {
							pa6 = -pa6;
						}
						var pb6 = k6 - b9;
						if(pb6 < 0) {
							pb6 = -pb6;
						}
						var pc6 = k6 - c7;
						if(pc6 < 0) {
							pc6 = -pc6;
						}
						ca3 = (pa6 <= pb6 && pa6 <= pc6 ? ca3 : pb6 <= pc6 ? b9 : c7) + data.b[r + 3] & 255;
						bgra.b[w++] = ca3 & 255;
						r += 4;
					}
				} else {
					var _g320 = 0;
					var _g220 = width1;
					while(_g320 < _g220) {
						var x19 = _g320++;
						var b10 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c8 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k7 = cb + b10 - c8;
						var pa7 = k7 - cb;
						if(pa7 < 0) {
							pa7 = -pa7;
						}
						var pb7 = k7 - b10;
						if(pb7 < 0) {
							pb7 = -pb7;
						}
						var pc7 = k7 - c8;
						if(pc7 < 0) {
							pc7 = -pc7;
						}
						cb = (pa7 <= pb7 && pa7 <= pc7 ? cb : pb7 <= pc7 ? b10 : c8) + data.b[r + 2] & 255;
						bgra.b[w++] = cb & 255;
						var b13 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c9 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k8 = cg + b13 - c9;
						var pa8 = k8 - cg;
						if(pa8 < 0) {
							pa8 = -pa8;
						}
						var pb8 = k8 - b13;
						if(pb8 < 0) {
							pb8 = -pb8;
						}
						var pc8 = k8 - c9;
						if(pc8 < 0) {
							pc8 = -pc8;
						}
						cg = (pa8 <= pb8 && pa8 <= pc8 ? cg : pb8 <= pc8 ? b13 : c9) + data.b[r + 1] & 255;
						bgra.b[w++] = cg & 255;
						var b14 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c10 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k9 = cr + b14 - c10;
						var pa9 = k9 - cr;
						if(pa9 < 0) {
							pa9 = -pa9;
						}
						var pb9 = k9 - b14;
						if(pb9 < 0) {
							pb9 = -pb9;
						}
						var pc9 = k9 - c10;
						if(pc9 < 0) {
							pc9 = -pc9;
						}
						cr = (pa9 <= pb9 && pa9 <= pc9 ? cr : pb9 <= pc9 ? b14 : c10) + data.b[r] & 255;
						bgra.b[w++] = cr & 255;
						bgra.b[w++] = (cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255) & 255;
						r += 3;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f1);
			}
			w += lineDelta;
		}
		break;
	case 2:
		var pal = format_png_Tools.getPalette(d);
		if(pal == null) {
			throw new js__$Boot_HaxeError("PNG Palette is missing");
		}
		var alpha2 = null;
		var _g_head3 = d.h;
		while(_g_head3 != null) {
			var val3 = _g_head3.item;
			_g_head3 = _g_head3.next;
			var t2 = val3;
			if(t2[1] == 4) {
				if(t2[2] == "tRNS") {
					var data3 = t2[3];
					alpha2 = data3;
					break;
				}
			}
		}
		if(alpha2 != null && alpha2.length < 1 << h.colbits) {
			var alpha21 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
			alpha21.blit(0,alpha2,0,alpha2.length);
			alpha21.fill(alpha2.length,alpha21.length - alpha2.length,255);
			alpha2 = alpha21;
		}
		var width2 = h.width;
		var stride8 = Math.ceil(width2 * h.colbits / 8) + 1;
		if(data.length < h.height * stride8) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var rline = h.width * h.colbits >> 3;
		var _g15 = 0;
		var _g7 = h.height;
		while(_g15 < _g7) {
			var y2 = _g15++;
			var f2 = data.b[r++];
			if(f2 == 0) {
				r += rline;
				continue;
			}
			switch(f2) {
			case 1:
				var c11 = 0;
				var _g321 = 0;
				var _g221 = width2;
				while(_g321 < _g221) {
					var x20 = _g321++;
					var v4 = data.b[r];
					c11 += v4;
					data.b[r++] = c11 & 255 & 255;
				}
				break;
			case 2:
				var stride9 = y2 == 0 ? 0 : rline + 1;
				var _g322 = 0;
				var _g222 = width2;
				while(_g322 < _g222) {
					var x21 = _g322++;
					var v5 = data.b[r];
					data.b[r] = v5 + data.b[r - stride9] & 255;
					++r;
				}
				break;
			case 3:
				var c12 = 0;
				var stride10 = y2 == 0 ? 0 : rline + 1;
				var _g323 = 0;
				var _g223 = width2;
				while(_g323 < _g223) {
					var x22 = _g323++;
					var v6 = data.b[r];
					c12 = v6 + (c12 + data.b[r - stride10] >> 1) & 255;
					data.b[r++] = c12 & 255;
				}
				break;
			case 4:
				var stride11 = rline + 1;
				var c13 = 0;
				var _g324 = 0;
				var _g224 = width2;
				while(_g324 < _g224) {
					var x23 = _g324++;
					var v7 = data.b[r];
					var b15 = y2 == 0 ? 0 : data.b[r - stride11];
					var c14 = x23 == 0 || y2 == 0 ? 0 : data.b[r - stride11 - 1];
					var k10 = c13 + b15 - c14;
					var pa10 = k10 - c13;
					if(pa10 < 0) {
						pa10 = -pa10;
					}
					var pb10 = k10 - b15;
					if(pb10 < 0) {
						pb10 = -pb10;
					}
					var pc10 = k10 - c14;
					if(pc10 < 0) {
						pc10 = -pc10;
					}
					c13 = (pa10 <= pb10 && pa10 <= pc10 ? c13 : pb10 <= pc10 ? b15 : c14) + v7 & 255;
					data.b[r++] = c13 & 255;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f2);
			}
		}
		var r1 = 0;
		if(h.colbits == 8) {
			var _g16 = 0;
			var _g8 = h.height;
			while(_g16 < _g8) {
				var y3 = _g16++;
				++r1;
				var _g325 = 0;
				var _g225 = h.width;
				while(_g325 < _g225) {
					var x24 = _g325++;
					var c15 = data.b[r1++];
					bgra.b[w++] = pal.b[c15 * 3 + 2] & 255;
					bgra.b[w++] = pal.b[c15 * 3 + 1] & 255;
					bgra.b[w++] = pal.b[c15 * 3] & 255;
					bgra.b[w++] = (alpha2 != null ? alpha2.b[c15] : 255) & 255;
				}
				w += lineDelta;
			}
		} else if(h.colbits < 8) {
			var req = h.colbits;
			var mask = (1 << req) - 1;
			var _g17 = 0;
			var _g9 = h.height;
			while(_g17 < _g9) {
				var y4 = _g17++;
				++r1;
				var bits = 0;
				var nbits = 0;
				var v8;
				var _g326 = 0;
				var _g226 = h.width;
				while(_g326 < _g226) {
					var x25 = _g326++;
					if(nbits < req) {
						bits = bits << 8 | data.b[r1++];
						nbits += 8;
					}
					var c16 = bits >>> nbits - req & mask;
					nbits -= req;
					bgra.b[w++] = pal.b[c16 * 3 + 2] & 255;
					bgra.b[w++] = pal.b[c16 * 3 + 1] & 255;
					bgra.b[w++] = pal.b[c16 * 3] & 255;
					bgra.b[w++] = (alpha2 != null ? alpha2.b[c16] : 255) & 255;
				}
				w += lineDelta;
			}
		} else {
			throw new js__$Boot_HaxeError(h.colbits + " indexed bits per pixel not supported");
		}
		break;
	}
	return bgra;
};
format_png_Tools.buildGrey = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height + height));
	var w = 0;
	var r = 0;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		rgb.b[w++] = 0;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			rgb.b[w++] = data.b[r++] & 255;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColGrey(false), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.buildRGB = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height * 3 + height));
	var w = 0;
	var r = 0;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		rgb.b[w++] = 0;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			rgb.b[w++] = data.b[r + 2] & 255;
			rgb.b[w++] = data.b[r + 1] & 255;
			rgb.b[w++] = data.b[r] & 255;
			r += 3;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(false), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.build32ARGB = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		rgba.b[w++] = 0;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			rgba.b[w++] = data.b[r + 1] & 255;
			rgba.b[w++] = data.b[r + 2] & 255;
			rgba.b[w++] = data.b[r + 3] & 255;
			rgba.b[w++] = data.b[r] & 255;
			r += 4;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(true), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.build32BGRA = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		rgba.b[w++] = 0;
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) {
			var x = _g3++;
			rgba.b[w++] = data.b[r + 2] & 255;
			rgba.b[w++] = data.b[r + 1] & 255;
			rgba.b[w++] = data.b[r] & 255;
			rgba.b[w++] = data.b[r + 3] & 255;
			r += 4;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(true), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
var format_png_Writer = function(o) {
	this.o = o;
	o.set_bigEndian(true);
};
$hxClasses["format.png.Writer"] = format_png_Writer;
format_png_Writer.__name__ = ["format","png","Writer"];
format_png_Writer.prototype = {
	write: function(png) {
		var _g = 0;
		var _g1 = [137,80,78,71,13,10,26,10];
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			this.o.writeByte(b);
		}
		var _g_head = png.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var c = val;
			switch(c[1]) {
			case 0:
				this.writeChunk("IEND",new haxe_io_Bytes(new ArrayBuffer(0)));
				break;
			case 1:
				var h = c[2];
				var b1 = new haxe_io_BytesOutput();
				b1.set_bigEndian(true);
				b1.writeInt32(h.width);
				b1.writeInt32(h.height);
				b1.writeByte(h.colbits);
				var _g2 = h.color;
				var tmp;
				switch(_g2[1]) {
				case 0:
					var alpha = _g2[2];
					if(alpha) {
						tmp = 4;
					} else {
						tmp = 0;
					}
					break;
				case 1:
					var alpha1 = _g2[2];
					if(alpha1) {
						tmp = 6;
					} else {
						tmp = 2;
					}
					break;
				case 2:
					tmp = 3;
					break;
				}
				b1.writeByte(tmp);
				b1.writeByte(0);
				b1.writeByte(0);
				b1.writeByte(h.interlaced ? 1 : 0);
				this.writeChunk("IHDR",b1.getBytes());
				break;
			case 2:
				var d = c[2];
				this.writeChunk("IDAT",d);
				break;
			case 3:
				var b2 = c[2];
				this.writeChunk("PLTE",b2);
				break;
			case 4:
				var data = c[3];
				var id = c[2];
				this.writeChunk(id,data);
				break;
			}
		}
	}
	,writeChunk: function(id,data) {
		this.o.writeInt32(data.length);
		this.o.writeString(id);
		this.o.write(data);
		var crc = new haxe_crypto_Crc32();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			crc["byte"](HxOverrides.cca(id,i));
		}
		crc.update(data,0,data.length);
		this.o.writeInt32(crc.get());
	}
	,__class__: format_png_Writer
};
var format_tools_BitsInput = function(i) {
	this.i = i;
	this.nbits = 0;
	this.bits = 0;
};
$hxClasses["format.tools.BitsInput"] = format_tools_BitsInput;
format_tools_BitsInput.__name__ = ["format","tools","BitsInput"];
format_tools_BitsInput.prototype = {
	readBits: function(n) {
		if(this.nbits >= n) {
			var c = this.nbits - n;
			var k = this.bits >>> c & (1 << n) - 1;
			this.nbits = c;
			return k;
		}
		var k1 = this.i.readByte();
		if(this.nbits >= 24) {
			if(n >= 31) {
				throw new js__$Boot_HaxeError("Bits error");
			}
			var c1 = 8 + this.nbits - n;
			var d = this.bits & (1 << this.nbits) - 1;
			d = d << 8 - c1 | k1 << c1;
			this.bits = k1;
			this.nbits = c1;
			return d;
		}
		this.bits = this.bits << 8 | k1;
		this.nbits += 8;
		return this.readBits(n);
	}
	,readBit: function() {
		if(this.nbits == 0) {
			this.bits = this.i.readByte();
			this.nbits = 8;
		}
		this.nbits--;
		return (this.bits >>> this.nbits & 1) == 1;
	}
	,reset: function() {
		this.nbits = 0;
	}
	,__class__: format_tools_BitsInput
};
var format_tools_Deflate = function() { };
$hxClasses["format.tools.Deflate"] = format_tools_Deflate;
format_tools_Deflate.__name__ = ["format","tools","Deflate"];
format_tools_Deflate.run = function(b,level) {
	if(level == null) {
		level = 9;
	}
	return haxe_zip_Compress.run(b,level);
};
var format_tools_Inflate = function() { };
$hxClasses["format.tools.Inflate"] = format_tools_Inflate;
format_tools_Inflate.__name__ = ["format","tools","Inflate"];
format_tools_Inflate.run = function(bytes) {
	return haxe_zip_Uncompress.run(bytes);
};
var format_wav_WAVEFormat = $hxClasses["format.wav.WAVEFormat"] = { __ename__ : true, __constructs__ : ["WF_PCM"] };
format_wav_WAVEFormat.WF_PCM = ["WF_PCM",0];
format_wav_WAVEFormat.WF_PCM.toString = $estr;
format_wav_WAVEFormat.WF_PCM.__enum__ = format_wav_WAVEFormat;
format_wav_WAVEFormat.__empty_constructs__ = [format_wav_WAVEFormat.WF_PCM];
var format_wav_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.wav.Reader"] = format_wav_Reader;
format_wav_Reader.__name__ = ["format","wav","Reader"];
format_wav_Reader.prototype = {
	readInt: function() {
		return this.i.readInt32();
	}
	,read: function() {
		if(this.i.readString(4) != "RIFF") {
			throw new js__$Boot_HaxeError("RIFF header expected");
		}
		var len = this.i.readInt32();
		if(this.i.readString(4) != "WAVE") {
			throw new js__$Boot_HaxeError("WAVE signature not found");
		}
		var fmt = this.i.readString(4);
		try {
			while(fmt != "fmt ") switch(fmt) {
			case "JUNK":
				var junkLen = this.i.readInt32();
				this.i.read(junkLen);
				fmt = this.i.readString(4);
				break;
			case "bext":
				var bextLen = this.i.readInt32();
				this.i.read(bextLen);
				fmt = this.i.readString(4);
				break;
			default:
				throw "__break__";
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		if(fmt != "fmt ") {
			throw new js__$Boot_HaxeError("unsupported wave chunk " + fmt);
		}
		var fmtlen = this.i.readInt32();
		var format1;
		var _g = this.i.readUInt16();
		switch(_g) {
		case 1:case 3:
			format1 = format_wav_WAVEFormat.WF_PCM;
			break;
		default:
			throw new js__$Boot_HaxeError("only PCM (uncompressed) WAV files are supported");
		}
		var channels = this.i.readUInt16();
		var samplingRate = this.i.readInt32();
		var byteRate = this.i.readInt32();
		var blockAlign = this.i.readUInt16();
		var bitsPerSample = this.i.readUInt16();
		if(fmtlen > 16) {
			this.i.read(fmtlen - 16);
		}
		var nextChunk = this.i.readString(4);
		while(nextChunk != "data") {
			this.i.read(this.i.readInt32());
			nextChunk = this.i.readString(4);
		}
		if(nextChunk != "data") {
			throw new js__$Boot_HaxeError("expected data subchunk");
		}
		var datalen = this.i.readInt32();
		var data = this.i.readAll();
		if(data.length > datalen) {
			data = data.sub(0,datalen);
		}
		return { header : { format : format1, channels : channels, samplingRate : samplingRate, byteRate : byteRate, blockAlign : blockAlign, bitsPerSample : bitsPerSample}, data : data};
	}
	,__class__: format_wav_Reader
};
var h2d_Sprite = function(parent) {
	this.alpha = 1.;
	this.matA = 1;
	this.matB = 0;
	this.matC = 0;
	this.matD = 1;
	this.absX = 0;
	this.absY = 0;
	this.posChanged = true;
	this.x = 0;
	this.posChanged = true;
	this.y = 0;
	this.posChanged = true;
	this.scaleX = 1;
	this.posChanged = true;
	this.scaleY = 1;
	this.posChanged = true;
	this.rotation = 0;
	this.posChanged = parent != null;
	this.set_visible(true);
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h2d.Sprite"] = h2d_Sprite;
h2d_Sprite.__name__ = ["h2d","Sprite"];
h2d_Sprite.prototype = {
	getBounds: function(relativeTo,out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		if(relativeTo != null) {
			relativeTo.syncPos();
		}
		if(relativeTo != this) {
			this.syncPos();
		}
		this.getBoundsRec(relativeTo,out,false);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(relativeTo,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		return out;
	}
	,getSize: function(out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		this.syncPos();
		this.getBoundsRec(this.parent,out,true);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(this.parent,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		var dx = -this.x;
		var dy = -this.y;
		out.xMin += dx;
		out.xMax += dx;
		out.yMin += dy;
		out.yMax += dy;
		return out;
	}
	,find: function(f) {
		var v = f(this);
		if(v != null) {
			return v;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var v1 = o.find(f);
			if(v1 != null) {
				return v1;
			}
		}
		return null;
	}
	,findAll: function(f,arr) {
		if(arr == null) {
			arr = [];
		}
		var v = f(this);
		if(v != null) {
			arr.push(v);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.findAll(f,arr);
		}
		return arr;
	}
	,set_filter: function(f) {
		if(this.filter != null && this.allocated) {
			this.filter.unbind(this);
		}
		this.filter = f;
		if(f != null && this.allocated) {
			f.bind(this);
		}
		return f;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		var n = this.children.length;
		if(n == 0) {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
			return;
		}
		if(n == 1) {
			var c1 = this.children[0];
			if(c1.visible) {
				c1.getBoundsRec(relativeTo,out,forSize);
			} else {
				out.xMin = 1e20;
				out.yMin = 1e20;
				out.xMax = -1e20;
				out.yMax = -1e20;
			}
			return;
		}
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var c2 = _g11[_g2];
			++_g2;
			if(!c2.visible) {
				continue;
			}
			c2.getBoundsRec(relativeTo,out,forSize);
			if(out.xMin < xmin) {
				xmin = out.xMin;
			}
			if(out.yMin < ymin) {
				ymin = out.yMin;
			}
			if(out.xMax > xmax) {
				xmax = out.xMax;
			}
			if(out.yMax > ymax) {
				ymax = out.yMax;
			}
		}
		out.xMin = xmin;
		out.yMin = ymin;
		out.xMax = xmax;
		out.yMax = ymax;
	}
	,addBounds: function(relativeTo,out,dx,dy,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		if(relativeTo == null) {
			var x;
			var y;
			var x1 = dx * this.matA + dy * this.matC + this.absX;
			var y1 = dx * this.matB + dy * this.matD + this.absY;
			if(x1 < out.xMin) {
				out.xMin = x1;
			}
			if(x1 > out.xMax) {
				out.xMax = x1;
			}
			if(y1 < out.yMin) {
				out.yMin = y1;
			}
			if(y1 > out.yMax) {
				out.yMax = y1;
			}
			var x2 = (dx + width) * this.matA + dy * this.matC + this.absX;
			var y2 = (dx + width) * this.matB + dy * this.matD + this.absY;
			if(x2 < out.xMin) {
				out.xMin = x2;
			}
			if(x2 > out.xMax) {
				out.xMax = x2;
			}
			if(y2 < out.yMin) {
				out.yMin = y2;
			}
			if(y2 > out.yMax) {
				out.yMax = y2;
			}
			var x3 = dx * this.matA + (dy + height) * this.matC + this.absX;
			var y3 = dx * this.matB + (dy + height) * this.matD + this.absY;
			if(x3 < out.xMin) {
				out.xMin = x3;
			}
			if(x3 > out.xMax) {
				out.xMax = x3;
			}
			if(y3 < out.yMin) {
				out.yMin = y3;
			}
			if(y3 > out.yMax) {
				out.yMax = y3;
			}
			var x4 = (dx + width) * this.matA + (dy + height) * this.matC + this.absX;
			var y4 = (dx + width) * this.matB + (dy + height) * this.matD + this.absY;
			if(x4 < out.xMin) {
				out.xMin = x4;
			}
			if(x4 > out.xMax) {
				out.xMax = x4;
			}
			if(y4 < out.yMin) {
				out.yMin = y4;
			}
			if(y4 > out.yMax) {
				out.yMax = y4;
			}
			return;
		}
		if(relativeTo == this) {
			if(out.xMin > dx) {
				out.xMin = dx;
			}
			if(out.yMin > dy) {
				out.yMin = dy;
			}
			if(out.xMax < dx + width) {
				out.xMax = dx + width;
			}
			if(out.yMax < dy + height) {
				out.yMax = dy + height;
			}
			return;
		}
		var r = relativeTo.matA * relativeTo.matD - relativeTo.matB * relativeTo.matC;
		if(r == 0) {
			return;
		}
		var det = 1 / r;
		var rA = relativeTo.matD * det;
		var rB = -relativeTo.matB * det;
		var rC = -relativeTo.matC * det;
		var rD = relativeTo.matA * det;
		var rX = this.absX - relativeTo.absX;
		var rY = this.absY - relativeTo.absY;
		var x5;
		var y5;
		x5 = dx * this.matA + dy * this.matC + rX;
		y5 = dx * this.matB + dy * this.matD + rY;
		var x6 = x5 * rA + y5 * rC;
		var y6 = x5 * rB + y5 * rD;
		if(x6 < out.xMin) {
			out.xMin = x6;
		}
		if(x6 > out.xMax) {
			out.xMax = x6;
		}
		if(y6 < out.yMin) {
			out.yMin = y6;
		}
		if(y6 > out.yMax) {
			out.yMax = y6;
		}
		x5 = (dx + width) * this.matA + dy * this.matC + rX;
		y5 = (dx + width) * this.matB + dy * this.matD + rY;
		var x7 = x5 * rA + y5 * rC;
		var y7 = x5 * rB + y5 * rD;
		if(x7 < out.xMin) {
			out.xMin = x7;
		}
		if(x7 > out.xMax) {
			out.xMax = x7;
		}
		if(y7 < out.yMin) {
			out.yMin = y7;
		}
		if(y7 > out.yMax) {
			out.yMax = y7;
		}
		x5 = dx * this.matA + (dy + height) * this.matC + rX;
		y5 = dx * this.matB + (dy + height) * this.matD + rY;
		var x8 = x5 * rA + y5 * rC;
		var y8 = x5 * rB + y5 * rD;
		if(x8 < out.xMin) {
			out.xMin = x8;
		}
		if(x8 > out.xMax) {
			out.xMax = x8;
		}
		if(y8 < out.yMin) {
			out.yMin = y8;
		}
		if(y8 > out.yMax) {
			out.yMax = y8;
		}
		x5 = (dx + width) * this.matA + (dy + height) * this.matC + rX;
		y5 = (dx + width) * this.matB + (dy + height) * this.matD + rY;
		var x9 = x5 * rA + y5 * rC;
		var y9 = x5 * rB + y5 * rD;
		if(x9 < out.xMin) {
			out.xMin = x9;
		}
		if(x9 > out.xMax) {
			out.xMax = x9;
		}
		if(y9 < out.yMin) {
			out.yMin = y9;
		}
		if(y9 > out.yMax) {
			out.yMax = y9;
		}
	}
	,getSpritesCount: function() {
		var k = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			k += c.getSpritesCount() + 1;
		}
		return k;
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h2d_col_Point();
		}
		var px = pt.x * this.matA + pt.y * this.matC + this.absX;
		var py = pt.x * this.matB + pt.y * this.matD + this.absY;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,globalToLocal: function(pt) {
		this.syncPos();
		pt.x -= this.absX;
		pt.y -= this.absY;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var px = (pt.x * this.matD - pt.y * this.matC) * invDet;
		var py = (-pt.x * this.matB + pt.y * this.matA) * invDet;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		return (p instanceof h2d_Scene) ? p : null;
	}
	,set_visible: function(b) {
		if(this.visible == b) {
			return b;
		}
		this.visible = b;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return b;
	}
	,addChild: function(s) {
		this.addChildAt(s,this.children.length);
	}
	,addChildAt: function(s,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == s) {
				throw new js__$Boot_HaxeError("Recursive addChild");
			}
			p = p.parent;
		}
		if(s.parent != null) {
			var old = s.allocated;
			s.allocated = false;
			s.parent.removeChild(s);
			s.allocated = old;
		}
		this.children.splice(pos,0,s);
		if(!this.allocated && s.allocated) {
			s.onRemove();
		}
		s.parent = this;
		s.parentContainer = this.parentContainer;
		s.posChanged = true;
		if(this.allocated) {
			if(!s.allocated) {
				s.onAdd();
			} else {
				s.onParentChanged();
			}
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onContentChanged: function() {
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onParentChanged: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	,onAdd: function() {
		this.allocated = true;
		if(this.filter != null) {
			this.filter.bind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		this.allocated = false;
		if(this.filter != null) {
			this.filter.unbind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,getMatrix: function(m) {
		m.a = this.matA;
		m.b = this.matB;
		m.c = this.matC;
		m.d = this.matD;
		m.x = this.absX;
		m.y = this.absY;
	}
	,removeChild: function(s) {
		if(HxOverrides.remove(this.children,s)) {
			if(s.allocated) {
				s.onRemove();
			}
			s.parent = null;
			if(s.parentContainer != null) {
				s.setParentContainer(null);
			}
			s.posChanged = true;
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.setParentContainer(c);
		}
	}
	,removeChildren: function() {
		while(this.children.length > 0) this.removeChild(this.children[0]);
	}
	,remove: function() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,drawTo: function(t) {
		var s = this.getScene();
		var needDispose = s == null;
		if(s == null) {
			s = new h2d_Scene();
		}
		s.drawImplTo(this,t);
		if(needDispose) {
			s.dispose();
		}
	}
	,draw: function(ctx) {
	}
	,sync: function(ctx) {
		var changed = this.posChanged;
		if(changed) {
			this.calcAbsPos();
			this.posChanged = false;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.posChanged = true;
				}
				c.sync(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
	}
	,calcAbsPos: function() {
		if(this.parent == null) {
			var cr;
			var sr;
			if(this.rotation == 0) {
				cr = 1.;
				sr = 0.;
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				cr = Math.cos(this.rotation);
				sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = this.x;
			this.absY = this.y;
		} else {
			if(this.rotation == 0) {
				this.matA = this.scaleX * this.parent.matA;
				this.matB = this.scaleX * this.parent.matB;
				this.matC = this.scaleY * this.parent.matC;
				this.matD = this.scaleY * this.parent.matD;
			} else {
				var cr1 = Math.cos(this.rotation);
				var sr1 = Math.sin(this.rotation);
				var tmpA = this.scaleX * cr1;
				var tmpB = this.scaleX * sr1;
				var tmpC = this.scaleY * -sr1;
				var tmpD = this.scaleY * cr1;
				this.matA = tmpA * this.parent.matA + tmpB * this.parent.matC;
				this.matB = tmpA * this.parent.matB + tmpB * this.parent.matD;
				this.matC = tmpC * this.parent.matA + tmpD * this.parent.matC;
				this.matD = tmpC * this.parent.matB + tmpD * this.parent.matD;
			}
			this.absX = this.x * this.parent.matA + this.y * this.parent.matC + this.parent.absX;
			this.absY = this.x * this.parent.matB + this.y * this.parent.matD + this.parent.absY;
		}
	}
	,emitTile: function(ctx,tile) {
		if(h2d_Sprite.nullDrawable == null) {
			h2d_Sprite.nullDrawable = new h2d_Drawable(null);
		}
		h2d_Sprite.nullDrawable.absX = this.absX;
		h2d_Sprite.nullDrawable.absY = this.absY;
		h2d_Sprite.nullDrawable.matA = this.matA;
		h2d_Sprite.nullDrawable.matB = this.matB;
		h2d_Sprite.nullDrawable.matC = this.matC;
		h2d_Sprite.nullDrawable.matD = this.matD;
		ctx.drawTile(h2d_Sprite.nullDrawable,tile);
		return;
	}
	,clipBounds: function(ctx,bounds) {
		var view = ctx.tmpBounds;
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			matA = this.matA * f1.x + this.matB * f1.y;
			matB = this.matA * f2.x + this.matB * f2.y;
			matC = this.matC * f1.x + this.matD * f1.y;
			matD = this.matC * f2.x + this.matD * f2.y;
			absX = this.absX * f1.x + this.absY * f1.y + f1.z;
			absY = this.absX * f2.x + this.absY * f2.y + f2.z;
		} else {
			matA = this.matA;
			matB = this.matB;
			matC = this.matC;
			matD = this.matD;
			absX = this.absX;
			absY = this.absY;
		}
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = bounds.xMin;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x2 = bounds.xMax;
		var y2 = bounds.yMin;
		var x3 = x2 * matA + y2 * matC + absX;
		var y3 = x2 * matB + y2 * matD + absY;
		if(x3 < view.xMin) {
			view.xMin = x3;
		}
		if(x3 > view.xMax) {
			view.xMax = x3;
		}
		if(y3 < view.yMin) {
			view.yMin = y3;
		}
		if(y3 > view.yMax) {
			view.yMax = y3;
		}
		var x4 = bounds.xMin;
		var y4 = bounds.yMax;
		var x5 = x4 * matA + y4 * matC + absX;
		var y5 = x4 * matB + y4 * matD + absY;
		if(x5 < view.xMin) {
			view.xMin = x5;
		}
		if(x5 > view.xMax) {
			view.xMax = x5;
		}
		if(y5 < view.yMin) {
			view.yMin = y5;
		}
		if(y5 > view.yMax) {
			view.yMax = y5;
		}
		var x6 = bounds.xMax;
		var y6 = bounds.yMax;
		var x7 = x6 * matA + y6 * matC + absX;
		var y7 = x6 * matB + y6 * matD + absY;
		if(x7 < view.xMin) {
			view.xMin = x7;
		}
		if(x7 > view.xMax) {
			view.xMax = x7;
		}
		if(y7 < view.yMin) {
			view.yMin = y7;
		}
		if(y7 > view.yMax) {
			view.yMax = y7;
		}
		if(view.xMin < ctx.curX) {
			view.xMin = ctx.curX;
		}
		if(view.yMin < ctx.curY) {
			view.yMin = ctx.curY;
		}
		if(view.xMax > ctx.curX + ctx.curWidth) {
			view.xMax = ctx.curX + ctx.curWidth;
		}
		if(view.yMax > ctx.curY + ctx.curHeight) {
			view.yMax = ctx.curY + ctx.curHeight;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		var sxMin = view.xMin;
		var syMin = view.yMin;
		var sxMax = view.xMax;
		var syMax = view.yMax;
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x8 = sxMin;
		var y8 = syMin;
		x8 -= absX;
		y8 -= absY;
		var x9 = (x8 * matD - y8 * matC) * invDet;
		var y9 = (-x8 * matB + y8 * matA) * invDet;
		if(x9 < view.xMin) {
			view.xMin = x9;
		}
		if(x9 > view.xMax) {
			view.xMax = x9;
		}
		if(y9 < view.yMin) {
			view.yMin = y9;
		}
		if(y9 > view.yMax) {
			view.yMax = y9;
		}
		var x10 = sxMax;
		var y10 = syMin;
		x10 -= absX;
		y10 -= absY;
		var x11 = (x10 * matD - y10 * matC) * invDet;
		var y11 = (-x10 * matB + y10 * matA) * invDet;
		if(x11 < view.xMin) {
			view.xMin = x11;
		}
		if(x11 > view.xMax) {
			view.xMax = x11;
		}
		if(y11 < view.yMin) {
			view.yMin = y11;
		}
		if(y11 > view.yMax) {
			view.yMax = y11;
		}
		var x12 = sxMin;
		var y12 = syMax;
		x12 -= absX;
		y12 -= absY;
		var x13 = (x12 * matD - y12 * matC) * invDet;
		var y13 = (-x12 * matB + y12 * matA) * invDet;
		if(x13 < view.xMin) {
			view.xMin = x13;
		}
		if(x13 > view.xMax) {
			view.xMax = x13;
		}
		if(y13 < view.yMin) {
			view.yMin = y13;
		}
		if(y13 > view.yMax) {
			view.yMax = y13;
		}
		var x14 = sxMax;
		var y14 = syMax;
		x14 -= absX;
		y14 -= absY;
		var x15 = (x14 * matD - y14 * matC) * invDet;
		var y15 = (-x14 * matB + y14 * matA) * invDet;
		if(x15 < view.xMin) {
			view.xMin = x15;
		}
		if(x15 > view.xMax) {
			view.xMax = x15;
		}
		if(y15 < view.yMin) {
			view.yMin = y15;
		}
		if(y15 > view.yMax) {
			view.yMax = y15;
		}
		var a = bounds.xMin;
		var b = view.xMin;
		bounds.xMin = a < b ? b : a;
		var a1 = bounds.yMin;
		var b1 = view.yMin;
		bounds.yMin = a1 < b1 ? b1 : a1;
		var a2 = bounds.xMax;
		var b2 = view.xMax;
		bounds.xMax = a2 > b2 ? b2 : a2;
		var a3 = bounds.yMax;
		var b3 = view.yMax;
		bounds.yMax = a3 > b3 ? b3 : a3;
	}
	,drawFilters: function(ctx) {
		if(!ctx.pushFilter(this)) {
			return;
		}
		var bounds = ctx.tmpBounds;
		var total = new h2d_col_Bounds();
		var maxExtent = -1.;
		this.filter.sync(ctx,this);
		if(this.filter.autoBounds) {
			maxExtent = this.filter.boundsExtend;
		} else {
			this.filter.getBounds(this,bounds);
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		if(maxExtent >= 0) {
			this.getBounds(this,bounds);
			bounds.xMin -= maxExtent;
			bounds.yMin -= maxExtent;
			bounds.xMax += maxExtent;
			bounds.yMax += maxExtent;
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		this.clipBounds(ctx,total);
		var xMin = Math.floor(total.xMin + 1e-10);
		var yMin = Math.floor(total.yMin + 1e-10);
		var width = Math.ceil(total.xMax - xMin - 1e-10);
		var height = Math.ceil(total.yMax - yMin - 1e-10);
		if(width <= 0 || height <= 0 || total.xMax < total.xMin) {
			return;
		}
		var t = ctx.textures.allocTarget("filterTemp",ctx,width,height,false);
		ctx.pushTarget(t,xMin,yMin,width,height);
		ctx.engine.clear(0);
		var oldAlpha = ctx.globalAlpha;
		var shader = ctx.baseShader;
		var oldA_z;
		var oldA_y;
		var oldA_x;
		var oldA_w;
		var _this = shader.filterMatrixA__;
		oldA_x = _this.x;
		oldA_y = _this.y;
		oldA_z = _this.z;
		oldA_w = _this.w;
		var oldB_z;
		var oldB_y;
		var oldB_x;
		var oldB_w;
		var _this1 = shader.filterMatrixB__;
		oldB_x = _this1.x;
		oldB_y = _this1.y;
		oldB_z = _this1.z;
		oldB_w = _this1.w;
		var oldF = ctx.inFilter;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var invA = this.matD * invDet;
		var invB = -this.matB * invDet;
		var invC = -this.matC * invDet;
		var invD = this.matA * invDet;
		var invX = -(this.absX * invA + this.absY * invC);
		var invY = -(this.absX * invB + this.absY * invD);
		var _this2 = shader.filterMatrixA__;
		_this2.x = invA;
		_this2.y = invC;
		_this2.z = invX;
		_this2.w = 1.;
		var _this3 = shader.filterMatrixB__;
		_this3.x = invB;
		_this3.y = invD;
		_this3.z = invY;
		_this3.w = 1.;
		ctx.globalAlpha = 1;
		this.draw(ctx);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.drawRec(ctx);
		}
		var finalTile = h2d_Tile.fromTexture(t);
		finalTile.dx = xMin;
		finalTile.dy = yMin;
		var prev = finalTile;
		finalTile = this.filter.draw(ctx,finalTile);
		if(finalTile != prev && finalTile != null) {
			finalTile.dx += xMin;
			finalTile.dy += yMin;
		}
		var _this4 = shader.filterMatrixA__;
		_this4.x = oldA_x;
		_this4.y = oldA_y;
		_this4.z = oldA_z;
		_this4.w = oldA_w;
		var _this5 = shader.filterMatrixB__;
		_this5.x = oldB_x;
		_this5.y = oldB_y;
		_this5.z = oldB_z;
		_this5.w = oldB_w;
		ctx.popTarget();
		ctx.popFilter();
		if(finalTile == null) {
			return;
		}
		ctx.globalAlpha = oldAlpha * this.alpha;
		this.emitTile(ctx,finalTile);
		ctx.globalAlpha = oldAlpha;
	}
	,drawRec: function(ctx) {
		if(!this.visible) {
			return;
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		if(this.filter != null) {
			this.drawFilters(ctx);
		} else {
			var old = ctx.globalAlpha;
			ctx.globalAlpha *= this.alpha;
			if(ctx.front2back) {
				var nchilds = this.children.length;
				var _g11 = 0;
				var _g2 = nchilds;
				while(_g11 < _g2) {
					var i = _g11++;
					this.children[nchilds - 1 - i].drawRec(ctx);
				}
				this.draw(ctx);
			} else {
				this.draw(ctx);
				var _g3 = 0;
				var _g12 = this.children;
				while(_g3 < _g12.length) {
					var c1 = _g12[_g3];
					++_g3;
					c1.drawRec(ctx);
				}
			}
			ctx.globalAlpha = old;
		}
	}
	,set_x: function(v) {
		this.posChanged = true;
		return this.x = v;
	}
	,set_y: function(v) {
		this.posChanged = true;
		return this.y = v;
	}
	,set_scaleX: function(v) {
		this.posChanged = true;
		return this.scaleX = v;
	}
	,set_scaleY: function(v) {
		this.posChanged = true;
		return this.scaleY = v;
	}
	,set_rotation: function(v) {
		this.posChanged = true;
		return this.rotation = v;
	}
	,move: function(dx,dy) {
		var _g = this;
		var v = _g.x + dx * Math.cos(this.rotation);
		_g.posChanged = true;
		_g.x = v;
		var _g1 = this;
		var v1 = _g1.y + dy * Math.sin(this.rotation);
		_g1.posChanged = true;
		_g1.y = v1;
	}
	,setPos: function(x,y) {
		this.posChanged = true;
		this.x = x;
		this.posChanged = true;
		this.y = y;
	}
	,rotate: function(v) {
		var _g = this;
		_g.posChanged = true;
		_g.rotation += v;
	}
	,scale: function(v) {
		var _g = this;
		_g.posChanged = true;
		_g.scaleX *= v;
		var _g1 = this;
		_g1.posChanged = true;
		_g1.scaleY *= v;
	}
	,setScale: function(v) {
		this.posChanged = true;
		this.scaleX = v;
		this.posChanged = true;
		this.scaleY = v;
	}
	,getChildAt: function(n) {
		return this.children[n];
	}
	,getChildIndex: function(s) {
		var _g1 = 0;
		var _g = this.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.children[i] == s) {
				return i;
			}
		}
		return -1;
	}
	,get_numChildren: function() {
		return this.children.length;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$h2d_$Sprite(this.children);
	}
	,toString: function() {
		var c = Type.getClassName(js_Boot.getClass(this));
		if(this.name == null) {
			return c;
		} else {
			return this.name + "(" + c + ")";
		}
	}
	,contentChanged: function(s) {
	}
	,constraintSize: function(maxWidth,maxHeight) {
	}
	,__class__: h2d_Sprite
};
var h2d_Drawable = function(parent) {
	h2d_Sprite.call(this,parent);
	this.blendMode = h2d_BlendMode.Alpha;
	this.color = new h3d_Vector(1,1,1,1);
};
$hxClasses["h2d.Drawable"] = h2d_Drawable;
h2d_Drawable.__name__ = ["h2d","Drawable"];
h2d_Drawable.__super__ = h2d_Sprite;
h2d_Drawable.prototype = $extend(h2d_Sprite.prototype,{
	set_tileWrap: function(b) {
		return this.tileWrap = b;
	}
	,get_colorAdd: function() {
		var s = this.getShader(h3d_shader_ColorAdd);
		if(s == null) {
			return null;
		} else {
			return s.color__;
		}
	}
	,set_colorAdd: function(c) {
		var s = this.getShader(h3d_shader_ColorAdd);
		if(s == null) {
			if(c != null) {
				s = this.addShader(new h3d_shader_ColorAdd());
				s.color__ = c;
			}
		} else if(c == null) {
			this.removeShader(s);
		} else {
			s.color__ = c;
		}
		return c;
	}
	,set_colorKey: function(v) {
		var s = this.getShader(h3d_shader_ColorKey);
		if(s == null) {
			if(v != null) {
				s = this.addShader(new h3d_shader_ColorKey(-16777216 | v));
			}
		} else if(v == null) {
			this.removeShader(s);
		} else {
			var _this = s.colorKey__;
			var c = -16777216 | v;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
		}
		return this.colorKey = v;
	}
	,adjustColor: function(col) {
		if(col == null) {
			this.set_colorMatrix(null);
		} else {
			var m = this.get_colorMatrix();
			if(m == null) {
				m = new h3d_Matrix();
				this.set_colorMatrix(m);
			}
			m.identity();
			if(col.hue != null) {
				m.colorHue(col.hue);
			}
			if(col.saturation != null) {
				m.colorSaturation(col.saturation);
			}
			if(col.contrast != null) {
				m.colorContrast(col.contrast);
			}
			if(col.lightness != null) {
				m.colorLightness(col.lightness);
			}
			if(col.gain != null) {
				m.colorGain(col.gain.color,col.gain.alpha);
			}
		}
	}
	,get_colorMatrix: function() {
		var s = this.getShader(h3d_shader_ColorMatrix);
		if(s == null) {
			return null;
		} else {
			return s.matrix__;
		}
	}
	,set_colorMatrix: function(m) {
		var s = this.getShader(h3d_shader_ColorMatrix);
		if(s == null) {
			if(m != null) {
				s = this.addShader(new h3d_shader_ColorMatrix());
				s.matrix__ = m;
			}
		} else if(m == null) {
			this.removeShader(s);
		} else {
			s.matrix__ = m;
		}
		return m;
	}
	,getDebugShaderCode: function(toHxsl) {
		if(toHxsl == null) {
			toHxsl = true;
		}
		var ctx = this.getScene().ctx;
		var shader = ctx.manager.compileShaders(new hxsl_ShaderList(ctx.baseShader,this.shaders));
		if(toHxsl) {
			var toString = function(s) {
				return hxsl_Printer.shaderToString(s,true);
			};
			return "// vertex:\n" + toString(shader.vertex.data) + "\n\nfragment:\n" + toString(shader.fragment.data);
		} else {
			return h3d_Engine.CURRENT.driver.getNativeShaderCode(shader);
		}
	}
	,getShader: function(stype) {
		if(this.shaders != null) {
			var _g_last;
			var _g_l = this.shaders;
			_g_last = null;
			while(_g_l != _g_last) {
				var s = _g_l.s;
				_g_l = _g_l.next;
				var s1 = s;
				var s2 = (s1 instanceof stype) ? s1 : null;
				if(s2 != null) {
					return s2;
				}
			}
		}
		return null;
	}
	,getShaders: function() {
		return new hxsl__$ShaderList_ShaderIterator(this.shaders,null);
	}
	,addShader: function(s) {
		if(s == null) {
			throw new js__$Boot_HaxeError("Can't add null shader");
		}
		this.shaders = new hxsl_ShaderList(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var prev = null;
		var cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	,emitTile: function(ctx,tile) {
		if(tile == null) {
			tile = new h2d_Tile(null,0,0,5,5);
		}
		if(!ctx.drawTile(this,tile)) {
			return;
		}
		return;
	}
	,__class__: h2d_Drawable
});
var h2d_Bitmap = function(tile,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = tile;
};
$hxClasses["h2d.Bitmap"] = h2d_Bitmap;
h2d_Bitmap.__name__ = ["h2d","Bitmap"];
h2d_Bitmap.__super__ = h2d_Drawable;
h2d_Bitmap.prototype = $extend(h2d_Drawable.prototype,{
	set_tileWrap: function(b) {
		if(b && this.tile != null && (this.tile.innerTex.flags & 1 << h3d_mat_TextureFlags.IsNPOT[1]) != 0) {
			throw new js__$Boot_HaxeError("Cannot set tileWrap on a non power-of-two texture");
		}
		return this.tileWrap = b;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.tile.width,this.tile.height);
		}
	}
	,draw: function(ctx) {
		this.emitTile(ctx,this.tile);
	}
	,__class__: h2d_Bitmap
});
var h2d_BlendMode = $hxClasses["h2d.BlendMode"] = { __ename__ : true, __constructs__ : ["None","Alpha","Add","SoftAdd","Multiply","Erase","Screen"] };
h2d_BlendMode.None = ["None",0];
h2d_BlendMode.None.toString = $estr;
h2d_BlendMode.None.__enum__ = h2d_BlendMode;
h2d_BlendMode.Alpha = ["Alpha",1];
h2d_BlendMode.Alpha.toString = $estr;
h2d_BlendMode.Alpha.__enum__ = h2d_BlendMode;
h2d_BlendMode.Add = ["Add",2];
h2d_BlendMode.Add.toString = $estr;
h2d_BlendMode.Add.__enum__ = h2d_BlendMode;
h2d_BlendMode.SoftAdd = ["SoftAdd",3];
h2d_BlendMode.SoftAdd.toString = $estr;
h2d_BlendMode.SoftAdd.__enum__ = h2d_BlendMode;
h2d_BlendMode.Multiply = ["Multiply",4];
h2d_BlendMode.Multiply.toString = $estr;
h2d_BlendMode.Multiply.__enum__ = h2d_BlendMode;
h2d_BlendMode.Erase = ["Erase",5];
h2d_BlendMode.Erase.toString = $estr;
h2d_BlendMode.Erase.__enum__ = h2d_BlendMode;
h2d_BlendMode.Screen = ["Screen",6];
h2d_BlendMode.Screen.toString = $estr;
h2d_BlendMode.Screen.__enum__ = h2d_BlendMode;
h2d_BlendMode.__empty_constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen];
var h2d_FlowAlign = $hxClasses["h2d.FlowAlign"] = { __ename__ : true, __constructs__ : ["Top","Left","Right","Middle","Bottom"] };
h2d_FlowAlign.Top = ["Top",0];
h2d_FlowAlign.Top.toString = $estr;
h2d_FlowAlign.Top.__enum__ = h2d_FlowAlign;
h2d_FlowAlign.Left = ["Left",1];
h2d_FlowAlign.Left.toString = $estr;
h2d_FlowAlign.Left.__enum__ = h2d_FlowAlign;
h2d_FlowAlign.Right = ["Right",2];
h2d_FlowAlign.Right.toString = $estr;
h2d_FlowAlign.Right.__enum__ = h2d_FlowAlign;
h2d_FlowAlign.Middle = ["Middle",3];
h2d_FlowAlign.Middle.toString = $estr;
h2d_FlowAlign.Middle.__enum__ = h2d_FlowAlign;
h2d_FlowAlign.Bottom = ["Bottom",4];
h2d_FlowAlign.Bottom.toString = $estr;
h2d_FlowAlign.Bottom.__enum__ = h2d_FlowAlign;
h2d_FlowAlign.__empty_constructs__ = [h2d_FlowAlign.Top,h2d_FlowAlign.Left,h2d_FlowAlign.Right,h2d_FlowAlign.Middle,h2d_FlowAlign.Bottom];
var h2d_FlowProperties = function(elt) {
	this.constraint = true;
	this.calculatedHeight = 0.;
	this.calculatedWidth = 0.;
	this.offsetY = 0;
	this.offsetX = 0;
	this.isAbsolute = false;
	this.paddingBottom = 0;
	this.paddingRight = 0;
	this.paddingTop = 0;
	this.paddingLeft = 0;
	this.elt = elt;
};
$hxClasses["h2d.FlowProperties"] = h2d_FlowProperties;
h2d_FlowProperties.__name__ = ["h2d","FlowProperties"];
h2d_FlowProperties.prototype = {
	align: function(vertical,horizontal) {
		this.verticalAlign = vertical;
		this.horizontalAlign = horizontal;
	}
	,set_isAbsolute: function(a) {
		if(a) {
			this.elt.constraintSize(-1,-1);
		}
		return this.isAbsolute = a;
	}
	,__class__: h2d_FlowProperties
};
var h2d_col_Bounds = function() {
	this.xMin = 1e20;
	this.yMin = 1e20;
	this.xMax = -1e20;
	this.yMax = -1e20;
};
$hxClasses["h2d.col.Bounds"] = h2d_col_Bounds;
h2d_col_Bounds.__name__ = ["h2d","col","Bounds"];
h2d_col_Bounds.fromValues = function(x0,y0,width,height) {
	var b = new h2d_col_Bounds();
	b.xMin = x0;
	b.yMin = y0;
	b.xMax = x0 + width;
	b.yMax = y0 + height;
	return b;
};
h2d_col_Bounds.fromPoints = function(min,max) {
	var b = new h2d_col_Bounds();
	b.xMin = min.x;
	b.yMin = min.y;
	b.xMax = max.x;
	b.yMax = max.y;
	return b;
};
h2d_col_Bounds.prototype = {
	toIBounds: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		var x0 = Math.floor(this.xMin * scale);
		var y0 = Math.floor(this.yMin * scale);
		var width = Math.floor((this.xMax - this.xMin) * scale);
		var height = Math.floor((this.yMax - this.yMin) * scale);
		var b = new h2d_col_IBounds();
		b.xMin = x0;
		b.yMin = y0;
		b.xMax = x0 + width;
		b.yMax = y0 + height;
		return b;
	}
	,intersects: function(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.xMax < b.xMin || this.yMax < b.yMin);
	}
	,contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin) {
			return p.y < this.yMax;
		} else {
			return false;
		}
	}
	,addBounds: function(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
	}
	,addPoint: function(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
	}
	,addPos: function(x,y) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,set: function(x,y,width,height) {
		this.xMin = x;
		this.yMin = y;
		this.xMax = x + width;
		this.yMax = y + height;
	}
	,setMin: function(p) {
		this.xMin = p.x;
		this.yMin = p.y;
	}
	,setMax: function(p) {
		this.xMax = p.x;
		this.yMax = p.y;
	}
	,doIntersect: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a < b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		this.yMin = a1 < b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		this.xMax = a2 > b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		this.yMax = a3 > b4 ? b4 : a3;
	}
	,doUnion: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a > b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		this.yMin = a1 > b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		this.xMax = a2 < b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		this.yMax = a3 < b4 ? b4 : a3;
	}
	,intersection: function(b) {
		var i = new h2d_col_Bounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a < b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		i.yMin = a1 < b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		i.xMax = a2 > b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		i.yMax = a3 > b4 ? b4 : a3;
		if(i.xMax < i.xMin) {
			i.xMax = i.xMin;
		}
		if(i.yMax < i.yMin) {
			i.yMax = i.yMin;
		}
		return i;
	}
	,union: function(b) {
		var i = new h2d_col_Bounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a > b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		i.yMin = a1 > b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		i.xMax = a2 < b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		i.yMax = a3 < b4 ? b4 : a3;
		return i;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.yMin = b.yMin;
		this.xMax = b.xMax;
		this.yMax = b.yMax;
	}
	,scalePivot: function(v) {
		this.xMin *= v;
		this.yMin *= v;
		this.xMax *= v;
		this.yMax *= v;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.xMax = mx + dx;
		this.yMax = my + dy;
	}
	,rotate: function(angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		var x0 = this.xMin;
		var y0 = this.yMin;
		var x1 = this.xMax;
		var y1 = this.yMax;
		this.xMin = 1e20;
		this.yMin = 1e20;
		this.xMax = -1e20;
		this.yMax = -1e20;
		var x = x0 * cos - y0 * sin;
		var y = x0 * sin + y0 * cos;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		var x2 = x1 * cos - y0 * sin;
		var y2 = x1 * sin + y0 * cos;
		if(x2 < this.xMin) {
			this.xMin = x2;
		}
		if(x2 > this.xMax) {
			this.xMax = x2;
		}
		if(y2 < this.yMin) {
			this.yMin = y2;
		}
		if(y2 > this.yMax) {
			this.yMax = y2;
		}
		var x3 = x0 * cos - y1 * sin;
		var y3 = x0 * sin + y1 * cos;
		if(x3 < this.xMin) {
			this.xMin = x3;
		}
		if(x3 > this.xMax) {
			this.xMax = x3;
		}
		if(y3 < this.yMin) {
			this.yMin = y3;
		}
		if(y3 > this.yMax) {
			this.yMax = y3;
		}
		var x4 = x1 * cos - y1 * sin;
		var y4 = x1 * sin + y1 * cos;
		if(x4 < this.xMin) {
			this.xMin = x4;
		}
		if(x4 > this.xMax) {
			this.xMax = x4;
		}
		if(y4 < this.yMin) {
			this.yMin = y4;
		}
		if(y4 > this.yMax) {
			this.yMax = y4;
		}
	}
	,offset: function(dx,dy) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
	}
	,getMin: function() {
		return new h2d_col_Point(this.xMin,this.yMin);
	}
	,getCenter: function() {
		return new h2d_col_Point((this.xMin + this.xMax) * 0.5,(this.yMin + this.yMax) * 0.5);
	}
	,getSize: function() {
		return new h2d_col_Point(this.xMax - this.xMin,this.yMax - this.yMin);
	}
	,getMax: function() {
		return new h2d_col_Point(this.xMax,this.yMax);
	}
	,isEmpty: function() {
		if(!(this.xMax <= this.xMin)) {
			return this.yMax <= this.yMin;
		} else {
			return true;
		}
	}
	,empty: function() {
		this.xMin = 1e20;
		this.yMin = 1e20;
		this.xMax = -1e20;
		this.yMax = -1e20;
	}
	,all: function() {
		this.xMin = -1e20;
		this.yMin = -1e20;
		this.xMax = 1e20;
		this.yMax = 1e20;
	}
	,clone: function() {
		var b = new h2d_col_Bounds();
		b.xMin = this.xMin;
		b.yMin = this.yMin;
		b.xMax = this.xMax;
		b.yMax = this.yMax;
		return b;
	}
	,get_x: function() {
		return this.xMin;
	}
	,get_y: function() {
		return this.yMin;
	}
	,set_x: function(x) {
		this.xMax += x - this.xMin;
		return this.xMin = x;
	}
	,set_y: function(y) {
		this.yMax += y - this.yMin;
		return this.yMin = y;
	}
	,get_width: function() {
		return this.xMax - this.xMin;
	}
	,get_height: function() {
		return this.yMax - this.yMin;
	}
	,set_width: function(w) {
		this.xMax = this.xMin + w;
		return w;
	}
	,set_height: function(h) {
		this.yMax = this.yMin + h;
		return h;
	}
	,toString: function() {
		return "{" + Std.string(new h2d_col_Point(this.xMin,this.yMin)) + "," + Std.string(new h2d_col_Point(this.xMax - this.xMin,this.yMax - this.yMin)) + "}";
	}
	,__class__: h2d_col_Bounds
};
var h2d_Flow = function(parent) {
	this.realMaxHeight = -1;
	this.realMaxWidth = -1;
	this.constraintHeight = -1;
	this.constraintWidth = -1;
	this.calculatedHeight = 0.;
	this.calculatedWidth = 0.;
	this.properties = [];
	this.multiline = false;
	this.isInline = true;
	this.borderHeight = 0;
	this.borderWidth = 0;
	this.verticalSpacing = 0;
	this.horizontalSpacing = 0;
	this.paddingBottom = 0;
	this.paddingTop = 0;
	this.paddingRight = 0;
	this.paddingLeft = 0;
	this.overflow = false;
	this.needReflow = true;
	h2d_Sprite.call(this,parent);
};
$hxClasses["h2d.Flow"] = h2d_Flow;
h2d_Flow.__name__ = ["h2d","Flow"];
h2d_Flow.__super__ = h2d_Sprite;
h2d_Flow.prototype = $extend(h2d_Sprite.prototype,{
	getProperties: function(e) {
		this.set_needReflow(true);
		return this.properties[this.getChildIndex(e)];
	}
	,set_isVertical: function(v) {
		if(this.isVertical == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.isVertical = v;
	}
	,set_horizontalAlign: function(v) {
		if(this.horizontalAlign == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.horizontalAlign = v;
	}
	,set_debug: function(v) {
		if(this.debug == v) {
			return v;
		}
		this.set_needReflow(true);
		if(v) {
			this.debugGraphics = new h2d_Graphics(this);
			this.getProperties(this.debugGraphics).set_isAbsolute(true);
		} else {
			var _this = this.debugGraphics;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.debugGraphics = null;
		}
		return this.debug = v;
	}
	,set_verticalAlign: function(v) {
		if(this.verticalAlign == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.verticalAlign = v;
	}
	,set_overflow: function(v) {
		if(this.overflow == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.overflow = v;
	}
	,set_multiline: function(v) {
		if(this.multiline == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.multiline = v;
	}
	,set_needReflow: function(v) {
		if(this.needReflow == v) {
			return v;
		}
		if(v) {
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
		return this.needReflow = v;
	}
	,set_lineHeight: function(v) {
		if(this.lineHeight == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.lineHeight = v;
	}
	,set_colWidth: function(v) {
		if(this.colWidth == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.colWidth = v;
	}
	,set_padding: function(v) {
		this.set_paddingLeft(v);
		this.set_paddingTop(v);
		this.set_paddingRight(v);
		this.set_paddingBottom(v);
		return v;
	}
	,set_paddingHorizontal: function(v) {
		this.set_paddingLeft(v);
		this.set_paddingRight(v);
		return v;
	}
	,set_paddingVertical: function(v) {
		this.set_paddingTop(v);
		this.set_paddingBottom(v);
		return v;
	}
	,get_outerWidth: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedWidth);
	}
	,get_outerHeight: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedHeight);
	}
	,get_innerWidth: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedWidth) - (this.paddingLeft + this.paddingRight + this.borderWidth * 2);
	}
	,get_innerHeight: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedHeight) - (this.paddingTop + this.paddingBottom + this.borderHeight * 2);
	}
	,set_paddingLeft: function(v) {
		if(this.paddingLeft == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingLeft = v;
	}
	,set_paddingRight: function(v) {
		if(this.paddingRight == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingRight = v;
	}
	,set_paddingTop: function(v) {
		if(this.paddingTop == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingTop = v;
	}
	,set_paddingBottom: function(v) {
		if(this.paddingBottom == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingBottom = v;
	}
	,constraintSize: function(width,height) {
		this.constraintWidth = width;
		this.constraintHeight = height;
		this.updateConstraint();
	}
	,contentChanged: function(s) {
		while(s.parent != this) s = s.parent;
		if(this.getProperties(s).isAbsolute) {
			return;
		}
		this.set_needReflow(true);
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,addSpacing: function(v) {
		var last = this.properties.length - 1;
		while(last >= 0 && this.properties[last].isAbsolute) --last;
		if(this.isVertical) {
			if(last >= 0) {
				this.properties[last].paddingBottom += v;
			} else {
				var _g = this;
				_g.set_paddingTop(_g.paddingTop + v);
			}
		} else if(last >= 0) {
			this.properties[last].paddingRight += v;
		} else {
			var _g1 = this;
			_g1.set_paddingLeft(_g1.paddingLeft + v);
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.needReflow) {
			this.reflow();
		}
		if(forSize) {
			if(!this.isInline) {
				h2d_Sprite.prototype.getBoundsRec.call(this,relativeTo,out,true);
			}
			if(this.calculatedWidth != 0) {
				this.addBounds(relativeTo,out,0,0,this.calculatedWidth,this.calculatedHeight);
			}
		} else {
			h2d_Sprite.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
	}
	,addChildAt: function(s,pos) {
		if(this.background != null) {
			++pos;
		}
		var fp = this.getProperties(s);
		h2d_Sprite.prototype.addChildAt.call(this,s,pos);
		if(fp == null) {
			fp = new h2d_FlowProperties(s);
		} else {
			HxOverrides.remove(this.properties,fp);
		}
		this.properties.splice(pos,0,fp);
		this.set_needReflow(true);
		s.setParentContainer(this);
	}
	,removeChild: function(s) {
		var index = this.getChildIndex(s);
		h2d_Sprite.prototype.removeChild.call(this,s);
		if(index >= 0) {
			this.set_needReflow(true);
			this.properties.splice(index,1);
			s.constraintSize(-1,-1);
		}
		if(s != null) {
			if(s == this.background) {
				this.set_backgroundTile(null);
			}
			if(s == this.interactive) {
				this.set_enableInteractive(false);
			}
		}
	}
	,sync: function(ctx) {
		if(this.needReflow) {
			this.reflow();
		}
		h2d_Sprite.prototype.sync.call(this,ctx);
	}
	,set_maxWidth: function(w) {
		if(this.maxWidth == w) {
			return w;
		}
		this.maxWidth = w;
		this.updateConstraint();
		return w;
	}
	,set_maxHeight: function(h) {
		if(this.maxHeight == h) {
			return h;
		}
		this.maxHeight = h;
		this.updateConstraint();
		return h;
	}
	,updateConstraint: function() {
		var oldW = this.realMaxWidth;
		var oldH = this.realMaxHeight;
		var tmp;
		if(this.maxWidth == null) {
			tmp = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			tmp = this.maxWidth;
		} else {
			var a = this.maxWidth;
			var b = this.constraintWidth;
			if(a > b) {
				tmp = b;
			} else {
				tmp = a;
			}
		}
		this.realMaxWidth = tmp;
		var tmp1;
		if(this.maxHeight == null) {
			tmp1 = this.constraintHeight;
		} else if(this.constraintHeight < 0) {
			tmp1 = this.maxHeight;
		} else {
			var a1 = this.maxHeight;
			var b1 = this.constraintHeight;
			if(a1 > b1) {
				tmp1 = b1;
			} else {
				tmp1 = a1;
			}
		}
		this.realMaxHeight = tmp1;
		if(this.realMaxWidth != oldW || this.realMaxHeight != oldH) {
			this.set_needReflow(true);
		}
	}
	,set_minWidth: function(w) {
		if(this.minWidth == w) {
			return w;
		}
		this.set_needReflow(true);
		return this.minWidth = w;
	}
	,set_minHeight: function(h) {
		if(this.minHeight == h) {
			return h;
		}
		this.set_needReflow(true);
		return this.minHeight = h;
	}
	,set_horizontalSpacing: function(s) {
		if(this.horizontalSpacing == s) {
			return s;
		}
		this.set_needReflow(true);
		return this.horizontalSpacing = s;
	}
	,set_verticalSpacing: function(s) {
		if(this.verticalSpacing == s) {
			return s;
		}
		this.set_needReflow(true);
		return this.verticalSpacing = s;
	}
	,set_enableInteractive: function(b) {
		if(this.enableInteractive == b) {
			return b;
		}
		if(b) {
			if(this.interactive == null) {
				this.interactive = new h2d_Interactive(0,0,this);
				this.interactive.set_cursor(hxd_Cursor.Default);
				this.properties[this.properties.length - 1].set_isAbsolute(true);
				if(!this.needReflow) {
					this.interactive.width = this.calculatedWidth;
					this.interactive.height = this.calculatedHeight;
				}
			}
		} else if(this.interactive != null) {
			var _this = this.interactive;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.interactive = null;
		}
		return this.enableInteractive = b;
	}
	,set_backgroundTile: function(t) {
		if(this.backgroundTile == t) {
			return t;
		}
		if(t != null) {
			if(this.background == null) {
				var background = new h2d_ScaleGrid(t,this.borderWidth,this.borderHeight);
				this.addChildAt(background,0);
				this.properties[0].set_isAbsolute(true);
				this.background = background;
				if(!this.needReflow) {
					background.set_width(Math.ceil(this.calculatedWidth));
					background.set_height(Math.ceil(this.calculatedHeight));
				}
			}
			this.background.tile = t;
		} else if(this.background != null) {
			var _this = this.background;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.background = null;
		}
		return this.backgroundTile = t;
	}
	,set_borderWidth: function(v) {
		if(this.borderWidth == v) {
			return v;
		}
		if(this.background != null) {
			this.background.set_borderWidth(v);
		}
		this.set_needReflow(true);
		return this.borderWidth = v;
	}
	,set_borderHeight: function(v) {
		if(this.borderHeight == v) {
			return v;
		}
		if(this.background != null) {
			this.background.set_borderHeight(v);
		}
		this.set_needReflow(true);
		return this.borderHeight = v;
	}
	,reflow: function() {
		var _gthis = this;
		this.onBeforeReflow();
		var isConstraintWidth = this.realMaxWidth >= 0;
		var isConstraintHeight = this.realMaxHeight >= 0;
		var maxTotWidth = this.realMaxWidth < 0 ? 100000000 : this.realMaxWidth;
		var maxTotHeight = this.realMaxHeight < 0 ? 100000000 : this.realMaxHeight;
		var maxWidth = maxTotWidth - (this.paddingLeft + this.paddingRight + this.borderWidth * 2);
		var maxHeight = maxTotHeight - (this.paddingTop + this.paddingBottom + this.borderHeight * 2);
		var cw;
		var ch;
		if(!this.isVertical) {
			var halign = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign = this.verticalAlign == null ? h2d_FlowAlign.Bottom : this.verticalAlign;
			var startX = this.paddingLeft + this.borderWidth;
			var x = startX;
			var y = this.paddingTop + this.borderHeight;
			cw = x;
			var maxLineHeight = 0.;
			var minLineHeight = this.lineHeight != null ? this.lineHeight : this.minHeight != null && !this.multiline ? this.minHeight - (this.paddingTop + this.paddingBottom + this.borderHeight * 2) : 0;
			var tmpBounds = h2d_Flow.tmpBounds;
			var lastIndex = 0;
			var _g1 = 0;
			var _g = this.children.length;
			while(_g1 < _g) {
				var i = _g1++;
				var p = this.properties[i];
				if(p.isAbsolute) {
					continue;
				}
				var c = this.children[i];
				if(!c.visible) {
					continue;
				}
				c.constraintSize(isConstraintWidth && p.constraint ? maxWidth - (p.paddingLeft + p.paddingRight) : -1,isConstraintHeight && p.constraint ? maxHeight - (p.paddingTop + p.paddingBottom) : -1);
				var b = c.getSize(tmpBounds);
				var br = false;
				p.calculatedWidth = b.xMax + p.paddingLeft + p.paddingRight;
				p.calculatedHeight = b.yMax + p.paddingTop + p.paddingBottom;
				if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
					p.calculatedWidth = p.minWidth;
				}
				if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
					p.calculatedHeight = p.minHeight;
				}
				if(this.multiline && x + p.calculatedWidth > maxWidth && x > startX) {
					br = true;
					if(maxLineHeight < minLineHeight) {
						maxLineHeight = minLineHeight;
					} else if(_gthis.overflow && minLineHeight != 0) {
						maxLineHeight = minLineHeight;
					}
					var _g11 = lastIndex;
					var _g2 = i;
					while(_g11 < _g2) {
						var i1 = _g11++;
						var p1 = _gthis.properties[i1];
						if(p1.isAbsolute) {
							continue;
						}
						var c1 = _gthis.children[i1];
						if(!c1.visible) {
							continue;
						}
						var a = p1.verticalAlign != null ? p1.verticalAlign : valign;
						c1.posChanged = true;
						c1.y = y + p1.offsetY + p1.paddingTop;
						switch(a[1]) {
						case 3:
							var _g21 = c1;
							_g21.posChanged = true;
							_g21.y += (maxLineHeight - p1.calculatedHeight) * 0.5 | 0;
							break;
						case 4:
							var _g22 = c1;
							_g22.posChanged = true;
							_g22.y += maxLineHeight - p1.calculatedHeight;
							break;
						default:
						}
					}
					lastIndex = i;
					y += maxLineHeight + this.verticalSpacing;
					maxLineHeight = 0;
					x = startX;
				}
				p.isBreak = br;
				x += p.calculatedWidth;
				if(x > cw) {
					cw = x;
				}
				x += this.horizontalSpacing;
				if(p.calculatedHeight > maxLineHeight) {
					maxLineHeight = p.calculatedHeight;
				}
			}
			var maxIndex = this.children.length;
			if(maxLineHeight < minLineHeight) {
				maxLineHeight = minLineHeight;
			} else if(_gthis.overflow && minLineHeight != 0) {
				maxLineHeight = minLineHeight;
			}
			var _g12 = lastIndex;
			var _g3 = maxIndex;
			while(_g12 < _g3) {
				var i2 = _g12++;
				var p2 = _gthis.properties[i2];
				if(p2.isAbsolute) {
					continue;
				}
				var c2 = _gthis.children[i2];
				if(!c2.visible) {
					continue;
				}
				var a1 = p2.verticalAlign != null ? p2.verticalAlign : valign;
				c2.posChanged = true;
				c2.y = y + p2.offsetY + p2.paddingTop;
				switch(a1[1]) {
				case 3:
					var _g23 = c2;
					_g23.posChanged = true;
					_g23.y += (maxLineHeight - p2.calculatedHeight) * 0.5 | 0;
					break;
				case 4:
					var _g24 = c2;
					_g24.posChanged = true;
					_g24.y += maxLineHeight - p2.calculatedHeight;
					break;
				default:
				}
			}
			lastIndex = maxIndex;
			cw += this.paddingRight + this.borderWidth;
			ch = y + maxLineHeight + this.paddingBottom + this.borderHeight;
			if(this.minWidth != null && cw < this.minWidth) {
				cw = this.minWidth;
			}
			var endX = cw - (this.paddingRight + this.borderWidth);
			var xmin = startX;
			var xmax = endX;
			var midSpace = 0;
			var _g13 = 0;
			var _g4 = this.children.length;
			while(_g13 < _g4) {
				var i3 = _g13++;
				var p3 = this.properties[i3];
				if(p3.isAbsolute || !this.children[i3].visible) {
					continue;
				}
				if(p3.isBreak) {
					xmin = startX;
					xmax = endX;
					midSpace = 0;
				}
				var px;
				var align = p3.horizontalAlign == null ? halign : p3.horizontalAlign;
				switch(align[1]) {
				case 2:
					if(midSpace != 0) {
						xmin += midSpace;
						midSpace = 0;
					}
					xmax -= p3.calculatedWidth;
					px = xmax;
					xmax -= this.horizontalSpacing;
					break;
				case 3:
					if(midSpace == 0) {
						var remSize = p3.calculatedWidth;
						var _g31 = i3 + 1;
						var _g25 = this.children.length;
						while(_g31 < _g25) {
							var j = _g31++;
							var p4 = this.properties[j];
							if(p4.isAbsolute || !this.children[j].visible) {
								continue;
							}
							if(p4.isBreak) {
								break;
							}
							remSize += this.horizontalSpacing + p4.calculatedWidth;
						}
						midSpace = (xmax - xmin - remSize) * 0.5 | 0;
						xmin += midSpace;
					}
					px = xmin;
					xmin += p3.calculatedWidth + this.horizontalSpacing;
					break;
				default:
					if(midSpace != 0) {
						xmin += midSpace;
						midSpace = 0;
					}
					px = xmin;
					xmin += p3.calculatedWidth + this.horizontalSpacing;
				}
				var _this = this.children[i3];
				_this.posChanged = true;
				_this.x = px + p3.offsetX + p3.paddingLeft;
			}
		} else {
			var halign1 = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign1 = this.verticalAlign == null ? h2d_FlowAlign.Top : this.verticalAlign;
			var startY = this.paddingTop + this.borderHeight;
			var y1 = startY;
			var x1 = this.paddingLeft + this.borderWidth;
			ch = y1;
			var maxColWidth = 0.;
			var minColWidth = this.colWidth != null ? this.colWidth : this.minWidth != null && !this.multiline ? this.minWidth - (this.paddingLeft + this.paddingRight + this.borderWidth * 2) : 0;
			var tmpBounds1 = h2d_Flow.tmpBounds;
			var lastIndex1 = 0;
			var _g14 = 0;
			var _g5 = this.children.length;
			while(_g14 < _g5) {
				var i4 = _g14++;
				var p5 = this.properties[i4];
				if(p5.isAbsolute) {
					continue;
				}
				var c3 = this.children[i4];
				if(!c3.visible) {
					continue;
				}
				c3.constraintSize(isConstraintWidth && p5.constraint ? maxWidth - (p5.paddingLeft + p5.paddingRight) : -1,isConstraintHeight && p5.constraint ? maxHeight - (p5.paddingTop + p5.paddingBottom) : -1);
				var b1 = c3.getSize(tmpBounds1);
				var br1 = false;
				p5.calculatedWidth = b1.xMax + p5.paddingLeft + p5.paddingRight;
				p5.calculatedHeight = b1.yMax + p5.paddingTop + p5.paddingBottom;
				if(p5.minWidth != null && p5.calculatedWidth < p5.minWidth) {
					p5.calculatedWidth = p5.minWidth;
				}
				if(p5.minHeight != null && p5.calculatedHeight < p5.minHeight) {
					p5.calculatedHeight = p5.minHeight;
				}
				if(this.multiline && y1 + p5.calculatedHeight > maxHeight && y1 > startY) {
					br1 = true;
					if(maxColWidth < minColWidth) {
						maxColWidth = minColWidth;
					} else if(_gthis.overflow && minColWidth != 0) {
						maxColWidth = minColWidth;
					}
					var _g15 = lastIndex1;
					var _g6 = i4;
					while(_g15 < _g6) {
						var i5 = _g15++;
						var p6 = _gthis.properties[i5];
						if(p6.isAbsolute) {
							continue;
						}
						var c4 = _gthis.children[i5];
						if(!c4.visible) {
							continue;
						}
						var a2 = p6.horizontalAlign != null ? p6.horizontalAlign : halign1;
						c4.posChanged = true;
						c4.x = x1 + p6.offsetX + p6.paddingLeft;
						switch(a2[1]) {
						case 2:
							var _g26 = c4;
							_g26.posChanged = true;
							_g26.x += maxColWidth - p6.calculatedWidth;
							break;
						case 3:
							var _g27 = c4;
							_g27.posChanged = true;
							_g27.x += (maxColWidth - p6.calculatedWidth) * 0.5 | 0;
							break;
						default:
						}
					}
					lastIndex1 = i4;
					x1 += maxColWidth + this.horizontalSpacing;
					maxColWidth = 0;
					y1 = startY;
				}
				p5.isBreak = br1;
				c3.posChanged = true;
				c3.y = y1 + p5.offsetY + p5.paddingTop;
				y1 += p5.calculatedHeight;
				if(y1 > ch) {
					ch = y1;
				}
				y1 += this.verticalSpacing;
				if(p5.calculatedWidth > maxColWidth) {
					maxColWidth = p5.calculatedWidth;
				}
			}
			var maxIndex1 = this.children.length;
			if(maxColWidth < minColWidth) {
				maxColWidth = minColWidth;
			} else if(_gthis.overflow && minColWidth != 0) {
				maxColWidth = minColWidth;
			}
			var _g16 = lastIndex1;
			var _g7 = maxIndex1;
			while(_g16 < _g7) {
				var i6 = _g16++;
				var p7 = _gthis.properties[i6];
				if(p7.isAbsolute) {
					continue;
				}
				var c5 = _gthis.children[i6];
				if(!c5.visible) {
					continue;
				}
				var a3 = p7.horizontalAlign != null ? p7.horizontalAlign : halign1;
				c5.posChanged = true;
				c5.x = x1 + p7.offsetX + p7.paddingLeft;
				switch(a3[1]) {
				case 2:
					var _g28 = c5;
					_g28.posChanged = true;
					_g28.x += maxColWidth - p7.calculatedWidth;
					break;
				case 3:
					var _g29 = c5;
					_g29.posChanged = true;
					_g29.x += (maxColWidth - p7.calculatedWidth) * 0.5 | 0;
					break;
				default:
				}
			}
			lastIndex1 = maxIndex1;
			ch += this.paddingBottom + this.borderHeight;
			cw = x1 + maxColWidth + this.paddingRight + this.borderWidth;
			if(this.minHeight != null && ch < this.minHeight) {
				ch = this.minHeight;
			}
			var endY = ch - (this.paddingBottom + this.borderHeight);
			var ymin = startY;
			var ymax = endY;
			var midSpace1 = 0;
			var _g17 = 0;
			var _g8 = this.children.length;
			while(_g17 < _g8) {
				var i7 = _g17++;
				var p8 = this.properties[i7];
				if(p8.isAbsolute || !this.children[i7].visible) {
					continue;
				}
				if(p8.isBreak) {
					ymin = startY;
					ymax = endY;
					midSpace1 = 0;
				}
				var py;
				var align1 = p8.verticalAlign == null ? valign1 : p8.verticalAlign;
				switch(align1[1]) {
				case 3:
					if(midSpace1 == 0) {
						var remSize1 = p8.calculatedHeight;
						var _g32 = i7 + 1;
						var _g210 = this.children.length;
						while(_g32 < _g210) {
							var j1 = _g32++;
							var p9 = this.properties[j1];
							if(p9.isAbsolute || !this.children[j1].visible) {
								continue;
							}
							if(p9.isBreak) {
								break;
							}
							remSize1 += this.verticalSpacing + p9.calculatedHeight;
						}
						midSpace1 = (ymax - ymin - remSize1) * 0.5 | 0;
						ymin += midSpace1;
					}
					py = ymin;
					ymin += p8.calculatedHeight + this.verticalSpacing;
					break;
				case 4:
					if(midSpace1 != 0) {
						ymin += midSpace1;
						midSpace1 = 0;
					}
					ymax -= p8.calculatedHeight;
					py = ymax;
					ymax -= this.verticalSpacing;
					break;
				default:
					if(midSpace1 != 0) {
						ymin += midSpace1;
						midSpace1 = 0;
					}
					py = ymin;
					ymin += p8.calculatedHeight + this.verticalSpacing;
				}
				var _this1 = this.children[i7];
				_this1.posChanged = true;
				_this1.y = py + p8.offsetY + p8.paddingTop;
			}
		}
		if(this.minWidth != null && cw < this.minWidth) {
			cw = this.minWidth;
		}
		if(this.minHeight != null && ch < this.minHeight) {
			ch = this.minHeight;
		}
		if(this.overflow) {
			if(isConstraintWidth && cw > maxTotWidth) {
				cw = maxTotWidth;
			}
			if(isConstraintHeight && ch > maxTotHeight) {
				ch = maxTotHeight;
			}
		}
		if(this.interactive != null) {
			this.interactive.width = cw;
			this.interactive.height = ch;
		}
		if(this.background != null) {
			this.background.set_width(Math.ceil(cw));
			this.background.set_height(Math.ceil(ch));
		}
		this.calculatedWidth = cw;
		this.calculatedHeight = ch;
		this.set_needReflow(false);
		if(this.debug) {
			this.debugGraphics.clear();
			if(this.debugGraphics != this.children[this.children.length - 1]) {
				this.addChild(this.debugGraphics);
				this.set_needReflow(false);
			}
			if(this.paddingLeft != 0 || this.paddingRight != 0 || this.paddingTop != 0 || this.paddingBottom != 0 || this.borderWidth != 0 || this.borderHeight != 0) {
				this.debugGraphics.lineStyle(1,65280);
				this.debugGraphics.drawRect(this.paddingLeft + this.borderWidth,this.paddingTop + this.borderHeight,this.get_innerWidth(),this.get_innerHeight());
			}
			this.debugGraphics.lineStyle(1,33023);
			var _g18 = 0;
			var _g9 = this.children.length;
			while(_g18 < _g9) {
				var i8 = _g18++;
				var p10 = this.properties[i8];
				var c6 = this.children[i8];
				if(p10.isAbsolute || !c6.visible) {
					continue;
				}
				this.debugGraphics.drawRect(c6.x,c6.y,p10.calculatedWidth,p10.calculatedHeight);
			}
			this.debugGraphics.lineStyle(1,16711680);
			this.debugGraphics.drawRect(0,0,cw,ch);
		}
		this.onAfterReflow();
	}
	,onBeforeReflow: function() {
	}
	,onAfterReflow: function() {
	}
	,__class__: h2d_Flow
});
var h2d_Kerning = function(c,o) {
	this.prevChar = c;
	this.offset = o;
};
$hxClasses["h2d.Kerning"] = h2d_Kerning;
h2d_Kerning.__name__ = ["h2d","Kerning"];
h2d_Kerning.prototype = {
	__class__: h2d_Kerning
};
var h2d_FontChar = function(t,w) {
	this.t = t;
	this.width = w;
};
$hxClasses["h2d.FontChar"] = h2d_FontChar;
h2d_FontChar.__name__ = ["h2d","FontChar"];
h2d_FontChar.prototype = {
	addKerning: function(prevChar,offset) {
		var k = new h2d_Kerning(prevChar,offset);
		k.next = this.kerning;
		this.kerning = k;
	}
	,getKerningOffset: function(prevChar) {
		var k = this.kerning;
		while(k != null) {
			if(k.prevChar == prevChar) {
				return k.offset;
			}
			k = k.next;
		}
		return 0;
	}
	,clone: function() {
		var c = new h2d_FontChar(this.t.clone(),this.width);
		c.kerning = this.kerning;
		return c;
	}
	,__class__: h2d_FontChar
};
var h2d_Font = function(name,size) {
	this.name = name;
	this.size = size;
	this.glyphs = new haxe_ds_IntMap();
	this.defaultChar = new h2d_FontChar(new h2d_Tile(null,0,0,0,0),0);
	this.charset = hxd_Charset.getDefault();
};
$hxClasses["h2d.Font"] = h2d_Font;
h2d_Font.__name__ = ["h2d","Font"];
h2d_Font.prototype = {
	getChar: function(code) {
		var c = this.glyphs.h[code];
		if(c == null) {
			c = this.charset.resolveChar(code,this.glyphs);
			if(c == null) {
				c = this.defaultChar;
			}
		}
		return c;
	}
	,clone: function() {
		var f = new h2d_Font(this.name,this.size);
		f.baseLine = this.baseLine;
		f.lineHeight = this.lineHeight;
		f.tile = this.tile.clone();
		f.charset = this.charset;
		f.defaultChar = this.defaultChar.clone();
		var g = this.glyphs.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var c = this.glyphs.h[g1];
			var c2 = c.clone();
			if(c == this.defaultChar) {
				f.defaultChar = c2;
			}
			f.glyphs.h[g1] = c2;
		}
		return f;
	}
	,resizeTo: function(size) {
		var ratio = size / this.size;
		var c = this.glyphs.iterator();
		while(c.hasNext()) {
			var c1 = c.next();
			c1.width = c1.width * ratio | 0;
			c1.t.scaleToSize(c1.t.width * ratio | 0,c1.t.height * ratio | 0);
			c1.t.dx = c1.t.dx * ratio | 0;
			c1.t.dy = c1.t.dy * ratio | 0;
		}
		this.lineHeight = this.lineHeight * ratio | 0;
		this.baseLine = this.baseLine * ratio | 0;
		this.size = size;
	}
	,hasChar: function(code) {
		return this.glyphs.h[code] != null;
	}
	,dispose: function() {
		this.tile.dispose();
	}
	,__class__: h2d_Font
};
var h2d__$Graphics_GPoint = function(x,y,r,g,b,a) {
	this.x = x;
	this.y = y;
	this.r = r;
	this.g = g;
	this.b = b;
	this.a = a;
};
$hxClasses["h2d._Graphics.GPoint"] = h2d__$Graphics_GPoint;
h2d__$Graphics_GPoint.__name__ = ["h2d","_Graphics","GPoint"];
h2d__$Graphics_GPoint.prototype = {
	__class__: h2d__$Graphics_GPoint
};
var hxbit_Serializable = function() { };
$hxClasses["hxbit.Serializable"] = hxbit_Serializable;
hxbit_Serializable.__name__ = ["hxbit","Serializable"];
hxbit_Serializable.prototype = {
	__class__: hxbit_Serializable
};
var hxbit_Serializer = function() {
	this.usedClasses = [];
	if(hxbit_Serializer.CLIDS == null) {
		hxbit_Serializer.initClassIDS();
	}
};
$hxClasses["hxbit.Serializer"] = hxbit_Serializer;
hxbit_Serializer.__name__ = ["hxbit","Serializer"];
hxbit_Serializer.resetCounters = function() {
	hxbit_Serializer.UID = 0;
	hxbit_Serializer.SEQ = 0;
};
hxbit_Serializer.allocUID = function() {
	return hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
};
hxbit_Serializer.registerClass = function(c) {
	if(hxbit_Serializer.CLIDS != null) {
		throw new js__$Boot_HaxeError("Too late to register class");
	}
	var idx = hxbit_Serializer.CLASSES.length;
	hxbit_Serializer.CLASSES.push(c);
	return idx;
};
hxbit_Serializer.hash = function(name) {
	var v = 1;
	var _g1 = 0;
	var _g = name.length;
	while(_g1 < _g) {
		var i = _g1++;
		v = v * 223 + name.charCodeAt(i) | 0;
	}
	v = 1 + (v & 1073741823) % 65423;
	return v;
};
hxbit_Serializer.initClassIDS = function() {
	var cl = hxbit_Serializer.CLASSES;
	var _g = [];
	var _g1 = 0;
	while(_g1 < cl.length) {
		var c = cl[_g1];
		++_g1;
		_g.push([]);
	}
	var subClasses = _g;
	var isSub = [];
	var _g2 = 0;
	var _g11 = cl.length;
	while(_g2 < _g11) {
		var i = _g2++;
		var c1 = cl[i];
		while(true) {
			c1 = Type.getSuperClass(c1);
			if(c1 == null) {
				break;
			}
			var idx = cl.indexOf(c1);
			if(idx < 0) {
				break;
			}
			subClasses[idx].push(i);
			isSub[i] = true;
		}
	}
	var _g12 = [];
	var _g3 = 0;
	var _g21 = hxbit_Serializer.CLASSES.length;
	while(_g3 < _g21) {
		var i1 = _g3++;
		var tmp;
		if(subClasses[i1].length == 0 && !isSub[i1]) {
			tmp = 0;
		} else {
			var name = Type.getClassName(cl[i1]);
			var v = 1;
			var _g13 = 0;
			var _g4 = name.length;
			while(_g13 < _g4) {
				var i2 = _g13++;
				v = v * 223 + name.charCodeAt(i2) | 0;
			}
			v = 1 + (v & 1073741823) % 65423;
			tmp = v;
		}
		_g12.push(tmp);
	}
	hxbit_Serializer.CLIDS = _g12;
	hxbit_Serializer.CL_BYID = [];
	var _g31 = 0;
	var _g22 = hxbit_Serializer.CLIDS.length;
	while(_g31 < _g22) {
		var i3 = _g31++;
		var cid = hxbit_Serializer.CLIDS[i3];
		if(cid == 0) {
			continue;
		}
		if(hxbit_Serializer.CL_BYID[cid] != null) {
			throw new js__$Boot_HaxeError("Conflicting CLID between " + Type.getClassName(hxbit_Serializer.CL_BYID[cid]) + " and " + Type.getClassName(cl[i3]));
		}
		hxbit_Serializer.CL_BYID[cid] = cl[i3];
	}
};
hxbit_Serializer.isClassFinal = function(index) {
	return hxbit_Serializer.CLIDS[index] == 0;
};
hxbit_Serializer.prototype = {
	set_remapIds: function(b) {
		this.remapObjs = b ? new haxe_ds_ObjectMap() : null;
		return b;
	}
	,get_remapIds: function() {
		return this.remapObjs != null;
	}
	,remap: function(s) {
		if(this.remapObjs.h.__keys__[s.__id__] != null) {
			return;
		}
		this.remapObjs.set(s,s.__uid);
		s.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	}
	,begin: function() {
		this.out = new haxe_io_BytesBuffer();
		this.refs = new haxe_ds_IntMap();
		this.knownStructs = [];
	}
	,end: function() {
		var bytes = this.out.getBytes();
		this.out = null;
		this.refs = null;
		this.knownStructs = null;
		return bytes;
	}
	,setInput: function(data,pos) {
		this.input = data;
		this.inPos = pos;
		if(this.refs == null) {
			this.refs = new haxe_ds_IntMap();
		}
		if(this.knownStructs == null) {
			this.knownStructs = [];
		}
	}
	,serialize: function(s) {
		this.begin();
		this.addKnownRef(s);
		return this.out.getBytes();
	}
	,unserialize: function(data,c,startPos) {
		if(startPos == null) {
			startPos = 0;
		}
		this.refs = new haxe_ds_IntMap();
		this.knownStructs = [];
		this.setInput(data,startPos);
		return this.getRef(c,c.__clid);
	}
	,getByte: function() {
		return this.input.b[this.inPos++];
	}
	,addByte: function(v) {
		this.out.b.push(v);
	}
	,addInt: function(v) {
		if(v >= 0 && v < 128) {
			this.out.b.push(v);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v);
		}
	}
	,addInt32: function(v) {
		this.out.addInt32(v);
	}
	,addInt64: function(v) {
		this.out.addInt64(v);
	}
	,addFloat: function(v) {
		this.out.addInt32(haxe_io_FPHelper.floatToI32(v));
	}
	,addDouble: function(v) {
		this.out.addInt64(haxe_io_FPHelper.doubleToI64(v));
	}
	,addBool: function(v) {
		this.out.b.push(v ? 1 : 0);
	}
	,addArray: function(a,f) {
		if(a == null) {
			this.out.b.push(0);
			return;
		}
		var v = a.length + 1;
		if(v >= 0 && v < 128) {
			this.out.b.push(v);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v);
		}
		var _g = 0;
		while(_g < a.length) {
			var v1 = a[_g];
			++_g;
			f(v1);
		}
	}
	,addVector: function(a,f) {
		if(a == null) {
			this.out.b.push(0);
			return;
		}
		var v = a.length + 1;
		if(v >= 0 && v < 128) {
			this.out.b.push(v);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v);
		}
		var _g = 0;
		while(_g < a.length) {
			var v1 = a[_g];
			++_g;
			f(v1);
		}
	}
	,getArray: function(f) {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			a[i] = f();
		}
		return a;
	}
	,getVector: function(f) {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var this1 = new Array(len);
		var a = this1;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			a[i] = f();
		}
		return a;
	}
	,addMap: function(a,fk,ft) {
		if(a == null) {
			this.out.b.push(0);
			return;
		}
		var _e = a;
		var keys = Lambda.array({ iterator : function() {
			return _e.keys();
		}});
		var v = keys.length + 1;
		if(v >= 0 && v < 128) {
			this.out.b.push(v);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v);
		}
		var _g = 0;
		while(_g < keys.length) {
			var k = keys[_g];
			++_g;
			fk(k);
			ft(a.get(k));
		}
	}
	,getBool: function() {
		return this.input.b[this.inPos++] != 0;
	}
	,getInt: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		return v;
	}
	,skip: function(size) {
		this.inPos += size;
	}
	,getInt32: function() {
		var v = this.input.getInt32(this.inPos);
		this.inPos += 4;
		return v;
	}
	,getInt64: function() {
		var v = this.input.getInt64(this.inPos);
		this.inPos += 8;
		return v;
	}
	,getDouble: function() {
		var v = this.input.getDouble(this.inPos);
		this.inPos += 8;
		return v;
	}
	,getFloat: function() {
		var v = this.input.getFloat(this.inPos);
		this.inPos += 4;
		return v;
	}
	,addString: function(s) {
		if(s == null) {
			this.out.b.push(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				this.out.b.push(v);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v);
			}
			var _this = this.out;
			var b1 = _this.b;
			var b2 = b.b;
			var _g1 = 0;
			var _g = b.length;
			while(_g1 < _g) {
				var i = _g1++;
				_this.b.push(b2[i]);
			}
		}
	}
	,addBytes: function(b) {
		if(b == null) {
			this.out.b.push(0);
		} else {
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				this.out.b.push(v);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v);
			}
			var _this = this.out;
			var b1 = _this.b;
			var b2 = b.b;
			var _g1 = 0;
			var _g = b.length;
			while(_g1 < _g) {
				var i = _g1++;
				_this.b.push(b2[i]);
			}
		}
	}
	,addBytesSub: function(b,pos,len) {
		if(b == null) {
			this.out.b.push(0);
		} else {
			var v = len + 1;
			if(v >= 0 && v < 128) {
				this.out.b.push(v);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v);
			}
			var _this = this.out;
			if(pos < 0 || len < 0 || pos + len > b.length) {
				throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
			}
			var b1 = _this.b;
			var b2 = b.b;
			var _g1 = pos;
			var _g = pos + len;
			while(_g1 < _g) {
				var i = _g1++;
				_this.b.push(b2[i]);
			}
		}
	}
	,getString: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var s = this.input.getString(this.inPos,len);
		this.inPos += len;
		return s;
	}
	,getBytes: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var s = this.input.sub(this.inPos,len);
		this.inPos += len;
		return s;
	}
	,getDynamic: function() {
		var _g = this.input.b[this.inPos++];
		switch(_g) {
		case 0:
			return null;
		case 1:
			return false;
		case 2:
			return true;
		case 3:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v;
		case 4:
			var v1 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			return v1;
		case 5:
			var o = { };
			var _g1 = 0;
			var v2 = this.input.b[this.inPos++];
			if(v2 == 128) {
				v2 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var _g2 = v2;
			while(_g1 < _g2) {
				var i = _g1++;
				var v3 = this.input.b[this.inPos++];
				if(v3 == 128) {
					v3 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len = v3;
				var field;
				if(len == 0) {
					field = null;
				} else {
					--len;
					var s = this.input.getString(this.inPos,len);
					this.inPos += len;
					field = s;
				}
				o[field] = this.getDynamic();
			}
			return o;
		case 6:
			var v4 = this.input.b[this.inPos++];
			if(v4 == 128) {
				v4 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len1 = v4;
			if(len1 == 0) {
				return null;
			} else {
				--len1;
				var s1 = this.input.getString(this.inPos,len1);
				this.inPos += len1;
				return s1;
			}
			break;
		case 7:
			var _g3 = [];
			var _g21 = 0;
			var v5 = this.input.b[this.inPos++];
			if(v5 == 128) {
				v5 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var _g11 = v5;
			while(_g21 < _g11) {
				var i1 = _g21++;
				_g3.push(this.getDynamic());
			}
			return _g3;
		case 8:
			var v6 = this.input.b[this.inPos++];
			if(v6 == 128) {
				v6 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len2 = v6;
			if(len2 == 0) {
				return null;
			} else {
				--len2;
				var s2 = this.input.sub(this.inPos,len2);
				this.inPos += len2;
				return s2;
			}
			break;
		default:
			var x = _g;
			throw new js__$Boot_HaxeError("Invalid dynamic prefix " + x);
		}
	}
	,addDynamic: function(v) {
		if(v == null) {
			this.out.b.push(0);
			return;
		}
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 1:
			this.out.b.push(3);
			var v1 = v;
			if(v1 >= 0 && v1 < 128) {
				this.out.b.push(v1);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v1);
			}
			break;
		case 2:
			this.out.b.push(4);
			this.out.addInt32(haxe_io_FPHelper.floatToI32(v));
			break;
		case 3:
			this.out.b.push(v ? 2 : 1);
			break;
		case 4:
			var fields = Reflect.fields(v);
			this.out.b.push(5);
			var v2 = fields.length;
			if(v2 >= 0 && v2 < 128) {
				this.out.b.push(v2);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v2);
			}
			var _g1 = 0;
			while(_g1 < fields.length) {
				var f = fields[_g1];
				++_g1;
				if(f == null) {
					this.out.b.push(0);
				} else {
					var b = haxe_io_Bytes.ofString(f);
					var v3 = b.length + 1;
					if(v3 >= 0 && v3 < 128) {
						this.out.b.push(v3);
					} else {
						this.out.b.push(128);
						this.out.addInt32(v3);
					}
					var _this = this.out;
					var b1 = _this.b;
					var b2 = b.b;
					var _g11 = 0;
					var _g2 = b.length;
					while(_g11 < _g2) {
						var i = _g11++;
						_this.b.push(b2[i]);
					}
				}
				this.addDynamic(Reflect.field(v,f));
			}
			break;
		case 6:
			var c = _g[2];
			switch(c) {
			case Array:
				this.out.b.push(7);
				var a = v;
				var v4 = a.length;
				if(v4 >= 0 && v4 < 128) {
					this.out.b.push(v4);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v4);
				}
				var _g3 = 0;
				while(_g3 < a.length) {
					var v5 = a[_g3];
					++_g3;
					this.addDynamic(v5);
				}
				break;
			case String:
				this.out.b.push(6);
				var s = v;
				if(s == null) {
					this.out.b.push(0);
				} else {
					var b3 = haxe_io_Bytes.ofString(s);
					var v6 = b3.length + 1;
					if(v6 >= 0 && v6 < 128) {
						this.out.b.push(v6);
					} else {
						this.out.b.push(128);
						this.out.addInt32(v6);
					}
					var _this1 = this.out;
					var b11 = _this1.b;
					var b21 = b3.b;
					var _g12 = 0;
					var _g4 = b3.length;
					while(_g12 < _g4) {
						var i1 = _g12++;
						_this1.b.push(b21[i1]);
					}
				}
				break;
			case haxe_io_Bytes:
				this.out.b.push(8);
				var b4 = v;
				if(b4 == null) {
					this.out.b.push(0);
				} else {
					var v7 = b4.length + 1;
					if(v7 >= 0 && v7 < 128) {
						this.out.b.push(v7);
					} else {
						this.out.b.push(128);
						this.out.addInt32(v7);
					}
					var _this2 = this.out;
					var b12 = _this2.b;
					var b22 = b4.b;
					var _g13 = 0;
					var _g5 = b4.length;
					while(_g13 < _g5) {
						var i2 = _g13++;
						_this2.b.push(b22[i2]);
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Unsupported dynamic " + Std.string(c));
			}
			break;
		default:
			var t = _g;
			throw new js__$Boot_HaxeError("Unsupported dynamic " + Std.string(t));
		}
	}
	,addCLID: function(clid) {
		this.out.b.push(clid >> 8);
		this.out.b.push(clid & 255);
	}
	,getCLID: function() {
		return this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
	}
	,addStruct: function(s) {
		if(s == null) {
			this.out.b.push(0);
			return;
		}
		var c = js_Boot.__instanceof(s,hxbit_Serializable) ? s : null;
		if(c != null) {
			this.out.b.push(1);
			this.addAnyRef(c);
			return;
		}
		var index = this.knownStructs.indexOf(s);
		if(index >= 0) {
			this.out.b.push(2);
			if(index >= 0 && index < 128) {
				this.out.b.push(index);
			} else {
				this.out.b.push(128);
				this.out.addInt32(index);
			}
			return;
		}
		this.knownStructs.push(s);
		this.out.b.push(3);
		var c1 = s == null ? null : js_Boot.getClass(s);
		if(c1 == null) {
			throw new js__$Boot_HaxeError(Std.string(s) + " does not have a class ?");
		}
		var s1 = Type.getClassName(c1);
		if(s1 == null) {
			this.out.b.push(0);
		} else {
			var b = haxe_io_Bytes.ofString(s1);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				this.out.b.push(v);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v);
			}
			var _this = this.out;
			var b1 = _this.b;
			var b2 = b.b;
			var _g1 = 0;
			var _g = b.length;
			while(_g1 < _g) {
				var i = _g1++;
				_this.b.push(b2[i]);
			}
		}
		s.customSerialize(this);
		this.out.b.push(255);
	}
	,getStruct: function() {
		var _g = this.input.b[this.inPos++];
		switch(_g) {
		case 0:
			return null;
		case 1:
			return this.getAnyRef();
		case 2:
			var tmp = this.knownStructs;
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return tmp[v];
		case 3:
			var v1 = this.input.b[this.inPos++];
			if(v1 == 128) {
				v1 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v1;
			var cname;
			if(len == 0) {
				cname = null;
			} else {
				--len;
				var s = this.input.getString(this.inPos,len);
				this.inPos += len;
				cname = s;
			}
			var cl = Type.resolveClass(cname);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Missing struct class " + cname);
			}
			var s1 = Type.createEmptyInstance(cl);
			this.knownStructs.push(s1);
			s1.customUnserialize(this);
			if(this.input.b[this.inPos++] != 255) {
				throw new js__$Boot_HaxeError("Invalid customUnserialize for " + Std.string(s1));
			}
			return s1;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,addObjRef: function(s) {
		var v = s.__uid;
		if(v >= 0 && v < 128) {
			this.out.b.push(v);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v);
		}
	}
	,getObjRef: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		return v;
	}
	,addAnyRef: function(s) {
		if(s == null) {
			this.out.b.push(0);
			return;
		}
		if(this.remapObjs != null) {
			this.remap(s);
		}
		this.addObjRef(s);
		if(this.refs.h[s.__uid] != null) {
			return;
		}
		this.refs.h[s.__uid] = s;
		var index = s.getCLID();
		this.usedClasses[index] = true;
		this.out.b.push(index >> 8);
		this.out.b.push(index & 255);
		s.serialize(this);
	}
	,addKnownRef: function(s) {
		if(s == null) {
			this.out.b.push(0);
			return;
		}
		if(this.remapObjs != null) {
			this.remap(s);
		}
		this.addObjRef(s);
		if(this.refs.h[s.__uid] != null) {
			return;
		}
		this.refs.h[s.__uid] = s;
		var index = s.getCLID();
		this.usedClasses[index] = true;
		var clid = hxbit_Serializer.CLIDS[index];
		if(clid != 0) {
			this.out.b.push(clid >> 8);
			this.out.b.push(clid & 255);
		}
		s.serialize(this);
	}
	,getAnyRef: function() {
		var id = this.getObjRef();
		if(id == 0) {
			return null;
		}
		if(this.refs.h[id] != null) {
			return this.refs.h[id];
		}
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid) {
			hxbit_Serializer.UID = rid;
		}
		var clidx = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
		if(this.mapIndexes != null) {
			clidx = this.mapIndexes[clidx];
		}
		var i = Type.createEmptyInstance(hxbit_Serializer.CLASSES[clidx]);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		return i;
	}
	,getRef: function(c,clidx) {
		var id = this.getObjRef();
		if(id == 0) {
			return null;
		}
		if(this.refs.h[id] != null) {
			return this.refs.h[id];
		}
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid) {
			hxbit_Serializer.UID = rid;
		}
		if(hxbit_Serializer.CLIDS[clidx] != 0) {
			var realIdx = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
			c = hxbit_Serializer.CL_BYID[realIdx];
			if(this.convert != null) {
				clidx = c.__clid;
			}
		}
		var i = Type.createEmptyInstance(c);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		return i;
	}
	,getKnownRef: function(c) {
		return this.getRef(c,c.__clid);
	}
	,beginSave: function() {
		this.begin();
		this.usedClasses = [];
	}
	,endSave: function(savePosition) {
		if(savePosition == null) {
			savePosition = 0;
		}
		var content = this.end();
		this.begin();
		var classes = [];
		var schemas = [];
		var sidx = hxbit_Serializer.CLASSES.indexOf(hxbit_Schema);
		var _g1 = 0;
		var _g = this.usedClasses.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!this.usedClasses[i] || i == sidx) {
				continue;
			}
			var c = hxbit_Serializer.CLASSES[i];
			var schema = Type.createEmptyInstance(c).getSerializeSchema();
			schemas.push(schema);
			classes.push(i);
			this.addKnownRef(schema);
			this.refs.remove(schema.__uid);
		}
		var schemaData = this.end();
		this.begin();
		var _this = this.out;
		if(savePosition < 0 || savePosition > content.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = _this.b;
		var b2 = content.b;
		var _g11 = 0;
		var _g2 = savePosition;
		while(_g11 < _g2) {
			var i1 = _g11++;
			_this.b.push(b2[i1]);
		}
		var b = haxe_io_Bytes.ofString("HXS");
		var v = b.length + 1;
		if(v >= 0 && v < 128) {
			this.out.b.push(v);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v);
		}
		var _this1 = this.out;
		var b11 = _this1.b;
		var b21 = b.b;
		var _g12 = 0;
		var _g3 = b.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			_this1.b.push(b21[i2]);
		}
		this.out.b.push(1);
		var _g13 = 0;
		var _g4 = classes.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var index = classes[i3];
			var s = Type.getClassName(hxbit_Serializer.CLASSES[index]);
			if(s == null) {
				this.out.b.push(0);
			} else {
				var b3 = haxe_io_Bytes.ofString(s);
				var v1 = b3.length + 1;
				if(v1 >= 0 && v1 < 128) {
					this.out.b.push(v1);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v1);
				}
				var _this2 = this.out;
				var b12 = _this2.b;
				var b22 = b3.b;
				var _g14 = 0;
				var _g5 = b3.length;
				while(_g14 < _g5) {
					var i4 = _g14++;
					_this2.b.push(b22[i4]);
				}
			}
			this.out.b.push(index >> 8);
			this.out.b.push(index & 255);
			var v2 = schemas[i3].get_checkSum();
			this.out.addInt32(v2);
		}
		this.out.b.push(0);
		var v3 = schemaData.length;
		if(v3 >= 0 && v3 < 128) {
			this.out.b.push(v3);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v3);
		}
		var _this3 = this.out;
		var b13 = _this3.b;
		var b23 = schemaData.b;
		var _g15 = 0;
		var _g6 = schemaData.length;
		while(_g15 < _g6) {
			var i5 = _g15++;
			_this3.b.push(b23[i5]);
		}
		var _this4 = this.out;
		var len = content.length - savePosition;
		if(savePosition < 0 || len < 0 || savePosition + len > content.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b14 = _this4.b;
		var b24 = content.b;
		var _g16 = savePosition;
		var _g7 = savePosition + len;
		while(_g16 < _g7) {
			var i6 = _g16++;
			_this4.b.push(b24[i6]);
		}
		return this.end();
	}
	,beginLoad: function(bytes,position) {
		if(position == null) {
			position = 0;
		}
		this.setInput(bytes,position);
		var classByName = new haxe_ds_StringMap();
		var schemas = [];
		var mapIndexes = [];
		var indexes = [];
		var needConvert = false;
		var needReindex = false;
		var _g1 = 0;
		var _g = hxbit_Serializer.CLASSES.length;
		while(_g1 < _g) {
			var i = _g1++;
			var key = Type.getClassName(hxbit_Serializer.CLASSES[i]);
			if(__map_reserved[key] != null) {
				classByName.setReserved(key,i);
			} else {
				classByName.h[key] = i;
			}
			mapIndexes[i] = i;
		}
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = this.input.getString(this.inPos,len);
			this.inPos += len;
			tmp = s;
		}
		if(tmp != "HXS") {
			throw new js__$Boot_HaxeError("Invalid HXS data");
		}
		var version = this.input.b[this.inPos++];
		if(version != 1) {
			throw new js__$Boot_HaxeError("Unsupported HXS version " + version);
		}
		while(true) {
			var v1 = this.input.b[this.inPos++];
			if(v1 == 128) {
				v1 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len1 = v1;
			var clname;
			if(len1 == 0) {
				clname = null;
			} else {
				--len1;
				var s1 = this.input.getString(this.inPos,len1);
				this.inPos += len1;
				clname = s1;
			}
			if(clname == null) {
				break;
			}
			var index = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
			var v2 = this.input.getInt32(this.inPos);
			this.inPos += 4;
			var crc = v2;
			var ourClassIndex = __map_reserved[clname] != null ? classByName.getReserved(clname) : classByName.h[clname];
			if(ourClassIndex == null) {
				throw new js__$Boot_HaxeError("Missing class " + clname + " found in HXS data");
			}
			var ourSchema = Type.createEmptyInstance(hxbit_Serializer.CLASSES[ourClassIndex]).getSerializeSchema();
			if(ourSchema.get_checkSum() != crc) {
				needConvert = true;
				schemas[index] = ourSchema;
			}
			if(index != ourClassIndex) {
				needReindex = true;
				mapIndexes[index] = ourClassIndex;
			}
			indexes.push(index);
		}
		var v3 = this.input.b[this.inPos++];
		if(v3 == 128) {
			v3 = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var schemaDataSize = v3;
		if(needConvert) {
			this.convert = [];
			var _g2 = 0;
			while(_g2 < indexes.length) {
				var index1 = indexes[_g2];
				++_g2;
				var ourSchema1 = schemas[index1];
				var c = hxbit_Schema;
				var schema = this.getRef(c,c.__clid);
				this.refs.remove(schema.__uid);
				if(ourSchema1 != null) {
					this.convert[mapIndexes[index1]] = new hxbit_Convert(ourSchema1,schema);
				}
			}
		} else {
			this.inPos += schemaDataSize;
		}
		if(needReindex) {
			this.mapIndexes = mapIndexes;
		}
	}
	,endLoad: function() {
		this.convert = null;
		this.mapIndexes = null;
		this.setInput(null,0);
	}
	,convertRef: function(i,c) {
		var length = c.read.length;
		var this1 = new Array(length);
		var values = this1;
		var writePos = 0;
		var _g = 0;
		var _g1 = c.read;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			values[r.index] = this.readValue(r.from);
		}
		var oldOut = this.out;
		this.out = new haxe_io_BytesBuffer();
		var _g2 = 0;
		var _g11 = c.write;
		while(_g2 < _g11.length) {
			var w = _g11[_g2];
			++_g2;
			var v;
			if(w.from == null) {
				v = w.defaultValue;
			} else {
				v = values[w.index];
				if(!w.same) {
					if(v == null) {
						v = w.defaultValue;
					} else {
						v = this.convertValue(v,w.from,w.to);
					}
				}
			}
			this.writeValue(v,w.to);
		}
		var bytes = this.out.getBytes();
		this.out = oldOut;
		var oldIn = this.input;
		var oldPos = this.inPos;
		this.setInput(bytes,0);
		i.unserialize(this);
		this.setInput(oldIn,oldPos);
	}
	,isNullable: function(t) {
		switch(t[1]) {
		case 0:case 1:case 2:
			return false;
		default:
			return true;
		}
	}
	,convertValue: function(v,from,to) {
		if(v == null && this.isNullable(to)) {
			return null;
		}
		if(hxbit_Convert.sameType(from,to)) {
			return v;
		}
		if(from[1] == 9) {
			if(to[1] == 9) {
				var obj1 = from[2];
				var obj2 = to[2];
				var v2 = { };
				var _g = 0;
				while(_g < obj2.length) {
					var f = obj2[_g];
					++_g;
					var found = false;
					var field = null;
					var _g1 = 0;
					while(_g1 < obj1.length) {
						var f2 = obj1[_g1];
						++_g1;
						if(f2.name == f.name) {
							found = true;
							field = this.convertValue(Reflect.field(v,f2.name),f2.type,f.type);
							break;
						}
					}
					if(!found) {
						if(f.opt) {
							continue;
						}
						field = hxbit_Convert.getDefault(f.type);
					} else if(field == null && f.opt) {
						continue;
					}
					v2[f.name] = field;
				}
				return v2;
			}
		}
		throw new js__$Boot_HaxeError("Cannot convert " + Std.string(v) + " from " + Std.string(from) + " to " + Std.string(to));
	}
	,readValue: function(t) {
		var _gthis = this;
		switch(t[1]) {
		case 0:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v;
		case 1:
			var v1 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			return v1;
		case 2:
			return this.input.b[this.inPos++] != 0;
		case 3:
			var v2 = this.input.b[this.inPos++];
			if(v2 == 128) {
				v2 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v2;
			if(len == 0) {
				return null;
			} else {
				--len;
				var s = this.input.getString(this.inPos,len);
				this.inPos += len;
				return s;
			}
			break;
		case 4:
			var v3 = this.input.b[this.inPos++];
			if(v3 == 128) {
				v3 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len1 = v3;
			if(len1 == 0) {
				return null;
			} else {
				--len1;
				var s1 = this.input.sub(this.inPos,len1);
				this.inPos += len1;
				return s1;
			}
			break;
		case 5:
			var name = t[2];
			var c = Type.resolveClass(name);
			return this.getRef(c,c.__clid);
		case 6:
			var name1 = t[2];
			var ser = Type.resolveClass("hxbit.enumSer." + name1.split(".").join("_"));
			if(ser == null) {
				var e = Type.resolveEnum(name1);
				var tmp;
				if(e != null) {
					var o = haxe_rtti_Meta.getType(e);
					tmp = Object.prototype.hasOwnProperty.call(o,"skipSerialize");
				} else {
					tmp = false;
				}
				if(tmp) {
					var v4 = this.input.b[this.inPos++];
					if(v4 == 128) {
						v4 = this.input.getInt32(this.inPos);
						this.inPos += 4;
					}
					return null;
				}
				throw new js__$Boot_HaxeError("No enum unserializer found for " + name1);
			}
			return ser.doUnserialize(this);
		case 7:
			var v5 = t[3];
			var k = t[2];
			switch(k[1]) {
			case 0:
				var v6 = this.input.b[this.inPos++];
				if(v6 == 128) {
					v6 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len2 = v6;
				var tmp1;
				if(len2 == 0) {
					tmp1 = null;
				} else {
					var m = new haxe_ds_IntMap();
					while(--len2 > 0) {
						var k1 = _gthis.readValue(k);
						var v7 = _gthis.readValue(v5);
						m.h[k1] = v7;
					}
					tmp1 = m;
				}
				return tmp1;
			case 3:
				var v8 = this.input.b[this.inPos++];
				if(v8 == 128) {
					v8 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len3 = v8;
				var tmp2;
				if(len3 == 0) {
					tmp2 = null;
				} else {
					var m1 = new haxe_ds_StringMap();
					while(--len3 > 0) {
						var k2 = _gthis.readValue(k);
						var v9 = _gthis.readValue(v5);
						if(__map_reserved[k2] != null) {
							m1.setReserved(k2,v9);
						} else {
							m1.h[k2] = v9;
						}
					}
					tmp2 = m1;
				}
				return tmp2;
			default:
				var v10 = this.input.b[this.inPos++];
				if(v10 == 128) {
					v10 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len4 = v10;
				var tmp3;
				if(len4 == 0) {
					tmp3 = null;
				} else {
					var m2 = new haxe_ds_ObjectMap();
					while(--len4 > 0) {
						var k3 = _gthis.readValue(k);
						var v11 = _gthis.readValue(v5);
						m2.set(k3,v11);
					}
					tmp3 = m2;
				}
				return tmp3;
			}
			break;
		case 8:
			var t1 = t[2];
			var v12 = this.input.b[this.inPos++];
			if(v12 == 128) {
				v12 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len5 = v12;
			if(len5 == 0) {
				return null;
			} else {
				--len5;
				var a = [];
				var _g1 = 0;
				var _g = len5;
				while(_g1 < _g) {
					var i = _g1++;
					a[i] = _gthis.readValue(t1);
				}
				return a;
			}
			break;
		case 9:
			var fields = t[2];
			var v13 = this.input.b[this.inPos++];
			if(v13 == 128) {
				v13 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var bits = v13;
			if(bits == 0) {
				return null;
			}
			var o1 = { };
			--bits;
			var _g2 = [];
			var _g11 = 0;
			while(_g11 < fields.length) {
				var f = fields[_g11];
				++_g11;
				if(this.isNullable(f.type)) {
					_g2.push(f);
				}
			}
			var nullables = _g2;
			var _g12 = 0;
			while(_g12 < fields.length) {
				var f1 = fields[_g12];
				++_g12;
				var nidx = nullables.indexOf(f1);
				if(nidx >= 0 && (bits & 1 << nidx) == 0) {
					continue;
				}
				o1[f1.name] = this.readValue(f1.type);
			}
			return o1;
		case 10:
			var t2 = t[2];
			return this.readValue(t2);
		case 11:
			var t3 = t[2];
			var v14 = this.input.b[this.inPos++];
			if(v14 == 128) {
				v14 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len6 = v14;
			if(len6 == 0) {
				return null;
			} else {
				--len6;
				var this1 = new Array(len6);
				var a1 = this1;
				var _g13 = 0;
				var _g3 = len6;
				while(_g13 < _g3) {
					var i1 = _g13++;
					a1[i1] = _gthis.readValue(t3);
				}
				return a1;
			}
			break;
		case 12:
			var t4 = t[2];
			if(this.input.b[this.inPos++] == 0) {
				return null;
			} else {
				return this.readValue(t4);
			}
			break;
		case 13:
			throw new js__$Boot_HaxeError("assert");
			break;
		case 14:
			return this.getDynamic();
		case 15:
			var v15 = this.input.getInt64(this.inPos);
			this.inPos += 8;
			return v15;
		case 16:
			var v16 = this.input.b[this.inPos++];
			if(v16 == 128) {
				v16 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v16;
		case 17:
			return this.getStruct();
		}
	}
	,writeValue: function(v,t) {
		var _gthis = this;
		switch(t[1]) {
		case 0:
			var v1 = v;
			if(v1 >= 0 && v1 < 128) {
				this.out.b.push(v1);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v1);
			}
			break;
		case 1:
			this.out.addInt32(haxe_io_FPHelper.floatToI32(v));
			break;
		case 2:
			this.out.b.push(v ? 1 : 0);
			break;
		case 3:
			var s = v;
			if(s == null) {
				this.out.b.push(0);
			} else {
				var b = haxe_io_Bytes.ofString(s);
				var v2 = b.length + 1;
				if(v2 >= 0 && v2 < 128) {
					this.out.b.push(v2);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v2);
				}
				var _this = this.out;
				var b1 = _this.b;
				var b2 = b.b;
				var _g1 = 0;
				var _g = b.length;
				while(_g1 < _g) {
					var i = _g1++;
					_this.b.push(b2[i]);
				}
			}
			break;
		case 4:
			var b3 = v;
			if(b3 == null) {
				this.out.b.push(0);
			} else {
				var v3 = b3.length + 1;
				if(v3 >= 0 && v3 < 128) {
					this.out.b.push(v3);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v3);
				}
				var _this1 = this.out;
				var b11 = _this1.b;
				var b21 = b3.b;
				var _g11 = 0;
				var _g2 = b3.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					_this1.b.push(b21[i1]);
				}
			}
			break;
		case 5:
			this.addKnownRef(v);
			break;
		case 6:
			var name = t[2];
			var ser = "hxbit.enumSer." + name.split(".").join("_");
			if(ser == null) {
				throw new js__$Boot_HaxeError("No enum unserializer found for " + name);
			}
			Type.resolveClass(ser).doSerialize(this,v);
			break;
		case 7:
			var t1 = t[3];
			var k = t[2];
			var a = v;
			if(a == null) {
				this.out.b.push(0);
			} else {
				var _e = a;
				var keys = Lambda.array({ iterator : function() {
					return _e.keys();
				}});
				var v4 = keys.length + 1;
				if(v4 >= 0 && v4 < 128) {
					this.out.b.push(v4);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v4);
				}
				var _g3 = 0;
				while(_g3 < keys.length) {
					var k1 = keys[_g3];
					++_g3;
					_gthis.writeValue(k1,k);
					_gthis.writeValue(a.get(k1),t1);
				}
			}
			break;
		case 8:
			var t2 = t[2];
			var a1 = v;
			if(a1 == null) {
				this.out.b.push(0);
			} else {
				var v5 = a1.length + 1;
				if(v5 >= 0 && v5 < 128) {
					this.out.b.push(v5);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v5);
				}
				var _g4 = 0;
				while(_g4 < a1.length) {
					var v6 = a1[_g4];
					++_g4;
					_gthis.writeValue(v6,t2);
				}
			}
			break;
		case 9:
			var fields = t[2];
			if(v == null) {
				this.out.b.push(0);
			} else {
				var fbits = 0;
				var _g5 = [];
				var _g12 = 0;
				while(_g12 < fields.length) {
					var f = fields[_g12];
					++_g12;
					if(this.isNullable(f.type)) {
						_g5.push(f);
					}
				}
				var nullables = _g5;
				var _g21 = 0;
				var _g13 = nullables.length;
				while(_g21 < _g13) {
					var i2 = _g21++;
					if(Reflect.field(v,nullables[i2].name) != null) {
						fbits |= 1 << i2;
					}
				}
				var v7 = fbits + 1;
				if(v7 >= 0 && v7 < 128) {
					this.out.b.push(v7);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v7);
				}
				var _g14 = 0;
				while(_g14 < fields.length) {
					var f1 = fields[_g14];
					++_g14;
					var nidx = nullables.indexOf(f1);
					var name1 = f1.name;
					if(nidx >= 0 && (fbits & 1 << nidx) == 0) {
						continue;
					}
					this.writeValue(Reflect.field(v,f1.name),f1.type);
				}
			}
			break;
		case 10:
			var t3 = t[2];
			this.writeValue(v,t3);
			break;
		case 11:
			var t4 = t[2];
			var a2 = v;
			if(a2 == null) {
				this.out.b.push(0);
			} else {
				var v8 = a2.length + 1;
				if(v8 >= 0 && v8 < 128) {
					this.out.b.push(v8);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v8);
				}
				var _g6 = 0;
				while(_g6 < a2.length) {
					var v9 = a2[_g6];
					++_g6;
					_gthis.writeValue(v9,t4);
				}
			}
			break;
		case 12:
			var t5 = t[2];
			if(v == null) {
				this.out.b.push(0);
			} else {
				this.out.b.push(1);
				this.writeValue(v,t5);
			}
			break;
		case 13:
			throw new js__$Boot_HaxeError("assert");
			break;
		case 14:
			this.addDynamic(v);
			break;
		case 15:
			this.out.addInt64(v);
			break;
		case 16:
			var v10 = v;
			if(v10 >= 0 && v10 < 128) {
				this.out.b.push(v10);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v10);
			}
			break;
		case 17:
			this.addStruct(v);
			break;
		}
	}
	,__class__: hxbit_Serializer
};
var h3d_prim_Primitive = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
};
$hxClasses["h3d.prim.Primitive"] = h3d_prim_Primitive;
h3d_prim_Primitive.__name__ = ["h3d","prim","Primitive"];
h3d_prim_Primitive.__interfaces__ = [hxbit_Serializable];
h3d_prim_Primitive.prototype = {
	triCount: function() {
		if(this.indexes != null) {
			return this.indexes.count / 3 | 0;
		} else if(this.buffer == null) {
			return 0;
		} else {
			return this.buffer.totalVertices() / 3 | 0;
		}
	}
	,vertexCount: function() {
		return 0;
	}
	,getCollider: function() {
		throw new js__$Boot_HaxeError("not implemented for " + Std.string(this));
	}
	,getBounds: function() {
		throw new js__$Boot_HaxeError("not implemented for " + Std.string(this));
	}
	,alloc: function(engine) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,selectMaterial: function(material) {
	}
	,buildNormalsDisplay: function() {
		throw new js__$Boot_HaxeError("not implemented for " + Std.string(this));
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		if(this.indexes == null) {
			if((this.buffer.flags & 1 << h3d_BufferFlag.Quads[1]) != 0) {
				engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
			} else {
				engine.renderBuffer(this.buffer,engine.mem.triIndexes,3,0,-1);
			}
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,toString: function() {
		return Type.getClassName(js_Boot.getClass(this)).split(".").pop();
	}
	,customSerialize: function(ctx) {
		throw new js__$Boot_HaxeError("Cannot serialize " + this.toString());
	}
	,customUnserialize: function(ctx) {
		throw new js__$Boot_HaxeError("customUnserialize not implemented on " + this.toString());
	}
	,getCLID: function() {
		return h3d_prim_Primitive.__clid;
	}
	,serialize: function(__ctx) {
		this.customSerialize(__ctx);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.isFinal = hxbit_Serializer.isClassFinal(h3d_prim_Primitive.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		this.customUnserialize(__ctx);
	}
	,__class__: h3d_prim_Primitive
};
var h2d__$Graphics_GraphicsContent = function() {
	h3d_prim_Primitive.call(this);
	this.buffers = [];
};
$hxClasses["h2d._Graphics.GraphicsContent"] = h2d__$Graphics_GraphicsContent;
h2d__$Graphics_GraphicsContent.__name__ = ["h2d","_Graphics","GraphicsContent"];
h2d__$Graphics_GraphicsContent.__super__ = h3d_prim_Primitive;
h2d__$Graphics_GraphicsContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	addIndex: function(i) {
		this.index.push(i);
	}
	,add: function(x,y,u,v,r,g,b,a) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = y;
		var this3 = this.tmp;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = u;
		var this4 = this.tmp;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = v;
		var this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = r;
		var this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = g;
		var this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = b;
		var this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = a;
	}
	,next: function() {
		var nvect = this.tmp.pos >> 3;
		if(nvect < 32768) {
			return false;
		}
		this.buffers.push({ buf : this.tmp, idx : this.index, vbuf : null, ibuf : null});
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		var this2 = new Array(0);
		this.index = this2;
		h3d_prim_Primitive.prototype.dispose.call(this);
		return true;
	}
	,alloc: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.RawFormat]);
		this.indexes = h3d_Indexes.alloc(this.index);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf == null || b.vbuf.isDisposed()) {
				b.vbuf = h3d_Buffer.ofFloats(b.buf,8,[h3d_BufferFlag.RawFormat]);
			}
			if(b.ibuf == null || b.ibuf.isDisposed()) {
				b.ibuf = h3d_Indexes.alloc(b.idx);
			}
		}
	}
	,render: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		}
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			engine.renderIndexed(b.vbuf,b.ibuf);
		}
		h3d_prim_Primitive.prototype.render.call(this,engine);
	}
	,flush: function() {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		}
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf != null) {
				b.vbuf.dispose();
			}
			if(b.ibuf != null) {
				b.ibuf.dispose();
			}
			b.vbuf = null;
			b.ibuf = null;
		}
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,clear: function() {
		this.dispose();
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		var this2 = new Array(0);
		this.index = this2;
		this.buffers = [];
	}
	,getCLID: function() {
		return h2d__$Graphics_GraphicsContent.__clid;
	}
	,__class__: h2d__$Graphics_GraphicsContent
});
var h2d_Graphics = function(parent) {
	this.bevel = 0.25;
	this.my = 0.;
	this.mx = 0.;
	this.md = 1.;
	this.mc = 0.;
	this.mb = 0.;
	this.ma = 1.;
	h2d_Drawable.call(this,parent);
	this.content = new h2d__$Graphics_GraphicsContent();
	this.tile = h2d_Tile.fromColor(16777215);
	this.clear();
};
$hxClasses["h2d.Graphics"] = h2d_Graphics;
h2d_Graphics.__name__ = ["h2d","Graphics"];
h2d_Graphics.__super__ = h2d_Drawable;
h2d_Graphics.prototype = $extend(h2d_Drawable.prototype,{
	onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		this.clear();
	}
	,clear: function() {
		this.content.clear();
		this.tmpPoints = [];
		this.pindex = 0;
		this.lineSize = 0;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.yMax = -Infinity;
		this.xMax = -Infinity;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			this.addBounds(relativeTo,out,this.xMin,this.yMin,this.xMax - this.xMin,this.yMax - this.yMin);
		}
	}
	,isConvex: function(points) {
		var first = true;
		var sign = false;
		var _g1 = 0;
		var _g = points.length;
		while(_g1 < _g) {
			var i = _g1++;
			var p1 = points[i];
			var p2 = points[(i + 1) % points.length];
			var p3 = points[(i + 2) % points.length];
			var s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
			if(first) {
				first = false;
				sign = s;
			} else if(sign != s) {
				return false;
			}
		}
		return true;
	}
	,flushLine: function(start) {
		var pts = this.tmpPoints;
		var last = pts.length - 1;
		var prev = pts[last];
		var p = pts[0];
		var closed = p.x == prev.x && p.y == prev.y;
		var count = pts.length;
		if(!closed) {
			var prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			pts.push(new h2d__$Graphics_GPoint(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,0,0,0,0));
			var pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			prev = new h2d__$Graphics_GPoint(p.x * 2 - pNext.x,p.y * 2 - pNext.y,0,0,0,0);
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			var next = pts[(i + 1) % pts.length];
			var nx1 = prev.y - p.y;
			var ny1 = p.x - prev.x;
			var ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			var nx2 = p.y - next.y;
			var ny2 = next.x - p.x;
			var ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			var nx = nx1 * ns1 + nx2 * ns2;
			var ny = ny1 * ns1 + ny2 * ns2;
			var ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			var size = nx * nx1 * ns1 + ny * ny1 * ns1;
			if(size < 0.1) {
				size = 0.1;
			}
			var d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			if(size > this.bevel) {
				var _this = this.content;
				var x = p.x + nx;
				var y = p.y + ny;
				var r = p.r;
				var g = p.g;
				var b = p.b;
				var a = p.a;
				var this1 = _this.tmp;
				if(this1.pos == this1.array.length) {
					var newSize = this1.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(this1.array);
					this1.array = newArray;
				}
				this1.array[this1.pos++] = x;
				var this2 = _this.tmp;
				if(this2.pos == this2.array.length) {
					var newSize1 = this2.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(this2.array);
					this2.array = newArray1;
				}
				this2.array[this2.pos++] = y;
				var this3 = _this.tmp;
				if(this3.pos == this3.array.length) {
					var newSize2 = this3.array.length << 1;
					if(newSize2 < 128) {
						newSize2 = 128;
					}
					var newArray2 = new Float32Array(newSize2);
					newArray2.set(this3.array);
					this3.array = newArray2;
				}
				this3.array[this3.pos++] = 0;
				var this4 = _this.tmp;
				if(this4.pos == this4.array.length) {
					var newSize3 = this4.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(this4.array);
					this4.array = newArray3;
				}
				this4.array[this4.pos++] = 0;
				var this5 = _this.tmp;
				if(this5.pos == this5.array.length) {
					var newSize4 = this5.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(this5.array);
					this5.array = newArray4;
				}
				this5.array[this5.pos++] = r;
				var this6 = _this.tmp;
				if(this6.pos == this6.array.length) {
					var newSize5 = this6.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(this6.array);
					this6.array = newArray5;
				}
				this6.array[this6.pos++] = g;
				var this7 = _this.tmp;
				if(this7.pos == this7.array.length) {
					var newSize6 = this7.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(this7.array);
					this7.array = newArray6;
				}
				this7.array[this7.pos++] = b;
				var this8 = _this.tmp;
				if(this8.pos == this8.array.length) {
					var newSize7 = this8.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(this8.array);
					this8.array = newArray7;
				}
				this8.array[this8.pos++] = a;
				var _this1 = this.content;
				var x1 = p.x - nx;
				var y1 = p.y - ny;
				var r1 = p.r;
				var g1 = p.g;
				var b1 = p.b;
				var a1 = p.a;
				var this9 = _this1.tmp;
				if(this9.pos == this9.array.length) {
					var newSize8 = this9.array.length << 1;
					if(newSize8 < 128) {
						newSize8 = 128;
					}
					var newArray8 = new Float32Array(newSize8);
					newArray8.set(this9.array);
					this9.array = newArray8;
				}
				this9.array[this9.pos++] = x1;
				var this10 = _this1.tmp;
				if(this10.pos == this10.array.length) {
					var newSize9 = this10.array.length << 1;
					if(newSize9 < 128) {
						newSize9 = 128;
					}
					var newArray9 = new Float32Array(newSize9);
					newArray9.set(this10.array);
					this10.array = newArray9;
				}
				this10.array[this10.pos++] = y1;
				var this11 = _this1.tmp;
				if(this11.pos == this11.array.length) {
					var newSize10 = this11.array.length << 1;
					if(newSize10 < 128) {
						newSize10 = 128;
					}
					var newArray10 = new Float32Array(newSize10);
					newArray10.set(this11.array);
					this11.array = newArray10;
				}
				this11.array[this11.pos++] = 0;
				var this12 = _this1.tmp;
				if(this12.pos == this12.array.length) {
					var newSize11 = this12.array.length << 1;
					if(newSize11 < 128) {
						newSize11 = 128;
					}
					var newArray11 = new Float32Array(newSize11);
					newArray11.set(this12.array);
					this12.array = newArray11;
				}
				this12.array[this12.pos++] = 0;
				var this13 = _this1.tmp;
				if(this13.pos == this13.array.length) {
					var newSize12 = this13.array.length << 1;
					if(newSize12 < 128) {
						newSize12 = 128;
					}
					var newArray12 = new Float32Array(newSize12);
					newArray12.set(this13.array);
					this13.array = newArray12;
				}
				this13.array[this13.pos++] = r1;
				var this14 = _this1.tmp;
				if(this14.pos == this14.array.length) {
					var newSize13 = this14.array.length << 1;
					if(newSize13 < 128) {
						newSize13 = 128;
					}
					var newArray13 = new Float32Array(newSize13);
					newArray13.set(this14.array);
					this14.array = newArray13;
				}
				this14.array[this14.pos++] = g1;
				var this15 = _this1.tmp;
				if(this15.pos == this15.array.length) {
					var newSize14 = this15.array.length << 1;
					if(newSize14 < 128) {
						newSize14 = 128;
					}
					var newArray14 = new Float32Array(newSize14);
					newArray14.set(this15.array);
					this15.array = newArray14;
				}
				this15.array[this15.pos++] = b1;
				var this16 = _this1.tmp;
				if(this16.pos == this16.array.length) {
					var newSize15 = this16.array.length << 1;
					if(newSize15 < 128) {
						newSize15 = 128;
					}
					var newArray15 = new Float32Array(newSize15);
					newArray15.set(this16.array);
					this16.array = newArray15;
				}
				this16.array[this16.pos++] = a1;
				var pnext = i == last ? start : this.pindex + 2;
				if(i < count - 1 || closed) {
					this.content.index.push(this.pindex);
					this.content.index.push(this.pindex + 1);
					this.content.index.push(pnext);
					this.content.index.push(this.pindex + 1);
					this.content.index.push(pnext);
					this.content.index.push(pnext + 1);
				}
				this.pindex += 2;
			} else {
				var n0x = next.x - p.x;
				var n0y = next.y - p.y;
				var sign = n0x * nx + n0y * ny;
				var nnx = -ny;
				var nny = nx;
				var size1 = nnx * nx1 * ns1 + nny * ny1 * ns1;
				var d1 = this.lineSize * 0.5 / size1;
				nnx *= d1;
				nny *= d1;
				var pnext1 = i == last ? start : this.pindex + 3;
				if(sign > 0) {
					var _this2 = this.content;
					var x2 = p.x + nx;
					var y2 = p.y + ny;
					var r2 = p.r;
					var g2 = p.g;
					var b2 = p.b;
					var a2 = p.a;
					var this17 = _this2.tmp;
					if(this17.pos == this17.array.length) {
						var newSize16 = this17.array.length << 1;
						if(newSize16 < 128) {
							newSize16 = 128;
						}
						var newArray16 = new Float32Array(newSize16);
						newArray16.set(this17.array);
						this17.array = newArray16;
					}
					this17.array[this17.pos++] = x2;
					var this18 = _this2.tmp;
					if(this18.pos == this18.array.length) {
						var newSize17 = this18.array.length << 1;
						if(newSize17 < 128) {
							newSize17 = 128;
						}
						var newArray17 = new Float32Array(newSize17);
						newArray17.set(this18.array);
						this18.array = newArray17;
					}
					this18.array[this18.pos++] = y2;
					var this19 = _this2.tmp;
					if(this19.pos == this19.array.length) {
						var newSize18 = this19.array.length << 1;
						if(newSize18 < 128) {
							newSize18 = 128;
						}
						var newArray18 = new Float32Array(newSize18);
						newArray18.set(this19.array);
						this19.array = newArray18;
					}
					this19.array[this19.pos++] = 0;
					var this20 = _this2.tmp;
					if(this20.pos == this20.array.length) {
						var newSize19 = this20.array.length << 1;
						if(newSize19 < 128) {
							newSize19 = 128;
						}
						var newArray19 = new Float32Array(newSize19);
						newArray19.set(this20.array);
						this20.array = newArray19;
					}
					this20.array[this20.pos++] = 0;
					var this21 = _this2.tmp;
					if(this21.pos == this21.array.length) {
						var newSize20 = this21.array.length << 1;
						if(newSize20 < 128) {
							newSize20 = 128;
						}
						var newArray20 = new Float32Array(newSize20);
						newArray20.set(this21.array);
						this21.array = newArray20;
					}
					this21.array[this21.pos++] = r2;
					var this22 = _this2.tmp;
					if(this22.pos == this22.array.length) {
						var newSize21 = this22.array.length << 1;
						if(newSize21 < 128) {
							newSize21 = 128;
						}
						var newArray21 = new Float32Array(newSize21);
						newArray21.set(this22.array);
						this22.array = newArray21;
					}
					this22.array[this22.pos++] = g2;
					var this23 = _this2.tmp;
					if(this23.pos == this23.array.length) {
						var newSize22 = this23.array.length << 1;
						if(newSize22 < 128) {
							newSize22 = 128;
						}
						var newArray22 = new Float32Array(newSize22);
						newArray22.set(this23.array);
						this23.array = newArray22;
					}
					this23.array[this23.pos++] = b2;
					var this24 = _this2.tmp;
					if(this24.pos == this24.array.length) {
						var newSize23 = this24.array.length << 1;
						if(newSize23 < 128) {
							newSize23 = 128;
						}
						var newArray23 = new Float32Array(newSize23);
						newArray23.set(this24.array);
						this24.array = newArray23;
					}
					this24.array[this24.pos++] = a2;
					var _this3 = this.content;
					var x3 = p.x - nnx;
					var y3 = p.y - nny;
					var r3 = p.r;
					var g3 = p.g;
					var b3 = p.b;
					var a3 = p.a;
					var this25 = _this3.tmp;
					if(this25.pos == this25.array.length) {
						var newSize24 = this25.array.length << 1;
						if(newSize24 < 128) {
							newSize24 = 128;
						}
						var newArray24 = new Float32Array(newSize24);
						newArray24.set(this25.array);
						this25.array = newArray24;
					}
					this25.array[this25.pos++] = x3;
					var this26 = _this3.tmp;
					if(this26.pos == this26.array.length) {
						var newSize25 = this26.array.length << 1;
						if(newSize25 < 128) {
							newSize25 = 128;
						}
						var newArray25 = new Float32Array(newSize25);
						newArray25.set(this26.array);
						this26.array = newArray25;
					}
					this26.array[this26.pos++] = y3;
					var this27 = _this3.tmp;
					if(this27.pos == this27.array.length) {
						var newSize26 = this27.array.length << 1;
						if(newSize26 < 128) {
							newSize26 = 128;
						}
						var newArray26 = new Float32Array(newSize26);
						newArray26.set(this27.array);
						this27.array = newArray26;
					}
					this27.array[this27.pos++] = 0;
					var this28 = _this3.tmp;
					if(this28.pos == this28.array.length) {
						var newSize27 = this28.array.length << 1;
						if(newSize27 < 128) {
							newSize27 = 128;
						}
						var newArray27 = new Float32Array(newSize27);
						newArray27.set(this28.array);
						this28.array = newArray27;
					}
					this28.array[this28.pos++] = 0;
					var this29 = _this3.tmp;
					if(this29.pos == this29.array.length) {
						var newSize28 = this29.array.length << 1;
						if(newSize28 < 128) {
							newSize28 = 128;
						}
						var newArray28 = new Float32Array(newSize28);
						newArray28.set(this29.array);
						this29.array = newArray28;
					}
					this29.array[this29.pos++] = r3;
					var this30 = _this3.tmp;
					if(this30.pos == this30.array.length) {
						var newSize29 = this30.array.length << 1;
						if(newSize29 < 128) {
							newSize29 = 128;
						}
						var newArray29 = new Float32Array(newSize29);
						newArray29.set(this30.array);
						this30.array = newArray29;
					}
					this30.array[this30.pos++] = g3;
					var this31 = _this3.tmp;
					if(this31.pos == this31.array.length) {
						var newSize30 = this31.array.length << 1;
						if(newSize30 < 128) {
							newSize30 = 128;
						}
						var newArray30 = new Float32Array(newSize30);
						newArray30.set(this31.array);
						this31.array = newArray30;
					}
					this31.array[this31.pos++] = b3;
					var this32 = _this3.tmp;
					if(this32.pos == this32.array.length) {
						var newSize31 = this32.array.length << 1;
						if(newSize31 < 128) {
							newSize31 = 128;
						}
						var newArray31 = new Float32Array(newSize31);
						newArray31.set(this32.array);
						this32.array = newArray31;
					}
					this32.array[this32.pos++] = a3;
					var _this4 = this.content;
					var x4 = p.x + nnx;
					var y4 = p.y + nny;
					var r4 = p.r;
					var g4 = p.g;
					var b4 = p.b;
					var a4 = p.a;
					var this33 = _this4.tmp;
					if(this33.pos == this33.array.length) {
						var newSize32 = this33.array.length << 1;
						if(newSize32 < 128) {
							newSize32 = 128;
						}
						var newArray32 = new Float32Array(newSize32);
						newArray32.set(this33.array);
						this33.array = newArray32;
					}
					this33.array[this33.pos++] = x4;
					var this34 = _this4.tmp;
					if(this34.pos == this34.array.length) {
						var newSize33 = this34.array.length << 1;
						if(newSize33 < 128) {
							newSize33 = 128;
						}
						var newArray33 = new Float32Array(newSize33);
						newArray33.set(this34.array);
						this34.array = newArray33;
					}
					this34.array[this34.pos++] = y4;
					var this35 = _this4.tmp;
					if(this35.pos == this35.array.length) {
						var newSize34 = this35.array.length << 1;
						if(newSize34 < 128) {
							newSize34 = 128;
						}
						var newArray34 = new Float32Array(newSize34);
						newArray34.set(this35.array);
						this35.array = newArray34;
					}
					this35.array[this35.pos++] = 0;
					var this36 = _this4.tmp;
					if(this36.pos == this36.array.length) {
						var newSize35 = this36.array.length << 1;
						if(newSize35 < 128) {
							newSize35 = 128;
						}
						var newArray35 = new Float32Array(newSize35);
						newArray35.set(this36.array);
						this36.array = newArray35;
					}
					this36.array[this36.pos++] = 0;
					var this37 = _this4.tmp;
					if(this37.pos == this37.array.length) {
						var newSize36 = this37.array.length << 1;
						if(newSize36 < 128) {
							newSize36 = 128;
						}
						var newArray36 = new Float32Array(newSize36);
						newArray36.set(this37.array);
						this37.array = newArray36;
					}
					this37.array[this37.pos++] = r4;
					var this38 = _this4.tmp;
					if(this38.pos == this38.array.length) {
						var newSize37 = this38.array.length << 1;
						if(newSize37 < 128) {
							newSize37 = 128;
						}
						var newArray37 = new Float32Array(newSize37);
						newArray37.set(this38.array);
						this38.array = newArray37;
					}
					this38.array[this38.pos++] = g4;
					var this39 = _this4.tmp;
					if(this39.pos == this39.array.length) {
						var newSize38 = this39.array.length << 1;
						if(newSize38 < 128) {
							newSize38 = 128;
						}
						var newArray38 = new Float32Array(newSize38);
						newArray38.set(this39.array);
						this39.array = newArray38;
					}
					this39.array[this39.pos++] = b4;
					var this40 = _this4.tmp;
					if(this40.pos == this40.array.length) {
						var newSize39 = this40.array.length << 1;
						if(newSize39 < 128) {
							newSize39 = 128;
						}
						var newArray39 = new Float32Array(newSize39);
						newArray39.set(this40.array);
						this40.array = newArray39;
					}
					this40.array[this40.pos++] = a4;
					this.content.index.push(this.pindex);
					this.content.index.push(pnext1);
					this.content.index.push(this.pindex + 2);
					this.content.index.push(this.pindex + 2);
					this.content.index.push(pnext1);
					this.content.index.push(pnext1 + 1);
				} else {
					var _this5 = this.content;
					var x5 = p.x + nnx;
					var y5 = p.y + nny;
					var r5 = p.r;
					var g5 = p.g;
					var b5 = p.b;
					var a5 = p.a;
					var this41 = _this5.tmp;
					if(this41.pos == this41.array.length) {
						var newSize40 = this41.array.length << 1;
						if(newSize40 < 128) {
							newSize40 = 128;
						}
						var newArray40 = new Float32Array(newSize40);
						newArray40.set(this41.array);
						this41.array = newArray40;
					}
					this41.array[this41.pos++] = x5;
					var this42 = _this5.tmp;
					if(this42.pos == this42.array.length) {
						var newSize41 = this42.array.length << 1;
						if(newSize41 < 128) {
							newSize41 = 128;
						}
						var newArray41 = new Float32Array(newSize41);
						newArray41.set(this42.array);
						this42.array = newArray41;
					}
					this42.array[this42.pos++] = y5;
					var this43 = _this5.tmp;
					if(this43.pos == this43.array.length) {
						var newSize42 = this43.array.length << 1;
						if(newSize42 < 128) {
							newSize42 = 128;
						}
						var newArray42 = new Float32Array(newSize42);
						newArray42.set(this43.array);
						this43.array = newArray42;
					}
					this43.array[this43.pos++] = 0;
					var this44 = _this5.tmp;
					if(this44.pos == this44.array.length) {
						var newSize43 = this44.array.length << 1;
						if(newSize43 < 128) {
							newSize43 = 128;
						}
						var newArray43 = new Float32Array(newSize43);
						newArray43.set(this44.array);
						this44.array = newArray43;
					}
					this44.array[this44.pos++] = 0;
					var this45 = _this5.tmp;
					if(this45.pos == this45.array.length) {
						var newSize44 = this45.array.length << 1;
						if(newSize44 < 128) {
							newSize44 = 128;
						}
						var newArray44 = new Float32Array(newSize44);
						newArray44.set(this45.array);
						this45.array = newArray44;
					}
					this45.array[this45.pos++] = r5;
					var this46 = _this5.tmp;
					if(this46.pos == this46.array.length) {
						var newSize45 = this46.array.length << 1;
						if(newSize45 < 128) {
							newSize45 = 128;
						}
						var newArray45 = new Float32Array(newSize45);
						newArray45.set(this46.array);
						this46.array = newArray45;
					}
					this46.array[this46.pos++] = g5;
					var this47 = _this5.tmp;
					if(this47.pos == this47.array.length) {
						var newSize46 = this47.array.length << 1;
						if(newSize46 < 128) {
							newSize46 = 128;
						}
						var newArray46 = new Float32Array(newSize46);
						newArray46.set(this47.array);
						this47.array = newArray46;
					}
					this47.array[this47.pos++] = b5;
					var this48 = _this5.tmp;
					if(this48.pos == this48.array.length) {
						var newSize47 = this48.array.length << 1;
						if(newSize47 < 128) {
							newSize47 = 128;
						}
						var newArray47 = new Float32Array(newSize47);
						newArray47.set(this48.array);
						this48.array = newArray47;
					}
					this48.array[this48.pos++] = a5;
					var _this6 = this.content;
					var x6 = p.x - nx;
					var y6 = p.y - ny;
					var r6 = p.r;
					var g6 = p.g;
					var b6 = p.b;
					var a6 = p.a;
					var this49 = _this6.tmp;
					if(this49.pos == this49.array.length) {
						var newSize48 = this49.array.length << 1;
						if(newSize48 < 128) {
							newSize48 = 128;
						}
						var newArray48 = new Float32Array(newSize48);
						newArray48.set(this49.array);
						this49.array = newArray48;
					}
					this49.array[this49.pos++] = x6;
					var this50 = _this6.tmp;
					if(this50.pos == this50.array.length) {
						var newSize49 = this50.array.length << 1;
						if(newSize49 < 128) {
							newSize49 = 128;
						}
						var newArray49 = new Float32Array(newSize49);
						newArray49.set(this50.array);
						this50.array = newArray49;
					}
					this50.array[this50.pos++] = y6;
					var this51 = _this6.tmp;
					if(this51.pos == this51.array.length) {
						var newSize50 = this51.array.length << 1;
						if(newSize50 < 128) {
							newSize50 = 128;
						}
						var newArray50 = new Float32Array(newSize50);
						newArray50.set(this51.array);
						this51.array = newArray50;
					}
					this51.array[this51.pos++] = 0;
					var this52 = _this6.tmp;
					if(this52.pos == this52.array.length) {
						var newSize51 = this52.array.length << 1;
						if(newSize51 < 128) {
							newSize51 = 128;
						}
						var newArray51 = new Float32Array(newSize51);
						newArray51.set(this52.array);
						this52.array = newArray51;
					}
					this52.array[this52.pos++] = 0;
					var this53 = _this6.tmp;
					if(this53.pos == this53.array.length) {
						var newSize52 = this53.array.length << 1;
						if(newSize52 < 128) {
							newSize52 = 128;
						}
						var newArray52 = new Float32Array(newSize52);
						newArray52.set(this53.array);
						this53.array = newArray52;
					}
					this53.array[this53.pos++] = r6;
					var this54 = _this6.tmp;
					if(this54.pos == this54.array.length) {
						var newSize53 = this54.array.length << 1;
						if(newSize53 < 128) {
							newSize53 = 128;
						}
						var newArray53 = new Float32Array(newSize53);
						newArray53.set(this54.array);
						this54.array = newArray53;
					}
					this54.array[this54.pos++] = g6;
					var this55 = _this6.tmp;
					if(this55.pos == this55.array.length) {
						var newSize54 = this55.array.length << 1;
						if(newSize54 < 128) {
							newSize54 = 128;
						}
						var newArray54 = new Float32Array(newSize54);
						newArray54.set(this55.array);
						this55.array = newArray54;
					}
					this55.array[this55.pos++] = b6;
					var this56 = _this6.tmp;
					if(this56.pos == this56.array.length) {
						var newSize55 = this56.array.length << 1;
						if(newSize55 < 128) {
							newSize55 = 128;
						}
						var newArray55 = new Float32Array(newSize55);
						newArray55.set(this56.array);
						this56.array = newArray55;
					}
					this56.array[this56.pos++] = a6;
					var _this7 = this.content;
					var x7 = p.x - nnx;
					var y7 = p.y - nny;
					var r7 = p.r;
					var g7 = p.g;
					var b7 = p.b;
					var a7 = p.a;
					var this57 = _this7.tmp;
					if(this57.pos == this57.array.length) {
						var newSize56 = this57.array.length << 1;
						if(newSize56 < 128) {
							newSize56 = 128;
						}
						var newArray56 = new Float32Array(newSize56);
						newArray56.set(this57.array);
						this57.array = newArray56;
					}
					this57.array[this57.pos++] = x7;
					var this58 = _this7.tmp;
					if(this58.pos == this58.array.length) {
						var newSize57 = this58.array.length << 1;
						if(newSize57 < 128) {
							newSize57 = 128;
						}
						var newArray57 = new Float32Array(newSize57);
						newArray57.set(this58.array);
						this58.array = newArray57;
					}
					this58.array[this58.pos++] = y7;
					var this59 = _this7.tmp;
					if(this59.pos == this59.array.length) {
						var newSize58 = this59.array.length << 1;
						if(newSize58 < 128) {
							newSize58 = 128;
						}
						var newArray58 = new Float32Array(newSize58);
						newArray58.set(this59.array);
						this59.array = newArray58;
					}
					this59.array[this59.pos++] = 0;
					var this60 = _this7.tmp;
					if(this60.pos == this60.array.length) {
						var newSize59 = this60.array.length << 1;
						if(newSize59 < 128) {
							newSize59 = 128;
						}
						var newArray59 = new Float32Array(newSize59);
						newArray59.set(this60.array);
						this60.array = newArray59;
					}
					this60.array[this60.pos++] = 0;
					var this61 = _this7.tmp;
					if(this61.pos == this61.array.length) {
						var newSize60 = this61.array.length << 1;
						if(newSize60 < 128) {
							newSize60 = 128;
						}
						var newArray60 = new Float32Array(newSize60);
						newArray60.set(this61.array);
						this61.array = newArray60;
					}
					this61.array[this61.pos++] = r7;
					var this62 = _this7.tmp;
					if(this62.pos == this62.array.length) {
						var newSize61 = this62.array.length << 1;
						if(newSize61 < 128) {
							newSize61 = 128;
						}
						var newArray61 = new Float32Array(newSize61);
						newArray61.set(this62.array);
						this62.array = newArray61;
					}
					this62.array[this62.pos++] = g7;
					var this63 = _this7.tmp;
					if(this63.pos == this63.array.length) {
						var newSize62 = this63.array.length << 1;
						if(newSize62 < 128) {
							newSize62 = 128;
						}
						var newArray62 = new Float32Array(newSize62);
						newArray62.set(this63.array);
						this63.array = newArray62;
					}
					this63.array[this63.pos++] = b7;
					var this64 = _this7.tmp;
					if(this64.pos == this64.array.length) {
						var newSize63 = this64.array.length << 1;
						if(newSize63 < 128) {
							newSize63 = 128;
						}
						var newArray63 = new Float32Array(newSize63);
						newArray63.set(this64.array);
						this64.array = newArray63;
					}
					this64.array[this64.pos++] = a7;
					this.content.index.push(this.pindex + 1);
					this.content.index.push(pnext1);
					this.content.index.push(this.pindex + 2);
					this.content.index.push(this.pindex + 1);
					this.content.index.push(pnext1);
					this.content.index.push(pnext1 + 1);
				}
				this.content.index.push(this.pindex);
				this.content.index.push(this.pindex + 1);
				this.content.index.push(this.pindex + 2);
				this.pindex += 3;
			}
			prev = p;
			p = next;
		}
	}
	,flushFill: function(i0) {
		if(this.tmpPoints.length < 3) {
			return;
		}
		var pts = this.tmpPoints;
		var p0 = pts[0];
		var p1 = pts[pts.length - 1];
		var last = null;
		var tmp;
		var f = p0.x - p1.x;
		if((f < 0 ? -f : f) < 1e-9) {
			var f1 = p0.y - p1.y;
			tmp = (f1 < 0 ? -f1 : f1) < 1e-9;
		} else {
			tmp = false;
		}
		if(tmp) {
			last = pts.pop();
		}
		if(this.isConvex(pts)) {
			var _g1 = 1;
			var _g = pts.length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				this.content.index.push(i0);
				this.content.index.push(i0 + i);
				this.content.index.push(i0 + i + 1);
			}
		} else {
			var ear = h2d_Graphics.EARCUT;
			if(ear == null) {
				ear = new hxd_earcut_Earcut();
				h2d_Graphics.EARCUT = ear;
			}
			var _g2 = 0;
			var _g11 = ear.triangulate_h2d__Graphics_GPoint(pts);
			while(_g2 < _g11.length) {
				var i1 = _g11[_g2];
				++_g2;
				this.content.index.push(i1 + i0);
			}
		}
		if(last != null) {
			pts.push(last);
		}
	}
	,flush: function() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.doFill) {
			this.flushFill(this.pindex);
			this.pindex += this.tmpPoints.length;
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		if(this.lineSize > 0) {
			this.flushLine(this.pindex);
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		this.tmpPoints = [];
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		this.flush();
		this.curA = alpha;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
		this.doFill = true;
	}
	,beginTileFill: function(dx,dy,scaleX,scaleY,tile) {
		this.beginFill(16777215);
		if(dx == null) {
			dx = 0;
		}
		if(dy == null) {
			dy = 0;
		}
		if(tile != null) {
			if(this.tile != null && tile.innerTex != this.tile.innerTex) {
				var tex = this.tile.innerTex;
				if(tex.width != 1 || tex.height != 1) {
					throw new js__$Boot_HaxeError("All tiles must be of the same texture");
				}
			}
			this.tile = tile;
		} else {
			tile = this.tile;
		}
		if(tile == null) {
			throw new js__$Boot_HaxeError("Tile not specified");
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		if(scaleY == null) {
			scaleY = 1;
		}
		dx -= tile.x;
		dy -= tile.y;
		var tex1 = tile.innerTex;
		var pixWidth = 1 / tex1.width;
		var pixHeight = 1 / tex1.height;
		this.ma = pixWidth / scaleX;
		this.mb = 0;
		this.mc = 0;
		this.md = pixHeight / scaleY;
		this.mx = -dx * this.ma;
		this.my = -dy * this.md;
	}
	,lineStyle: function(size,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		if(size == null) {
			size = 0;
		}
		this.flush();
		this.lineSize = size;
		this.lineA = alpha;
		this.lineR = (color >> 16 & 255) / 255.;
		this.lineG = (color >> 8 & 255) / 255.;
		this.lineB = (color & 255) / 255.;
	}
	,moveTo: function(x,y) {
		this.flush();
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
	}
	,endFill: function() {
		this.flush();
		this.doFill = false;
	}
	,setColor: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.curA = alpha;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
	}
	,drawRect: function(x,y,w,h) {
		this.flush();
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		var x1 = x + w;
		this.addVertex(x1,y,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y * this.mc + this.mx,x1 * this.mb + y * this.md + this.my);
		var x2 = x + w;
		var y1 = y + h;
		this.addVertex(x2,y1,this.curR,this.curG,this.curB,this.curA,x2 * this.ma + y1 * this.mc + this.mx,x2 * this.mb + y1 * this.md + this.my);
		var y2 = y + h;
		this.addVertex(x,y2,this.curR,this.curG,this.curB,this.curA,x * this.ma + y2 * this.mc + this.mx,x * this.mb + y2 * this.md + this.my);
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		this.flush();
	}
	,drawCircle: function(cx,cy,ray,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		this.flush();
		if(nsegments == 0) {
			nsegments = Math.ceil(ray * 3.14 * 2 / 4);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = 6.28318530717958623 / nsegments;
		var _g1 = 0;
		var _g = nsegments + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var a = i * angle;
			var x = cx + Math.cos(a) * ray;
			var y = cy + Math.sin(a) * ray;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.flush();
	}
	,drawPie: function(cx,cy,ray,angleStart,angleLength,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		this.flush();
		this.addVertex(cx,cy,this.curR,this.curG,this.curB,this.curA,cx * this.ma + cy * this.mc + this.mx,cx * this.mb + cy * this.md + this.my);
		if(nsegments == 0) {
			var f = ray * angleLength / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = angleLength / (nsegments - 1);
		var _g1 = 0;
		var _g = nsegments;
		while(_g1 < _g) {
			var i = _g1++;
			var a = i * angle + angleStart;
			var x = cx + Math.cos(a) * ray;
			var y = cy + Math.sin(a) * ray;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.addVertex(cx,cy,this.curR,this.curG,this.curB,this.curA,cx * this.ma + cy * this.mc + this.mx,cx * this.mb + cy * this.md + this.my);
		this.flush();
	}
	,lineTo: function(x,y) {
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
	}
	,addVertex: function(x,y,r,g,b,a,u,v) {
		if(v == null) {
			v = 0.;
		}
		if(u == null) {
			u = 0.;
		}
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		if(this.doFill) {
			var _this = this.content;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = x;
			var this2 = _this.tmp;
			if(this2.pos == this2.array.length) {
				var newSize1 = this2.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(this2.array);
				this2.array = newArray1;
			}
			this2.array[this2.pos++] = y;
			var this3 = _this.tmp;
			if(this3.pos == this3.array.length) {
				var newSize2 = this3.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(this3.array);
				this3.array = newArray2;
			}
			this3.array[this3.pos++] = u;
			var this4 = _this.tmp;
			if(this4.pos == this4.array.length) {
				var newSize3 = this4.array.length << 1;
				if(newSize3 < 128) {
					newSize3 = 128;
				}
				var newArray3 = new Float32Array(newSize3);
				newArray3.set(this4.array);
				this4.array = newArray3;
			}
			this4.array[this4.pos++] = v;
			var this5 = _this.tmp;
			if(this5.pos == this5.array.length) {
				var newSize4 = this5.array.length << 1;
				if(newSize4 < 128) {
					newSize4 = 128;
				}
				var newArray4 = new Float32Array(newSize4);
				newArray4.set(this5.array);
				this5.array = newArray4;
			}
			this5.array[this5.pos++] = r;
			var this6 = _this.tmp;
			if(this6.pos == this6.array.length) {
				var newSize5 = this6.array.length << 1;
				if(newSize5 < 128) {
					newSize5 = 128;
				}
				var newArray5 = new Float32Array(newSize5);
				newArray5.set(this6.array);
				this6.array = newArray5;
			}
			this6.array[this6.pos++] = g;
			var this7 = _this.tmp;
			if(this7.pos == this7.array.length) {
				var newSize6 = this7.array.length << 1;
				if(newSize6 < 128) {
					newSize6 = 128;
				}
				var newArray6 = new Float32Array(newSize6);
				newArray6.set(this7.array);
				this7.array = newArray6;
			}
			this7.array[this7.pos++] = b;
			var this8 = _this.tmp;
			if(this8.pos == this8.array.length) {
				var newSize7 = this8.array.length << 1;
				if(newSize7 < 128) {
					newSize7 = 128;
				}
				var newArray7 = new Float32Array(newSize7);
				newArray7.set(this8.array);
				this8.array = newArray7;
			}
			this8.array[this8.pos++] = a;
		}
		this.tmpPoints.push(new h2d__$Graphics_GPoint(x,y,this.lineR,this.lineG,this.lineB,this.lineA));
	}
	,draw: function(ctx) {
		if(!ctx.beginDrawObject(this,this.tile.innerTex)) {
			return;
		}
		this.content.render(ctx.engine);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		this.flush();
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.isDisposed()) {
			_this.alloc(h3d_Engine.CURRENT);
		}
	}
	,__class__: h2d_Graphics
});
var hxd_Interactive = function() { };
$hxClasses["hxd.Interactive"] = hxd_Interactive;
hxd_Interactive.__name__ = ["hxd","Interactive"];
hxd_Interactive.prototype = {
	__class__: hxd_Interactive
};
var h2d_Interactive = function(width,height,parent) {
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h2d_Drawable.call(this,parent);
	this.width = width;
	this.height = height;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h2d.Interactive"] = h2d_Interactive;
h2d_Interactive.__name__ = ["h2d","Interactive"];
h2d_Interactive.__interfaces__ = [hxd_Interactive];
h2d_Interactive.__super__ = h2d_Drawable;
h2d_Interactive.prototype = $extend(h2d_Drawable.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		this.updateMask();
		h2d_Drawable.prototype.onAdd.call(this);
	}
	,draw: function(ctx) {
		if(this.backgroundColor != null) {
			this.emitTile(ctx,h2d_Tile.fromColor(this.backgroundColor,this.width | 0,this.height | 0,(this.backgroundColor >>> 24) / 255));
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.backgroundColor != null || forSize) {
			this.addBounds(relativeTo,out,0,0,this.width | 0,this.height | 0);
		}
	}
	,onParentChanged: function() {
		h2d_Drawable.prototype.onParentChanged.call(this);
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene.addEventTarget(this);
		}
		this.updateMask();
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = (p instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this,true);
			this.scene = null;
		}
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,checkBounds: function(e) {
		var _g = e.kind;
		switch(_g[1]) {
		case 4:case 6:case 7:case 10:
			return false;
		default:
			return true;
		}
	}
	,preventClick: function() {
		this.mouseDownButton = -1;
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.parentMask != null && this.checkBounds(e)) {
			var p = this.parentMask;
			var pt = new h2d_col_Point(e.relX,e.relY);
			this.localToGlobal(pt);
			var saveX = pt.x;
			var saveY = pt.y;
			while(p != null) {
				pt.x = saveX;
				pt.y = saveY;
				var pt1 = p.globalToLocal(pt);
				if(pt1.x < 0 || pt1.y < 0 || pt1.x > p.width || pt1.y > p.height) {
					e.cancel = true;
					return;
				}
				p = p.parentMask;
			}
		}
		if(this.isEllipse && this.checkBounds(e)) {
			var cx = this.width * 0.5;
			var cy = this.height * 0.5;
			var dx = (e.relX - cx) / cx;
			var dy = (e.relY - cy) / cy;
			if(dx * dx + dy * dy > 1) {
				e.cancel = true;
				return;
			}
		}
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		var _g = e.kind;
		switch(_g[1]) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			if(!e.cancel && this.cursor != null) {
				hxd_System.setCursor(this.cursor);
			}
			break;
		case 4:
			this.mouseDownButton = -1;
			this.onOut(e);
			if(!e.cancel) {
				hxd_System.setCursor(hxd_Cursor.Default);
			}
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				e.kind = hxd_EventKind.ERelease;
				this.onRelease(e);
				e.kind = hxd_EventKind.EReleaseOutside;
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.isOver() && this.cursor != null) {
			hxd_System.setCursor(this.cursor);
		}
		return c;
	}
	,eventToLocal: function(e) {
		var rx = e.relX;
		var ry = e.relY;
		var i = this;
		var dx = rx - i.absX;
		var dy = ry - i.absY;
		var w1 = i.width * i.matA;
		var h1 = i.width * i.matC;
		var ky = h1 * dx - w1 * dy;
		var w2 = i.height * i.matB;
		var h2 = i.height * i.matD;
		var kx = w2 * dy - h2 * dx;
		var max = h1 * w2 - w1 * h2;
		e.relX = kx / max * i.width;
		e.relY = ky / max * i.height;
	}
	,startDrag: function(callb,onCancel) {
		var _gthis = this;
		this.scene.startDrag(function(event) {
			var x = event.relX;
			var y = event.relY;
			_gthis.eventToLocal(event);
			callb(event);
			event.relX = x;
			event.relY = y;
		},onCancel);
	}
	,stopDrag: function() {
		this.scene.stopDrag();
	}
	,focus: function() {
		if(this.scene == null || this.scene.events == null) {
			return;
		}
		this.scene.events.focus(this);
	}
	,blur: function() {
		if(this.hasFocus()) {
			this.scene.events.blur();
		}
	}
	,isOver: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentOver == this;
		} else {
			return false;
		}
	}
	,hasFocus: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentFocus == this;
		} else {
			return false;
		}
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h2d_Interactive
});
var h2d_Layers = function(parent) {
	h2d_Sprite.call(this,parent);
	this.layersIndexes = [];
	this.layerCount = 0;
};
$hxClasses["h2d.Layers"] = h2d_Layers;
h2d_Layers.__name__ = ["h2d","Layers"];
h2d_Layers.__super__ = h2d_Sprite;
h2d_Layers.prototype = $extend(h2d_Sprite.prototype,{
	addChild: function(s) {
		this.addChildAt(s,0);
	}
	,add: function(s,layer) {
		this.addChildAt(s,layer);
		return;
	}
	,addChildAt: function(s,layer) {
		if(s.parent == this) {
			var old = s.allocated;
			s.allocated = false;
			this.removeChild(s);
			s.allocated = old;
		}
		while(layer >= this.layerCount) this.layersIndexes[this.layerCount++] = this.children.length;
		h2d_Sprite.prototype.addChildAt.call(this,s,this.layersIndexes[layer]);
		var _g1 = layer;
		var _g = this.layerCount;
		while(_g1 < _g) {
			var i = _g1++;
			this.layersIndexes[i]++;
		}
	}
	,removeChild: function(s) {
		var _g1 = 0;
		var _g = this.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.children[i] == s) {
				this.children.splice(i,1);
				if(s.allocated) {
					s.onRemove();
				}
				s.parent = null;
				var k = this.layerCount - 1;
				while(k >= 0 && this.layersIndexes[k] > i) {
					this.layersIndexes[k]--;
					--k;
				}
				break;
			}
		}
	}
	,under: function(s) {
		var _g1 = 0;
		var _g = this.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.children[i] == s) {
				var pos = 0;
				var _g2 = 0;
				var _g3 = this.layersIndexes;
				while(_g2 < _g3.length) {
					var l = _g3[_g2];
					++_g2;
					if(l > i) {
						break;
					} else {
						pos = l;
					}
				}
				var p = i;
				while(p > pos) {
					this.children[p] = this.children[p - 1];
					--p;
				}
				this.children[pos] = s;
				break;
			}
		}
	}
	,over: function(s) {
		var _g1 = 0;
		var _g = this.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.children[i] == s) {
				var _g2 = 0;
				var _g3 = this.layersIndexes;
				while(_g2 < _g3.length) {
					var l = _g3[_g2];
					++_g2;
					if(l > i) {
						var _g5 = i;
						var _g4 = l - 1;
						while(_g5 < _g4) {
							var p = _g5++;
							this.children[p] = this.children[p + 1];
						}
						this.children[l - 1] = s;
						break;
					}
				}
				break;
			}
		}
	}
	,getLayer: function(layer) {
		var a;
		if(layer >= this.layerCount) {
			a = [];
		} else {
			var start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
			var max = this.layersIndexes[layer];
			a = this.children.slice(start,max);
		}
		return new hxd_impl_ArrayIterator_$h2d_$Sprite(a);
	}
	,ysort: function(layer) {
		if(layer >= this.layerCount) {
			return;
		}
		var start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
		var max = this.layersIndexes[layer];
		if(start == max) {
			return;
		}
		var pos = start;
		var ymax = this.children[pos++].y;
		while(pos < max) {
			var c = this.children[pos];
			if(c.y < ymax) {
				var p = pos - 1;
				while(p >= start) {
					var c2 = this.children[p];
					if(c.y >= c2.y) {
						break;
					}
					this.children[p + 1] = c2;
					--p;
				}
				this.children[p + 1] = c;
			} else {
				ymax = c.y;
			}
			++pos;
		}
	}
	,__class__: h2d_Layers
});
var h2d_Mask = function(width,height,parent) {
	h2d_Sprite.call(this,parent);
	this.width = width;
	this.height = height;
};
$hxClasses["h2d.Mask"] = h2d_Mask;
h2d_Mask.__name__ = ["h2d","Mask"];
h2d_Mask.__super__ = h2d_Sprite;
h2d_Mask.prototype = $extend(h2d_Sprite.prototype,{
	onParentChanged: function() {
		h2d_Sprite.prototype.onParentChanged.call(this);
		this.updateMask();
	}
	,onAdd: function() {
		h2d_Sprite.prototype.onAdd.call(this);
		this.updateMask();
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = (p instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		var xMin = out.xMin;
		var yMin = out.yMin;
		var xMax = out.xMax;
		var yMax = out.yMax;
		out.xMin = 1e20;
		out.yMin = 1e20;
		out.xMax = -1e20;
		out.yMax = -1e20;
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		this.addBounds(relativeTo,out,0,0,this.width,this.height);
		var bxMin = out.xMin;
		var byMin = out.yMin;
		var bxMax = out.xMax;
		var byMax = out.yMax;
		out.xMin = xMin;
		out.xMax = xMax;
		out.yMin = yMin;
		out.yMax = yMax;
		h2d_Sprite.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(out.xMin < bxMin) {
			out.xMin = xMin > bxMin ? bxMin : xMin;
		}
		if(out.yMin < byMin) {
			out.yMin = yMin > byMin ? byMin : yMin;
		}
		if(out.xMax > bxMax) {
			out.xMax = xMax < bxMax ? bxMax : xMax;
		}
		if(out.yMax > byMax) {
			out.yMax = yMax < byMax ? byMax : yMax;
		}
	}
	,drawRec: function(ctx) {
		var x1 = this.absX;
		var y1 = this.absY;
		var x2 = this.width * this.matA + this.height * this.matC + this.absX;
		var y2 = this.width * this.matB + this.height * this.matD + this.absY;
		if(ctx.hasRenderZone) {
			var oldX = ctx.renderX;
			var oldY = ctx.renderY;
			var oldW = ctx.renderW;
			var oldH = ctx.renderH;
			ctx.setRenderZone(x1,y1,x2 - x1,y2 - y1);
			h2d_Sprite.prototype.drawRec.call(this,ctx);
			ctx.setRenderZone(oldX,oldY,oldW,oldH);
		} else {
			ctx.setRenderZone(x1,y1,x2 - x1,y2 - y1);
			h2d_Sprite.prototype.drawRec.call(this,ctx);
			ctx.hasRenderZone = false;
			ctx.engine.setRenderZone();
		}
	}
	,__class__: h2d_Mask
});
var h3d_impl_RenderContext = function() {
	this.engine = h3d_Engine.CURRENT;
	this.frame = 0;
	this.time = 0.;
	this.elapsedTime = 1. / hxd_System.getDefaultFrameRate();
};
$hxClasses["h3d.impl.RenderContext"] = h3d_impl_RenderContext;
h3d_impl_RenderContext.__name__ = ["h3d","impl","RenderContext"];
h3d_impl_RenderContext.prototype = {
	__class__: h3d_impl_RenderContext
};
var h2d_RenderContext = function(scene) {
	this.tmpBounds = new h2d_col_Bounds();
	this.defaultSmooth = false;
	this.globalAlpha = 1.;
	h3d_impl_RenderContext.call(this);
	this.scene = scene;
	this.bufPos = 0;
	this.manager = new h3d_pass_ShaderManager();
	this.pass = new h3d_mat_Pass("",null);
	this.pass.depth(true,h3d_mat_Compare.Always);
	this.pass.set_culling(h3d_mat_Face.None);
	this.baseShader = new h3d_shader_Base2d();
	this.baseShader.priority = 100;
	this.baseShader.zValue__ = 0.;
	this.baseShaderList = new hxsl_ShaderList(this.baseShader);
	this.targetsStack = [];
	this.filterStack = [];
	this.textures = new h3d_impl_TextureCache();
};
$hxClasses["h2d.RenderContext"] = h2d_RenderContext;
h2d_RenderContext.__name__ = ["h2d","RenderContext"];
h2d_RenderContext.__super__ = h3d_impl_RenderContext;
h2d_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	dispose: function() {
		this.textures.dispose();
		if(this.fixedBuffer != null) {
			this.fixedBuffer.dispose();
		}
	}
	,hasBuffering: function() {
		return false;
	}
	,begin: function() {
		this.texture = null;
		this.currentObj = null;
		this.bufPos = 0;
		this.stride = 0;
		this.curX = 0;
		this.curY = 0;
		this.inFilter = null;
		this.curWidth = this.scene.width;
		this.curHeight = this.scene.height;
		this.manager.globals.set("time",this.time);
		var _this = this.baseShader;
		_this.constModified = true;
		_this.pixelAlign__ = false;
		var _this1 = this.baseShader.halfPixelInverse__;
		_this1.x = 0.5 / this.engine.width;
		_this1.y = 0.5 / this.engine.height;
		_this1.z = 0.;
		_this1.w = 1.;
		var _this2 = this.baseShader.viewport__;
		_this2.x = -this.scene.width * 0.5;
		_this2.y = -this.scene.height * 0.5;
		_this2.z = 2 / this.scene.width;
		_this2.w = -2 / this.scene.height;
		var _this3 = this.baseShader.filterMatrixA__;
		_this3.x = 1;
		_this3.y = 0;
		_this3.z = 0;
		_this3.w = 1.;
		var _this4 = this.baseShader.filterMatrixB__;
		_this4.x = 0;
		_this4.y = 1;
		_this4.z = 0;
		_this4.w = 1.;
		this.baseShaderList.next = null;
		this.initShaders(this.baseShaderList);
		this.engine.selectMaterial(this.pass);
		this.textures.begin(this);
	}
	,allocTarget: function(name,filter,size) {
		if(size == null) {
			size = 0;
		}
		if(filter == null) {
			filter = false;
		}
		var t = this.textures.allocTarget(name,this,this.scene.width >> size,this.scene.height >> size,false);
		t.set_filter(filter ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		return t;
	}
	,clear: function(color) {
		this.engine.clear(color);
	}
	,initShaders: function(shaders) {
		this.currentShaders = shaders;
		this.compiledShader = this.manager.compileShaders(shaders);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(this.compiledShader);
		} else {
			var _this = this.buffers;
			var s = this.compiledShader;
			_this.vertex.grow(s.vertex);
			_this.fragment.grow(s.fragment);
		}
		this.manager.fillGlobals(this.buffers,this.compiledShader);
		this.engine.selectShader(this.compiledShader);
		this.engine.uploadShaderBuffers(this.buffers,0);
	}
	,end: function() {
		this.texture = null;
		this.currentObj = null;
		this.baseShaderList.next = null;
		if(this.targetsStack.length != 0) {
			throw new js__$Boot_HaxeError("Missing popTarget()");
		}
	}
	,pushFilter: function(spr) {
		if(this.filterStack.length == 0 && this.onEnterFilter != null) {
			if(!this.onEnterFilter(spr)) {
				return false;
			}
		}
		this.filterStack.push(spr);
		this.inFilter = spr;
		return true;
	}
	,popFilter: function() {
		var spr = this.filterStack.pop();
		if(this.filterStack.length > 0) {
			this.inFilter = this.filterStack[this.filterStack.length - 1];
		} else {
			this.inFilter = null;
			if(this.onLeaveFilter != null) {
				this.onLeaveFilter(spr);
			}
		}
	}
	,pushTarget: function(t,startX,startY,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		this.engine.pushTarget(t);
		this.initShaders(this.baseShaderList);
		if(width < 0) {
			if(t == null) {
				width = this.scene.width;
			} else {
				width = t.width;
			}
		}
		if(height < 0) {
			if(t == null) {
				height = this.scene.height;
			} else {
				height = t.height;
			}
		}
		var _this = this.baseShader.halfPixelInverse__;
		_this.x = 0.5 / (t == null ? this.engine.width : t.width);
		_this.y = 0.5 / (t == null ? this.engine.height : t.height);
		_this.z = 0.;
		_this.w = 1.;
		var _this1 = this.baseShader.viewport__;
		_this1.x = -width * 0.5 - startX;
		_this1.y = -height * 0.5 - startY;
		_this1.z = 2 / width;
		_this1.w = -2 / height;
		this.targetsStack.push({ t : t, x : startX, y : startY, w : width, h : height, renderZone : this.hasRenderZone ? { x : this.renderX, y : this.renderY, w : this.renderW, h : this.renderH} : null});
		this.curX = startX;
		this.curY = startY;
		this.curWidth = width;
		this.curHeight = height;
		if(this.hasRenderZone) {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,popTarget: function(restore) {
		if(restore == null) {
			restore = true;
		}
		var pinf = this.targetsStack.pop();
		if(pinf == null) {
			throw new js__$Boot_HaxeError("Too many popTarget()");
		}
		this.engine.popTarget();
		if(restore) {
			var tinf = this.targetsStack[this.targetsStack.length - 1];
			var t = tinf == null ? null : tinf.t;
			var startX = tinf == null ? 0 : tinf.x;
			var startY = tinf == null ? 0 : tinf.y;
			var width = tinf == null ? this.scene.width : tinf.w;
			var height = tinf == null ? this.scene.height : tinf.h;
			this.initShaders(this.baseShaderList);
			var _this = this.baseShader.halfPixelInverse__;
			_this.x = 0.5 / (t == null ? this.engine.width : t.width);
			_this.y = 0.5 / (t == null ? this.engine.height : t.height);
			_this.z = 0.;
			_this.w = 1.;
			var _this1 = this.baseShader.viewport__;
			_this1.x = -width * 0.5 - startX;
			_this1.y = -height * 0.5 - startY;
			_this1.z = 2 / width;
			_this1.w = -2 / height;
			this.curX = startX;
			this.curY = startY;
			this.curWidth = width;
			this.curHeight = height;
		}
		var rz = pinf.renderZone;
		if(rz != null) {
			this.setRenderZone(rz.x,rz.y,rz.w,rz.h);
		}
	}
	,setRenderZone: function(x,y,w,h) {
		this.hasRenderZone = true;
		this.renderX = x;
		this.renderY = y;
		this.renderW = w;
		this.renderH = h;
		var scaleX = this.engine.width / this.scene.width;
		var scaleY = this.engine.height / this.scene.height;
		if(this.inFilter != null) {
			var fa = this.baseShader.filterMatrixA__;
			var fb = this.baseShader.filterMatrixB__;
			var x2 = x + w;
			var y2 = y + h;
			var rx1 = x * fa.x + y * fa.y + fa.z;
			var ry1 = x * fb.x + y * fb.y + fb.z;
			var rx2 = x2 * fa.x + y2 * fa.y + fa.z;
			var ry2 = x2 * fb.x + y2 * fb.y + fb.z;
			x = rx1;
			y = ry1;
			w = rx2 - rx1;
			h = ry2 - ry1;
		}
		this.engine.setRenderZone((x - this.curX) * scaleX + 1e-10 | 0,(y - this.curY) * scaleY + 1e-10 | 0,w * scaleX + 1e-10 | 0,h * scaleY + 1e-10 | 0);
	}
	,clearRenderZone: function() {
		this.hasRenderZone = false;
		this.engine.setRenderZone();
	}
	,drawScene: function() {
		this.scene.drawRec(this);
	}
	,flush: function() {
	}
	,_flush: function() {
		if(this.bufPos == 0) {
			return;
		}
		this.beforeDraw();
		var nverts = this.bufPos / this.stride | 0;
		var tmp = new h3d_Buffer(nverts,this.stride,[h3d_BufferFlag.Quads,h3d_BufferFlag.Dynamic,h3d_BufferFlag.RawFormat]);
		tmp.uploadVector(this.buffer,0,nverts);
		var _this = this.engine;
		_this.renderBuffer(tmp,_this.mem.quadIndexes,2,0,-1);
		tmp.dispose();
		this.bufPos = 0;
		this.texture = null;
	}
	,beforeDraw: function() {
		if(this.texture == null) {
			this.texture = h3d_mat_Texture.fromColor(16711935);
		}
		this.baseShader.texture__ = this.texture;
		this.texture.set_filter((this.currentObj.smooth == null ? this.defaultSmooth : this.currentObj.smooth) ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		this.texture.set_wrap(this.currentObj.tileWrap ? h3d_mat_Wrap.Repeat : h3d_mat_Wrap.Clamp);
		var blend = this.currentObj.blendMode;
		if(this.inFilter == this.currentObj && blend == h2d_BlendMode.Erase) {
			blend = h2d_BlendMode.Add;
		}
		this.pass.setBlendMode(blend);
		this.manager.fillParams(this.buffers,this.compiledShader,this.currentShaders);
		this.engine.selectMaterial(this.pass);
		this.engine.uploadShaderBuffers(this.buffers,1);
		this.engine.uploadShaderBuffers(this.buffers,2);
	}
	,beginDrawObject: function(obj,texture) {
		if(!this.beginDraw(obj,texture,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			_this.x = 1;
			_this.y = 1;
			_this.z = 1;
			_this.w = 1;
		} else {
			var _this1 = this.baseShader.color__;
			_this1.x = obj.color.x;
			_this1.y = obj.color.y;
			_this1.z = obj.color.z;
			_this1.w = obj.color.w * this.globalAlpha;
		}
		var _this2 = this.baseShader.absoluteMatrixA__;
		_this2.x = obj.matA;
		_this2.y = obj.matC;
		_this2.z = obj.absX;
		_this2.w = 1.;
		var _this3 = this.baseShader.absoluteMatrixB__;
		_this3.x = obj.matB;
		_this3.y = obj.matD;
		_this3.z = obj.absY;
		_this3.w = 1.;
		this.beforeDraw();
		return true;
	}
	,beginDrawBatch: function(obj,texture) {
		return this.beginDraw(obj,texture,false);
	}
	,drawTile: function(obj,tile) {
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(this.inFilter != null) {
			var f1 = this.baseShader.filterMatrixA__;
			var f2 = this.baseShader.filterMatrixB__;
			matA = obj.matA * f1.x + obj.matB * f1.y;
			matB = obj.matA * f2.x + obj.matB * f2.y;
			matC = obj.matC * f1.x + obj.matD * f1.y;
			matD = obj.matC * f2.x + obj.matD * f2.y;
			absX = obj.absX * f1.x + obj.absY * f1.y + f1.z;
			absY = obj.absX * f2.x + obj.absY * f2.y + f2.z;
		} else {
			matA = obj.matA;
			matB = obj.matB;
			matC = obj.matC;
			matD = obj.matD;
			absX = obj.absX;
			absY = obj.absY;
		}
		if(matB == 0 && matC == 0) {
			var tx = tile.dx + tile.width * 0.5;
			var ty = tile.dy + tile.height * 0.5;
			var f = obj.matA;
			var a = f < 0 ? -f : f;
			var f3 = obj.matD;
			var b = f3 < 0 ? -f3 : f3;
			var tr = (tile.width > tile.height ? tile.width : tile.height) * 1.5 * (a < b ? b : a);
			var cx = absX + tx * matA - this.curX;
			var cy = absY + ty * matD - this.curY;
			if(cx < -tr || cy < -tr || cx - tr > this.curWidth || cy - tr > this.curHeight) {
				return false;
			}
		} else {
			var xMin = 1e20;
			var yMin = 1e20;
			var xMax = -1e20;
			var yMax = -1e20;
			var hw = tile.width * 0.5;
			var hh = tile.height * 0.5;
			var px = tile.dx * matA + tile.dy * matC;
			var py = tile.dx * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var px1 = (x + tile.dx) * matA + tile.dy * matC;
			var py1 = (x + tile.dx) * matB + tile.dy * matD;
			if(px1 < xMin) {
				xMin = px1;
			}
			if(px1 > xMax) {
				xMax = px1;
			}
			if(py1 < yMin) {
				yMin = py1;
			}
			if(py1 > yMax) {
				yMax = py1;
			}
			var y = tile.height;
			var px2 = tile.dx * matA + (y + tile.dy) * matC;
			var py2 = tile.dx * matB + (y + tile.dy) * matD;
			if(px2 < xMin) {
				xMin = px2;
			}
			if(px2 > xMax) {
				xMax = px2;
			}
			if(py2 < yMin) {
				yMin = py2;
			}
			if(py2 > yMax) {
				yMax = py2;
			}
			var x1 = tile.width;
			var y1 = tile.height;
			var px3 = (x1 + tile.dx) * matA + (y1 + tile.dy) * matC;
			var py3 = (x1 + tile.dx) * matB + (y1 + tile.dy) * matD;
			if(px3 < xMin) {
				xMin = px3;
			}
			if(px3 > xMax) {
				xMax = px3;
			}
			if(py3 < yMin) {
				yMin = py3;
			}
			if(py3 > yMax) {
				yMax = py3;
			}
			var cx1 = absX - this.curX;
			var cy1 = absY - this.curY;
			if(cx1 + xMax < 0 || cy1 + yMax < 0 || cx1 + xMin > this.curWidth || cy1 + yMin > this.curHeight) {
				return false;
			}
		}
		if(!this.beginDraw(obj,tile.innerTex,true,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			_this.x = 1;
			_this.y = 1;
			_this.z = 1;
			_this.w = 1;
		} else {
			var _this1 = this.baseShader.color__;
			_this1.x = obj.color.x;
			_this1.y = obj.color.y;
			_this1.z = obj.color.z;
			_this1.w = obj.color.w * this.globalAlpha;
		}
		var _this2 = this.baseShader.absoluteMatrixA__;
		_this2.x = tile.width * obj.matA;
		_this2.y = tile.height * obj.matC;
		_this2.z = obj.absX + tile.dx * obj.matA + tile.dy * obj.matC;
		_this2.w = 1.;
		var _this3 = this.baseShader.absoluteMatrixB__;
		_this3.x = tile.width * obj.matB;
		_this3.y = tile.height * obj.matD;
		_this3.z = obj.absY + tile.dx * obj.matB + tile.dy * obj.matD;
		_this3.w = 1.;
		var _this4 = this.baseShader.uvPos__;
		_this4.x = tile.u;
		_this4.y = tile.v;
		_this4.z = tile.u2 - tile.u;
		_this4.w = tile.v2 - tile.v;
		this.beforeDraw();
		if(this.fixedBuffer == null || this.fixedBuffer.isDisposed()) {
			this.fixedBuffer = new h3d_Buffer(4,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
			var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
			var k = this1;
			var _g = 0;
			var _g1 = [0,0,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1];
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(k.pos == k.array.length) {
					var newSize = k.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(k.array);
					k.array = newArray;
				}
				k.array[k.pos++] = v;
			}
			this.fixedBuffer.uploadVector(k,0,4);
		}
		var _this5 = this.engine;
		_this5.renderBuffer(this.fixedBuffer,_this5.mem.quadIndexes,2,0,-1);
		return true;
	}
	,beginDraw: function(obj,texture,isRelative,hasUVPos) {
		if(hasUVPos == null) {
			hasUVPos = false;
		}
		if(this.onBeginDraw != null && !this.onBeginDraw(obj)) {
			return false;
		}
		var stride = 8;
		var shaderChanged = false;
		var paramsChanged = false;
		var objShaders = obj.shaders;
		var curShaders = this.currentShaders.next;
		while(objShaders != null && curShaders != null) {
			var s = objShaders.s;
			var t = curShaders.s;
			objShaders = objShaders.next;
			curShaders = curShaders.next;
			var prevInst = t.instance;
			if(s != t) {
				paramsChanged = true;
			}
			s.updateConstants(this.manager.globals);
			if(s.instance != prevInst) {
				shaderChanged = true;
			}
		}
		if(objShaders != null || curShaders != null || this.baseShader.isRelative__ != isRelative || this.baseShader.hasUVPos__ != hasUVPos || this.baseShader.killAlpha__ != this.killAlpha) {
			shaderChanged = true;
		}
		if(shaderChanged) {
			var _this = this.baseShader;
			_this.constModified = true;
			_this.hasUVPos__ = hasUVPos;
			var _this1 = this.baseShader;
			_this1.constModified = true;
			_this1.isRelative__ = isRelative;
			var _this2 = this.baseShader;
			_this2.constModified = true;
			_this2.killAlpha__ = this.killAlpha;
			this.baseShader.updateConstants(this.manager.globals);
			this.baseShaderList.next = obj.shaders;
			this.initShaders(this.baseShaderList);
		} else if(paramsChanged) {
			if(this.currentShaders != this.baseShaderList) {
				throw new js__$Boot_HaxeError("!");
			}
			this.currentShaders.next = obj.shaders;
		}
		this.texture = texture;
		this.stride = stride;
		this.currentObj = obj;
		return true;
	}
	,__class__: h2d_RenderContext
});
var h2d_TileGroup = function(t,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.rangeMin = this.rangeMax = -1;
	this.curColor = new h3d_Vector(1,1,1,1);
	this.content = new h2d__$TileGroup_TileLayerContent();
};
$hxClasses["h2d.TileGroup"] = h2d_TileGroup;
h2d_TileGroup.__name__ = ["h2d","TileGroup"];
h2d_TileGroup.__super__ = h2d_Drawable;
h2d_TileGroup.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		this.addBounds(relativeTo,out,this.content.xMin,this.content.yMin,this.content.xMax - this.content.xMin,this.content.yMax - this.content.yMin);
	}
	,clear: function() {
		this.content.clear();
	}
	,invalidate: function() {
		this.content.dispose();
	}
	,count: function() {
		return this.content.triCount() >> 1;
	}
	,onRemove: function() {
		this.content.dispose();
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,setDefaultColor: function(rgb,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
		this.curColor.x = (rgb >> 16 & 255) / 255;
		this.curColor.y = (rgb >> 8 & 255) / 255;
		this.curColor.z = (rgb & 255) / 255;
		this.curColor.w = alpha;
	}
	,add: function(x,y,t) {
		this.content.add(x,y,this.curColor.x,this.curColor.y,this.curColor.z,this.curColor.w,t);
	}
	,addColor: function(x,y,r,g,b,a,t) {
		this.content.add(x,y,r,g,b,a,t);
	}
	,addAlpha: function(x,y,a,t) {
		this.content.add(x,y,this.curColor.x,this.curColor.y,this.curColor.z,a,t);
	}
	,addTransform: function(x,y,sx,sy,r,t) {
		this.content.addTransform(x,y,sx,sy,r,this.curColor,t);
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.isDisposed()) {
			_this.alloc(h3d_Engine.CURRENT);
		}
	}
	,drawWith: function(ctx,obj) {
		var max = this.content.triCount();
		if(max == 0) {
			return;
		}
		if(!ctx.beginDrawObject(obj,this.tile.innerTex)) {
			return;
		}
		var min = this.rangeMin < 0 ? 0 : this.rangeMin * 2;
		if(this.rangeMax > 0 && this.rangeMax < max * 2) {
			max = this.rangeMax * 2;
		}
		this.content.doRender(ctx.engine,min,max - min);
	}
	,__class__: h2d_TileGroup
});
var h2d_ScaleGrid = function(tile,borderW,borderH,parent) {
	h2d_TileGroup.call(this,tile,parent);
	this.set_borderWidth(borderW);
	this.set_borderHeight(borderH);
	this.set_width(tile.width);
	this.set_height(tile.height);
};
$hxClasses["h2d.ScaleGrid"] = h2d_ScaleGrid;
h2d_ScaleGrid.__name__ = ["h2d","ScaleGrid"];
h2d_ScaleGrid.__super__ = h2d_TileGroup;
h2d_ScaleGrid.prototype = $extend(h2d_TileGroup.prototype,{
	set_tileBorders: function(b) {
		this.tileBorders = b;
		this.clear();
		return b;
	}
	,set_width: function(w) {
		this.width = w;
		this.clear();
		return w;
	}
	,set_height: function(h) {
		this.height = h;
		this.clear();
		return h;
	}
	,set_borderWidth: function(w) {
		this.borderWidth = w;
		this.clear();
		return w;
	}
	,set_borderHeight: function(h) {
		this.borderHeight = h;
		this.clear();
		return h;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.content.isEmpty()) {
			this.updateContent();
		}
		h2d_TileGroup.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
	}
	,updateContent: function() {
		var bw = this.borderWidth;
		var bh = this.borderHeight;
		var _this = this.content;
		var color = this.curColor;
		var t = this.tile.sub(0,0,bw,bh);
		_this.add(0,0,color.x,color.y,color.z,color.w,t);
		var _this1 = this.content;
		var x = this.width - bw;
		var color1 = this.curColor;
		var t1 = this.tile.sub(this.tile.width - bw,0,bw,bh);
		_this1.add(x,0,color1.x,color1.y,color1.z,color1.w,t1);
		var _this2 = this.content;
		var y = this.height - bh;
		var color2 = this.curColor;
		var t2 = this.tile.sub(0,this.tile.height - bh,bw,bh);
		_this2.add(0,y,color2.x,color2.y,color2.z,color2.w,t2);
		var _this3 = this.content;
		var x1 = this.width - bw;
		var y1 = this.height - bh;
		var color3 = this.curColor;
		var t3 = this.tile.sub(this.tile.width - bw,this.tile.height - bh,bw,bh);
		_this3.add(x1,y1,color3.x,color3.y,color3.z,color3.w,t3);
		var sizeX = this.tile.width - bw * 2;
		var sizeY = this.tile.height - bh * 2;
		if(!this.tileBorders) {
			var w = this.width - bw * 2;
			var h = this.height - bh * 2;
			var t4 = this.tile.sub(bw,0,sizeX,bh);
			t4.scaleToSize(w,bh);
			var color4 = this.curColor;
			this.content.add(bw,0,color4.x,color4.y,color4.z,color4.w,t4);
			var t5 = this.tile.sub(bw,this.tile.height - bh,sizeX,bh);
			t5.scaleToSize(w,bh);
			var color5 = this.curColor;
			this.content.add(bw,h + bh,color5.x,color5.y,color5.z,color5.w,t5);
			var t6 = this.tile.sub(0,bh,bw,sizeY);
			t6.scaleToSize(bw,h);
			var color6 = this.curColor;
			this.content.add(0,bh,color6.x,color6.y,color6.z,color6.w,t6);
			var t7 = this.tile.sub(this.tile.width - bw,bh,bw,sizeY);
			t7.scaleToSize(bw,h);
			var color7 = this.curColor;
			this.content.add(w + bw,bh,color7.x,color7.y,color7.z,color7.w,t7);
		} else {
			var rw = (this.width - bw * 2) / sizeX | 0;
			var _g1 = 0;
			var _g = rw;
			while(_g1 < _g) {
				var x2 = _g1++;
				var _this4 = this.content;
				var color8 = this.curColor;
				var t8 = this.tile.sub(bw,0,sizeX,bh);
				_this4.add(bw + x2 * sizeX,0,color8.x,color8.y,color8.z,color8.w,t8);
				var _this5 = this.content;
				var y2 = this.height - bh;
				var color9 = this.curColor;
				var t9 = this.tile.sub(bw,this.tile.height - bh,sizeX,bh);
				_this5.add(bw + x2 * sizeX,y2,color9.x,color9.y,color9.z,color9.w,t9);
			}
			var dx = this.width - bw * 2 - rw * sizeX;
			if(dx > 0) {
				var _this6 = this.content;
				var color10 = this.curColor;
				var t10 = this.tile.sub(bw,0,dx,bh);
				_this6.add(bw + rw * sizeX,0,color10.x,color10.y,color10.z,color10.w,t10);
				var _this7 = this.content;
				var y3 = this.height - bh;
				var color11 = this.curColor;
				var t11 = this.tile.sub(bw,this.tile.height - bh,dx,bh);
				_this7.add(bw + rw * sizeX,y3,color11.x,color11.y,color11.z,color11.w,t11);
			}
			var rh = (this.height - bh * 2) / sizeY | 0;
			var _g11 = 0;
			var _g2 = rh;
			while(_g11 < _g2) {
				var y4 = _g11++;
				var _this8 = this.content;
				var color12 = this.curColor;
				var t12 = this.tile.sub(0,bh,bw,sizeY);
				_this8.add(0,bh + y4 * sizeY,color12.x,color12.y,color12.z,color12.w,t12);
				var _this9 = this.content;
				var x3 = this.width - bw;
				var color13 = this.curColor;
				var t13 = this.tile.sub(this.tile.width - bw,bh,bw,sizeY);
				_this9.add(x3,bh + y4 * sizeY,color13.x,color13.y,color13.z,color13.w,t13);
			}
			var dy = this.height - bh * 2 - rh * sizeY;
			if(dy > 0) {
				var _this10 = this.content;
				var color14 = this.curColor;
				var t14 = this.tile.sub(0,bh,bw,dy);
				_this10.add(0,bh + rh * sizeY,color14.x,color14.y,color14.z,color14.w,t14);
				var _this11 = this.content;
				var x4 = this.width - bw;
				var color15 = this.curColor;
				var t15 = this.tile.sub(this.tile.width - bw,bh,bw,dy);
				_this11.add(x4,bh + rh * sizeY,color15.x,color15.y,color15.z,color15.w,t15);
			}
		}
		var t16 = this.tile.sub(bw,bh,sizeX,sizeY);
		t16.scaleToSize(this.width - bw * 2,this.height - bh * 2);
		var color16 = this.curColor;
		this.content.add(bw,bh,color16.x,color16.y,color16.z,color16.w,t16);
	}
	,sync: function(ctx) {
		if(this.content.isEmpty()) {
			this.content.dispose();
			this.updateContent();
		}
		h2d_TileGroup.prototype.sync.call(this,ctx);
	}
	,__class__: h2d_ScaleGrid
});
var hxd_InteractiveScene = function() { };
$hxClasses["hxd.InteractiveScene"] = hxd_InteractiveScene;
hxd_InteractiveScene.__name__ = ["hxd","InteractiveScene"];
hxd_InteractiveScene.prototype = {
	__class__: hxd_InteractiveScene
};
var h2d_Scene = function() {
	h2d_Layers.call(this,null);
	var e = h3d_Engine.CURRENT;
	this.ctx = new h2d_RenderContext(this);
	this.width = e.width;
	this.height = e.height;
	this.interactive = [];
	this.eventListeners = [];
	this.stage = hxd_Stage.getInstance();
	this.posChanged = true;
};
$hxClasses["h2d.Scene"] = h2d_Scene;
h2d_Scene.__name__ = ["h2d","Scene"];
h2d_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h2d_Scene.__super__ = h2d_Layers;
h2d_Scene.prototype = $extend(h2d_Layers.prototype,{
	get_defaultSmooth: function() {
		return this.ctx.defaultSmooth;
	}
	,set_defaultSmooth: function(v) {
		return this.ctx.defaultSmooth = v;
	}
	,setEvents: function(events) {
		this.events = events;
	}
	,get_zoom: function() {
		return h3d_Engine.CURRENT.width / this.width | 0;
	}
	,set_zoom: function(v) {
		var e = h3d_Engine.CURRENT;
		var twidth = Math.ceil(this.stage.get_width() / v);
		var theight = Math.ceil(this.stage.get_height() / v);
		var totalWidth = twidth * v;
		var totalHeight = theight * v;
		if(totalWidth != e.width || totalHeight != e.height) {
			e.resize(totalWidth,totalHeight);
		}
		this.setFixedSize(twidth,theight);
		return v;
	}
	,get_renderer: function() {
		return this.ctx;
	}
	,set_renderer: function(v) {
		this.ctx = v;
		return v;
	}
	,setFixedSize: function(w,h) {
		this.width = w;
		this.height = h;
		this.fixedSize = true;
		this.posChanged = true;
	}
	,checkResize: function() {
		if(this.fixedSize) {
			return;
		}
		var engine = h3d_Engine.CURRENT;
		if(this.width != engine.width || this.height != engine.height) {
			this.width = engine.width;
			this.height = engine.height;
			this.posChanged = true;
		}
	}
	,screenXToLocal: function(mx) {
		return mx * this.width / (this.stage.get_width() * this.scaleX) - this.x;
	}
	,screenYToLocal: function(my) {
		return my * this.height / (this.stage.get_height() * this.scaleY) - this.y;
	}
	,get_mouseX: function() {
		return this.stage.get_mouseX() * this.width / (this.stage.get_width() * this.scaleX) - this.x;
	}
	,get_mouseY: function() {
		return this.stage.get_mouseY() * this.height / (this.stage.get_height() * this.scaleY) - this.y;
	}
	,dispatchListeners: function(event) {
		this.screenToLocal(event);
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,isInteractiveVisible: function(i) {
		var s = i;
		while(s != null) {
			if(!s.visible) {
				return false;
			}
			s = s.parent;
		}
		return true;
	}
	,getInteractive: function(x,y) {
		var rx = x * this.matA + y * this.matB + this.absX;
		var ry = x * this.matC + y * this.matD + this.absY;
		var _g = 0;
		var _g1 = this.interactive;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var dx = rx - i.absX;
			var dy = ry - i.absY;
			var w1 = i.width * i.matA;
			var h1 = i.width * i.matC;
			var ky = h1 * dx + w1 * dy;
			if(ky < 0) {
				continue;
			}
			var w2 = i.height * i.matB;
			var h2 = i.height * i.matD;
			var kx = w2 * dy + h2 * dx;
			if(kx < 0) {
				continue;
			}
			var max = w1 * h2 - h1 * w2;
			if(ky >= max || kx >= max) {
				continue;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			return i;
		}
		return null;
	}
	,screenToLocal: function(e) {
		var x = e.relX * this.width / (this.stage.get_width() * this.scaleX) - this.x;
		var y = e.relY * this.height / (this.stage.get_height() * this.scaleY) - this.y;
		var rx = x * this.matA + y * this.matB + this.absX;
		var ry = x * this.matC + y * this.matD + this.absY;
		e.relX = rx;
		e.relY = ry;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		this.screenToLocal(event);
		var rx = event.relX;
		var ry = event.relY;
		var dx = rx - i.absX;
		var dy = ry - i.absY;
		var w1 = i.width * i.matA;
		var h1 = i.width * i.matC;
		var ky = h1 * dx + w1 * dy;
		var w2 = i.height * i.matB;
		var h2 = i.height * i.matD;
		var kx = w2 * dy + h2 * dx;
		var max = w1 * h2 - h1 * w2;
		event.relX = kx / max * i.width;
		event.relY = ky / max * i.height;
		i.handleEvent(event);
	}
	,handleEvent: function(event,last) {
		this.screenToLocal(event);
		var rx = event.relX;
		var ry = event.relY;
		var index = last == null ? 0 : this.interactive.indexOf(last) + 1;
		var _g1 = index;
		var _g = this.interactive.length;
		while(_g1 < _g) {
			var idx = _g1++;
			var i = this.interactive[idx];
			if(i == null) {
				break;
			}
			var dx = rx - i.absX;
			var dy = ry - i.absY;
			var w1 = i.width * i.matA;
			var h1 = i.width * i.matC;
			var ky = h1 * dx + w1 * dy;
			if(ky < 0) {
				continue;
			}
			var w2 = i.height * i.matB;
			var h2 = i.height * i.matD;
			var kx = w2 * dy + h2 * dx;
			if(kx < 0) {
				continue;
			}
			var max = w1 * h2 - h1 * w2;
			if(ky >= max || kx >= max) {
				continue;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			event.relX = kx / max * i.width;
			event.relY = ky / max * i.height;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			return i;
		}
		return null;
	}
	,addEventListener: function(f) {
		this.eventListeners.push(f);
	}
	,removeEventListener: function(f) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(Reflect.compareMethods(e,f)) {
				HxOverrides.remove(this.eventListeners,e);
				return true;
			}
		}
		return false;
	}
	,startDrag: function(f,onCancel,refEvent) {
		var _gthis = this;
		this.events.startDrag(function(e) {
			_gthis.screenToLocal(e);
			f(e);
		},onCancel,refEvent);
	}
	,stopDrag: function() {
		this.events.stopDrag();
	}
	,getFocus: function() {
		if(this.events == null) {
			return null;
		}
		var f = this.events.getFocus();
		if(f == null) {
			return null;
		}
		var i = (f instanceof h2d_Interactive) ? f : null;
		if(i == null) {
			return null;
		}
		return this.interactive[this.interactive.indexOf(i)];
	}
	,addEventTarget: function(i) {
		var i1 = i;
		var lv = 0;
		while(i1 != null) {
			i1 = i1.parent;
			++lv;
		}
		var level = lv;
		var _g1 = 0;
		var _g = this.interactive.length;
		while(_g1 < _g) {
			var index = _g1++;
			var i11 = i;
			var i2 = this.interactive[index];
			var lv1 = level;
			var i3 = i2;
			var lv2 = 0;
			while(i3 != null) {
				i3 = i3.parent;
				++lv2;
			}
			var lv21 = lv2;
			var p1 = i11;
			var p2 = i2;
			while(lv1 > lv21) {
				i11 = p1;
				p1 = p1.parent;
				--lv1;
			}
			while(lv21 > lv1) {
				i2 = p2;
				p2 = p2.parent;
				--lv21;
			}
			while(p1 != p2) {
				i11 = p1;
				p1 = p1.parent;
				i2 = p2;
				p2 = p2.parent;
			}
			var id = -1;
			var _g11 = 0;
			var _g2 = p1.children.length;
			while(_g11 < _g2) {
				var k = _g11++;
				if(p1.children[k] == i11) {
					id = k;
					break;
				}
			}
			var tmp = id;
			var id1 = -1;
			var _g12 = 0;
			var _g3 = p2.children.length;
			while(_g12 < _g3) {
				var k1 = _g12++;
				if(p2.children[k1] == i2) {
					id1 = k1;
					break;
				}
			}
			if(tmp > id1) {
				this.interactive.splice(index,0,i);
				return;
			}
		}
		this.interactive.push(i);
	}
	,removeEventTarget: function(i,notify) {
		if(notify == null) {
			notify = false;
		}
		HxOverrides.remove(this.interactive,i);
		if(notify && this.events != null) {
			this.events.onRemove(i);
		}
	}
	,dispose: function() {
		if(this.allocated) {
			this.onRemove();
		}
		this.ctx.dispose();
	}
	,setElapsedTime: function(v) {
		this.ctx.elapsedTime = v;
	}
	,drawImplTo: function(s,t) {
		if((t.flags & 1 << h3d_mat_TextureFlags.Target[1]) == 0) {
			throw new js__$Boot_HaxeError("Can only draw to texture created with Target flag");
		}
		this.ctx.engine = h3d_Engine.CURRENT;
		this.ctx.engine.begin();
		this.ctx.globalAlpha = this.alpha;
		this.ctx.begin();
		this.ctx.pushTarget(t);
		s.drawRec(this.ctx);
		this.ctx.popTarget();
		this.ctx.engine.frameCount--;
	}
	,syncOnly: function(et) {
		var engine = h3d_Engine.CURRENT;
		this.setElapsedTime(et);
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
	}
	,render: function(engine) {
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
		if(this.children.length == 0) {
			return;
		}
		this.ctx.begin();
		this.ctx.drawScene();
		this.ctx.end();
	}
	,sync: function(ctx) {
		if(!this.allocated) {
			this.onAdd();
		}
		if(!this.fixedSize && (this.width != ctx.engine.width || this.height != ctx.engine.height)) {
			this.width = ctx.engine.width;
			this.height = ctx.engine.height;
			this.posChanged = true;
		}
		h2d_Layers.prototype.sync.call(this,ctx);
	}
	,captureBitmap: function(target) {
		var engine = h3d_Engine.CURRENT;
		if(target == null) {
			var tex = new h3d_mat_Texture(this.width,this.height,[h3d_mat_TextureFlags.Target]);
			target = new h2d_Tile(tex,0,0,this.width,this.height);
		}
		engine.begin();
		engine.setRenderZone(target.x,target.y,target.width,target.height);
		var tex1 = target.innerTex;
		engine.pushTarget(tex1);
		var ow = this.width;
		var oh = this.height;
		var of = this.fixedSize;
		this.setFixedSize(tex1.width,tex1.height);
		this.render(engine);
		engine.popTarget();
		this.width = ow;
		this.height = oh;
		this.fixedSize = of;
		this.posChanged = true;
		engine.setRenderZone();
		engine.end();
		engine.frameCount--;
		return new h2d_Bitmap(target);
	}
	,__class__: h2d_Scene
});
var h2d_Align = $hxClasses["h2d.Align"] = { __ename__ : true, __constructs__ : ["Left","Right","Center"] };
h2d_Align.Left = ["Left",0];
h2d_Align.Left.toString = $estr;
h2d_Align.Left.__enum__ = h2d_Align;
h2d_Align.Right = ["Right",1];
h2d_Align.Right.toString = $estr;
h2d_Align.Right.__enum__ = h2d_Align;
h2d_Align.Center = ["Center",2];
h2d_Align.Center.toString = $estr;
h2d_Align.Center.__enum__ = h2d_Align;
h2d_Align.__empty_constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center];
var h2d_Text = function(font,parent) {
	this.realMaxWidth = -1;
	this.constraintWidth = -1;
	h2d_Drawable.call(this,parent);
	this.set_font(font);
	this.set_textAlign(h2d_Align.Left);
	this.set_letterSpacing(1);
	this.set_lineSpacing(0);
	this.set_text("");
	this.set_textColor(16777215);
};
$hxClasses["h2d.Text"] = h2d_Text;
h2d_Text.__name__ = ["h2d","Text"];
h2d_Text.__super__ = h2d_Drawable;
h2d_Text.prototype = $extend(h2d_Drawable.prototype,{
	set_font: function(font) {
		if(this.font == font) {
			return font;
		}
		this.font = font;
		if(this.glyphs != null) {
			var _this = this.glyphs;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		this.glyphs = new h2d_TileGroup(font == null ? null : font.tile,this);
		this.glyphs.set_visible(false);
		this.rebuild();
		return font;
	}
	,set_textAlign: function(a) {
		if(this.textAlign == a) {
			return a;
		}
		this.textAlign = a;
		this.rebuild();
		return a;
	}
	,set_letterSpacing: function(s) {
		if(this.letterSpacing == s) {
			return s;
		}
		this.letterSpacing = s;
		this.rebuild();
		return s;
	}
	,set_lineSpacing: function(s) {
		if(this.lineSpacing == s) {
			return s;
		}
		this.lineSpacing = s;
		this.rebuild();
		return s;
	}
	,constraintSize: function(width,height) {
		this.constraintWidth = width;
		this.updateConstraint();
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		this.rebuild();
	}
	,draw: function(ctx) {
		if(this.glyphs == null) {
			this.emitTile(ctx,h2d_Tile.fromColor(16711935,16,16));
			return;
		}
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			var oldR = this.color.x;
			var oldG = this.color.y;
			var oldB = this.color.z;
			var oldA = this.color.w;
			var _this = this.color;
			var c = this.dropShadow.color;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
			this.color.w = this.dropShadow.alpha * oldA;
			this.glyphs.drawWith(ctx,this);
			this.absX = oldX;
			this.absY = oldY;
			var _this1 = this.color;
			_this1.x = oldR;
			_this1.y = oldG;
			_this1.z = oldB;
			_this1.w = oldA;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,set_text: function(t) {
		var t1 = t == null ? "null" : t;
		if(t1 == this.text) {
			return t1;
		}
		this.text = t1;
		this.rebuild();
		return t1;
	}
	,rebuild: function() {
		this.calcDone = false;
		if(this.allocated && this.text != null && this.font != null) {
			this.initGlyphs(this.text);
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,calcTextWidth: function(text) {
		if(this.calcDone) {
			var ow = this.calcWidth;
			var oh = this.calcHeight;
			var osh = this.calcSizeHeight;
			var ox = this.calcXMin;
			var oy = this.calcYMin;
			this.initGlyphs(text,false);
			var w = this.calcWidth;
			this.calcWidth = ow;
			this.calcHeight = oh;
			this.calcSizeHeight = osh;
			this.calcXMin = ox;
			this.calcYMin = oy;
			return w;
		} else {
			this.initGlyphs(text,false);
			this.calcDone = false;
			return this.calcWidth;
		}
	}
	,splitText: function(text,leftMargin,afterData) {
		if(afterData == null) {
			afterData = 0;
		}
		if(leftMargin == null) {
			leftMargin = 0;
		}
		if(this.realMaxWidth < 0) {
			return text;
		}
		var lines = [];
		var rest = text;
		var restPos = 0;
		var x = leftMargin;
		var prevChar = -1;
		var _g1 = 0;
		var _g = text.length;
		while(_g1 < _g) {
			var i = _g1++;
			var cc = HxOverrides.cca(text,i);
			var _this = this.font;
			var c = _this.glyphs.get(cc);
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = _this.defaultChar;
				}
			}
			var e = c;
			var newline = cc == 10;
			var esize = e.width + e.getKerningOffset(prevChar);
			if(this.font.charset.isBreakChar(cc)) {
				if(lines.length == 0 && leftMargin > 0 && x > this.realMaxWidth) {
					lines.push("");
					x -= leftMargin;
				}
				var size = x + esize + this.letterSpacing;
				var k = i + 1;
				var max = text.length;
				var prevChar1 = prevChar;
				var breakFound = false;
				while(size <= this.realMaxWidth && k < max) {
					var cc1 = HxOverrides.cca(text,k++);
					if(this.font.charset.isSpace(cc1) || cc1 == 10) {
						breakFound = true;
						break;
					}
					var _this1 = this.font;
					var c1 = _this1.glyphs.get(cc1);
					if(c1 == null) {
						c1 = _this1.charset.resolveChar(cc1,_this1.glyphs);
						if(c1 == null) {
							c1 = _this1.defaultChar;
						}
					}
					var e1 = c1;
					size += e1.width + this.letterSpacing + e1.getKerningOffset(prevChar1);
					prevChar1 = cc1;
					if(this.font.charset.isBreakChar(cc1)) {
						break;
					}
				}
				if(size > this.realMaxWidth || !breakFound && size + afterData > this.realMaxWidth) {
					newline = true;
					if(this.font.charset.isSpace(cc)) {
						lines.push(HxOverrides.substr(text,restPos,i - restPos));
						e = null;
					} else {
						lines.push(HxOverrides.substr(text,restPos,i + 1 - restPos));
					}
					restPos = i + 1;
				}
			}
			if(e != null) {
				x += esize + this.letterSpacing;
			}
			if(newline) {
				x = 0;
				prevChar = -1;
			} else {
				prevChar = cc;
			}
		}
		if(restPos < text.length) {
			if(lines.length == 0 && leftMargin > 0 && x + afterData - this.letterSpacing > this.realMaxWidth) {
				lines.push("");
			}
			lines.push(HxOverrides.substr(text,restPos,text.length - restPos));
		}
		return lines.join("\n");
	}
	,initGlyphs: function(text,rebuild,handleAlign,lines) {
		if(handleAlign == null) {
			handleAlign = true;
		}
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
		}
		var x = 0;
		var y = 0;
		var xMax = 0;
		var xMin = 0;
		var prevChar = -1;
		var align = handleAlign ? this.textAlign : h2d_Align.Left;
		switch(align[1]) {
		case 1:case 2:
			lines = [];
			this.initGlyphs(text,false,false,lines);
			var max = this.realMaxWidth < 0 ? 0 : this.realMaxWidth | 0;
			var k = align == h2d_Align.Center ? 1 : 0;
			var _g1 = 0;
			var _g = lines.length;
			while(_g1 < _g) {
				var i = _g1++;
				lines[i] = max - lines[i] >> k;
			}
			x = lines.shift();
			xMin = x;
			break;
		default:
		}
		var dl = this.font.lineHeight + this.lineSpacing;
		var calcLines = !handleAlign && !rebuild && lines != null;
		var yMin = 0;
		var t = this.splitText(text);
		var _g11 = 0;
		var _g2 = t.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var cc = HxOverrides.cca(t,i1);
			var _this = this.font;
			var c = _this.glyphs.get(cc);
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = _this.defaultChar;
				}
			}
			var e = c;
			var offs = e.getKerningOffset(prevChar);
			var esize = e.width + offs;
			if(e != null) {
				if(rebuild) {
					var _this1 = this.glyphs;
					_this1.content.add(x + offs,y,_this1.curColor.x,_this1.curColor.y,_this1.curColor.z,_this1.curColor.w,e.t);
				}
				if(y == 0 && e.t.dy < yMin) {
					yMin = e.t.dy;
				}
				x += esize + this.letterSpacing;
			}
			if(cc == 10) {
				if(x > xMax) {
					xMax = x;
				}
				if(calcLines) {
					lines.push(x);
				}
				switch(align[1]) {
				case 0:
					x = 0;
					break;
				case 1:case 2:
					x = lines.shift();
					if(x < xMin) {
						xMin = x;
					}
					break;
				}
				y += dl;
				prevChar = -1;
			} else {
				prevChar = cc;
			}
		}
		if(calcLines) {
			lines.push(x);
		}
		if(x > xMax) {
			xMax = x;
		}
		this.calcXMin = xMin;
		this.calcYMin = yMin;
		this.calcWidth = xMax - xMin;
		this.calcHeight = y + this.font.lineHeight;
		this.calcSizeHeight = y + (this.font.baseLine > 0 ? this.font.baseLine : this.font.lineHeight);
		this.calcDone = true;
	}
	,updateSize: function() {
		if(!this.calcDone) {
			this.initGlyphs(this.text,false);
		}
	}
	,get_textHeight: function() {
		if(!this.calcDone) {
			this.initGlyphs(this.text,false);
		}
		return this.calcHeight;
	}
	,get_textWidth: function() {
		if(!this.calcDone) {
			this.initGlyphs(this.text,false);
		}
		if(this.realMaxWidth >= 0) {
			return this.realMaxWidth | 0;
		} else {
			return this.calcWidth;
		}
	}
	,set_maxWidth: function(w) {
		if(this.maxWidth == w) {
			return w;
		}
		this.maxWidth = w;
		this.updateConstraint();
		return w;
	}
	,updateConstraint: function() {
		var old = this.realMaxWidth;
		if(this.maxWidth == null) {
			this.realMaxWidth = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			this.realMaxWidth = this.maxWidth;
		} else {
			var a = this.maxWidth;
			var b = this.constraintWidth;
			this.realMaxWidth = a > b ? b : a;
		}
		if(this.realMaxWidth != old) {
			this.rebuild();
		}
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		var a = this.color.w;
		var _this = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.color.w = a;
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(!this.calcDone) {
			this.initGlyphs(this.text,false);
		}
		var x;
		var y;
		var w;
		var h;
		if(forSize) {
			x = this.calcXMin;
			y = this.calcYMin;
			w = this.calcWidth;
			h = this.calcSizeHeight;
		} else {
			if(this.realMaxWidth >= 0) {
				x = 0;
			} else {
				x = this.calcXMin;
			}
			y = this.calcYMin;
			if(this.realMaxWidth >= 0) {
				w = this.realMaxWidth;
			} else {
				w = this.calcWidth;
			}
			h = this.calcHeight;
		}
		this.addBounds(relativeTo,out,x,y,w,h);
	}
	,__class__: h2d_Text
});
var h2d_Tile = function(tex,x,y,w,h,dx,dy) {
	if(dy == null) {
		dy = 0;
	}
	if(dx == null) {
		dx = 0;
	}
	this.innerTex = tex;
	this.x = x;
	this.y = y;
	this.width = w;
	this.height = h;
	this.dx = dx;
	this.dy = dy;
	if(tex != null) {
		this.setTexture(tex);
	}
};
$hxClasses["h2d.Tile"] = h2d_Tile;
h2d_Tile.__name__ = ["h2d","Tile"];
h2d_Tile.fromColor = function(color,width,height,alpha,allocPos) {
	if(alpha == null) {
		alpha = 1.;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	var t = new h2d_Tile(h3d_mat_Texture.fromColor(color,alpha,allocPos),0,0,1,1);
	t.width = width;
	t.height = height;
	return t;
};
h2d_Tile.fromBitmap = function(bmp,allocPos) {
	var tex = h3d_mat_Texture.fromBitmap(bmp,allocPos);
	return new h2d_Tile(tex,0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height);
};
h2d_Tile.autoCut = function(bmp,width,height,allocPos) {
	bmp.lock();
	if(height == null) {
		height = width;
	}
	var colorBG = bmp.getPixel(bmp.ctx.canvas.width - 1,bmp.ctx.canvas.height - 1);
	var tl = [];
	var w = 1;
	var h = 1;
	while(w < bmp.ctx.canvas.width) w <<= 1;
	while(h < bmp.ctx.canvas.height) h <<= 1;
	var tex = new h3d_mat_Texture(w,h,null,null,allocPos);
	var _g1 = 0;
	var _g = bmp.ctx.canvas.height / height | 0;
	while(_g1 < _g) {
		var y = _g1++;
		var a = [];
		tl[y] = a;
		var _g3 = 0;
		var _g2 = bmp.ctx.canvas.width / width | 0;
		while(_g3 < _g2) {
			var x = _g3++;
			var sz = h2d_Tile.isEmpty(bmp,x * width,y * height,width,height,colorBG);
			if(sz == null) {
				break;
			}
			a.push(new h2d_Tile(tex,x * width + sz.dx,y * height + sz.dy,sz.w,sz.h,sz.dx,sz.dy));
		}
	}
	bmp.unlock();
	var main = new h2d_Tile(tex,0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height);
	main.upload(bmp);
	return { main : main, tiles : tl};
};
h2d_Tile.fromTexture = function(t) {
	return new h2d_Tile(t,0,0,t.width,t.height);
};
h2d_Tile.fromPixels = function(pixels,allocPos) {
	var pix2 = pixels.makeSquare(true);
	var t = h3d_mat_Texture.fromPixels(pix2);
	if(pix2 != pixels) {
		pix2.dispose();
	}
	return new h2d_Tile(t,0,0,pixels.width,pixels.height);
};
h2d_Tile.isEmpty = function(b,px,py,width,height,bg) {
	var empty = true;
	var xmin = width;
	var ymin = height;
	var xmax = 0;
	var ymax = 0;
	var _g1 = 0;
	var _g = width;
	while(_g1 < _g) {
		var x = _g1++;
		var _g3 = 0;
		var _g2 = height;
		while(_g3 < _g2) {
			var y = _g3++;
			var color = b.getPixel(x + px,y + py);
			if((color & -16777216) == 0) {
				if(color != 0) {
					b.setPixel(x + px,y + py,0);
				}
				continue;
			}
			if(color != bg) {
				empty = false;
				if(x < xmin) {
					xmin = x;
				}
				if(y < ymin) {
					ymin = y;
				}
				if(x > xmax) {
					xmax = x;
				}
				if(y > ymax) {
					ymax = y;
				}
			}
			if(color == bg && color != 0) {
				b.setPixel(x + px,y + py,0);
			}
		}
	}
	if(empty) {
		return null;
	} else {
		return { dx : xmin, dy : ymin, w : xmax - xmin + 1, h : ymax - ymin + 1};
	}
};
h2d_Tile.prototype = {
	getTexture: function() {
		return this.innerTex;
	}
	,isDisposed: function() {
		if(this.innerTex != null) {
			var _this = this.innerTex;
			if(_this.t == null) {
				return _this.realloc == null;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,setTexture: function(tex) {
		this.innerTex = tex;
		if(tex != null) {
			this.u = this.x / tex.width;
			this.v = this.y / tex.height;
			this.u2 = (this.x + this.width) / tex.width;
			this.v2 = (this.y + this.height) / tex.height;
		}
	}
	,switchTexture: function(t) {
		this.setTexture(t.innerTex);
	}
	,sub: function(x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0;
		}
		if(dx == null) {
			dx = 0;
		}
		return new h2d_Tile(this.innerTex,this.x + x,this.y + y,w,h,dx,dy);
	}
	,center: function() {
		return this.sub(0,0,this.width,this.height,-(this.width >> 1),-(this.height >> 1));
	}
	,setCenterRatio: function(px,py) {
		if(py == null) {
			py = 0.5;
		}
		if(px == null) {
			px = 0.5;
		}
		this.dx = -(px * this.width | 0);
		this.dy = -(py * this.height | 0);
	}
	,flipX: function() {
		var tmp = this.u;
		this.u = this.u2;
		this.u2 = tmp;
		this.dx = -this.dx - this.width;
	}
	,flipY: function() {
		var tmp = this.v;
		this.v = this.v2;
		this.v2 = tmp;
		this.dy = -this.dy - this.height;
	}
	,setPos: function(x,y) {
		this.x = x;
		this.y = y;
		var tex = this.innerTex;
		if(tex != null) {
			this.u = x / tex.width;
			this.v = y / tex.height;
			this.u2 = (x + this.width) / tex.width;
			this.v2 = (y + this.height) / tex.height;
		}
	}
	,setSize: function(w,h) {
		this.width = w;
		this.height = h;
		var tex = this.innerTex;
		if(tex != null) {
			this.u2 = (this.x + w) / tex.width;
			this.v2 = (this.y + h) / tex.height;
		}
	}
	,scaleToSize: function(w,h) {
		this.width = w;
		this.height = h;
	}
	,scrollDiscrete: function(dx,dy) {
		var tex = this.innerTex;
		this.u += dx / tex.width;
		this.v -= dy / tex.height;
		this.u2 += dx / tex.width;
		this.v2 -= dy / tex.height;
		this.x = this.u * tex.width | 0;
		this.y = this.v * tex.height | 0;
	}
	,dispose: function() {
		if(this.innerTex != null) {
			this.innerTex.dispose();
		}
		this.innerTex = null;
	}
	,clone: function() {
		var t = new h2d_Tile(null,this.x,this.y,this.width,this.height,this.dx,this.dy);
		t.innerTex = this.innerTex;
		t.u = this.u;
		t.u2 = this.u2;
		t.v = this.v;
		t.v2 = this.v2;
		return t;
	}
	,split: function(frames,vertical) {
		if(vertical == null) {
			vertical = false;
		}
		if(frames == null) {
			frames = 0;
		}
		var tl = [];
		if(vertical) {
			if(frames == 0) {
				frames = this.height / this.width | 0;
			}
			var stride = this.height / frames | 0;
			var _g1 = 0;
			var _g = frames;
			while(_g1 < _g) {
				var i = _g1++;
				tl.push(this.sub(0,i * stride,this.width,stride));
			}
		} else {
			if(frames == 0) {
				frames = this.width / this.height | 0;
			}
			var stride1 = this.width / frames | 0;
			var _g11 = 0;
			var _g2 = frames;
			while(_g11 < _g2) {
				var i1 = _g11++;
				tl.push(this.sub(i1 * stride1,0,stride1,this.height));
			}
		}
		return tl;
	}
	,gridFlatten: function(size,dx,dy) {
		if(dy == null) {
			dy = 0;
		}
		if(dx == null) {
			dx = 0;
		}
		var _g = [];
		var _g2 = 0;
		var _g1 = this.height / size | 0;
		while(_g2 < _g1) {
			var y = _g2++;
			var _g4 = 0;
			var _g3 = this.width / size | 0;
			while(_g4 < _g3) {
				var x = _g4++;
				_g.push(this.sub(x * size,y * size,size,size,dx,dy));
			}
		}
		return _g;
	}
	,grid: function(size,dx,dy) {
		if(dy == null) {
			dy = 0;
		}
		if(dx == null) {
			dx = 0;
		}
		var _g = [];
		var _g2 = 0;
		var _g1 = this.width / size | 0;
		while(_g2 < _g1) {
			var x = _g2++;
			var _g3 = [];
			var _g5 = 0;
			var _g4 = this.height / size | 0;
			while(_g5 < _g4) {
				var y = _g5++;
				_g3.push(this.sub(x * size,y * size,size,size,dx,dy));
			}
			_g.push(_g3);
		}
		return _g;
	}
	,toString: function() {
		return "Tile(" + this.x + "," + this.y + "," + this.width + "x" + this.height + (this.dx != 0 || this.dy != 0 ? "," + this.dx + ":" + this.dy : "") + ")";
	}
	,upload: function(bmp) {
		var w = this.innerTex.width;
		var h = this.innerTex.height;
		this.innerTex.uploadBitmap(bmp);
	}
	,__class__: h2d_Tile
};
var h2d__$TileGroup_TileLayerContent = function() {
	h3d_prim_Primitive.call(this);
	this.clear();
};
$hxClasses["h2d._TileGroup.TileLayerContent"] = h2d__$TileGroup_TileLayerContent;
h2d__$TileGroup_TileLayerContent.__name__ = ["h2d","_TileGroup","TileLayerContent"];
h2d__$TileGroup_TileLayerContent.__super__ = h3d_prim_Primitive;
h2d__$TileGroup_TileLayerContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	clear: function() {
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		if(this.buffer != null) {
			this.buffer.dispose();
		}
		this.buffer = null;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.xMax = -Infinity;
		this.yMax = -Infinity;
	}
	,isEmpty: function() {
		return this.triCount() == 0;
	}
	,triCount: function() {
		if(this.buffer == null) {
			return this.tmp.pos >> 4;
		} else {
			return this.buffer.totalVertices() >> 1;
		}
	}
	,addColor: function(x,y,color,t) {
		this.add(x,y,color.x,color.y,color.z,color.w,t);
	}
	,add: function(x,y,r,g,b,a,t) {
		var sx = x + t.dx;
		var sy = y + t.dy;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = sy;
		var this3 = this.tmp;
		var v = t.u;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = v;
		var this4 = this.tmp;
		var v1 = t.v;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = v1;
		var this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = r;
		var this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = g;
		var this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = b;
		var this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = a;
		var this9 = this.tmp;
		var v2 = sx + t.width;
		if(this9.pos == this9.array.length) {
			var newSize8 = this9.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(this9.array);
			this9.array = newArray8;
		}
		this9.array[this9.pos++] = v2;
		var this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			var newSize9 = this10.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(this10.array);
			this10.array = newArray9;
		}
		this10.array[this10.pos++] = sy;
		var this11 = this.tmp;
		var v3 = t.u2;
		if(this11.pos == this11.array.length) {
			var newSize10 = this11.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(this11.array);
			this11.array = newArray10;
		}
		this11.array[this11.pos++] = v3;
		var this12 = this.tmp;
		var v4 = t.v;
		if(this12.pos == this12.array.length) {
			var newSize11 = this12.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(this12.array);
			this12.array = newArray11;
		}
		this12.array[this12.pos++] = v4;
		var this13 = this.tmp;
		if(this13.pos == this13.array.length) {
			var newSize12 = this13.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(this13.array);
			this13.array = newArray12;
		}
		this13.array[this13.pos++] = r;
		var this14 = this.tmp;
		if(this14.pos == this14.array.length) {
			var newSize13 = this14.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(this14.array);
			this14.array = newArray13;
		}
		this14.array[this14.pos++] = g;
		var this15 = this.tmp;
		if(this15.pos == this15.array.length) {
			var newSize14 = this15.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(this15.array);
			this15.array = newArray14;
		}
		this15.array[this15.pos++] = b;
		var this16 = this.tmp;
		if(this16.pos == this16.array.length) {
			var newSize15 = this16.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(this16.array);
			this16.array = newArray15;
		}
		this16.array[this16.pos++] = a;
		var this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			var newSize16 = this17.array.length << 1;
			if(newSize16 < 128) {
				newSize16 = 128;
			}
			var newArray16 = new Float32Array(newSize16);
			newArray16.set(this17.array);
			this17.array = newArray16;
		}
		this17.array[this17.pos++] = sx;
		var this18 = this.tmp;
		var v5 = sy + t.height;
		if(this18.pos == this18.array.length) {
			var newSize17 = this18.array.length << 1;
			if(newSize17 < 128) {
				newSize17 = 128;
			}
			var newArray17 = new Float32Array(newSize17);
			newArray17.set(this18.array);
			this18.array = newArray17;
		}
		this18.array[this18.pos++] = v5;
		var this19 = this.tmp;
		var v6 = t.u;
		if(this19.pos == this19.array.length) {
			var newSize18 = this19.array.length << 1;
			if(newSize18 < 128) {
				newSize18 = 128;
			}
			var newArray18 = new Float32Array(newSize18);
			newArray18.set(this19.array);
			this19.array = newArray18;
		}
		this19.array[this19.pos++] = v6;
		var this20 = this.tmp;
		var v7 = t.v2;
		if(this20.pos == this20.array.length) {
			var newSize19 = this20.array.length << 1;
			if(newSize19 < 128) {
				newSize19 = 128;
			}
			var newArray19 = new Float32Array(newSize19);
			newArray19.set(this20.array);
			this20.array = newArray19;
		}
		this20.array[this20.pos++] = v7;
		var this21 = this.tmp;
		if(this21.pos == this21.array.length) {
			var newSize20 = this21.array.length << 1;
			if(newSize20 < 128) {
				newSize20 = 128;
			}
			var newArray20 = new Float32Array(newSize20);
			newArray20.set(this21.array);
			this21.array = newArray20;
		}
		this21.array[this21.pos++] = r;
		var this22 = this.tmp;
		if(this22.pos == this22.array.length) {
			var newSize21 = this22.array.length << 1;
			if(newSize21 < 128) {
				newSize21 = 128;
			}
			var newArray21 = new Float32Array(newSize21);
			newArray21.set(this22.array);
			this22.array = newArray21;
		}
		this22.array[this22.pos++] = g;
		var this23 = this.tmp;
		if(this23.pos == this23.array.length) {
			var newSize22 = this23.array.length << 1;
			if(newSize22 < 128) {
				newSize22 = 128;
			}
			var newArray22 = new Float32Array(newSize22);
			newArray22.set(this23.array);
			this23.array = newArray22;
		}
		this23.array[this23.pos++] = b;
		var this24 = this.tmp;
		if(this24.pos == this24.array.length) {
			var newSize23 = this24.array.length << 1;
			if(newSize23 < 128) {
				newSize23 = 128;
			}
			var newArray23 = new Float32Array(newSize23);
			newArray23.set(this24.array);
			this24.array = newArray23;
		}
		this24.array[this24.pos++] = a;
		var this25 = this.tmp;
		var v8 = sx + t.width;
		if(this25.pos == this25.array.length) {
			var newSize24 = this25.array.length << 1;
			if(newSize24 < 128) {
				newSize24 = 128;
			}
			var newArray24 = new Float32Array(newSize24);
			newArray24.set(this25.array);
			this25.array = newArray24;
		}
		this25.array[this25.pos++] = v8;
		var this26 = this.tmp;
		var v9 = sy + t.height;
		if(this26.pos == this26.array.length) {
			var newSize25 = this26.array.length << 1;
			if(newSize25 < 128) {
				newSize25 = 128;
			}
			var newArray25 = new Float32Array(newSize25);
			newArray25.set(this26.array);
			this26.array = newArray25;
		}
		this26.array[this26.pos++] = v9;
		var this27 = this.tmp;
		var v10 = t.u2;
		if(this27.pos == this27.array.length) {
			var newSize26 = this27.array.length << 1;
			if(newSize26 < 128) {
				newSize26 = 128;
			}
			var newArray26 = new Float32Array(newSize26);
			newArray26.set(this27.array);
			this27.array = newArray26;
		}
		this27.array[this27.pos++] = v10;
		var this28 = this.tmp;
		var v11 = t.v2;
		if(this28.pos == this28.array.length) {
			var newSize27 = this28.array.length << 1;
			if(newSize27 < 128) {
				newSize27 = 128;
			}
			var newArray27 = new Float32Array(newSize27);
			newArray27.set(this28.array);
			this28.array = newArray27;
		}
		this28.array[this28.pos++] = v11;
		var this29 = this.tmp;
		if(this29.pos == this29.array.length) {
			var newSize28 = this29.array.length << 1;
			if(newSize28 < 128) {
				newSize28 = 128;
			}
			var newArray28 = new Float32Array(newSize28);
			newArray28.set(this29.array);
			this29.array = newArray28;
		}
		this29.array[this29.pos++] = r;
		var this30 = this.tmp;
		if(this30.pos == this30.array.length) {
			var newSize29 = this30.array.length << 1;
			if(newSize29 < 128) {
				newSize29 = 128;
			}
			var newArray29 = new Float32Array(newSize29);
			newArray29.set(this30.array);
			this30.array = newArray29;
		}
		this30.array[this30.pos++] = g;
		var this31 = this.tmp;
		if(this31.pos == this31.array.length) {
			var newSize30 = this31.array.length << 1;
			if(newSize30 < 128) {
				newSize30 = 128;
			}
			var newArray30 = new Float32Array(newSize30);
			newArray30.set(this31.array);
			this31.array = newArray30;
		}
		this31.array[this31.pos++] = b;
		var this32 = this.tmp;
		if(this32.pos == this32.array.length) {
			var newSize31 = this32.array.length << 1;
			if(newSize31 < 128) {
				newSize31 = 128;
			}
			var newArray31 = new Float32Array(newSize31);
			newArray31.set(this32.array);
			this32.array = newArray31;
		}
		this32.array[this32.pos++] = a;
		var x1 = x + t.dx;
		var y1 = y + t.dy;
		if(x1 < this.xMin) {
			this.xMin = x1;
		}
		if(y1 < this.yMin) {
			this.yMin = y1;
		}
		x1 += t.width;
		y1 += t.height;
		if(x1 > this.xMax) {
			this.xMax = x1;
		}
		if(y1 > this.yMax) {
			this.yMax = y1;
		}
	}
	,addTransform: function(x,y,sx,sy,r,c,t) {
		var _gthis = this;
		var ca = Math.cos(r);
		var sa = Math.sin(r);
		var hx = t.width;
		var hy = t.height;
		var dx = t.dx * sx;
		var dy = t.dy * sy;
		var px = dx * ca - dy * sa + x;
		var py = dy * ca + dx * sa + y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = px;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = py;
		var this3 = this.tmp;
		var v = t.u;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = v;
		var this4 = this.tmp;
		var v1 = t.v;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = v1;
		var this5 = this.tmp;
		var v2 = c.x;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = v2;
		var this6 = this.tmp;
		var v3 = c.y;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = v3;
		var this7 = this.tmp;
		var v4 = c.z;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = v4;
		var this8 = this.tmp;
		var v5 = c.w;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = v5;
		if(px < _gthis.xMin) {
			_gthis.xMin = px;
		}
		if(py < _gthis.yMin) {
			_gthis.yMin = py;
		}
		if(px > _gthis.xMax) {
			_gthis.xMax = px;
		}
		if(py > _gthis.yMax) {
			_gthis.yMax = py;
		}
		var dx1 = (t.dx + hx) * sx;
		var dy1 = t.dy * sy;
		var px1 = dx1 * ca - dy1 * sa + x;
		var py1 = dy1 * ca + dx1 * sa + y;
		var this9 = this.tmp;
		if(this9.pos == this9.array.length) {
			var newSize8 = this9.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(this9.array);
			this9.array = newArray8;
		}
		this9.array[this9.pos++] = px1;
		var this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			var newSize9 = this10.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(this10.array);
			this10.array = newArray9;
		}
		this10.array[this10.pos++] = py1;
		var this11 = this.tmp;
		var v6 = t.u2;
		if(this11.pos == this11.array.length) {
			var newSize10 = this11.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(this11.array);
			this11.array = newArray10;
		}
		this11.array[this11.pos++] = v6;
		var this12 = this.tmp;
		var v7 = t.v;
		if(this12.pos == this12.array.length) {
			var newSize11 = this12.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(this12.array);
			this12.array = newArray11;
		}
		this12.array[this12.pos++] = v7;
		var this13 = this.tmp;
		var v8 = c.x;
		if(this13.pos == this13.array.length) {
			var newSize12 = this13.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(this13.array);
			this13.array = newArray12;
		}
		this13.array[this13.pos++] = v8;
		var this14 = this.tmp;
		var v9 = c.y;
		if(this14.pos == this14.array.length) {
			var newSize13 = this14.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(this14.array);
			this14.array = newArray13;
		}
		this14.array[this14.pos++] = v9;
		var this15 = this.tmp;
		var v10 = c.z;
		if(this15.pos == this15.array.length) {
			var newSize14 = this15.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(this15.array);
			this15.array = newArray14;
		}
		this15.array[this15.pos++] = v10;
		var this16 = this.tmp;
		var v11 = c.w;
		if(this16.pos == this16.array.length) {
			var newSize15 = this16.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(this16.array);
			this16.array = newArray15;
		}
		this16.array[this16.pos++] = v11;
		if(px1 < _gthis.xMin) {
			_gthis.xMin = px1;
		}
		if(py1 < _gthis.yMin) {
			_gthis.yMin = py1;
		}
		if(px1 > _gthis.xMax) {
			_gthis.xMax = px1;
		}
		if(py1 > _gthis.yMax) {
			_gthis.yMax = py1;
		}
		var dx2 = t.dx * sx;
		var dy2 = (t.dy + hy) * sy;
		var px2 = dx2 * ca - dy2 * sa + x;
		var py2 = dy2 * ca + dx2 * sa + y;
		var this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			var newSize16 = this17.array.length << 1;
			if(newSize16 < 128) {
				newSize16 = 128;
			}
			var newArray16 = new Float32Array(newSize16);
			newArray16.set(this17.array);
			this17.array = newArray16;
		}
		this17.array[this17.pos++] = px2;
		var this18 = this.tmp;
		if(this18.pos == this18.array.length) {
			var newSize17 = this18.array.length << 1;
			if(newSize17 < 128) {
				newSize17 = 128;
			}
			var newArray17 = new Float32Array(newSize17);
			newArray17.set(this18.array);
			this18.array = newArray17;
		}
		this18.array[this18.pos++] = py2;
		var this19 = this.tmp;
		var v12 = t.u;
		if(this19.pos == this19.array.length) {
			var newSize18 = this19.array.length << 1;
			if(newSize18 < 128) {
				newSize18 = 128;
			}
			var newArray18 = new Float32Array(newSize18);
			newArray18.set(this19.array);
			this19.array = newArray18;
		}
		this19.array[this19.pos++] = v12;
		var this20 = this.tmp;
		var v13 = t.v2;
		if(this20.pos == this20.array.length) {
			var newSize19 = this20.array.length << 1;
			if(newSize19 < 128) {
				newSize19 = 128;
			}
			var newArray19 = new Float32Array(newSize19);
			newArray19.set(this20.array);
			this20.array = newArray19;
		}
		this20.array[this20.pos++] = v13;
		var this21 = this.tmp;
		var v14 = c.x;
		if(this21.pos == this21.array.length) {
			var newSize20 = this21.array.length << 1;
			if(newSize20 < 128) {
				newSize20 = 128;
			}
			var newArray20 = new Float32Array(newSize20);
			newArray20.set(this21.array);
			this21.array = newArray20;
		}
		this21.array[this21.pos++] = v14;
		var this22 = this.tmp;
		var v15 = c.y;
		if(this22.pos == this22.array.length) {
			var newSize21 = this22.array.length << 1;
			if(newSize21 < 128) {
				newSize21 = 128;
			}
			var newArray21 = new Float32Array(newSize21);
			newArray21.set(this22.array);
			this22.array = newArray21;
		}
		this22.array[this22.pos++] = v15;
		var this23 = this.tmp;
		var v16 = c.z;
		if(this23.pos == this23.array.length) {
			var newSize22 = this23.array.length << 1;
			if(newSize22 < 128) {
				newSize22 = 128;
			}
			var newArray22 = new Float32Array(newSize22);
			newArray22.set(this23.array);
			this23.array = newArray22;
		}
		this23.array[this23.pos++] = v16;
		var this24 = this.tmp;
		var v17 = c.w;
		if(this24.pos == this24.array.length) {
			var newSize23 = this24.array.length << 1;
			if(newSize23 < 128) {
				newSize23 = 128;
			}
			var newArray23 = new Float32Array(newSize23);
			newArray23.set(this24.array);
			this24.array = newArray23;
		}
		this24.array[this24.pos++] = v17;
		if(px2 < _gthis.xMin) {
			_gthis.xMin = px2;
		}
		if(py2 < _gthis.yMin) {
			_gthis.yMin = py2;
		}
		if(px2 > _gthis.xMax) {
			_gthis.xMax = px2;
		}
		if(py2 > _gthis.yMax) {
			_gthis.yMax = py2;
		}
		var dx3 = (t.dx + hx) * sx;
		var dy3 = (t.dy + hy) * sy;
		var px3 = dx3 * ca - dy3 * sa + x;
		var py3 = dy3 * ca + dx3 * sa + y;
		var this25 = this.tmp;
		if(this25.pos == this25.array.length) {
			var newSize24 = this25.array.length << 1;
			if(newSize24 < 128) {
				newSize24 = 128;
			}
			var newArray24 = new Float32Array(newSize24);
			newArray24.set(this25.array);
			this25.array = newArray24;
		}
		this25.array[this25.pos++] = px3;
		var this26 = this.tmp;
		if(this26.pos == this26.array.length) {
			var newSize25 = this26.array.length << 1;
			if(newSize25 < 128) {
				newSize25 = 128;
			}
			var newArray25 = new Float32Array(newSize25);
			newArray25.set(this26.array);
			this26.array = newArray25;
		}
		this26.array[this26.pos++] = py3;
		var this27 = this.tmp;
		var v18 = t.u2;
		if(this27.pos == this27.array.length) {
			var newSize26 = this27.array.length << 1;
			if(newSize26 < 128) {
				newSize26 = 128;
			}
			var newArray26 = new Float32Array(newSize26);
			newArray26.set(this27.array);
			this27.array = newArray26;
		}
		this27.array[this27.pos++] = v18;
		var this28 = this.tmp;
		var v19 = t.v2;
		if(this28.pos == this28.array.length) {
			var newSize27 = this28.array.length << 1;
			if(newSize27 < 128) {
				newSize27 = 128;
			}
			var newArray27 = new Float32Array(newSize27);
			newArray27.set(this28.array);
			this28.array = newArray27;
		}
		this28.array[this28.pos++] = v19;
		var this29 = this.tmp;
		var v20 = c.x;
		if(this29.pos == this29.array.length) {
			var newSize28 = this29.array.length << 1;
			if(newSize28 < 128) {
				newSize28 = 128;
			}
			var newArray28 = new Float32Array(newSize28);
			newArray28.set(this29.array);
			this29.array = newArray28;
		}
		this29.array[this29.pos++] = v20;
		var this30 = this.tmp;
		var v21 = c.y;
		if(this30.pos == this30.array.length) {
			var newSize29 = this30.array.length << 1;
			if(newSize29 < 128) {
				newSize29 = 128;
			}
			var newArray29 = new Float32Array(newSize29);
			newArray29.set(this30.array);
			this30.array = newArray29;
		}
		this30.array[this30.pos++] = v21;
		var this31 = this.tmp;
		var v22 = c.z;
		if(this31.pos == this31.array.length) {
			var newSize30 = this31.array.length << 1;
			if(newSize30 < 128) {
				newSize30 = 128;
			}
			var newArray30 = new Float32Array(newSize30);
			newArray30.set(this31.array);
			this31.array = newArray30;
		}
		this31.array[this31.pos++] = v22;
		var this32 = this.tmp;
		var v23 = c.w;
		if(this32.pos == this32.array.length) {
			var newSize31 = this32.array.length << 1;
			if(newSize31 < 128) {
				newSize31 = 128;
			}
			var newArray31 = new Float32Array(newSize31);
			newArray31.set(this32.array);
			this32.array = newArray31;
		}
		this32.array[this32.pos++] = v23;
		if(px3 < _gthis.xMin) {
			_gthis.xMin = px3;
		}
		if(py3 < _gthis.yMin) {
			_gthis.yMin = py3;
		}
		if(px3 > _gthis.xMax) {
			_gthis.xMax = px3;
		}
		if(py3 > _gthis.yMax) {
			_gthis.yMax = py3;
		}
	}
	,addPoint: function(x,y,color) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = y;
		var this3 = this.tmp;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = 0;
		var this4 = this.tmp;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = 0;
		var this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = (color >> 16 & 255) / 255.;
		var this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = (color >> 8 & 255) / 255.;
		var this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = (color & 255) / 255.;
		var this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = (color >>> 24) / 255.;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,insertColor: function(c) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (c >> 16 & 255) / 255.;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = (c >> 8 & 255) / 255.;
		var this3 = this.tmp;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = (c & 255) / 255.;
		var this4 = this.tmp;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = (c >>> 24) / 255.;
	}
	,rectColor: function(x,y,w,h,color) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = y;
		var this3 = this.tmp;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = 0;
		var this4 = this.tmp;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = 0;
		var this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = (color >> 16 & 255) / 255.;
		var this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = (color >> 8 & 255) / 255.;
		var this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = (color & 255) / 255.;
		var this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = (color >>> 24) / 255.;
		var this9 = this.tmp;
		if(this9.pos == this9.array.length) {
			var newSize8 = this9.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(this9.array);
			this9.array = newArray8;
		}
		this9.array[this9.pos++] = x + w;
		var this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			var newSize9 = this10.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(this10.array);
			this10.array = newArray9;
		}
		this10.array[this10.pos++] = y;
		var this11 = this.tmp;
		if(this11.pos == this11.array.length) {
			var newSize10 = this11.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(this11.array);
			this11.array = newArray10;
		}
		this11.array[this11.pos++] = 1;
		var this12 = this.tmp;
		if(this12.pos == this12.array.length) {
			var newSize11 = this12.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(this12.array);
			this12.array = newArray11;
		}
		this12.array[this12.pos++] = 0;
		var this13 = this.tmp;
		if(this13.pos == this13.array.length) {
			var newSize12 = this13.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(this13.array);
			this13.array = newArray12;
		}
		this13.array[this13.pos++] = (color >> 16 & 255) / 255.;
		var this14 = this.tmp;
		if(this14.pos == this14.array.length) {
			var newSize13 = this14.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(this14.array);
			this14.array = newArray13;
		}
		this14.array[this14.pos++] = (color >> 8 & 255) / 255.;
		var this15 = this.tmp;
		if(this15.pos == this15.array.length) {
			var newSize14 = this15.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(this15.array);
			this15.array = newArray14;
		}
		this15.array[this15.pos++] = (color & 255) / 255.;
		var this16 = this.tmp;
		if(this16.pos == this16.array.length) {
			var newSize15 = this16.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(this16.array);
			this16.array = newArray15;
		}
		this16.array[this16.pos++] = (color >>> 24) / 255.;
		var this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			var newSize16 = this17.array.length << 1;
			if(newSize16 < 128) {
				newSize16 = 128;
			}
			var newArray16 = new Float32Array(newSize16);
			newArray16.set(this17.array);
			this17.array = newArray16;
		}
		this17.array[this17.pos++] = x;
		var this18 = this.tmp;
		if(this18.pos == this18.array.length) {
			var newSize17 = this18.array.length << 1;
			if(newSize17 < 128) {
				newSize17 = 128;
			}
			var newArray17 = new Float32Array(newSize17);
			newArray17.set(this18.array);
			this18.array = newArray17;
		}
		this18.array[this18.pos++] = y + h;
		var this19 = this.tmp;
		if(this19.pos == this19.array.length) {
			var newSize18 = this19.array.length << 1;
			if(newSize18 < 128) {
				newSize18 = 128;
			}
			var newArray18 = new Float32Array(newSize18);
			newArray18.set(this19.array);
			this19.array = newArray18;
		}
		this19.array[this19.pos++] = 0;
		var this20 = this.tmp;
		if(this20.pos == this20.array.length) {
			var newSize19 = this20.array.length << 1;
			if(newSize19 < 128) {
				newSize19 = 128;
			}
			var newArray19 = new Float32Array(newSize19);
			newArray19.set(this20.array);
			this20.array = newArray19;
		}
		this20.array[this20.pos++] = 1;
		var this21 = this.tmp;
		if(this21.pos == this21.array.length) {
			var newSize20 = this21.array.length << 1;
			if(newSize20 < 128) {
				newSize20 = 128;
			}
			var newArray20 = new Float32Array(newSize20);
			newArray20.set(this21.array);
			this21.array = newArray20;
		}
		this21.array[this21.pos++] = (color >> 16 & 255) / 255.;
		var this22 = this.tmp;
		if(this22.pos == this22.array.length) {
			var newSize21 = this22.array.length << 1;
			if(newSize21 < 128) {
				newSize21 = 128;
			}
			var newArray21 = new Float32Array(newSize21);
			newArray21.set(this22.array);
			this22.array = newArray21;
		}
		this22.array[this22.pos++] = (color >> 8 & 255) / 255.;
		var this23 = this.tmp;
		if(this23.pos == this23.array.length) {
			var newSize22 = this23.array.length << 1;
			if(newSize22 < 128) {
				newSize22 = 128;
			}
			var newArray22 = new Float32Array(newSize22);
			newArray22.set(this23.array);
			this23.array = newArray22;
		}
		this23.array[this23.pos++] = (color & 255) / 255.;
		var this24 = this.tmp;
		if(this24.pos == this24.array.length) {
			var newSize23 = this24.array.length << 1;
			if(newSize23 < 128) {
				newSize23 = 128;
			}
			var newArray23 = new Float32Array(newSize23);
			newArray23.set(this24.array);
			this24.array = newArray23;
		}
		this24.array[this24.pos++] = (color >>> 24) / 255.;
		var this25 = this.tmp;
		if(this25.pos == this25.array.length) {
			var newSize24 = this25.array.length << 1;
			if(newSize24 < 128) {
				newSize24 = 128;
			}
			var newArray24 = new Float32Array(newSize24);
			newArray24.set(this25.array);
			this25.array = newArray24;
		}
		this25.array[this25.pos++] = x + w;
		var this26 = this.tmp;
		if(this26.pos == this26.array.length) {
			var newSize25 = this26.array.length << 1;
			if(newSize25 < 128) {
				newSize25 = 128;
			}
			var newArray25 = new Float32Array(newSize25);
			newArray25.set(this26.array);
			this26.array = newArray25;
		}
		this26.array[this26.pos++] = y + h;
		var this27 = this.tmp;
		if(this27.pos == this27.array.length) {
			var newSize26 = this27.array.length << 1;
			if(newSize26 < 128) {
				newSize26 = 128;
			}
			var newArray26 = new Float32Array(newSize26);
			newArray26.set(this27.array);
			this27.array = newArray26;
		}
		this27.array[this27.pos++] = 1;
		var this28 = this.tmp;
		if(this28.pos == this28.array.length) {
			var newSize27 = this28.array.length << 1;
			if(newSize27 < 128) {
				newSize27 = 128;
			}
			var newArray27 = new Float32Array(newSize27);
			newArray27.set(this28.array);
			this28.array = newArray27;
		}
		this28.array[this28.pos++] = 1;
		var this29 = this.tmp;
		if(this29.pos == this29.array.length) {
			var newSize28 = this29.array.length << 1;
			if(newSize28 < 128) {
				newSize28 = 128;
			}
			var newArray28 = new Float32Array(newSize28);
			newArray28.set(this29.array);
			this29.array = newArray28;
		}
		this29.array[this29.pos++] = (color >> 16 & 255) / 255.;
		var this30 = this.tmp;
		if(this30.pos == this30.array.length) {
			var newSize29 = this30.array.length << 1;
			if(newSize29 < 128) {
				newSize29 = 128;
			}
			var newArray29 = new Float32Array(newSize29);
			newArray29.set(this30.array);
			this30.array = newArray29;
		}
		this30.array[this30.pos++] = (color >> 8 & 255) / 255.;
		var this31 = this.tmp;
		if(this31.pos == this31.array.length) {
			var newSize30 = this31.array.length << 1;
			if(newSize30 < 128) {
				newSize30 = 128;
			}
			var newArray30 = new Float32Array(newSize30);
			newArray30.set(this31.array);
			this31.array = newArray30;
		}
		this31.array[this31.pos++] = (color & 255) / 255.;
		var this32 = this.tmp;
		if(this32.pos == this32.array.length) {
			var newSize31 = this32.array.length << 1;
			if(newSize31 < 128) {
				newSize31 = 128;
			}
			var newArray31 = new Float32Array(newSize31);
			newArray31.set(this32.array);
			this32.array = newArray31;
		}
		this32.array[this32.pos++] = (color >>> 24) / 255.;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		x += w;
		y += h;
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,rectGradient: function(x,y,w,h,ctl,ctr,cbl,cbr) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = y;
		var this3 = this.tmp;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = 0;
		var this4 = this.tmp;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = 0;
		var this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = (ctl >> 16 & 255) / 255.;
		var this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = (ctl >> 8 & 255) / 255.;
		var this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = (ctl & 255) / 255.;
		var this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = (ctl >>> 24) / 255.;
		var this9 = this.tmp;
		if(this9.pos == this9.array.length) {
			var newSize8 = this9.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(this9.array);
			this9.array = newArray8;
		}
		this9.array[this9.pos++] = x + w;
		var this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			var newSize9 = this10.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(this10.array);
			this10.array = newArray9;
		}
		this10.array[this10.pos++] = y;
		var this11 = this.tmp;
		if(this11.pos == this11.array.length) {
			var newSize10 = this11.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(this11.array);
			this11.array = newArray10;
		}
		this11.array[this11.pos++] = 1;
		var this12 = this.tmp;
		if(this12.pos == this12.array.length) {
			var newSize11 = this12.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(this12.array);
			this12.array = newArray11;
		}
		this12.array[this12.pos++] = 0;
		var this13 = this.tmp;
		if(this13.pos == this13.array.length) {
			var newSize12 = this13.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(this13.array);
			this13.array = newArray12;
		}
		this13.array[this13.pos++] = (ctr >> 16 & 255) / 255.;
		var this14 = this.tmp;
		if(this14.pos == this14.array.length) {
			var newSize13 = this14.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(this14.array);
			this14.array = newArray13;
		}
		this14.array[this14.pos++] = (ctr >> 8 & 255) / 255.;
		var this15 = this.tmp;
		if(this15.pos == this15.array.length) {
			var newSize14 = this15.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(this15.array);
			this15.array = newArray14;
		}
		this15.array[this15.pos++] = (ctr & 255) / 255.;
		var this16 = this.tmp;
		if(this16.pos == this16.array.length) {
			var newSize15 = this16.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(this16.array);
			this16.array = newArray15;
		}
		this16.array[this16.pos++] = (ctr >>> 24) / 255.;
		var this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			var newSize16 = this17.array.length << 1;
			if(newSize16 < 128) {
				newSize16 = 128;
			}
			var newArray16 = new Float32Array(newSize16);
			newArray16.set(this17.array);
			this17.array = newArray16;
		}
		this17.array[this17.pos++] = x;
		var this18 = this.tmp;
		if(this18.pos == this18.array.length) {
			var newSize17 = this18.array.length << 1;
			if(newSize17 < 128) {
				newSize17 = 128;
			}
			var newArray17 = new Float32Array(newSize17);
			newArray17.set(this18.array);
			this18.array = newArray17;
		}
		this18.array[this18.pos++] = y + h;
		var this19 = this.tmp;
		if(this19.pos == this19.array.length) {
			var newSize18 = this19.array.length << 1;
			if(newSize18 < 128) {
				newSize18 = 128;
			}
			var newArray18 = new Float32Array(newSize18);
			newArray18.set(this19.array);
			this19.array = newArray18;
		}
		this19.array[this19.pos++] = 0;
		var this20 = this.tmp;
		if(this20.pos == this20.array.length) {
			var newSize19 = this20.array.length << 1;
			if(newSize19 < 128) {
				newSize19 = 128;
			}
			var newArray19 = new Float32Array(newSize19);
			newArray19.set(this20.array);
			this20.array = newArray19;
		}
		this20.array[this20.pos++] = 1;
		var this21 = this.tmp;
		if(this21.pos == this21.array.length) {
			var newSize20 = this21.array.length << 1;
			if(newSize20 < 128) {
				newSize20 = 128;
			}
			var newArray20 = new Float32Array(newSize20);
			newArray20.set(this21.array);
			this21.array = newArray20;
		}
		this21.array[this21.pos++] = (cbl >> 16 & 255) / 255.;
		var this22 = this.tmp;
		if(this22.pos == this22.array.length) {
			var newSize21 = this22.array.length << 1;
			if(newSize21 < 128) {
				newSize21 = 128;
			}
			var newArray21 = new Float32Array(newSize21);
			newArray21.set(this22.array);
			this22.array = newArray21;
		}
		this22.array[this22.pos++] = (cbl >> 8 & 255) / 255.;
		var this23 = this.tmp;
		if(this23.pos == this23.array.length) {
			var newSize22 = this23.array.length << 1;
			if(newSize22 < 128) {
				newSize22 = 128;
			}
			var newArray22 = new Float32Array(newSize22);
			newArray22.set(this23.array);
			this23.array = newArray22;
		}
		this23.array[this23.pos++] = (cbl & 255) / 255.;
		var this24 = this.tmp;
		if(this24.pos == this24.array.length) {
			var newSize23 = this24.array.length << 1;
			if(newSize23 < 128) {
				newSize23 = 128;
			}
			var newArray23 = new Float32Array(newSize23);
			newArray23.set(this24.array);
			this24.array = newArray23;
		}
		this24.array[this24.pos++] = (cbl >>> 24) / 255.;
		var this25 = this.tmp;
		if(this25.pos == this25.array.length) {
			var newSize24 = this25.array.length << 1;
			if(newSize24 < 128) {
				newSize24 = 128;
			}
			var newArray24 = new Float32Array(newSize24);
			newArray24.set(this25.array);
			this25.array = newArray24;
		}
		this25.array[this25.pos++] = x + w;
		var this26 = this.tmp;
		if(this26.pos == this26.array.length) {
			var newSize25 = this26.array.length << 1;
			if(newSize25 < 128) {
				newSize25 = 128;
			}
			var newArray25 = new Float32Array(newSize25);
			newArray25.set(this26.array);
			this26.array = newArray25;
		}
		this26.array[this26.pos++] = y + h;
		var this27 = this.tmp;
		if(this27.pos == this27.array.length) {
			var newSize26 = this27.array.length << 1;
			if(newSize26 < 128) {
				newSize26 = 128;
			}
			var newArray26 = new Float32Array(newSize26);
			newArray26.set(this27.array);
			this27.array = newArray26;
		}
		this27.array[this27.pos++] = 1;
		var this28 = this.tmp;
		if(this28.pos == this28.array.length) {
			var newSize27 = this28.array.length << 1;
			if(newSize27 < 128) {
				newSize27 = 128;
			}
			var newArray27 = new Float32Array(newSize27);
			newArray27.set(this28.array);
			this28.array = newArray27;
		}
		this28.array[this28.pos++] = 0;
		var this29 = this.tmp;
		if(this29.pos == this29.array.length) {
			var newSize28 = this29.array.length << 1;
			if(newSize28 < 128) {
				newSize28 = 128;
			}
			var newArray28 = new Float32Array(newSize28);
			newArray28.set(this29.array);
			this29.array = newArray28;
		}
		this29.array[this29.pos++] = (cbr >> 16 & 255) / 255.;
		var this30 = this.tmp;
		if(this30.pos == this30.array.length) {
			var newSize29 = this30.array.length << 1;
			if(newSize29 < 128) {
				newSize29 = 128;
			}
			var newArray29 = new Float32Array(newSize29);
			newArray29.set(this30.array);
			this30.array = newArray29;
		}
		this30.array[this30.pos++] = (cbr >> 8 & 255) / 255.;
		var this31 = this.tmp;
		if(this31.pos == this31.array.length) {
			var newSize30 = this31.array.length << 1;
			if(newSize30 < 128) {
				newSize30 = 128;
			}
			var newArray30 = new Float32Array(newSize30);
			newArray30.set(this31.array);
			this31.array = newArray30;
		}
		this31.array[this31.pos++] = (cbr & 255) / 255.;
		var this32 = this.tmp;
		if(this32.pos == this32.array.length) {
			var newSize31 = this32.array.length << 1;
			if(newSize31 < 128) {
				newSize31 = 128;
			}
			var newArray31 = new Float32Array(newSize31);
			newArray31.set(this32.array);
			this32.array = newArray31;
		}
		this32.array[this32.pos++] = (cbr >>> 24) / 255.;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		x += w;
		y += h;
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,fillArc: function(x,y,ray,c,start,end) {
		if(end <= start) {
			return;
		}
		var arcLength = end - start;
		var nsegments = Math.ceil(ray * 3.14 * 2 / 4);
		if(nsegments < 4) {
			nsegments = 4;
		}
		var angle = arcLength / nsegments;
		var prevX = -Infinity;
		var prevY = -Infinity;
		var _x = 0.;
		var _y = 0.;
		var i = 0;
		while(i < nsegments) {
			var a = start + i * angle;
			_x = x + Math.cos(a) * ray;
			_y = y + Math.sin(a) * ray;
			if(prevX != -Infinity) {
				this.addPoint(x,y,c);
				this.addPoint(_x,_y,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(prevX,prevY,c);
			}
			prevX = _x;
			prevY = _y;
			++i;
		}
		var a1 = end;
		_x = x + Math.cos(a1) * ray;
		_y = y + Math.sin(a1) * ray;
		this.addPoint(x,y,c);
		this.addPoint(_x,_y,c);
		this.addPoint(prevX,prevY,c);
		this.addPoint(prevX,prevY,c);
	}
	,fillCircle: function(x,y,radius,c) {
		var nsegments = Math.ceil(radius * 3.14 * 2 / 2);
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = Math.PI * 2 / nsegments;
		var prevX = -Infinity;
		var prevY = -Infinity;
		var firstX = -Infinity;
		var firstY = -Infinity;
		var curX = 0.;
		var curY = 0.;
		var _g1 = 0;
		var _g = nsegments;
		while(_g1 < _g) {
			var i = _g1++;
			var a = i * angle;
			curX = x + Math.cos(a) * radius;
			curY = y + Math.sin(a) * radius;
			if(prevX != -Infinity) {
				this.addPoint(x,y,c);
				this.addPoint(curX,curY,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(x,y,c);
			}
			if(firstX == -Infinity) {
				firstX = curX;
				firstY = curY;
			}
			prevX = curX;
			prevY = curY;
		}
		this.addPoint(x,y,c);
		this.addPoint(curX,curY,c);
		this.addPoint(firstX,firstY,c);
		this.addPoint(x,y,c);
	}
	,circle: function(x,y,ray,size,c) {
		if(size > ray) {
			return;
		}
		var nsegments = Math.ceil(ray * 3.14 * 2 / 2);
		if(nsegments < 3) {
			nsegments = 3;
		}
		var ray1 = ray - size;
		var angle = Math.PI * 2 / nsegments;
		var prevX = -Infinity;
		var prevY = -Infinity;
		var prevX1 = -Infinity;
		var prevY1 = -Infinity;
		var _g1 = 0;
		var _g = nsegments;
		while(_g1 < _g) {
			var i = _g1++;
			var a = i * angle;
			var _x = x + Math.cos(a) * ray;
			var _y = y + Math.sin(a) * ray;
			var _x1 = x + Math.cos(a) * ray1;
			var _y1 = y + Math.sin(a) * ray1;
			if(prevX != -Infinity) {
				this.addPoint(_x,_y,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(_x1,_y1,c);
				this.addPoint(prevX1,prevY1,c);
			}
			prevX = _x;
			prevY = _y;
			prevX1 = _x1;
			prevY1 = _y1;
		}
	}
	,arc: function(x,y,ray,size,start,end,c) {
		if(size > ray) {
			return;
		}
		if(end <= start) {
			return;
		}
		var arcLength = end - start;
		var nsegments = Math.ceil(ray * 3.14 * 2 / 4);
		if(nsegments < 3) {
			nsegments = 3;
		}
		var ray1 = ray - size;
		var angle = arcLength / nsegments;
		var prevX = -Infinity;
		var prevY = -Infinity;
		var prevX1 = -Infinity;
		var prevY1 = -Infinity;
		var _x = 0.;
		var _y = 0.;
		var _x1 = 0.;
		var _y1 = 0.;
		var _g1 = 0;
		var _g = nsegments;
		while(_g1 < _g) {
			var i = _g1++;
			var a = start + i * angle;
			_x = x + Math.cos(a) * ray;
			_y = y + Math.sin(a) * ray;
			_x1 = x + Math.cos(a) * ray1;
			_y1 = y + Math.sin(a) * ray1;
			if(prevX != -Infinity) {
				this.addPoint(_x,_y,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(_x1,_y1,c);
				this.addPoint(prevX1,prevY1,c);
			}
			prevX = _x;
			prevY = _y;
			prevX1 = _x1;
			prevY1 = _y1;
		}
		var a1 = end;
		_x = x + Math.cos(a1) * ray;
		_y = y + Math.sin(a1) * ray;
		_x1 = x + Math.cos(a1) * ray1;
		_y1 = y + Math.sin(a1) * ray1;
		this.addPoint(_x,_y,c);
		this.addPoint(prevX,prevY,c);
		this.addPoint(_x1,_y1,c);
		this.addPoint(prevX1,prevY1,c);
	}
	,alloc: function(engine) {
		if(this.tmp == null) {
			this.clear();
		}
		this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
	}
	,flush: function() {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		}
	}
	,doRender: function(engine,min,len) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		}
		engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,min,len);
	}
	,getCLID: function() {
		return h2d__$TileGroup_TileLayerContent.__clid;
	}
	,__class__: h2d__$TileGroup_TileLayerContent
});
var h2d_col_IBounds = function() {
	this.xMin = 2147483647;
	this.yMin = 2147483647;
	this.xMax = -2147483648;
	this.yMax = -2147483648;
};
$hxClasses["h2d.col.IBounds"] = h2d_col_IBounds;
h2d_col_IBounds.__name__ = ["h2d","col","IBounds"];
h2d_col_IBounds.fromValues = function(x0,y0,width,height) {
	var b = new h2d_col_IBounds();
	b.xMin = x0;
	b.yMin = y0;
	b.xMax = x0 + width;
	b.yMax = y0 + height;
	return b;
};
h2d_col_IBounds.fromPoints = function(min,max) {
	var b = new h2d_col_IBounds();
	b.xMin = min.x;
	b.yMin = min.y;
	b.xMax = max.x;
	b.yMax = max.y;
	return b;
};
h2d_col_IBounds.prototype = {
	toBounds: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		var x0 = this.xMin * scale;
		var y0 = this.yMin * scale;
		var width = (this.xMax - this.xMin) * scale;
		var height = (this.yMax - this.yMin) * scale;
		var b = new h2d_col_Bounds();
		b.xMin = x0;
		b.yMin = y0;
		b.xMax = x0 + width;
		b.yMax = y0 + height;
		return b;
	}
	,intersects: function(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.xMax < b.xMin || this.yMax < b.yMin);
	}
	,contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin) {
			return p.y < this.yMax;
		} else {
			return false;
		}
	}
	,addBounds: function(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
	}
	,addPoint: function(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
	}
	,addPos: function(x,y) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,set: function(x,y,width,height) {
		this.xMin = x;
		this.yMin = y;
		this.xMax = x + width;
		this.yMax = y + height;
	}
	,setMin: function(p) {
		this.xMin = p.x;
		this.yMin = p.y;
	}
	,setMax: function(p) {
		this.xMax = p.x;
		this.yMax = p.y;
	}
	,doIntersect: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a < b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		this.yMin = a1 < b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		this.xMax = a2 > b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		this.yMax = a3 > b4 ? b4 : a3;
	}
	,doUnion: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a > b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		this.yMin = a1 > b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		this.xMax = a2 < b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		this.yMax = a3 < b4 ? b4 : a3;
	}
	,intersection: function(b) {
		var i = new h2d_col_Bounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a < b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		i.yMin = a1 < b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		i.xMax = a2 > b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		i.yMax = a3 > b4 ? b4 : a3;
		if(i.xMax < i.xMin) {
			i.xMax = i.xMin;
		}
		if(i.yMax < i.yMin) {
			i.yMax = i.yMin;
		}
		return i;
	}
	,union: function(b) {
		var i = new h2d_col_Bounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a > b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		i.yMin = a1 > b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		i.xMax = a2 < b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		i.yMax = a3 < b4 ? b4 : a3;
		return i;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.yMin = b.yMin;
		this.xMax = b.xMax;
		this.yMax = b.yMax;
	}
	,offset: function(dx,dy) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
	}
	,getMin: function() {
		return new h2d_col_IPoint(this.xMin,this.yMin);
	}
	,getCenter: function() {
		return new h2d_col_IPoint(this.xMin + this.xMax >> 1,this.yMin + this.yMax >> 1);
	}
	,getSize: function() {
		return new h2d_col_IPoint(this.xMax - this.xMin,this.yMax - this.yMin);
	}
	,getMax: function() {
		return new h2d_col_IPoint(this.xMax,this.yMax);
	}
	,isEmpty: function() {
		if(this.xMax > this.xMin) {
			return this.yMax <= this.yMin;
		} else {
			return true;
		}
	}
	,empty: function() {
		this.xMin = 2147483647;
		this.yMin = 2147483647;
		this.xMax = -2147483648;
		this.yMax = -2147483648;
	}
	,all: function() {
		this.xMin = -2147483648;
		this.yMin = -2147483648;
		this.xMax = 2147483647;
		this.yMax = 2147483647;
	}
	,clone: function() {
		var b = new h2d_col_IBounds();
		b.xMin = this.xMin;
		b.yMin = this.yMin;
		b.xMax = this.xMax;
		b.yMax = this.yMax;
		return b;
	}
	,get_x: function() {
		return this.xMin;
	}
	,get_y: function() {
		return this.yMin;
	}
	,set_x: function(x) {
		this.xMax += x - this.xMin;
		return this.xMin = x;
	}
	,set_y: function(y) {
		this.yMax += y - this.yMin;
		return this.yMin = y;
	}
	,get_width: function() {
		return this.xMax - this.xMin;
	}
	,get_height: function() {
		return this.yMax - this.yMin;
	}
	,set_width: function(w) {
		this.xMax = this.xMin + w;
		return w;
	}
	,set_height: function(h) {
		this.yMax = this.yMin + h;
		return h;
	}
	,toString: function() {
		return "{" + Std.string(new h2d_col_IPoint(this.xMin,this.yMin)) + "," + Std.string(new h2d_col_IPoint(this.xMax - this.xMin,this.yMax - this.yMin)) + "}";
	}
	,__class__: h2d_col_IBounds
};
var h2d_col_IPoint = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.IPoint"] = h2d_col_IPoint;
h2d_col_IPoint.__name__ = ["h2d","col","IPoint"];
h2d_col_IPoint.prototype = {
	toPoint: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		return new h2d_col_Point(this.x * scale,this.y * scale);
	}
	,distanceSq: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return dx * dx + dy * dy;
	}
	,distance: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,toString: function() {
		return "{" + this.x + "," + this.y + "}";
	}
	,sub: function(p) {
		return new h2d_col_Point(this.x - p.x,this.y - p.y);
	}
	,add: function(p) {
		return new h2d_col_Point(this.x + p.x,this.y + p.y);
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,clone: function() {
		return new h2d_col_IPoint(this.x,this.y);
	}
	,__class__: h2d_col_IPoint
};
var h2d_col_Matrix = function() {
	this.a = 1;
	this.b = 0;
	this.c = 0;
	this.d = 1;
	this.x = 0;
	this.y = 0;
};
$hxClasses["h2d.col.Matrix"] = h2d_col_Matrix;
h2d_col_Matrix.__name__ = ["h2d","col","Matrix"];
h2d_col_Matrix.prototype = {
	identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.x = 0;
		this.y = 0;
	}
	,invert: function() {
		this.inverse(this);
	}
	,getDeterminant: function() {
		return this.a * this.d - this.b * this.c;
	}
	,inverse: function(m) {
		var a = m.a;
		var b = m.b;
		var c = m.c;
		var d = m.d;
		var x = m.x;
		var y = m.y;
		var invDet = 1 / (this.a * this.d - this.b * this.c);
		this.a = d * invDet;
		this.b = -b * invDet;
		this.c = -c * invDet;
		this.d = a * invDet;
		this.x = (-x * d + c * y) * invDet;
		this.y = (x * b - a * y) * invDet;
	}
	,transform: function(pt) {
		return new h2d_col_Point(pt.x * this.a + pt.y * this.c + this.x,pt.x * this.b + pt.y * this.d + this.y);
	}
	,translate: function(x,y) {
		this.x += x;
		this.y += y;
	}
	,prependTranslate: function(x,y) {
		this.x += this.a * x + this.c * y;
		this.y += this.b * x + this.d * y;
	}
	,multiply: function(a,b) {
		var aa = a.a;
		var ab = a.b;
		var ac = a.c;
		var ad = a.d;
		var ax = a.x;
		var ay = a.y;
		var ba = b.a;
		var bb = b.b;
		var bc = b.c;
		var bd = b.d;
		var bx = b.x;
		var by = b.y;
		this.a = aa * ba + ab * bc;
		this.b = aa * bb + ab * bd;
		this.c = ac * ba + ad * bc;
		this.d = ac * bb + ad * bd;
		this.x = ax * ba + ay * bc + bx;
		this.y = ax * bb + ay * bd + by;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.c *= sx;
		this.x *= sx;
		this.b *= sy;
		this.d *= sy;
		this.y *= sy;
	}
	,toString: function() {
		return "MAT=[\n" + "  [ " + hxd_Math.fmt(this.a) + ", " + hxd_Math.fmt(this.b) + " ]\n" + "  [ " + hxd_Math.fmt(this.c) + ", " + hxd_Math.fmt(this.d) + " ]\n" + "  [ " + hxd_Math.fmt(this.x) + ", " + hxd_Math.fmt(this.y) + " ]\n" + "]";
	}
	,__class__: h2d_col_Matrix
};
var h2d_col_Point = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.Point"] = h2d_col_Point;
h2d_col_Point.__name__ = ["h2d","col","Point"];
h2d_col_Point.prototype = {
	toIPoint: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		return new h2d_col_IPoint(Math.floor(this.x * scale),Math.floor(this.y * scale));
	}
	,distanceSq: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return dx * dx + dy * dy;
	}
	,distance: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "}";
	}
	,sub: function(p) {
		return new h2d_col_Point(this.x - p.x,this.y - p.y);
	}
	,add: function(p) {
		return new h2d_col_Point(this.x + p.x,this.y + p.y);
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y;
	}
	,rotate: function(angle) {
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		var x2 = this.x * c - this.y * s;
		var y2 = this.x * s + this.y * c;
		this.x = x2;
		this.y = y2;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,normalize: function() {
		var k = this.x * this.x + this.y * this.y;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
	}
	,normalizeFast: function() {
		var k = this.x * this.x + this.y * this.y;
		k = 1. / Math.sqrt(k);
		this.x *= k;
		this.y *= k;
	}
	,set: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,scale: function(f) {
		this.x *= f;
		this.y *= f;
		return this;
	}
	,clone: function() {
		return new h2d_col_Point(this.x,this.y);
	}
	,__class__: h2d_col_Point
};
var h2d_filter_Filter = function() {
	this.smooth = false;
	this.boundsExtend = 0.;
	this.autoBounds = true;
};
$hxClasses["h2d.filter.Filter"] = h2d_filter_Filter;
h2d_filter_Filter.__name__ = ["h2d","filter","Filter"];
h2d_filter_Filter.prototype = {
	sync: function(ctx,s) {
	}
	,bind: function(s) {
	}
	,unbind: function(s) {
	}
	,getBounds: function(s,bounds) {
		s.getBounds(s,bounds);
		bounds.xMin -= this.boundsExtend;
		bounds.yMin -= this.boundsExtend;
		bounds.xMax += this.boundsExtend;
		bounds.yMax += this.boundsExtend;
	}
	,draw: function(ctx,input) {
		return input;
	}
	,__class__: h2d_filter_Filter
};
var h3d_BufferFlag = $hxClasses["h3d.BufferFlag"] = { __ename__ : true, __constructs__ : ["Dynamic","Triangles","Quads","Managed","RawFormat","NoAlloc"] };
h3d_BufferFlag.Dynamic = ["Dynamic",0];
h3d_BufferFlag.Dynamic.toString = $estr;
h3d_BufferFlag.Dynamic.__enum__ = h3d_BufferFlag;
h3d_BufferFlag.Triangles = ["Triangles",1];
h3d_BufferFlag.Triangles.toString = $estr;
h3d_BufferFlag.Triangles.__enum__ = h3d_BufferFlag;
h3d_BufferFlag.Quads = ["Quads",2];
h3d_BufferFlag.Quads.toString = $estr;
h3d_BufferFlag.Quads.__enum__ = h3d_BufferFlag;
h3d_BufferFlag.Managed = ["Managed",3];
h3d_BufferFlag.Managed.toString = $estr;
h3d_BufferFlag.Managed.__enum__ = h3d_BufferFlag;
h3d_BufferFlag.RawFormat = ["RawFormat",4];
h3d_BufferFlag.RawFormat.toString = $estr;
h3d_BufferFlag.RawFormat.__enum__ = h3d_BufferFlag;
h3d_BufferFlag.NoAlloc = ["NoAlloc",5];
h3d_BufferFlag.NoAlloc.toString = $estr;
h3d_BufferFlag.NoAlloc.__enum__ = h3d_BufferFlag;
h3d_BufferFlag.__empty_constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.Triangles,h3d_BufferFlag.Quads,h3d_BufferFlag.Managed,h3d_BufferFlag.RawFormat,h3d_BufferFlag.NoAlloc];
var h3d_Buffer = function(vertices,stride,flags,allocPos) {
	this.id = h3d_Buffer.GUID++;
	this.vertices = vertices;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f[1];
		}
	}
	if((this.flags & 1 << h3d_BufferFlag.NoAlloc[1]) == 0) {
		h3d_Engine.CURRENT.mem.allocBuffer(this,stride);
	}
};
$hxClasses["h3d.Buffer"] = h3d_Buffer;
h3d_Buffer.__name__ = ["h3d","Buffer"];
h3d_Buffer.ofFloats = function(v,stride,flags,allocPos) {
	var nvert = v.pos / stride | 0;
	var b = new h3d_Buffer(nvert,stride,flags,allocPos);
	b.uploadVector(v,0,nvert);
	return b;
};
h3d_Buffer.ofSubFloats = function(v,stride,vertices,flags,allocPos) {
	var b = new h3d_Buffer(vertices,stride,flags,allocPos);
	b.uploadVector(v,0,vertices);
	return b;
};
h3d_Buffer.prototype = {
	isDisposed: function() {
		if(this.buffer != null) {
			return this.buffer.vbuf == null;
		} else {
			return true;
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.freeBuffer(this);
			this.buffer = null;
			if(this.next != null) {
				this.next.dispose();
			}
		}
	}
	,totalVertices: function() {
		var count = 0;
		var b = this;
		while(b != null) {
			count += b.vertices;
			b = b.next;
		}
		return count;
	}
	,uploadVector: function(buf,bufPos,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		var cur = this;
		while(cur != null && startVertice >= cur.vertices) {
			startVertice -= cur.vertices;
			cur = cur.next;
		}
		while(vertices > 0) {
			if(cur == null) {
				throw new js__$Boot_HaxeError("Too many vertices");
			}
			var count = vertices + startVertice > cur.vertices ? cur.vertices - startVertice : vertices;
			cur.buffer.uploadVertexBuffer(cur.position + startVertice,count,buf,bufPos);
			startVertice = 0;
			bufPos += count * this.buffer.stride;
			vertices -= count;
			cur = cur.next;
		}
	}
	,uploadBytes: function(data,dataPos,vertices) {
		var cur = this;
		while(vertices > 0) {
			if(cur == null) {
				throw new js__$Boot_HaxeError("Too many vertices");
			}
			var count = vertices > cur.vertices ? cur.vertices : vertices;
			cur.buffer.uploadVertexBytes(cur.position,count,data,dataPos);
			dataPos += count * this.buffer.stride * 4;
			vertices -= count;
			cur = cur.next;
		}
	}
	,readBytes: function(bytes,bytesPosition,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		var cur = this;
		while(cur != null && startVertice >= cur.vertices) {
			startVertice -= cur.vertices;
			cur = cur.next;
		}
		while(vertices > 0) {
			if(cur == null) {
				throw new js__$Boot_HaxeError("Too many vertices");
			}
			var count = vertices + startVertice > cur.vertices ? cur.vertices - startVertice : vertices;
			cur.buffer.readVertexBytes(cur.position + startVertice,count,bytes,bytesPosition);
			startVertice = 0;
			bytesPosition += count * this.buffer.stride * 4;
			vertices -= count;
			cur = cur.next;
		}
	}
	,__class__: h3d_Buffer
};
var h3d_BufferOffset = function(buffer,offset) {
	this.id = h3d_BufferOffset.UID++;
	this.buffer = buffer;
	this.offset = offset;
};
$hxClasses["h3d.BufferOffset"] = h3d_BufferOffset;
h3d_BufferOffset.__name__ = ["h3d","BufferOffset"];
h3d_BufferOffset.prototype = {
	dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		this.next = null;
	}
	,__class__: h3d_BufferOffset
};
var h3d_Camera = function(fovY,zoom,screenRatio,zNear,zFar,rightHanded) {
	if(rightHanded == null) {
		rightHanded = false;
	}
	if(zFar == null) {
		zFar = 4000.;
	}
	if(zNear == null) {
		zNear = 0.02;
	}
	if(screenRatio == null) {
		screenRatio = 1.333333;
	}
	if(zoom == null) {
		zoom = 1.;
	}
	if(fovY == null) {
		fovY = 25.;
	}
	this.viewY = 0.;
	this.viewX = 0.;
	this.fovY = fovY;
	this.zoom = zoom;
	this.screenRatio = screenRatio;
	this.zNear = zNear;
	this.zFar = zFar;
	this.rightHanded = rightHanded;
	this.pos = new h3d_Vector(2,3,4);
	this.up = new h3d_Vector(0,0,1);
	this.target = new h3d_Vector(0,0,0);
	this.m = new h3d_Matrix();
	this.mcam = new h3d_Matrix();
	this.mproj = new h3d_Matrix();
	this.update();
};
$hxClasses["h3d.Camera"] = h3d_Camera;
h3d_Camera.__name__ = ["h3d","Camera"];
h3d_Camera.prototype = {
	setFovX: function(fovX,withRatio) {
		var degToRad = Math.PI / 180;
		this.fovY = 2 * Math.atan(Math.tan(fovX * 0.5 * degToRad) / withRatio) / degToRad;
	}
	,getFovX: function() {
		var degToRad = Math.PI / 180;
		var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
		var fovX = halfFovX * 2 / degToRad;
		return fovX;
	}
	,clone: function() {
		var c = new h3d_Camera(this.fovY,this.zoom,this.screenRatio,this.zNear,this.zFar,this.rightHanded);
		var _this = this.pos;
		c.pos = new h3d_Vector(_this.x,_this.y,_this.z,_this.w);
		var _this1 = this.up;
		c.up = new h3d_Vector(_this1.x,_this1.y,_this1.z,_this1.w);
		var _this2 = this.target;
		c.target = new h3d_Vector(_this2.x,_this2.y,_this2.z,_this2.w);
		c.update();
		return c;
	}
	,getInverseViewProj: function() {
		if(this.minv == null) {
			this.minv = new h3d_Matrix();
		}
		if(this.needInv) {
			this.minv.initInverse(this.m);
			this.needInv = false;
		}
		return this.minv;
	}
	,getInverseView: function() {
		if(this.miview == null) {
			this.miview = new h3d_Matrix();
			this.miview._44 = 0;
		}
		if(this.miview._44 == 0) {
			this.miview.initInverse(this.mcam);
		}
		return this.miview;
	}
	,unproject: function(screenX,screenY,camZ) {
		var p = new h3d_Vector(screenX,screenY,camZ);
		var m = this.getInverseViewProj();
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + p.w * m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + p.w * m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + p.w * m._43;
		var iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + p.w * m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		p.w = 1;
		return p;
	}
	,rayFromScreen: function(pixelX,pixelY) {
		var engine = h3d_Engine.CURRENT;
		var rx = (pixelX / engine.width - 0.5) * 2;
		var ry = (0.5 - pixelY / engine.height) * 2;
		var p1_z;
		var p1_y;
		var p1_x;
		var _this = this.unproject(rx,ry,0);
		p1_x = _this.x;
		p1_y = _this.y;
		p1_z = _this.z;
		var p2_z;
		var p2_y;
		var p2_x;
		var _this1 = this.unproject(rx,ry,1);
		p2_x = _this1.x;
		p2_y = _this1.y;
		p2_z = _this1.z;
		var r = new h3d_col_Ray();
		r.px = p1_x;
		r.py = p1_y;
		r.pz = p1_z;
		r.lx = p2_x - p1_x;
		r.ly = p2_y - p1_y;
		r.lz = p2_z - p1_z;
		r.normalize();
		return r;
	}
	,update: function() {
		if(this.follow != null) {
			var _this = this.pos;
			_this.x = 0;
			_this.y = 0;
			_this.z = 0;
			_this.w = 1.;
			var _this1 = this.target;
			_this1.x = 0;
			_this1.y = 0;
			_this1.z = 0;
			_this1.w = 1.;
			this.follow.pos.localToGlobal(this.pos);
			this.follow.target.localToGlobal(this.target);
			if(this.follow.pos.name != null) {
				var p = this.follow.pos;
				while(p != null) {
					if(p.currentAnimation != null) {
						var v = p.currentAnimation.getPropValue(this.follow.pos.name,"FOVY");
						if(v != null) {
							this.fovY = v;
							break;
						}
					}
					p = p.parent;
				}
			}
		}
		this.makeCameraMatrix(this.mcam);
		this.makeFrustumMatrix(this.mproj);
		this.m.multiply(this.mcam,this.mproj);
		this.needInv = true;
		if(this.miview != null) {
			this.miview._44 = 0;
		}
	}
	,getFrustum: function() {
		return new h3d_col_Frustum(this.m);
	}
	,getFrustumCorners: function() {
		return [this.unproject(-1,1,0),this.unproject(1,1,0),this.unproject(1,-1,0),this.unproject(-1,-1,0),this.unproject(-1,1,1),this.unproject(1,1,1),this.unproject(1,-1,1),this.unproject(-1,-1,1)];
	}
	,lostUp: function() {
		var _this = this.pos;
		var p2 = new h3d_Vector(_this.x,_this.y,_this.z,_this.w);
		p2.normalize();
		var v = this.up;
		return Math.abs(p2.x * v.x + p2.y * v.y + p2.z * v.z) > 0.999;
	}
	,movePosAxis: function(dx,dy,dz) {
		if(dz == null) {
			dz = 0.;
		}
		var p_z;
		var p_y;
		var p_x;
		var p_w;
		p_x = dx;
		p_y = dy;
		p_z = dz;
		p_w = 1.;
		var m = this.mcam;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
		var iw = 1 / (p_x * m._14 + p_y * m._24 + p_z * m._34 + p_w * m._44);
		p_x = px * iw;
		p_y = py * iw;
		p_z = pz * iw;
		p_w = 1;
		this.pos.x += p_x;
		this.pos.y += p_y;
		this.pos.z += p_z;
	}
	,moveTargetAxis: function(dx,dy,dz) {
		if(dz == null) {
			dz = 0.;
		}
		var p_z;
		var p_y;
		var p_x;
		var p_w;
		p_x = dx;
		p_y = dy;
		p_z = dz;
		p_w = 1.;
		var m = this.mcam;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
		var iw = 1 / (p_x * m._14 + p_y * m._24 + p_z * m._34 + p_w * m._44);
		p_x = px * iw;
		p_y = py * iw;
		p_z = pz * iw;
		p_w = 1;
		this.target.x += p_x;
		this.target.y += p_y;
		this.target.z += p_z;
	}
	,forward: function(speed) {
		if(speed == null) {
			speed = 1.;
		}
		var c = 1 - 0.025 * speed;
		var _this = this.pos;
		_this.x = this.target.x + (this.pos.x - this.target.x) * c;
		_this.y = this.target.y + (this.pos.y - this.target.y) * c;
		_this.z = this.target.z + (this.pos.z - this.target.z) * c;
		_this.w = 1.;
	}
	,backward: function(speed) {
		if(speed == null) {
			speed = 1.;
		}
		var c = 1 + 0.025 * speed;
		var _this = this.pos;
		_this.x = this.target.x + (this.pos.x - this.target.x) * c;
		_this.y = this.target.y + (this.pos.y - this.target.y) * c;
		_this.z = this.target.z + (this.pos.z - this.target.z) * c;
		_this.w = 1.;
	}
	,makeCameraMatrix: function(m) {
		var az;
		if(this.rightHanded) {
			var _this = this.pos;
			var v = this.target;
			az = new h3d_Vector(_this.x - v.x,_this.y - v.y,_this.z - v.z,_this.w - v.w);
		} else {
			var _this1 = this.target;
			var v1 = this.pos;
			az = new h3d_Vector(_this1.x - v1.x,_this1.y - v1.y,_this1.z - v1.z,_this1.w - v1.w);
		}
		az.normalize();
		var _this2 = this.up;
		var ax = new h3d_Vector(_this2.y * az.z - _this2.z * az.y,_this2.z * az.x - _this2.x * az.z,_this2.x * az.y - _this2.y * az.x,1);
		ax.normalize();
		if(Math.sqrt(ax.x * ax.x + ax.y * ax.y + ax.z * ax.z) == 0) {
			ax.x = az.y;
			ax.y = az.z;
			ax.z = az.x;
		}
		var ay_z;
		var ay_y;
		var ay_x;
		var ay_w;
		ay_x = az.y * ax.z - az.z * ax.y;
		ay_y = az.z * ax.x - az.x * ax.z;
		ay_z = az.x * ax.y - az.y * ax.x;
		ay_w = 1;
		m._11 = ax.x;
		m._12 = ay_x;
		m._13 = az.x;
		m._14 = 0;
		m._21 = ax.y;
		m._22 = ay_y;
		m._23 = az.y;
		m._24 = 0;
		m._31 = ax.z;
		m._32 = ay_z;
		m._33 = az.z;
		m._34 = 0;
		var v2 = this.pos;
		m._41 = -(ax.x * v2.x + ax.y * v2.y + ax.z * v2.z);
		var v3 = this.pos;
		m._42 = -(ay_x * v3.x + ay_y * v3.y + ay_z * v3.z);
		var v4 = this.pos;
		m._43 = -(az.x * v4.x + az.y * v4.y + az.z * v4.z);
		m._44 = 1;
	}
	,makeFrustumMatrix: function(m) {
		m.zero();
		var bounds = this.orthoBounds;
		if(bounds != null) {
			var w = 1 / (bounds.xMax - bounds.xMin);
			var h = 1 / (bounds.yMax - bounds.yMin);
			var d = 1 / (bounds.zMax - bounds.zMin);
			m._11 = 2 * w;
			m._22 = 2 * h;
			m._33 = d;
			m._41 = -(bounds.xMin + bounds.xMax) * w;
			m._42 = -(bounds.yMin + bounds.yMax) * h;
			m._43 = -bounds.zMin * d;
			m._44 = 1;
		} else {
			var degToRad = Math.PI / 180;
			var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
			var scale = this.zoom / Math.tan(halfFovX);
			m._11 = scale;
			m._22 = scale * this.screenRatio;
			m._33 = this.zFar / (this.zFar - this.zNear);
			m._34 = 1;
			m._43 = -(this.zNear * this.zFar) / (this.zFar - this.zNear);
		}
		m._11 += this.viewX * m._14;
		m._21 += this.viewX * m._24;
		m._31 += this.viewX * m._34;
		m._41 += this.viewX * m._44;
		m._12 += this.viewY * m._14;
		m._22 += this.viewY * m._24;
		m._32 += this.viewY * m._34;
		m._42 += this.viewY * m._44;
		if(this.rightHanded) {
			m._33 *= -1;
			m._34 *= -1;
		}
	}
	,project: function(x,y,z,screenWidth,screenHeight,snapToPixel) {
		if(snapToPixel == null) {
			snapToPixel = true;
		}
		var p = new h3d_Vector(x,y,z);
		var m = this.m;
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + p.w * m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + p.w * m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + p.w * m._43;
		var iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + p.w * m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		p.w = 1;
		p.x = (p.x + 1) * 0.5 * screenWidth;
		p.y = (-p.y + 1) * 0.5 * screenHeight;
		if(snapToPixel) {
			p.x = Math.round(p.x);
			p.y = Math.round(p.y);
		}
		return p;
	}
	,load: function(cam) {
		var _this = this.pos;
		var v = cam.pos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		var _this1 = this.target;
		var v1 = cam.target;
		_this1.x = v1.x;
		_this1.y = v1.y;
		_this1.z = v1.z;
		_this1.w = v1.w;
		var _this2 = this.up;
		var v2 = cam.up;
		_this2.x = v2.x;
		_this2.y = v2.y;
		_this2.z = v2.z;
		_this2.w = v2.w;
		if(cam.orthoBounds != null) {
			this.orthoBounds = new h3d_col_Bounds();
			this.orthoBounds.load(cam.orthoBounds);
		} else {
			this.orthoBounds = null;
		}
		this.fovY = cam.fovY;
		this.screenRatio = cam.screenRatio;
		this.zoom = cam.zoom;
		this.zNear = cam.zNear;
		this.zFar = cam.zFar;
		if(cam.follow != null) {
			this.follow = { pos : cam.follow.pos, target : cam.follow.target};
		} else {
			this.follow = null;
		}
		this.viewX = cam.viewX;
		this.viewY = cam.viewY;
		this.update();
	}
	,__class__: h3d_Camera
};
var h3d__$Engine_TargetTmp = function(t,n,f,m) {
	this.t = t;
	this.next = n;
	this.face = f;
	this.mipLevel = m;
};
$hxClasses["h3d._Engine.TargetTmp"] = h3d__$Engine_TargetTmp;
h3d__$Engine_TargetTmp.__name__ = ["h3d","_Engine","TargetTmp"];
h3d__$Engine_TargetTmp.prototype = {
	__class__: h3d__$Engine_TargetTmp
};
var h3d_Engine = function(hardware,aa) {
	if(aa == null) {
		aa = 0;
	}
	if(hardware == null) {
		hardware = true;
	}
	this.resCache = new haxe_ds_ObjectMap();
	this.textureColorCache = new haxe_ds_IntMap();
	this.tmpVector = new h3d_Vector();
	this.frameCount = 0;
	this.backgroundColor = -16777216;
	this.hardware = hardware;
	this.antiAlias = aa;
	this.autoResize = true;
	this.set_fullScreen(!hxd_System.getValue(hxd_SystemValue.IsWindowed));
	this.stage = hxd_Stage.getInstance();
	this.realFps = hxd_System.getDefaultFrameRate();
	this.lastTime = new Date().getTime() / 1000;
	this.stage.addResizeEvent($bind(this,this.onStageResize));
	this.driver = new h3d_impl_GlDriver(this.antiAlias);
	h3d_Engine.CURRENT = this;
};
$hxClasses["h3d.Engine"] = h3d_Engine;
h3d_Engine.__name__ = ["h3d","Engine"];
h3d_Engine.getCurrent = function() {
	return h3d_Engine.CURRENT;
};
h3d_Engine.prototype = {
	setDriver: function(d) {
		this.driver = d;
		if(this.mem != null) {
			this.mem.driver = d;
		}
	}
	,setCurrent: function() {
		h3d_Engine.CURRENT = this;
	}
	,init: function() {
		this.driver.init($bind(this,this.onCreate),!this.hardware);
	}
	,driverName: function(details) {
		if(details == null) {
			details = false;
		}
		return this.driver.getDriverName(details);
	}
	,selectShader: function(shader) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		if(this.driver.selectShader(shader)) {
			this.shaderSwitches++;
		}
	}
	,selectMaterial: function(pass) {
		this.driver.selectMaterial(pass);
	}
	,uploadShaderBuffers: function(buffers,which) {
		this.driver.uploadShaderBuffers(buffers,which);
	}
	,selectBuffer: function(buf) {
		if(buf.isDisposed()) {
			return false;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectBuffer(buf);
		return true;
	}
	,renderTriBuffer: function(b,start,max) {
		if(max == null) {
			max = -1;
		}
		if(start == null) {
			start = 0;
		}
		this.renderBuffer(b,this.mem.triIndexes,3,start,max);
		return;
	}
	,renderQuadBuffer: function(b,start,max) {
		if(max == null) {
			max = -1;
		}
		if(start == null) {
			start = 0;
		}
		this.renderBuffer(b,this.mem.quadIndexes,2,start,max);
		return;
	}
	,renderBuffer: function(b,indexes,vertPerTri,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.isDisposed()) {
			return;
		}
		while(true) {
			var ntri = b.vertices / vertPerTri | 0;
			var pos = b.position / vertPerTri | 0;
			if(startTri > 0) {
				if(startTri >= ntri) {
					startTri -= ntri;
					b = b.next;
					if(!(b != null)) {
						break;
					} else {
						continue;
					}
				}
				pos += startTri;
				ntri -= startTri;
				startTri = 0;
			}
			if(drawTri >= 0) {
				if(drawTri == 0) {
					return;
				}
				drawTri -= ntri;
				if(drawTri < 0) {
					ntri += drawTri;
					drawTri = 0;
				}
			}
			if(ntri > 0 && this.selectBuffer(b)) {
				this.driver.draw(indexes.ibuf,pos * 3,ntri);
				this.drawTriangles += ntri;
				this.drawCalls++;
			}
			b = b.next;
			if(!(b != null)) {
				break;
			}
		}
	}
	,renderIndexed: function(b,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(b.next != null) {
			throw new js__$Boot_HaxeError("Buffer is split");
		}
		if(indexes.isDisposed()) {
			return;
		}
		var maxTri = indexes.count / 3 | 0;
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes.ibuf,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderMultiBuffers: function(buffers,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		var maxTri = indexes.count / 3 | 0;
		if(maxTri <= 0) {
			return;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectMultiBuffers(buffers);
		if(indexes.isDisposed()) {
			return;
		}
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0) {
			this.driver.draw(indexes.ibuf,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,set_debug: function(d) {
		this.debug = d;
		this.driver.setDebug(this.debug);
		return d;
	}
	,onCreate: function(disposed) {
		h3d_Engine.CURRENT = this;
		if(this.autoResize) {
			this.width = this.stage.get_width();
			this.height = this.stage.get_height();
		}
		if(disposed) {
			this.mem.onContextLost();
		} else {
			this.mem = new h3d_impl_MemoryManager(this.driver);
			this.mem.init();
		}
		this.hardware = this.driver.hasFeature(h3d_impl_Feature.HardwareAccelerated);
		this.set_debug(this.debug);
		this.set_fullScreen(this.fullScreen);
		this.resize(this.width,this.height);
		if(disposed) {
			this.onContextLost();
		} else {
			this.onReady();
		}
	}
	,onContextLost: function() {
	}
	,onReady: function() {
	}
	,onStageResize: function() {
		if(this.autoResize && !this.driver.isDisposed()) {
			var w = this.stage.get_width();
			var h = this.stage.get_height();
			if(w != this.width || h != this.height) {
				this.resize(w,h);
			}
			this.onResized();
		}
	}
	,set_fullScreen: function(v) {
		this.fullScreen = v;
		if(this.mem != null && hxd_System.getValue(hxd_SystemValue.IsWindowed)) {
			this.stage.setFullScreen(v);
		}
		return v;
	}
	,onResized: function() {
	}
	,resize: function(width,height) {
		if(width < 32) {
			width = 32;
		}
		if(height < 32) {
			height = 32;
		}
		this.width = width;
		this.height = height;
		if(!this.driver.isDisposed()) {
			this.driver.resize(width,height);
		}
	}
	,begin: function() {
		if(this.driver.isDisposed()) {
			return false;
		}
		this.frameCount++;
		this.drawTriangles = 0;
		this.shaderSwitches = 0;
		this.drawCalls = 0;
		this.targetStack = null;
		this.needFlushTarget = this.currentTargetTex != null;
		this.driver.begin(this.frameCount);
		if(this.backgroundColor != null) {
			this.clear(this.backgroundColor,1,0);
		}
		return true;
	}
	,hasFeature: function(f) {
		return this.driver.hasFeature(f);
	}
	,end: function() {
		this.driver.present();
	}
	,getCurrentTarget: function() {
		if(this.targetStack == null) {
			return null;
		} else {
			return this.targetStack.t;
		}
	}
	,pushTarget: function(tex,face,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(face == null) {
			face = 0;
		}
		var c = this.targetTmp;
		if(c == null) {
			c = new h3d__$Engine_TargetTmp(tex,this.targetStack,face,mipLevel);
		} else {
			this.targetTmp = c.next;
			c.t = tex;
			c.next = this.targetStack;
			c.mipLevel = mipLevel;
			c.face = face;
		}
		this.targetStack = c;
		this.updateNeedFlush();
	}
	,updateNeedFlush: function() {
		var t = this.targetStack;
		if(t == null) {
			this.needFlushTarget = this.currentTargetTex != null;
		} else {
			this.needFlushTarget = this.currentTargetTex != t.t || this.currentTargetFace != t.face || this.currentTargetMip != t.mipLevel;
		}
	}
	,pushTargets: function(textures) {
		if(this.nullTexture == null) {
			this.nullTexture = new h3d_mat_Texture(0,0,[h3d_mat_TextureFlags.NoAlloc]);
		}
		this.pushTarget(this.nullTexture);
		this.driver.setRenderTargets(textures);
		this.currentTargetTex = this.nullTexture;
		this.needFlushTarget = false;
	}
	,popTarget: function() {
		var c = this.targetStack;
		if(c == null) {
			throw new js__$Boot_HaxeError("popTarget() with no matching pushTarget()");
		}
		this.targetStack = c.next;
		this.updateNeedFlush();
		c.t = null;
		c.next = this.targetTmp;
		this.targetTmp = c;
	}
	,flushTarget: function() {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
	}
	,doFlushTarget: function() {
		var t = this.targetStack;
		if(t == null) {
			this.driver.setRenderTarget(null);
			this.currentTargetTex = null;
		} else {
			this.driver.setRenderTarget(t.t,t.face,t.mipLevel);
			this.currentTargetTex = t.t;
			this.currentTargetFace = t.face;
			this.currentTargetMip = t.mipLevel;
		}
		this.needFlushTarget = false;
	}
	,clear: function(color,depth,stencil) {
		if(color != null) {
			var _this = this.tmpVector;
			_this.x = (color >> 16 & 255) / 255;
			_this.y = (color >> 8 & 255) / 255;
			_this.z = (color & 255) / 255;
			_this.w = (color >>> 24) / 255;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color == null ? null : this.tmpVector,depth,stencil);
	}
	,setRenderZone: function(x,y,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.setRenderZone(x,y,width,height);
	}
	,render: function(obj) {
		if(!this.begin()) {
			return false;
		}
		obj.render(this);
		this.end();
		var delta = new Date().getTime() / 1000 - this.lastTime;
		this.lastTime += delta;
		if(delta > 0) {
			var curFps = 1. / delta;
			if(curFps > this.realFps * 2) {
				curFps = this.realFps * 2;
			} else if(curFps < this.realFps * 0.5) {
				curFps = this.realFps * 0.5;
			}
			var f = delta / .5;
			if(f > 0.3) {
				f = 0.3;
			}
			this.realFps = this.realFps * (1 - f) + curFps * f;
		}
		return true;
	}
	,dispose: function() {
		this.driver.dispose();
		this.stage.removeResizeEvent($bind(this,this.onStageResize));
	}
	,get_fps: function() {
		return Math.ceil(this.realFps * 100) / 100;
	}
	,__class__: h3d_Engine
};
var h3d_Indexes = function(count) {
	this.mem = h3d_Engine.CURRENT.mem;
	this.count = count;
	this.mem.allocIndexes(this);
};
$hxClasses["h3d.Indexes"] = h3d_Indexes;
h3d_Indexes.__name__ = ["h3d","Indexes"];
h3d_Indexes.alloc = function(i,startPos,length) {
	if(length == null) {
		length = -1;
	}
	if(startPos == null) {
		startPos = 0;
	}
	if(length < 0) {
		length = i.length;
	}
	var idx = new h3d_Indexes(length);
	idx.upload(i,0,length);
	return idx;
};
h3d_Indexes.prototype = {
	isDisposed: function() {
		return this.ibuf == null;
	}
	,upload: function(indexes,pos,count,bufferPos) {
		if(bufferPos == null) {
			bufferPos = 0;
		}
		this.mem.driver.uploadIndexBuffer(this.ibuf,pos,count,indexes,bufferPos);
	}
	,uploadBytes: function(bytes,dataPos,indices) {
		this.mem.driver.uploadIndexBytes(this.ibuf,0,indices,bytes,dataPos);
	}
	,readBytes: function(bytes,bytesPosition,indices,startIndice) {
		if(startIndice == null) {
			startIndice = 0;
		}
		this.mem.driver.readIndexBytes(this.ibuf,startIndice,indices,bytes,bytesPosition);
	}
	,dispose: function() {
		if(this.ibuf != null) {
			this.mem.deleteIndexes(this);
		}
	}
	,__class__: h3d_Indexes
};
var h3d_Matrix = function() {
};
$hxClasses["h3d.Matrix"] = h3d_Matrix;
h3d_Matrix.__name__ = ["h3d","Matrix"];
h3d_Matrix.I = function() {
	var m = new h3d_Matrix();
	m.identity();
	return m;
};
h3d_Matrix.L = function(a) {
	var m = new h3d_Matrix();
	m.load(a);
	return m;
};
h3d_Matrix.T = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var m = new h3d_Matrix();
	m.initTranslate(x,y,z);
	return m;
};
h3d_Matrix.R = function(x,y,z) {
	var m = new h3d_Matrix();
	m.initRotate(x,y,z);
	return m;
};
h3d_Matrix.S = function(x,y,z) {
	if(z == null) {
		z = 1.0;
	}
	if(y == null) {
		y = 1.;
	}
	if(x == null) {
		x = 1.;
	}
	var m = new h3d_Matrix();
	m.initScale(x,y,z);
	return m;
};
h3d_Matrix.lookAtX = function(dir,up,m) {
	if(up == null) {
		up = new h3d_Vector(0,0,1);
	}
	if(m == null) {
		m = new h3d_Matrix();
	}
	var ax_z;
	var ax_y;
	var ax_x;
	var ax_w;
	var k = dir.x * dir.x + dir.y * dir.y + dir.z * dir.z;
	if(k < 1e-10) {
		k = 0;
	} else {
		k = 1. / Math.sqrt(k);
	}
	ax_x = dir.x * k;
	ax_y = dir.y * k;
	ax_z = dir.z * k;
	ax_w = 1.;
	var ay_z;
	var ay_y;
	var ay_x;
	var ay_w;
	var _this_z;
	var _this_y;
	var _this_x;
	var _this_w;
	_this_x = up.y * ax_z - up.z * ax_y;
	_this_y = up.z * ax_x - up.x * ax_z;
	_this_z = up.x * ax_y - up.y * ax_x;
	_this_w = 1;
	var k1 = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
	if(k1 < 1e-10) {
		k1 = 0;
	} else {
		k1 = 1. / Math.sqrt(k1);
	}
	ay_x = _this_x * k1;
	ay_y = _this_y * k1;
	ay_z = _this_z * k1;
	ay_w = 1.;
	if(ay_x * ay_x + ay_y * ay_y + ay_z * ay_z < 1e-10) {
		ay_x = ax_y;
		ay_y = ax_z;
		ay_z = ax_x;
	}
	var az_z;
	var az_y;
	var az_x;
	var az_w;
	az_x = ax_y * ay_z - ax_z * ay_y;
	az_y = ax_z * ay_x - ax_x * ay_z;
	az_z = ax_x * ay_y - ax_y * ay_x;
	az_w = 1;
	m._11 = ax_x;
	m._12 = ax_y;
	m._13 = ax_z;
	m._14 = 0;
	m._21 = ay_x;
	m._22 = ay_y;
	m._23 = ay_z;
	m._24 = 0;
	m._31 = az_x;
	m._32 = az_y;
	m._33 = az_z;
	m._34 = 0;
	m._41 = 0;
	m._42 = 0;
	m._43 = 0;
	m._44 = 1;
	return m;
};
h3d_Matrix.prototype = {
	get_tx: function() {
		return this._41;
	}
	,get_ty: function() {
		return this._42;
	}
	,get_tz: function() {
		return this._43;
	}
	,set_tx: function(v) {
		return this._41 = v;
	}
	,set_ty: function(v) {
		return this._42 = v;
	}
	,set_tz: function(v) {
		return this._43 = v;
	}
	,zero: function() {
		this._11 = 0.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 0.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 0.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 0.0;
	}
	,identity: function() {
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotateX: function(a) {
		var cos = Math.cos(a);
		var sin = Math.sin(a);
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = cos;
		this._23 = sin;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = -sin;
		this._33 = cos;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotateY: function(a) {
		var cos = Math.cos(a);
		var sin = Math.sin(a);
		this._11 = cos;
		this._12 = 0.0;
		this._13 = -sin;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = sin;
		this._32 = 0.0;
		this._33 = cos;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotateZ: function(a) {
		var cos = Math.cos(a);
		var sin = Math.sin(a);
		this._11 = cos;
		this._12 = sin;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = -sin;
		this._22 = cos;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initTranslate: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = x;
		this._42 = y;
		this._43 = z;
		this._44 = 1.0;
	}
	,initScale: function(x,y,z) {
		if(z == null) {
			z = 1.;
		}
		if(y == null) {
			y = 1.;
		}
		if(x == null) {
			x = 1.;
		}
		this._11 = x;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = y;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = z;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotateAxis: function(axis,angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		var cos1 = 1 - cos;
		var x = -axis.x;
		var y = -axis.y;
		var z = -axis.z;
		var xx = x * x;
		var yy = y * y;
		var zz = z * z;
		var len = 1. / Math.sqrt(xx + yy + zz);
		x *= len;
		y *= len;
		z *= len;
		var xcos1 = x * cos1;
		var zcos1 = z * cos1;
		this._11 = cos + x * xcos1;
		this._12 = y * xcos1 - z * sin;
		this._13 = x * zcos1 + y * sin;
		this._14 = 0.;
		this._21 = y * xcos1 + z * sin;
		this._22 = cos + y * y * cos1;
		this._23 = y * zcos1 - x * sin;
		this._24 = 0.;
		this._31 = x * zcos1 - y * sin;
		this._32 = y * zcos1 + x * sin;
		this._33 = cos + z * zcos1;
		this._34 = 0.;
		this._41 = 0.;
		this._42 = 0.;
		this._43 = 0.;
		this._44 = 1.;
	}
	,initRotate: function(x,y,z) {
		var cx = Math.cos(x);
		var sx = Math.sin(x);
		var cy = Math.cos(y);
		var sy = Math.sin(y);
		var cz = Math.cos(z);
		var sz = Math.sin(z);
		var cxsy = cx * sy;
		var sxsy = sx * sy;
		this._11 = cy * cz;
		this._12 = cy * sz;
		this._13 = -sy;
		this._14 = 0;
		this._21 = sxsy * cz - cx * sz;
		this._22 = sxsy * sz + cx * cz;
		this._23 = sx * cy;
		this._24 = 0;
		this._31 = cxsy * cz + sx * sz;
		this._32 = cxsy * sz - sx * cz;
		this._33 = cx * cy;
		this._34 = 0;
		this._41 = 0;
		this._42 = 0;
		this._43 = 0;
		this._44 = 1;
	}
	,translate: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this._11 += x * this._14;
		this._12 += y * this._14;
		this._13 += z * this._14;
		this._21 += x * this._24;
		this._22 += y * this._24;
		this._23 += z * this._24;
		this._31 += x * this._34;
		this._32 += y * this._34;
		this._33 += z * this._34;
		this._41 += x * this._44;
		this._42 += y * this._44;
		this._43 += z * this._44;
	}
	,scale: function(x,y,z) {
		if(z == null) {
			z = 1.;
		}
		if(y == null) {
			y = 1.;
		}
		if(x == null) {
			x = 1.;
		}
		this._11 *= x;
		this._21 *= x;
		this._31 *= x;
		this._41 *= x;
		this._12 *= y;
		this._22 *= y;
		this._32 *= y;
		this._42 *= y;
		this._13 *= z;
		this._23 *= z;
		this._33 *= z;
		this._43 *= z;
	}
	,rotate: function(x,y,z) {
		var tmp = h3d_Matrix.tmp;
		tmp.initRotate(x,y,z);
		this.multiply(this,tmp);
	}
	,rotateAxis: function(axis,angle) {
		var tmp = h3d_Matrix.tmp;
		tmp.initRotateAxis(axis,angle);
		this.multiply(this,tmp);
	}
	,pos: function(v) {
		if(v == null) {
			return new h3d_Vector(this._41,this._42,this._43,this._44);
		}
		v.x = this._41;
		v.y = this._42;
		v.z = this._43;
		v.w = this._44;
		return v;
	}
	,prependTranslate: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var vx = this._11 * x + this._21 * y + this._31 * z + this._41;
		var vy = this._12 * x + this._22 * y + this._32 * z + this._42;
		var vz = this._13 * x + this._23 * y + this._33 * z + this._43;
		var vw = this._14 * x + this._24 * y + this._34 * z + this._44;
		this._41 = vx;
		this._42 = vy;
		this._43 = vz;
		this._44 = vw;
	}
	,getScale: function() {
		var v = new h3d_Vector();
		v.x = Math.sqrt(this._11 * this._11 + this._12 * this._12 + this._13 * this._13);
		v.y = Math.sqrt(this._21 * this._21 + this._22 * this._22 + this._23 * this._23);
		v.z = Math.sqrt(this._31 * this._31 + this._32 * this._32 + this._33 * this._33);
		if(this._11 * (this._22 * this._33 - this._23 * this._32) + this._12 * (this._23 * this._31 - this._21 * this._33) + this._13 * (this._21 * this._32 - this._22 * this._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		return v;
	}
	,prependRotate: function(x,y,z) {
		var tmp = h3d_Matrix.tmp;
		tmp.initRotate(x,y,z);
		this.multiply(tmp,this);
	}
	,prependRotateAxis: function(axis,angle) {
		var tmp = h3d_Matrix.tmp;
		tmp.initRotateAxis(axis,angle);
		this.multiply(tmp,this);
	}
	,prependScale: function(sx,sy,sz) {
		if(sz == null) {
			sz = 1.;
		}
		if(sy == null) {
			sy = 1.;
		}
		if(sx == null) {
			sx = 1.;
		}
		var tmp = h3d_Matrix.tmp;
		tmp.initScale(sx,sy,sz);
		this.multiply(tmp,this);
	}
	,multiply3x4: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply3x4inline: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply: function(a,b) {
		var a11 = a._11;
		var a12 = a._12;
		var a13 = a._13;
		var a14 = a._14;
		var a21 = a._21;
		var a22 = a._22;
		var a23 = a._23;
		var a24 = a._24;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a34 = a._34;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var a44 = a._44;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b14 = b._14;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b24 = b._24;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b34 = b._34;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		var b44 = b._44;
		this._11 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this._12 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this._13 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this._14 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this._21 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this._22 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this._23 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this._24 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this._34 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this._44 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}
	,multiplyValue: function(v) {
		this._11 *= v;
		this._12 *= v;
		this._13 *= v;
		this._14 *= v;
		this._21 *= v;
		this._22 *= v;
		this._23 *= v;
		this._24 *= v;
		this._31 *= v;
		this._32 *= v;
		this._33 *= v;
		this._34 *= v;
		this._41 *= v;
		this._42 *= v;
		this._43 *= v;
		this._44 *= v;
	}
	,invert: function() {
		this.initInverse(this);
	}
	,getDeterminant: function() {
		return this._11 * (this._22 * this._33 - this._23 * this._32) + this._12 * (this._23 * this._31 - this._21 * this._33) + this._13 * (this._21 * this._32 - this._22 * this._31);
	}
	,inverse3x4: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		this._11 = m22 * m33 - m23 * m32;
		this._12 = m13 * m32 - m12 * m33;
		this._13 = m12 * m23 - m13 * m22;
		this._14 = 0;
		this._21 = m23 * m31 - m21 * m33;
		this._22 = m11 * m33 - m13 * m31;
		this._23 = m13 * m21 - m11 * m23;
		this._24 = 0;
		this._31 = m21 * m32 - m22 * m31;
		this._32 = m12 * m31 - m11 * m32;
		this._33 = m11 * m22 - m12 * m21;
		this._34 = 0;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		this._44 = 1;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		var invDet = 1.0 / det;
		this._11 *= invDet;
		this._12 *= invDet;
		this._13 *= invDet;
		this._21 *= invDet;
		this._22 *= invDet;
		this._23 *= invDet;
		this._31 *= invDet;
		this._32 *= invDet;
		this._33 *= invDet;
		this._41 *= invDet;
		this._42 *= invDet;
		this._43 *= invDet;
	}
	,initInverse: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m14 = m._14;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m24 = m._24;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m34 = m._34;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		var m44 = m._44;
		this._11 = m22 * m33 * m44 - m22 * m34 * m43 - m32 * m23 * m44 + m32 * m24 * m43 + m42 * m23 * m34 - m42 * m24 * m33;
		this._12 = -m12 * m33 * m44 + m12 * m34 * m43 + m32 * m13 * m44 - m32 * m14 * m43 - m42 * m13 * m34 + m42 * m14 * m33;
		this._13 = m12 * m23 * m44 - m12 * m24 * m43 - m22 * m13 * m44 + m22 * m14 * m43 + m42 * m13 * m24 - m42 * m14 * m23;
		this._14 = -m12 * m23 * m34 + m12 * m24 * m33 + m22 * m13 * m34 - m22 * m14 * m33 - m32 * m13 * m24 + m32 * m14 * m23;
		this._21 = -m21 * m33 * m44 + m21 * m34 * m43 + m31 * m23 * m44 - m31 * m24 * m43 - m41 * m23 * m34 + m41 * m24 * m33;
		this._22 = m11 * m33 * m44 - m11 * m34 * m43 - m31 * m13 * m44 + m31 * m14 * m43 + m41 * m13 * m34 - m41 * m14 * m33;
		this._23 = -m11 * m23 * m44 + m11 * m24 * m43 + m21 * m13 * m44 - m21 * m14 * m43 - m41 * m13 * m24 + m41 * m14 * m23;
		this._24 = m11 * m23 * m34 - m11 * m24 * m33 - m21 * m13 * m34 + m21 * m14 * m33 + m31 * m13 * m24 - m31 * m14 * m23;
		this._31 = m21 * m32 * m44 - m21 * m34 * m42 - m31 * m22 * m44 + m31 * m24 * m42 + m41 * m22 * m34 - m41 * m24 * m32;
		this._32 = -m11 * m32 * m44 + m11 * m34 * m42 + m31 * m12 * m44 - m31 * m14 * m42 - m41 * m12 * m34 + m41 * m14 * m32;
		this._33 = m11 * m22 * m44 - m11 * m24 * m42 - m21 * m12 * m44 + m21 * m14 * m42 + m41 * m12 * m24 - m41 * m14 * m22;
		this._34 = -m11 * m22 * m34 + m11 * m24 * m32 + m21 * m12 * m34 - m21 * m14 * m32 - m31 * m12 * m24 + m31 * m14 * m22;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31 + m14 * this._41;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 *= det;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 *= det;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 *= det;
		this._41 *= det;
		this._42 *= det;
		this._43 *= det;
		this._44 *= det;
	}
	,initInverse3x3: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		this._11 = m22 * m33 - m32 * m23;
		this._12 = -m12 * m33 + m32 * m13;
		this._13 = m12 * m23 - m22 * m13;
		this._21 = -m21 * m33 + m31 * m23;
		this._22 = m11 * m33 - m31 * m13;
		this._23 = -m11 * m23 + m21 * m13;
		this._31 = m21 * m32 - m31 * m22;
		this._32 = -m11 * m32 + m31 * m12;
		this._33 = m11 * m22 - m21 * m12;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 = 0;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 = 0;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 = 0;
		this._41 = 0;
		this._42 = 0;
		this._43 = 0;
		this._44 = 1;
	}
	,front: function() {
		var v = new h3d_Vector(this._11,this._12,this._13);
		var k = 1. / Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,right: function() {
		var v = new h3d_Vector(this._21,this._22,this._23);
		var k = 1. / Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,up: function() {
		var v = new h3d_Vector(this._31,this._32,this._33);
		var k = 1. / Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,transpose: function() {
		var tmp = this._12;
		this._12 = this._21;
		this._21 = tmp;
		tmp = this._13;
		this._13 = this._31;
		this._31 = tmp;
		tmp = this._14;
		this._14 = this._41;
		this._41 = tmp;
		tmp = this._23;
		this._23 = this._32;
		this._32 = tmp;
		tmp = this._24;
		this._24 = this._42;
		this._42 = tmp;
		tmp = this._34;
		this._34 = this._43;
		this._43 = tmp;
	}
	,clone: function() {
		var m = new h3d_Matrix();
		m._11 = this._11;
		m._12 = this._12;
		m._13 = this._13;
		m._14 = this._14;
		m._21 = this._21;
		m._22 = this._22;
		m._23 = this._23;
		m._24 = this._24;
		m._31 = this._31;
		m._32 = this._32;
		m._33 = this._33;
		m._34 = this._34;
		m._41 = this._41;
		m._42 = this._42;
		m._43 = this._43;
		m._44 = this._44;
		return m;
	}
	,loadFrom: function(m) {
		this._11 = m._11;
		this._12 = m._12;
		this._13 = m._13;
		this._14 = m._14;
		this._21 = m._21;
		this._22 = m._22;
		this._23 = m._23;
		this._24 = m._24;
		this._31 = m._31;
		this._32 = m._32;
		this._33 = m._33;
		this._34 = m._34;
		this._41 = m._41;
		this._42 = m._42;
		this._43 = m._43;
		this._44 = m._44;
	}
	,load: function(a) {
		this._11 = a[0];
		this._12 = a[1];
		this._13 = a[2];
		this._14 = a[3];
		this._21 = a[4];
		this._22 = a[5];
		this._23 = a[6];
		this._24 = a[7];
		this._31 = a[8];
		this._32 = a[9];
		this._33 = a[10];
		this._34 = a[11];
		this._41 = a[12];
		this._42 = a[13];
		this._43 = a[14];
		this._44 = a[15];
	}
	,getFloats: function() {
		return [this._11,this._12,this._13,this._14,this._21,this._22,this._23,this._24,this._31,this._32,this._33,this._34,this._41,this._42,this._43,this._44];
	}
	,toString: function() {
		return "MAT=[\n" + "  [ " + hxd_Math.fmt(this._11) + ", " + hxd_Math.fmt(this._12) + ", " + hxd_Math.fmt(this._13) + ", " + hxd_Math.fmt(this._14) + " ]\n" + "  [ " + hxd_Math.fmt(this._21) + ", " + hxd_Math.fmt(this._22) + ", " + hxd_Math.fmt(this._23) + ", " + hxd_Math.fmt(this._24) + " ]\n" + "  [ " + hxd_Math.fmt(this._31) + ", " + hxd_Math.fmt(this._32) + ", " + hxd_Math.fmt(this._33) + ", " + hxd_Math.fmt(this._34) + " ]\n" + "  [ " + hxd_Math.fmt(this._41) + ", " + hxd_Math.fmt(this._42) + ", " + hxd_Math.fmt(this._43) + ", " + hxd_Math.fmt(this._44) + " ]\n" + "]";
	}
	,colorHue: function(hue) {
		if(hue == 0.) {
			return;
		}
		var cosA = Math.cos(-hue);
		var sinA = Math.sin(-hue);
		var ch = (1 - cosA) / 3;
		var tmp = h3d_Matrix.tmp;
		tmp._11 = cosA + ch;
		tmp._12 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._13 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._21 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._22 = cosA + ch;
		tmp._23 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._31 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._32 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._33 = cosA + ch;
		tmp._34 = 0;
		tmp._41 = 0;
		tmp._42 = 0;
		tmp._43 = 0;
		this.multiply3x4(this,tmp);
	}
	,colorSaturation: function(sat) {
		++sat;
		var $is = 1 - sat;
		var r = $is * 0.212671;
		var g = $is * 0.71516;
		var b = $is * 0.072169;
		var tmp = h3d_Matrix.tmp;
		tmp._11 = r + sat;
		tmp._12 = r;
		tmp._13 = r;
		tmp._21 = g;
		tmp._22 = g + sat;
		tmp._23 = g;
		tmp._31 = b;
		tmp._32 = b;
		tmp._33 = b + sat;
		tmp._41 = 0;
		tmp._42 = 0;
		tmp._43 = 0;
		this.multiply3x4(this,tmp);
	}
	,colorContrast: function(contrast) {
		var tmp = h3d_Matrix.tmp;
		var v = contrast + 1;
		tmp._11 = v;
		tmp._12 = 0;
		tmp._13 = 0;
		tmp._21 = 0;
		tmp._22 = v;
		tmp._23 = 0;
		tmp._31 = 0;
		tmp._32 = 0;
		tmp._33 = v;
		tmp._41 = -contrast * 0.5;
		tmp._42 = -contrast * 0.5;
		tmp._43 = -contrast * 0.5;
		this.multiply3x4(this,tmp);
	}
	,colorLightness: function(lightness) {
		this._41 += lightness;
		this._42 += lightness;
		this._43 += lightness;
	}
	,colorGain: function(color,alpha) {
		var tmp = h3d_Matrix.tmp;
		tmp._11 = 1 - alpha;
		tmp._12 = 0;
		tmp._13 = 0;
		tmp._21 = 0;
		tmp._22 = 1 - alpha;
		tmp._23 = 0;
		tmp._31 = 0;
		tmp._32 = 0;
		tmp._33 = 1 - alpha;
		tmp._41 = (color >> 16 & 255) / 255 * alpha;
		tmp._42 = (color >> 8 & 255) / 255 * alpha;
		tmp._43 = (color & 255) / 255 * alpha;
		this.multiply3x4(this,tmp);
	}
	,colorBits: function(bits,blend) {
		var t11 = 0.;
		var t12 = 0.;
		var t13 = 0.;
		var t21 = 0.;
		var t22 = 0.;
		var t23 = 0.;
		var t31 = 0.;
		var t32 = 0.;
		var t33 = 0.;
		var c = bits;
		if((c & 1) == 1) {
			t11 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t12 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t13 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t21 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t22 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t23 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t31 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t32 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t33 = 1;
		}
		c >>= 1;
		var r = t11 + t21 + t31;
		var g = t12 + t22 + t32;
		var b = t13 + t23 + t33;
		if(r > 1) {
			t11 /= r;
			t21 /= r;
			t31 /= r;
		}
		if(g > 1) {
			t12 /= g;
			t22 /= g;
			t32 /= g;
		}
		if(b > 1) {
			t13 /= b;
			t23 /= b;
			t33 /= b;
		}
		var b11 = this._11 * t11 + this._12 * t21 + this._13 * t31;
		var b12 = this._11 * t12 + this._12 * t22 + this._13 * t32;
		var b13 = this._11 * t13 + this._12 * t23 + this._13 * t33;
		var b21 = this._21 * t11 + this._22 * t21 + this._23 * t31;
		var b22 = this._21 * t12 + this._22 * t22 + this._23 * t32;
		var b23 = this._21 * t13 + this._22 * t23 + this._23 * t33;
		var b31 = this._31 * t11 + this._32 * t21 + this._33 * t31;
		var b32 = this._31 * t12 + this._32 * t22 + this._33 * t32;
		var b33 = this._31 * t13 + this._32 * t23 + this._33 * t33;
		var ik = blend;
		var k = 1 - ik;
		this._11 = this._11 * k + b11 * ik;
		this._12 = this._12 * k + b12 * ik;
		this._13 = this._13 * k + b13 * ik;
		this._21 = this._21 * k + b21 * ik;
		this._22 = this._22 * k + b22 * ik;
		this._23 = this._23 * k + b23 * ik;
		this._31 = this._31 * k + b31 * ik;
		this._32 = this._32 * k + b32 * ik;
		this._33 = this._33 * k + b33 * ik;
	}
	,colorAdd: function(c) {
		this._41 += (c >> 16 & 255) / 255;
		this._42 += (c >> 8 & 255) / 255;
		this._43 += (c & 255) / 255;
	}
	,colorSet: function(c,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.zero();
		this._44 = alpha;
		this._41 += (c >> 16 & 255) / 255;
		this._42 += (c >> 8 & 255) / 255;
		this._43 += (c & 255) / 255;
	}
	,__class__: h3d_Matrix
};
var h3d_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Quat"] = h3d_Quat;
h3d_Quat.__name__ = ["h3d","Quat"];
h3d_Quat.prototype = {
	set: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,identity: function() {
		this.x = this.y = this.z = 0;
		this.w = 1;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,load: function(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
	}
	,clone: function() {
		return new h3d_Quat(this.x,this.y,this.z,this.w);
	}
	,initMoveTo: function(from,to) {
		var hx = from.x + to.x;
		var hy = from.y + to.y;
		var hz = from.z + to.z;
		var h = 1. / Math.sqrt(hx * hx + hy * hy + hz * hz);
		this.x = from.y * hz - from.z * hy;
		this.y = from.z * hx - from.x * hz;
		this.z = from.x * hy - from.y * hx;
		this.w = from.x * hx + from.y * hy + from.z * hz;
		this.normalize();
	}
	,initDirection: function(dir) {
		var ax_z;
		var ax_y;
		var ax_x;
		var ax_w;
		var _this_z;
		var _this_y;
		var _this_x;
		var _this_w;
		_this_x = dir.x;
		_this_y = dir.y;
		_this_z = dir.z;
		_this_w = dir.w;
		var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		ax_x = _this_x * k;
		ax_y = _this_y * k;
		ax_z = _this_z * k;
		ax_w = 1.;
		var ay_z;
		var ay_y;
		var ay_x;
		var ay_w;
		var _this_z1;
		var _this_y1;
		var _this_x1;
		var _this_w1;
		_this_x1 = -ax_y;
		_this_y1 = ax_x;
		_this_z1 = 0;
		_this_w1 = 1.;
		var k1 = _this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1;
		if(k1 < 1e-10) {
			k1 = 0;
		} else {
			k1 = 1. / Math.sqrt(k1);
		}
		ay_x = _this_x1 * k1;
		ay_y = _this_y1 * k1;
		ay_z = _this_z1 * k1;
		ay_w = 1.;
		if(ay_x * ay_x + ay_y * ay_y + ay_z * ay_z < 1e-10) {
			ay_x = ax_y;
			ay_y = ax_z;
			ay_z = ax_x;
		}
		var az_z;
		var az_y;
		var az_x;
		var az_w;
		az_x = ax_y * ay_z - ax_z * ay_y;
		az_y = ax_z * ay_x - ax_x * ay_z;
		az_z = ax_x * ay_y - ax_y * ay_x;
		az_w = 1;
		var tr = ax_x + ay_y + az_z;
		if(tr > 0) {
			var s = Math.sqrt(tr + 1.0) * 2;
			var $is = 1 / s;
			this.x = (ay_z - az_y) * $is;
			this.y = (az_x - ax_z) * $is;
			this.z = (ax_y - ay_x) * $is;
			this.w = 0.25 * s;
		} else if(ax_x > ay_y && ax_x > az_z) {
			var s1 = Math.sqrt(1.0 + ax_x - ay_y - az_z) * 2;
			var is1 = 1 / s1;
			this.x = 0.25 * s1;
			this.y = (ay_x + ax_y) * is1;
			this.z = (az_x + ax_z) * is1;
			this.w = (ay_z - az_y) * is1;
		} else if(ay_y > az_z) {
			var s2 = Math.sqrt(1.0 + ay_y - ax_x - az_z) * 2;
			var is2 = 1 / s2;
			this.x = (ay_x + ax_y) * is2;
			this.y = 0.25 * s2;
			this.z = (az_y + ay_z) * is2;
			this.w = (az_x - ax_z) * is2;
		} else {
			var s3 = Math.sqrt(1.0 + az_z - ax_x - ay_y) * 2;
			var is3 = 1 / s3;
			this.x = (az_x + ax_z) * is3;
			this.y = (az_y + ay_z) * is3;
			this.z = 0.25 * s3;
			this.w = (ax_y - ay_x) * is3;
		}
	}
	,initRotateAxis: function(x,y,z,a) {
		var sin = Math.sin(a / 2);
		var cos = Math.cos(a / 2);
		this.x = x * sin;
		this.y = y * sin;
		this.z = z * sin;
		this.w = cos * Math.sqrt(x * x + y * y + z * z);
		this.normalize();
	}
	,initRotateMatrix: function(m) {
		var tr = m._11 + m._22 + m._33;
		if(tr > 0) {
			var s = Math.sqrt(tr + 1.0) * 2;
			var $is = 1 / s;
			this.x = (m._23 - m._32) * $is;
			this.y = (m._31 - m._13) * $is;
			this.z = (m._12 - m._21) * $is;
			this.w = 0.25 * s;
		} else if(m._11 > m._22 && m._11 > m._33) {
			var s1 = Math.sqrt(1.0 + m._11 - m._22 - m._33) * 2;
			var is1 = 1 / s1;
			this.x = 0.25 * s1;
			this.y = (m._21 + m._12) * is1;
			this.z = (m._31 + m._13) * is1;
			this.w = (m._23 - m._32) * is1;
		} else if(m._22 > m._33) {
			var s2 = Math.sqrt(1.0 + m._22 - m._11 - m._33) * 2;
			var is2 = 1 / s2;
			this.x = (m._21 + m._12) * is2;
			this.y = 0.25 * s2;
			this.z = (m._32 + m._23) * is2;
			this.w = (m._31 - m._13) * is2;
		} else {
			var s3 = Math.sqrt(1.0 + m._33 - m._11 - m._22) * 2;
			var is3 = 1 / s3;
			this.x = (m._31 + m._13) * is3;
			this.y = (m._32 + m._23) * is3;
			this.z = 0.25 * s3;
			this.w = (m._12 - m._21) * is3;
		}
	}
	,normalize: function() {
		var len = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
		if(len < 1e-10) {
			this.x = this.y = this.z = 0;
			this.w = 1;
		} else {
			var m = 1. / Math.sqrt(len);
			this.x *= m;
			this.y *= m;
			this.z *= m;
			this.w *= m;
		}
	}
	,initRotate: function(ax,ay,az) {
		var sinX = Math.sin(ax * 0.5);
		var cosX = Math.cos(ax * 0.5);
		var sinY = Math.sin(ay * 0.5);
		var cosY = Math.cos(ay * 0.5);
		var sinZ = Math.sin(az * 0.5);
		var cosZ = Math.cos(az * 0.5);
		var cosYZ = cosY * cosZ;
		var sinYZ = sinY * sinZ;
		this.x = sinX * cosYZ - cosX * sinYZ;
		this.y = cosX * sinY * cosZ + sinX * cosY * sinZ;
		this.z = cosX * cosY * sinZ - sinX * sinY * cosZ;
		this.w = cosX * cosYZ + sinX * sinYZ;
	}
	,multiply: function(q1,q2) {
		var x2 = q1.x * q2.w + q1.w * q2.x + q1.y * q2.z - q1.z * q2.y;
		var y2 = q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x;
		var z2 = q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w;
		var w2 = q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z;
		this.x = x2;
		this.y = y2;
		this.z = z2;
		this.w = w2;
	}
	,toMatrix: function() {
		var m = new h3d_Matrix();
		this.saveToMatrix(m);
		return m;
	}
	,__toEuler: function() {
		var q = this.x * this.y + this.z * this.w;
		return new h3d_Vector(Math.atan2(2 * (this.x * this.w - this.y * this.z),1 - 2 * (this.x * this.x + this.z * this.z)),Math.atan2(2 * (this.y * this.w - this.x * this.z),1 - 2 * (this.y * this.y + this.z * this.z)),Math.asin(2 * q));
	}
	,lerp: function(q1,q2,v,nearest) {
		if(nearest == null) {
			nearest = false;
		}
		var v2;
		if(nearest && q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w < 0) {
			v2 = v - 1;
		} else {
			v2 = 1 - v;
		}
		var x = q1.x * v + q2.x * v2;
		var y = q1.y * v + q2.y * v2;
		var z = q1.z * v + q2.z * v2;
		var w = q1.w * v + q2.w * v2;
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,slerp: function(q1,q2,v) {
		var cosHalfTheta = q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;
		if((cosHalfTheta < 0 ? -cosHalfTheta : cosHalfTheta) >= 1) {
			this.x = q1.x;
			this.y = q1.y;
			this.z = q1.z;
			this.w = q1.w;
			return;
		}
		var halfTheta = Math.acos(cosHalfTheta);
		var invSinHalfTheta = 1. / Math.sqrt(1 - cosHalfTheta * cosHalfTheta);
		if((invSinHalfTheta < 0 ? -invSinHalfTheta : invSinHalfTheta) > 1e3) {
			var v2;
			if(q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w < 0) {
				v2 = -0.5;
			} else {
				v2 = 0.5;
			}
			var x = q1.x * 0.5 + q2.x * v2;
			var y = q1.y * 0.5 + q2.y * v2;
			var z = q1.z * 0.5 + q2.z * v2;
			var w = q1.w * 0.5 + q2.w * v2;
			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;
			return;
		}
		var a = Math.sin((1 - v) * halfTheta) * invSinHalfTheta;
		var b = Math.sin(v * halfTheta) * invSinHalfTheta * (cosHalfTheta < 0 ? -1 : 1);
		this.x = q1.x * a + q2.x * b;
		this.y = q1.y * a + q2.y * b;
		this.z = q1.z * a + q2.z * b;
		this.w = q1.w * a + q2.w * b;
	}
	,conjugate: function() {
		this.x = -this.x;
		this.y = -this.y;
		this.z = -this.z;
	}
	,negate: function() {
		this.x = -this.x;
		this.y = -this.y;
		this.z = -this.z;
		this.w = -this.w;
	}
	,dot: function(q) {
		return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
	}
	,saveToMatrix: function(m) {
		var xx = this.x * this.x;
		var xy = this.x * this.y;
		var xz = this.x * this.z;
		var xw = this.x * this.w;
		var yy = this.y * this.y;
		var yz = this.y * this.z;
		var yw = this.y * this.w;
		var zz = this.z * this.z;
		var zw = this.z * this.w;
		m._11 = 1 - 2 * (yy + zz);
		m._12 = 2 * (xy + zw);
		m._13 = 2 * (xz - yw);
		m._14 = 0;
		m._21 = 2 * (xy - zw);
		m._22 = 1 - 2 * (xx + zz);
		m._23 = 2 * (yz + xw);
		m._24 = 0;
		m._31 = 2 * (xz + yw);
		m._32 = 2 * (yz - xw);
		m._33 = 1 - 2 * (xx + yy);
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "," + hxd_Math.fmt(this.w) + "}";
	}
	,__class__: h3d_Quat
};
var h3d_Vector = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Vector"] = h3d_Vector;
h3d_Vector.__name__ = ["h3d","Vector"];
h3d_Vector.fromColor = function(c,scale) {
	if(scale == null) {
		scale = 1.0;
	}
	var s = scale / 255;
	return new h3d_Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
};
h3d_Vector.prototype = {
	distance: function(v) {
		var dx = v.x - this.x;
		var dy = v.y - this.y;
		var dz = v.z - this.z;
		return Math.sqrt(dx * dx + dy * dy + dz * dz);
	}
	,distanceSq: function(v) {
		var dx = v.x - this.x;
		var dy = v.y - this.y;
		var dz = v.z - this.z;
		return dx * dx + dy * dy + dz * dz;
	}
	,sub: function(v) {
		return new h3d_Vector(this.x - v.x,this.y - v.y,this.z - v.z,this.w - v.w);
	}
	,add: function(v) {
		return new h3d_Vector(this.x + v.x,this.y + v.y,this.z + v.z,this.w + v.w);
	}
	,cross: function(v) {
		return new h3d_Vector(this.y * v.z - this.z * v.y,this.z * v.x - this.x * v.z,this.x * v.y - this.y * v.x,1);
	}
	,reflect: function(n) {
		var k = 2 * (this.x * n.x + this.y * n.y + this.z * n.z);
		return new h3d_Vector(this.x - k * n.x,this.y - k * n.y,this.z - k * n.z,1);
	}
	,dot3: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	,dot4: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,normalize: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	,normalizeFast: function() {
		var k = 1. / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	,getNormalized: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		return new h3d_Vector(this.x * k,this.y * k,this.z * k);
	}
	,set: function(x,y,z,w) {
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,load: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = v.w;
	}
	,scale3: function(f) {
		this.x *= f;
		this.y *= f;
		this.z *= f;
	}
	,project: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		var iw = 1 / (this.x * m._14 + this.y * m._24 + this.z * m._34 + this.w * m._44);
		this.x = px * iw;
		this.y = py * iw;
		this.z = pz * iw;
		this.w = 1;
	}
	,lerp: function(v1,v2,k) {
		var a = v1.x;
		var x = a + k * (v2.x - a);
		var a1 = v1.y;
		var y = a1 + k * (v2.y - a1);
		var a2 = v1.z;
		var z = a2 + k * (v2.z - a2);
		var a3 = v1.w;
		var w = a3 + k * (v2.w - a3);
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,transform3x4: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,transform3x3: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,transform: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		var pw = this.x * m._14 + this.y * m._24 + this.z * m._34 + this.w * m._44;
		this.x = px;
		this.y = py;
		this.z = pz;
		this.w = pw;
	}
	,clone: function() {
		return new h3d_Vector(this.x,this.y,this.z,this.w);
	}
	,toPoint: function() {
		return new h3d_col_Point(this.x,this.y,this.z);
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "," + hxd_Math.fmt(this.w) + "}";
	}
	,get_r: function() {
		return this.x;
	}
	,get_g: function() {
		return this.y;
	}
	,get_b: function() {
		return this.z;
	}
	,get_a: function() {
		return this.w;
	}
	,set_r: function(v) {
		return this.x = v;
	}
	,set_g: function(v) {
		return this.y = v;
	}
	,set_b: function(v) {
		return this.z = v;
	}
	,set_a: function(v) {
		return this.w = v;
	}
	,setColor: function(c) {
		this.x = (c >> 16 & 255) / 255;
		this.y = (c >> 8 & 255) / 255;
		this.z = (c & 255) / 255;
		this.w = (c >>> 24) / 255;
	}
	,makeColor: function(hue,saturation,brightness) {
		if(brightness == null) {
			brightness = 0.5;
		}
		if(saturation == null) {
			saturation = 1.;
		}
		var r = hue % 6.28318530717958623;
		if(r >= 0) {
			hue = r;
		} else {
			hue = r + 6.28318530717958623;
		}
		var f = 2 * brightness - 1;
		var c = (1 - (f < 0 ? -f : f)) * saturation;
		var f1 = hue * 3 / 3.14159265358979323 % 2. - 1;
		var x = c * (1 - (f1 < 0 ? -f1 : f1));
		var m = brightness - c / 2;
		if(hue < 1.04719755119659763) {
			this.x = c;
			this.y = x;
			this.z = 0;
		} else if(hue < 2.09439510239319526) {
			this.x = x;
			this.y = c;
			this.z = 0;
		} else if(hue < 3.14159265358979323) {
			this.x = 0;
			this.y = c;
			this.z = x;
		} else if(hue < 4.18879020478639053) {
			this.x = 0;
			this.y = x;
			this.z = c;
		} else if(hue < 5.23598775598298882) {
			this.x = x;
			this.y = 0;
			this.z = c;
		} else {
			this.x = c;
			this.y = 0;
			this.z = x;
		}
		var _g = this;
		_g.x += m;
		var _g1 = this;
		_g1.y += m;
		var _g2 = this;
		_g2.z += m;
		this.w = 1;
	}
	,toColor: function() {
		var f = this.w;
		var f1 = this.x;
		var f2 = this.y;
		var f3 = this.z;
		return ((f < 0. ? 0. : f > 1. ? 1. : f) * 255 + 0.499 | 0) << 24 | ((f1 < 0. ? 0. : f1 > 1. ? 1. : f1) * 255 + 0.499 | 0) << 16 | ((f2 < 0. ? 0. : f2 > 1. ? 1. : f2) * 255 + 0.499 | 0) << 8 | ((f3 < 0. ? 0. : f3 > 1. ? 1. : f3) * 255 + 0.499 | 0);
	}
	,__class__: h3d_Vector
};
var h3d_anim_AnimatedObject = function(name) {
	this.objectName = name;
};
$hxClasses["h3d.anim.AnimatedObject"] = h3d_anim_AnimatedObject;
h3d_anim_AnimatedObject.__name__ = ["h3d","anim","AnimatedObject"];
h3d_anim_AnimatedObject.prototype = {
	clone: function() {
		return new h3d_anim_AnimatedObject(this.objectName);
	}
	,__class__: h3d_anim_AnimatedObject
};
var h3d_anim_Animation = function(name,frameCount,sampling) {
	this.name = name;
	this.frameCount = frameCount;
	this.sampling = sampling;
	this.objects = [];
	this.lastEvent = -1;
	this.frame = 0.;
	this.speed = 1.;
	this.loop = true;
	this.pause = false;
};
$hxClasses["h3d.anim.Animation"] = h3d_anim_Animation;
h3d_anim_Animation.__name__ = ["h3d","anim","Animation"];
h3d_anim_Animation.prototype = {
	getDuration: function() {
		return this.frameCount / (this.sampling * this.speed);
	}
	,getIFrame: function() {
		var f = this.frame | 0;
		var max = this.endFrame();
		if(f == max) {
			--f;
		}
		return f;
	}
	,unbind: function(objectName) {
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.objectName == objectName) {
				this.isSync = false;
				o.targetObject = null;
				o.targetSkin = null;
				return;
			}
		}
	}
	,setEvents: function(el) {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.frameCount;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(null);
		}
		this.events = _g;
		var e = $iterator(el)();
		while(e.hasNext()) {
			var e1 = e.next();
			if(this.events[e1.frame] == null) {
				this.events[e1.frame] = [];
			}
			this.events[e1.frame].push(e1.data);
		}
	}
	,addEvent: function(frame,data) {
		if(this.events == null) {
			this.events = [];
		}
		if(this.events[frame] == null) {
			this.events[frame] = [data];
		} else {
			this.events[frame].push(data);
		}
	}
	,setFrame: function(f) {
		this.frame = f;
		this.lastEvent = -1;
		while(this.frame < 0) this.frame += this.frameCount;
		while(this.frame > this.frameCount) this.frame -= this.frameCount;
	}
	,clone: function(a) {
		if(a == null) {
			a = new h3d_anim_Animation(this.name,this.frameCount,this.sampling);
		}
		a.objects = this.objects;
		a.speed = this.speed;
		a.loop = this.loop;
		a.pause = this.pause;
		a.events = this.events;
		return a;
	}
	,initInstance: function() {
		this.isInstance = true;
	}
	,createInstance: function(base) {
		var currentSkin = null;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.objects;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(a.clone());
		}
		var objects = _g;
		var a1 = this.clone();
		a1.objects = objects;
		a1.bind(base);
		a1.initInstance();
		return a1;
	}
	,bind: function(base) {
		var currentSkin = null;
		var _g = 0;
		var _g1 = this.objects.slice();
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(currentSkin != null) {
				var key = a.objectName;
				var _this = currentSkin.skinData.namedJoints;
				var j = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				if(j != null) {
					a.targetSkin = currentSkin;
					a.targetJoint = j.index;
				}
			}
			var obj = base.getObjectByName(a.objectName);
			if(obj == null) {
				HxOverrides.remove(this.objects,a);
				continue;
			}
			var joint = (obj instanceof h3d_scene_Joint) ? obj : null;
			if(joint != null) {
				currentSkin = joint.parent;
				a.targetSkin = currentSkin;
				a.targetJoint = joint.index;
			} else {
				a.targetObject = obj;
			}
		}
		this.isSync = false;
	}
	,getPropValue: function(objectName,propName) {
		return null;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		throw new js__$Boot_HaxeError("assert");
	}
	,isPlaying: function() {
		if(!this.pause) {
			return (this.speed < 0 ? -this.speed : this.speed) > 0.000001;
		} else {
			return false;
		}
	}
	,endFrame: function() {
		return this.frameCount;
	}
	,update: function(dt) {
		if(!this.isInstance) {
			throw new js__$Boot_HaxeError("You must instanciate this animation first");
		}
		if(!this.isPlaying()) {
			return 0;
		}
		if(this.events != null && this.onEvent != null) {
			var f0 = this.frame | 0;
			var f1 = this.frame + dt * this.speed * this.sampling | 0;
			if(f1 >= this.frameCount) {
				f1 = this.frameCount - 1;
			}
			var _g1 = f0;
			var _g = f1 + 1;
			while(_g1 < _g) {
				var f = _g1++;
				if(f == this.lastEvent) {
					continue;
				}
				this.lastEvent = f;
				if(this.events[f] != null) {
					var oldF = this.frame;
					var oldDT = dt;
					dt -= (f - this.frame) / (this.speed * this.sampling);
					this.frame = f;
					var _g2 = 0;
					var _g3 = this.events[f];
					while(_g2 < _g3.length) {
						var e = _g3[_g2];
						++_g2;
						this.onEvent(e);
					}
					if(this.frame == f && f == this.frameCount - 1) {
						this.frame = oldF;
						dt = oldDT;
						break;
					} else {
						return dt;
					}
				}
			}
		}
		if(this.onAnimEnd != null) {
			var end = this.endFrame();
			var et = this.speed == 0 ? 0 : (end - this.frame) / (this.speed * this.sampling);
			if(et <= dt && et > 0) {
				this.frame = end;
				dt -= et;
				this.onAnimEnd();
				if(this.frame == end && this.isPlaying()) {
					if(this.loop) {
						this.frame = 0;
					} else {
						dt = 0;
					}
				}
				return dt;
			}
		}
		this.frame += dt * this.speed * this.sampling;
		if(this.frame >= this.frameCount) {
			if(this.loop) {
				this.frame %= this.frameCount;
			} else {
				this.frame = this.frameCount;
			}
		}
		return 0;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: h3d_anim_Animation
};
var h3d_anim_LinearFrame = function() {
};
$hxClasses["h3d.anim.LinearFrame"] = h3d_anim_LinearFrame;
h3d_anim_LinearFrame.__name__ = ["h3d","anim","LinearFrame"];
h3d_anim_LinearFrame.prototype = {
	toMatrix: function() {
		var m = new h3d_Matrix();
		new h3d_Quat(this.qx,this.qy,this.qz,this.qw).saveToMatrix(m);
		m.prependScale(this.sx,this.sy,this.sz);
		m.translate(this.tx,this.ty,this.tz);
		return m;
	}
	,__class__: h3d_anim_LinearFrame
};
var h3d_anim_LinearObject = function(name) {
	h3d_anim_AnimatedObject.call(this,name);
};
$hxClasses["h3d.anim.LinearObject"] = h3d_anim_LinearObject;
h3d_anim_LinearObject.__name__ = ["h3d","anim","LinearObject"];
h3d_anim_LinearObject.__super__ = h3d_anim_AnimatedObject;
h3d_anim_LinearObject.prototype = $extend(h3d_anim_AnimatedObject.prototype,{
	clone: function() {
		var o = new h3d_anim_LinearObject(this.objectName);
		o.hasRotation = this.hasRotation;
		o.hasScale = this.hasScale;
		o.frames = this.frames;
		o.alphas = this.alphas;
		o.uvs = this.uvs;
		o.propName = this.propName;
		o.propValues = this.propValues;
		return o;
	}
	,__class__: h3d_anim_LinearObject
});
var h3d_anim_LinearAnimation = function(name,frame,sampling) {
	h3d_anim_Animation.call(this,name,frame,sampling);
	this.syncFrame = -1;
};
$hxClasses["h3d.anim.LinearAnimation"] = h3d_anim_LinearAnimation;
h3d_anim_LinearAnimation.__name__ = ["h3d","anim","LinearAnimation"];
h3d_anim_LinearAnimation.__super__ = h3d_anim_Animation;
h3d_anim_LinearAnimation.prototype = $extend(h3d_anim_Animation.prototype,{
	addCurve: function(objName,frames,hasRot,hasScale) {
		var f = new h3d_anim_LinearObject(objName);
		f.frames = frames;
		f.hasRotation = hasRot;
		f.hasScale = hasScale;
		this.objects.push(f);
	}
	,addAlphaCurve: function(objName,alphas) {
		var f = new h3d_anim_LinearObject(objName);
		f.alphas = alphas;
		this.objects.push(f);
	}
	,addUVCurve: function(objName,uvs) {
		var f = new h3d_anim_LinearObject(objName);
		f.uvs = uvs;
		this.objects.push(f);
	}
	,addPropCurve: function(objName,propName,values) {
		var f = new h3d_anim_LinearObject(objName);
		f.propName = propName;
		f.propValues = values;
		this.objects.push(f);
	}
	,getPropValue: function(objName,propName) {
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.objectName == objName && o.propName == propName) {
				return o.propCurrentValue;
			}
		}
		return null;
	}
	,getFrames: function() {
		return this.objects;
	}
	,clone: function(a) {
		if(a == null) {
			a = new h3d_anim_LinearAnimation(this.name,this.frameCount,this.sampling);
		}
		h3d_anim_Animation.prototype.clone.call(this,a);
		return a;
	}
	,endFrame: function() {
		if(this.loop) {
			return this.frameCount;
		} else {
			return this.frameCount - 1;
		}
	}
	,initInstance: function() {
		h3d_anim_Animation.prototype.initInstance.call(this);
		var frames = this.objects;
		var _g = 0;
		while(_g < frames.length) {
			var a = frames[_g];
			++_g;
			if(a.propValues != null) {
				a.propCurrentValue = a.propValues[0];
				continue;
			}
			var tmp;
			if(a.alphas != null) {
				if(a.targetObject != null) {
					var _this = a.targetObject;
					tmp = ((_this instanceof h3d_scene_Mesh) ? _this : null) == null;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				throw new js__$Boot_HaxeError(a.objectName + " should be a mesh (for alpha animation)");
			}
			if(a.uvs != null || a.alphas != null) {
				continue;
			}
			a.matrix = new h3d_Matrix();
			a.matrix.identity();
		}
		frames.sort($bind(this,this.sortByFrameCountDesc));
	}
	,sortByFrameCountDesc: function(o1,o2) {
		return (o2.frames == null ? 10 : o2.frames.length) - (o1.frames == null ? 10 : o1.frames.length);
	}
	,uvLerp: function(v1,v2,k) {
		v1 %= 1.;
		v2 %= 1.;
		if(v1 < v2 - 0.5) {
			++v1;
		} else if(v1 > v2 + 0.5) {
			--v1;
		}
		return v1 * (1 - k) + v2 * k;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		if(this.frame == this.syncFrame && !decompose) {
			return;
		}
		var f = this.frame | 0;
		var max = this.endFrame();
		if(f == max) {
			--f;
		}
		var frame1 = f;
		var frame2 = (frame1 + 1) % this.frameCount;
		var k2 = this.frame - frame1;
		var k1 = 1 - k2;
		if(frame1 < 0) {
			frame2 = 0;
			frame1 = frame2;
		} else if(this.frame >= this.frameCount) {
			frame2 = this.frameCount - 1;
			frame1 = frame2;
		} else if(!this.loop && frame2 == 0) {
			frame2 = this.frameCount - 1;
		}
		this.syncFrame = this.frame;
		if(decompose) {
			this.isSync = false;
		}
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.targetObject == null && o.targetSkin == null) {
				continue;
			}
			if(o.alphas != null) {
				var mat = o.targetObject.toMesh().material;
				if(mat.blendMode == h2d_BlendMode.None) {
					mat.set_blendMode(h2d_BlendMode.Alpha);
				}
				mat.mshader.color__.w = o.alphas[frame1] * k1 + o.alphas[frame2] * k2;
				continue;
			}
			if(o.uvs != null) {
				var mat1 = o.targetObject.toMesh().material;
				var s = mat1.passes.getShader(h3d_shader_UVDelta);
				if(s == null) {
					s = mat1.passes.addShader(new h3d_shader_UVDelta());
					mat1.get_texture().set_wrap(h3d_mat_Wrap.Repeat);
				}
				var v1 = o.uvs[frame1 << 1];
				var v2 = o.uvs[frame2 << 1];
				v1 %= 1.;
				v2 %= 1.;
				if(v1 < v2 - 0.5) {
					++v1;
				} else if(v1 > v2 + 0.5) {
					--v1;
				}
				s.uvDelta__.x = v1 * (1 - k2) + v2 * k2;
				var v11 = o.uvs[frame1 << 1 | 1];
				var v21 = o.uvs[frame2 << 1 | 1];
				v11 %= 1.;
				v21 %= 1.;
				if(v11 < v21 - 0.5) {
					++v11;
				} else if(v11 > v21 + 0.5) {
					--v11;
				}
				s.uvDelta__.y = v11 * (1 - k2) + v21 * k2;
				continue;
			}
			if(o.propValues != null) {
				o.propCurrentValue = o.propValues[frame1] * k1 + o.propValues[frame2] * k2;
				continue;
			}
			var frame11 = frame1;
			var frame21 = frame2;
			if(o.frames.length == 1) {
				if(this.isSync) {
					break;
				}
				frame21 = 0;
				frame11 = frame21;
			}
			var f1 = o.frames[frame11];
			var f2 = o.frames[frame21];
			var m = o.matrix;
			m._41 = f1.tx * k1 + f2.tx * k2;
			m._42 = f1.ty * k1 + f2.ty * k2;
			m._43 = f1.tz * k1 + f2.tz * k2;
			if(o.hasRotation) {
				var dot = f1.qx * f2.qx + f1.qy * f2.qy + f1.qz * f2.qz + f1.qw * f2.qw;
				var q2 = dot < 0 ? -k2 : k2;
				var qx = f1.qx * k1 + f2.qx * q2;
				var qy = f1.qy * k1 + f2.qy * q2;
				var qz = f1.qz * k1 + f2.qz * q2;
				var qw = f1.qw * k1 + f2.qw * q2;
				var ql = 1 / Math.sqrt(qx * qx + qy * qy + qz * qz + qw * qw);
				qx *= ql;
				qy *= ql;
				qz *= ql;
				qw *= ql;
				if(decompose) {
					m._12 = qx;
					m._13 = qy;
					m._21 = qz;
					m._23 = qw;
					if(o.hasScale) {
						m._11 = f1.sx * k1 + f2.sx * k2;
						m._22 = f1.sy * k1 + f2.sy * k2;
						m._33 = f1.sz * k1 + f2.sz * k2;
					} else {
						m._11 = 1;
						m._22 = 1;
						m._33 = 1;
					}
				} else {
					var xx = qx * qx;
					var xy = qx * qy;
					var xz = qx * qz;
					var xw = qx * qw;
					var yy = qy * qy;
					var yz = qy * qz;
					var yw = qy * qw;
					var zz = qz * qz;
					var zw = qz * qw;
					m._11 = 1 - 2 * (yy + zz);
					m._12 = 2 * (xy + zw);
					m._13 = 2 * (xz - yw);
					m._21 = 2 * (xy - zw);
					m._22 = 1 - 2 * (xx + zz);
					m._23 = 2 * (yz + xw);
					m._31 = 2 * (xz + yw);
					m._32 = 2 * (yz - xw);
					m._33 = 1 - 2 * (xx + yy);
					if(o.hasScale) {
						var sx = f1.sx * k1 + f2.sx * k2;
						var sy = f1.sy * k1 + f2.sy * k2;
						var sz = f1.sz * k1 + f2.sz * k2;
						m._11 *= sx;
						m._12 *= sx;
						m._13 *= sx;
						m._21 *= sy;
						m._22 *= sy;
						m._23 *= sy;
						m._31 *= sz;
						m._32 *= sz;
						m._33 *= sz;
					}
				}
			} else {
				m._12 = 0;
				m._13 = 0;
				m._21 = 0;
				m._23 = decompose ? 1 : 0;
				if(o.hasScale) {
					m._11 = f1.sx * k1 + f2.sx * k2;
					m._22 = f1.sy * k1 + f2.sy * k2;
					m._33 = f1.sz * k1 + f2.sz * k2;
				} else {
					m._11 = 1;
					m._22 = 1;
					m._33 = 1;
				}
			}
			if(o.targetSkin != null) {
				o.targetSkin.currentRelPose[o.targetJoint] = o.matrix;
				o.targetSkin.jointsUpdated = true;
			} else {
				var _this = o.targetObject;
				var v = o.matrix;
				_this.defaultTransform = v;
				var f3 = 1;
				var b = true;
				if(b) {
					_this.flags |= f3;
				} else {
					_this.flags &= ~f3;
				}
			}
		}
		if(!decompose) {
			this.isSync = true;
		}
	}
	,__class__: h3d_anim_LinearAnimation
});
var h3d_anim_Joint = function() {
	this.bindIndex = -1;
	this.splitIndex = -1;
	this.subs = [];
};
$hxClasses["h3d.anim.Joint"] = h3d_anim_Joint;
h3d_anim_Joint.__name__ = ["h3d","anim","Joint"];
h3d_anim_Joint.prototype = {
	__class__: h3d_anim_Joint
};
var h3d_anim__$Skin_Permut = function() {
};
$hxClasses["h3d.anim._Skin.Permut"] = h3d_anim__$Skin_Permut;
h3d_anim__$Skin_Permut.__name__ = ["h3d","anim","_Skin","Permut"];
h3d_anim__$Skin_Permut.prototype = {
	__class__: h3d_anim__$Skin_Permut
};
var h3d_anim__$Skin_Influence = function(j,w) {
	this.j = j;
	this.w = w;
};
$hxClasses["h3d.anim._Skin.Influence"] = h3d_anim__$Skin_Influence;
h3d_anim__$Skin_Influence.__name__ = ["h3d","anim","_Skin","Influence"];
h3d_anim__$Skin_Influence.prototype = {
	__class__: h3d_anim__$Skin_Influence
};
var h3d_anim_Skin = function(name,vertexCount,bonesPerVertex) {
	this.name = name;
	this.vertexCount = vertexCount;
	this.bonesPerVertex = bonesPerVertex;
	if(vertexCount > 0) {
		var this1 = new Array(vertexCount * bonesPerVertex);
		this.vertexJoints = this1;
		var this2 = new Array(vertexCount * bonesPerVertex);
		this.vertexWeights = this2;
		this.envelop = [];
	}
};
$hxClasses["h3d.anim.Skin"] = h3d_anim_Skin;
h3d_anim_Skin.__name__ = ["h3d","anim","Skin"];
h3d_anim_Skin.prototype = {
	setJoints: function(joints,roots) {
		this.rootJoints = roots;
		this.allJoints = joints;
		this.namedJoints = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < joints.length) {
			var j = joints[_g];
			++_g;
			if(j.name != null) {
				var key = j.name;
				var _this = this.namedJoints;
				if(__map_reserved[key] != null) {
					_this.setReserved(key,j);
				} else {
					_this.h[key] = j;
				}
			}
		}
	}
	,addInfluence: function(vid,j,w) {
		var il = this.envelop[vid];
		if(il == null) {
			il = this.envelop[vid] = [];
		}
		il.push(new h3d_anim__$Skin_Influence(j,w));
	}
	,sortInfluences: function(i1,i2) {
		if(i2.w > i1.w) {
			return 1;
		} else {
			return -1;
		}
	}
	,isSplit: function() {
		return this.splitJoints != null;
	}
	,initWeights: function() {
		this.boundJoints = [];
		var pos = 0;
		var _g1 = 0;
		var _g = this.vertexCount;
		while(_g1 < _g) {
			var i = _g1++;
			var il = this.envelop[i];
			if(il == null) {
				il = [];
			}
			haxe_ds_ArraySort.sort(il,$bind(this,this.sortInfluences));
			if(il.length > this.bonesPerVertex) {
				il = il.slice(0,this.bonesPerVertex);
			}
			var tw = 0.;
			var _g2 = 0;
			while(_g2 < il.length) {
				var i1 = il[_g2];
				++_g2;
				tw += i1.w;
			}
			tw = 1 / tw;
			var _g3 = 0;
			var _g21 = this.bonesPerVertex;
			while(_g3 < _g21) {
				var i2 = _g3++;
				var i3 = il[i2];
				if(i3 == null) {
					this.vertexJoints[pos] = 0;
					this.vertexWeights[pos] = 0;
				} else {
					if(i3.j.bindIndex == -1) {
						i3.j.bindIndex = this.boundJoints.length;
						this.boundJoints.push(i3.j);
					}
					this.vertexJoints[pos] = i3.j.bindIndex;
					this.vertexWeights[pos] = i3.w * tw;
				}
				++pos;
			}
		}
		this.envelop = null;
	}
	,sortByBindIndex: function(j1,j2) {
		return j1.bindIndex - j2.bindIndex;
	}
	,isSub: function(a,b) {
		var j = 0;
		var max = b.length;
		var _g = 0;
		while(_g < a.length) {
			var e = a[_g];
			++_g;
			while(e != b[j++]) {
				if(j >= max) {
					return false;
				}
				continue;
			}
		}
		return true;
	}
	,merge: function(permuts) {
		var _g = 0;
		while(_g < permuts.length) {
			var p1 = permuts[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < permuts.length) {
				var p2 = permuts[_g1];
				++_g1;
				if(p1 != p2 && p1.material == p2.material && this.isSub(p1.joints,p2.joints)) {
					var _g2 = 0;
					var _g3 = p1.triangles;
					while(_g2 < _g3.length) {
						var t = _g3[_g2];
						++_g2;
						p2.triangles.push(t);
					}
					HxOverrides.remove(permuts,p1);
					return true;
				}
			}
		}
		return false;
	}
	,jointsDiff: function(p1,p2) {
		var diff = 0;
		var i = 0;
		var j = 0;
		var imax = p1.joints.length;
		var jmax = p2.joints.length;
		while(i < imax && j < jmax) {
			var j1 = p1.joints[i];
			var j2 = p2.joints[j];
			if(j1 == j2) {
				++i;
				++j;
			} else {
				++diff;
				if(j1.bindIndex < j2.bindIndex) {
					++i;
				} else {
					++j;
				}
			}
		}
		return diff + (imax - i) + (jmax - j);
	}
	,split: function(maxBones,index,triangleMaterials) {
		if(this.splitJoints != null) {
			return true;
		}
		if(this.boundJoints.length <= maxBones) {
			return false;
		}
		this.splitJoints = [];
		var length = index.length / 3 | 0;
		var this1 = new Array(length);
		this.triangleGroups = this1;
		var permuts = [];
		var _g1 = 0;
		var _g = index.length / 3 | 0;
		while(_g1 < _g) {
			var tri = _g1++;
			var iid = tri * 3;
			var mid = triangleMaterials == null ? 0 : triangleMaterials[tri];
			var jl = [];
			var _g2 = 0;
			while(_g2 < 3) {
				var i = _g2++;
				var vid = index[iid + i];
				var _g4 = 0;
				var _g3 = this.bonesPerVertex;
				while(_g4 < _g3) {
					var b = _g4++;
					var bidx = vid * this.bonesPerVertex + b;
					if(this.vertexWeights[bidx] == 0) {
						continue;
					}
					var j = this.boundJoints[this.vertexJoints[bidx]];
					if(j.splitIndex != iid) {
						j.splitIndex = iid;
						jl.push(j);
					}
				}
			}
			jl.sort($bind(this,this.sortByBindIndex));
			var _g21 = 0;
			while(_g21 < permuts.length) {
				var p2 = permuts[_g21];
				++_g21;
				if(p2.material == mid && this.isSub(jl,p2.joints)) {
					p2.triangles.push(tri);
					jl = null;
					break;
				}
			}
			if(jl == null) {
				continue;
			}
			var _g22 = 0;
			while(_g22 < permuts.length) {
				var p21 = permuts[_g22];
				++_g22;
				if(p21.material == mid && this.isSub(p21.joints,jl)) {
					p21.joints = jl;
					p21.triangles.push(tri);
					jl = null;
					break;
				}
			}
			if(jl == null) {
				continue;
			}
			var pr = new h3d_anim__$Skin_Permut();
			pr.joints = jl;
			pr.triangles = [tri];
			pr.material = mid;
			permuts.push(pr);
		}
		while(true) {
			while(this.merge(permuts)) {
			}
			var minDif = 100000;
			var minTot = 100000;
			var minP1 = null;
			var minP2 = null;
			var _g11 = 0;
			var _g5 = permuts.length;
			while(_g11 < _g5) {
				var i1 = _g11++;
				var p1 = permuts[i1];
				if(p1.joints.length == maxBones) {
					continue;
				}
				var _g31 = i1 + 1;
				var _g23 = permuts.length;
				while(_g31 < _g23) {
					var j1 = _g31++;
					var p22 = permuts[j1];
					if(p22.joints.length == maxBones || p1.material != p22.material) {
						continue;
					}
					var count = this.jointsDiff(p1,p22);
					var tot = count + (p1.joints.length + p22.joints.length - count >> 1);
					if(tot > maxBones || tot > minTot || tot == minTot && count > minDif) {
						continue;
					}
					minDif = count;
					minTot = tot;
					minP1 = p1;
					minP2 = p22;
				}
			}
			if(minP1 == null) {
				break;
			}
			var p11 = minP1;
			var p23 = minP2;
			var _g6 = 0;
			var _g12 = p11.joints;
			while(_g6 < _g12.length) {
				var j2 = _g12[_g6];
				++_g6;
				HxOverrides.remove(p23.joints,j2);
				p23.joints.push(j2);
			}
			p23.joints.sort($bind(this,this.sortByBindIndex));
			var _g7 = 0;
			var _g13 = p11.triangles;
			while(_g7 < _g13.length) {
				var t = _g13[_g7];
				++_g7;
				p23.triangles.push(t);
			}
			HxOverrides.remove(permuts,p11);
		}
		var _g14 = 0;
		var _g8 = permuts.length;
		while(_g14 < _g8) {
			var i2 = _g14++;
			var _g24 = 0;
			var _g32 = permuts[i2].triangles;
			while(_g24 < _g32.length) {
				var tri1 = _g32[_g24];
				++_g24;
				this.triangleGroups[tri1] = i2;
			}
		}
		var jointsPermuts = [];
		var _g9 = 0;
		var _g15 = this.boundJoints;
		while(_g9 < _g15.length) {
			var j3 = _g15[_g9];
			++_g9;
			var pl = [];
			var _g25 = 0;
			while(_g25 < permuts.length) {
				var p = permuts[_g25];
				++_g25;
				if(p.joints.indexOf(j3) >= 0) {
					pl.push(p);
				}
			}
			jointsPermuts.push({ j : j3, pl : pl});
		}
		jointsPermuts.sort(function(j11,j21) {
			return j21.pl.length - j11.pl.length;
		});
		var _g10 = 0;
		while(_g10 < permuts.length) {
			var p3 = permuts[_g10];
			++_g10;
			p3.indexedJoints = [];
		}
		var _g16 = 0;
		while(_g16 < jointsPermuts.length) {
			var j4 = jointsPermuts[_g16];
			++_g16;
			j4.j.splitIndex = -1;
			var _g26 = 0;
			var _g17 = maxBones;
			while(_g26 < _g17) {
				var id = _g26++;
				var ok = true;
				var _g33 = 0;
				var _g41 = j4.pl;
				while(_g33 < _g41.length) {
					var p4 = _g41[_g33];
					++_g33;
					if(p4.indexedJoints[id] != null) {
						ok = false;
						break;
					}
				}
				if(ok) {
					j4.j.splitIndex = id;
					var _g34 = 0;
					var _g42 = j4.pl;
					while(_g34 < _g42.length) {
						var p5 = _g42[_g34];
						++_g34;
						p5.indexedJoints[id] = j4.j;
					}
					break;
				}
			}
			if(j4.j.splitIndex < 0) {
				throw new js__$Boot_HaxeError("Failed to assign index while spliting skin");
			}
		}
		this.splitJoints = [];
		var _g18 = 0;
		while(_g18 < permuts.length) {
			var p6 = permuts[_g18];
			++_g18;
			var jl1 = [];
			var _g27 = 0;
			var _g19 = p6.indexedJoints.length;
			while(_g27 < _g19) {
				var i3 = _g27++;
				var j5 = p6.indexedJoints[i3];
				if(j5 == null) {
					j5 = this.boundJoints[0];
				}
				jl1.push(j5);
			}
			this.splitJoints.push({ material : p6.material, joints : jl1});
		}
		var _g110 = 0;
		var _g20 = this.vertexJoints.length;
		while(_g110 < _g20) {
			var i4 = _g110++;
			this.vertexJoints[i4] = this.boundJoints[this.vertexJoints[i4]].splitIndex;
		}
		return true;
	}
	,__class__: h3d_anim_Skin
};
var hxbit_StructSerializable = function() { };
$hxClasses["hxbit.StructSerializable"] = hxbit_StructSerializable;
hxbit_StructSerializable.__name__ = ["hxbit","StructSerializable"];
hxbit_StructSerializable.prototype = {
	__class__: hxbit_StructSerializable
};
var h3d_col_Collider = function() { };
$hxClasses["h3d.col.Collider"] = h3d_col_Collider;
h3d_col_Collider.__name__ = ["h3d","col","Collider"];
h3d_col_Collider.__interfaces__ = [hxbit_StructSerializable];
h3d_col_Collider.prototype = {
	__class__: h3d_col_Collider
};
var h3d_col_Bounds = function() {
	this.xMin = 1e20;
	this.xMax = -1e20;
	this.yMin = 1e20;
	this.yMax = -1e20;
	this.zMin = 1e20;
	this.zMax = -1e20;
};
$hxClasses["h3d.col.Bounds"] = h3d_col_Bounds;
h3d_col_Bounds.__name__ = ["h3d","col","Bounds"];
h3d_col_Bounds.__interfaces__ = [h3d_col_Collider];
h3d_col_Bounds.fromPoints = function(min,max) {
	var b = new h3d_col_Bounds();
	b.xMin = min.x;
	b.yMin = min.y;
	b.zMin = min.z;
	b.xMax = max.x;
	b.yMax = max.y;
	b.zMax = max.z;
	return b;
};
h3d_col_Bounds.fromValues = function(x,y,z,dx,dy,dz) {
	var b = new h3d_col_Bounds();
	b.xMin = x;
	b.yMin = y;
	b.zMin = z;
	b.xMax = x + dx;
	b.yMax = y + dy;
	b.zMax = z + dz;
	return b;
};
h3d_col_Bounds.prototype = {
	inFrustum: function(mvp) {
		var p_nz;
		var p_ny;
		var p_nx;
		var p_d;
		p_nx = mvp._14 + mvp._11;
		p_ny = mvp._24 + mvp._21;
		p_nz = mvp._34 + mvp._31;
		p_d = -(mvp._44 + mvp._41);
		var a = p_nx;
		var b = p_ny;
		var c = p_nz;
		var dd = a * (this.xMax + this.xMin) + b * (this.yMax + this.yMin) + c * (this.zMax + this.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b < 0) {
			b = -b;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (this.xMax - this.xMin) + b * (this.yMax - this.yMin) + c * (this.zMax - this.zMin);
		if(dd + rr - p_d * 2 < 0) {
			return false;
		}
		var p_nz1;
		var p_ny1;
		var p_nx1;
		var p_d1;
		p_nx1 = mvp._14 - mvp._11;
		p_ny1 = mvp._24 - mvp._21;
		p_nz1 = mvp._34 - mvp._31;
		p_d1 = mvp._41 - mvp._44;
		var a1 = p_nx1;
		var b1 = p_ny1;
		var c1 = p_nz1;
		var dd1 = a1 * (this.xMax + this.xMin) + b1 * (this.yMax + this.yMin) + c1 * (this.zMax + this.zMin);
		if(a1 < 0) {
			a1 = -a1;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c1 < 0) {
			c1 = -c1;
		}
		var rr1 = a1 * (this.xMax - this.xMin) + b1 * (this.yMax - this.yMin) + c1 * (this.zMax - this.zMin);
		if(dd1 + rr1 - p_d1 * 2 < 0) {
			return false;
		}
		var p_nz2;
		var p_ny2;
		var p_nx2;
		var p_d2;
		p_nx2 = mvp._14 + mvp._12;
		p_ny2 = mvp._24 + mvp._22;
		p_nz2 = mvp._34 + mvp._32;
		p_d2 = -(mvp._44 + mvp._42);
		var a2 = p_nx2;
		var b2 = p_ny2;
		var c2 = p_nz2;
		var dd2 = a2 * (this.xMax + this.xMin) + b2 * (this.yMax + this.yMin) + c2 * (this.zMax + this.zMin);
		if(a2 < 0) {
			a2 = -a2;
		}
		if(b2 < 0) {
			b2 = -b2;
		}
		if(c2 < 0) {
			c2 = -c2;
		}
		var rr2 = a2 * (this.xMax - this.xMin) + b2 * (this.yMax - this.yMin) + c2 * (this.zMax - this.zMin);
		if(dd2 + rr2 - p_d2 * 2 < 0) {
			return false;
		}
		var p_nz3;
		var p_ny3;
		var p_nx3;
		var p_d3;
		p_nx3 = mvp._14 - mvp._12;
		p_ny3 = mvp._24 - mvp._22;
		p_nz3 = mvp._34 - mvp._32;
		p_d3 = mvp._42 - mvp._44;
		var a3 = p_nx3;
		var b3 = p_ny3;
		var c3 = p_nz3;
		var dd3 = a3 * (this.xMax + this.xMin) + b3 * (this.yMax + this.yMin) + c3 * (this.zMax + this.zMin);
		if(a3 < 0) {
			a3 = -a3;
		}
		if(b3 < 0) {
			b3 = -b3;
		}
		if(c3 < 0) {
			c3 = -c3;
		}
		var rr3 = a3 * (this.xMax - this.xMin) + b3 * (this.yMax - this.yMin) + c3 * (this.zMax - this.zMin);
		if(dd3 + rr3 - p_d3 * 2 < 0) {
			return false;
		}
		var p_nz4;
		var p_ny4;
		var p_nx4;
		var p_d4;
		p_nx4 = mvp._13;
		p_ny4 = mvp._23;
		p_nz4 = mvp._33;
		p_d4 = -mvp._43;
		var a4 = p_nx4;
		var b4 = p_ny4;
		var c4 = p_nz4;
		var dd4 = a4 * (this.xMax + this.xMin) + b4 * (this.yMax + this.yMin) + c4 * (this.zMax + this.zMin);
		if(a4 < 0) {
			a4 = -a4;
		}
		if(b4 < 0) {
			b4 = -b4;
		}
		if(c4 < 0) {
			c4 = -c4;
		}
		var rr4 = a4 * (this.xMax - this.xMin) + b4 * (this.yMax - this.yMin) + c4 * (this.zMax - this.zMin);
		if(dd4 + rr4 - p_d4 * 2 < 0) {
			return false;
		}
		var p_nz5;
		var p_ny5;
		var p_nx5;
		var p_d5;
		p_nx5 = mvp._14 - mvp._13;
		p_ny5 = mvp._24 - mvp._23;
		p_nz5 = mvp._34 - mvp._33;
		p_d5 = mvp._43 - mvp._44;
		var a5 = p_nx5;
		var b5 = p_ny5;
		var c5 = p_nz5;
		var dd5 = a5 * (this.xMax + this.xMin) + b5 * (this.yMax + this.yMin) + c5 * (this.zMax + this.zMin);
		if(a5 < 0) {
			a5 = -a5;
		}
		if(b5 < 0) {
			b5 = -b5;
		}
		if(c5 < 0) {
			c5 = -c5;
		}
		var rr5 = a5 * (this.xMax - this.xMin) + b5 * (this.yMax - this.yMin) + c5 * (this.zMax - this.zMin);
		if(dd5 + rr5 - p_d5 * 2 < 0) {
			return false;
		}
		return true;
	}
	,testPlane: function(p) {
		var a = p.nx;
		var b = p.ny;
		var c = p.nz;
		var dd = a * (this.xMax + this.xMin) + b * (this.yMax + this.yMin) + c * (this.zMax + this.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b < 0) {
			b = -b;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (this.xMax - this.xMin) + b * (this.yMax - this.yMin) + c * (this.zMax - this.zMin);
		return dd + rr - p.d * 2;
	}
	,rayIntersection: function(r,bestMatch) {
		var minTx = (this.xMin - r.px) / r.lx;
		var minTy = (this.yMin - r.py) / r.ly;
		var minTz = (this.zMin - r.pz) / r.lz;
		var maxTx = (this.xMax - r.px) / r.lx;
		var maxTy = (this.yMax - r.py) / r.ly;
		var maxTz = (this.zMax - r.pz) / r.lz;
		var realMinTx = minTx > maxTx ? maxTx : minTx;
		var realMinTy = minTy > maxTy ? maxTy : minTy;
		var realMinTz = minTz > maxTz ? maxTz : minTz;
		var realMaxTx = minTx < maxTx ? maxTx : minTx;
		var realMaxTy = minTy < maxTy ? maxTy : minTy;
		var realMaxTz = minTz < maxTz ? maxTz : minTz;
		var a = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		var minmax = a > realMaxTz ? realMaxTz : a;
		var a1 = realMinTx < realMinTy ? realMinTy : realMinTx;
		var maxmin = a1 < realMinTz ? realMinTz : a1;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	,inFrustumDetails: function(mvp,checkZ) {
		if(checkZ == null) {
			checkZ = true;
		}
		var ret = 1;
		var p_nz;
		var p_ny;
		var p_nx;
		var p_d;
		p_nx = mvp._14 + mvp._11;
		p_ny = mvp._24 + mvp._21;
		p_nz = mvp._34 + mvp._31;
		p_d = mvp._44 + mvp._41;
		var m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
		if(m + p_d < 0) {
			return -1;
		}
		var n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
		if(n + p_d < 0) {
			ret = 0;
		}
		var p_nz1;
		var p_ny1;
		var p_nx1;
		var p_d1;
		p_nx1 = mvp._14 - mvp._11;
		p_ny1 = mvp._24 - mvp._21;
		p_nz1 = mvp._34 - mvp._31;
		p_d1 = mvp._44 - mvp._41;
		var m1 = p_nx1 * (p_nx1 > 0 ? this.xMax : this.xMin) + p_ny1 * (p_ny1 > 0 ? this.yMax : this.yMin) + p_nz1 * (p_nz1 > 0 ? this.zMax : this.zMin);
		if(m1 + p_d1 < 0) {
			return -1;
		}
		var n1 = p_nx1 * (p_nx1 > 0 ? this.xMin : this.xMax) + p_ny1 * (p_ny1 > 0 ? this.yMin : this.yMax) + p_nz1 * (p_nz1 > 0 ? this.zMin : this.zMax);
		if(n1 + p_d1 < 0) {
			ret = 0;
		}
		var p_nz2;
		var p_ny2;
		var p_nx2;
		var p_d2;
		p_nx2 = mvp._14 + mvp._12;
		p_ny2 = mvp._24 + mvp._22;
		p_nz2 = mvp._34 + mvp._32;
		p_d2 = mvp._44 + mvp._42;
		var m2 = p_nx2 * (p_nx2 > 0 ? this.xMax : this.xMin) + p_ny2 * (p_ny2 > 0 ? this.yMax : this.yMin) + p_nz2 * (p_nz2 > 0 ? this.zMax : this.zMin);
		if(m2 + p_d2 < 0) {
			return -1;
		}
		var n2 = p_nx2 * (p_nx2 > 0 ? this.xMin : this.xMax) + p_ny2 * (p_ny2 > 0 ? this.yMin : this.yMax) + p_nz2 * (p_nz2 > 0 ? this.zMin : this.zMax);
		if(n2 + p_d2 < 0) {
			ret = 0;
		}
		var p_nz3;
		var p_ny3;
		var p_nx3;
		var p_d3;
		p_nx3 = mvp._14 - mvp._12;
		p_ny3 = mvp._24 - mvp._22;
		p_nz3 = mvp._34 - mvp._32;
		p_d3 = mvp._44 - mvp._42;
		var m3 = p_nx3 * (p_nx3 > 0 ? this.xMax : this.xMin) + p_ny3 * (p_ny3 > 0 ? this.yMax : this.yMin) + p_nz3 * (p_nz3 > 0 ? this.zMax : this.zMin);
		if(m3 + p_d3 < 0) {
			return -1;
		}
		var n3 = p_nx3 * (p_nx3 > 0 ? this.xMin : this.xMax) + p_ny3 * (p_ny3 > 0 ? this.yMin : this.yMax) + p_nz3 * (p_nz3 > 0 ? this.zMin : this.zMax);
		if(n3 + p_d3 < 0) {
			ret = 0;
		}
		if(checkZ) {
			var p_nz4;
			var p_ny4;
			var p_nx4;
			var p_d4;
			p_nx4 = mvp._13;
			p_ny4 = mvp._23;
			p_nz4 = mvp._33;
			p_d4 = mvp._43;
			var m4 = p_nx4 * (p_nx4 > 0 ? this.xMax : this.xMin) + p_ny4 * (p_ny4 > 0 ? this.yMax : this.yMin) + p_nz4 * (p_nz4 > 0 ? this.zMax : this.zMin);
			if(m4 + p_d4 < 0) {
				return -1;
			}
			var n4 = p_nx4 * (p_nx4 > 0 ? this.xMin : this.xMax) + p_ny4 * (p_ny4 > 0 ? this.yMin : this.yMax) + p_nz4 * (p_nz4 > 0 ? this.zMin : this.zMax);
			if(n4 + p_d4 < 0) {
				ret = 0;
			}
			var p_nz5;
			var p_ny5;
			var p_nx5;
			var p_d5;
			p_nx5 = mvp._14 - mvp._13;
			p_ny5 = mvp._24 - mvp._23;
			p_nz5 = mvp._34 - mvp._33;
			p_d5 = mvp._44 - mvp._43;
			var m5 = p_nx5 * (p_nx5 > 0 ? this.xMax : this.xMin) + p_ny5 * (p_ny5 > 0 ? this.yMax : this.yMin) + p_nz5 * (p_nz5 > 0 ? this.zMax : this.zMin);
			if(m5 + p_d5 < 0) {
				return -1;
			}
			var n5 = p_nx5 * (p_nx5 > 0 ? this.xMin : this.xMax) + p_ny5 * (p_ny5 > 0 ? this.yMin : this.yMax) + p_nz5 * (p_nz5 > 0 ? this.zMin : this.zMax);
			if(n5 + p_d5 < 0) {
				ret = 0;
			}
		}
		return ret;
	}
	,transform3x3: function(m) {
		var xMin = this.xMin;
		var yMin = this.yMin;
		var zMin = this.zMin;
		var xMax = this.xMax;
		var yMax = this.yMax;
		var zMax = this.zMax;
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
		var v_z;
		var v_y;
		var v_x = 0.;
		v_y = 0.;
		v_z = 0.;
		v_x = xMin;
		v_y = yMin;
		v_z = zMin;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMin;
		v_z = zMax;
		var px1 = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py1 = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz1 = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px1;
		v_y = py1;
		v_z = pz1;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMax;
		v_z = zMin;
		var px2 = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py2 = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz2 = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px2;
		v_y = py2;
		v_z = pz2;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMax;
		v_z = zMax;
		var px3 = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py3 = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz3 = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px3;
		v_y = py3;
		v_z = pz3;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMin;
		v_z = zMin;
		var px4 = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py4 = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz4 = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px4;
		v_y = py4;
		v_z = pz4;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMin;
		v_z = zMax;
		var px5 = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py5 = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz5 = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px5;
		v_y = py5;
		v_z = pz5;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMax;
		v_z = zMin;
		var px6 = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py6 = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz6 = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px6;
		v_y = py6;
		v_z = pz6;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMax;
		v_z = zMax;
		var px7 = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py7 = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz7 = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px7;
		v_y = py7;
		v_z = pz7;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
	}
	,transform: function(m) {
		var xMin = this.xMin;
		var yMin = this.yMin;
		var zMin = this.zMin;
		var xMax = this.xMax;
		var yMax = this.yMax;
		var zMax = this.zMax;
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
		if(xMax < xMin && yMax < yMin && zMax < zMin) {
			return;
		}
		var v_z;
		var v_y;
		var v_x = 0.;
		v_y = 0.;
		v_z = 0.;
		v_x = xMin;
		v_y = yMin;
		v_z = zMin;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMin;
		v_z = zMax;
		var px1 = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py1 = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz1 = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px1;
		v_y = py1;
		v_z = pz1;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMax;
		v_z = zMin;
		var px2 = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py2 = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz2 = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px2;
		v_y = py2;
		v_z = pz2;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMax;
		v_z = zMax;
		var px3 = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py3 = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz3 = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px3;
		v_y = py3;
		v_z = pz3;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMin;
		v_z = zMin;
		var px4 = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py4 = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz4 = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px4;
		v_y = py4;
		v_z = pz4;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMin;
		v_z = zMax;
		var px5 = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py5 = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz5 = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px5;
		v_y = py5;
		v_z = pz5;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMax;
		v_z = zMin;
		var px6 = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py6 = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz6 = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px6;
		v_y = py6;
		v_z = pz6;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMax;
		v_z = zMax;
		var px7 = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py7 = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz7 = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px7;
		v_y = py7;
		v_z = pz7;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
	}
	,collide: function(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.zMin > b.zMax || this.xMax < b.xMin || this.yMax < b.yMin || this.zMax < b.zMin);
	}
	,contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin && p.y < this.yMax && p.z >= this.zMin) {
			return p.z < this.zMax;
		} else {
			return false;
		}
	}
	,add: function(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
		if(b.zMin < this.zMin) {
			this.zMin = b.zMin;
		}
		if(b.zMax > this.zMax) {
			this.zMax = b.zMax;
		}
	}
	,addPoint: function(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
		if(p.z < this.zMin) {
			this.zMin = p.z;
		}
		if(p.z > this.zMax) {
			this.zMax = p.z;
		}
	}
	,addPos: function(x,y,z) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		if(z < this.zMin) {
			this.zMin = z;
		}
		if(z > this.zMax) {
			this.zMax = z;
		}
	}
	,intersection: function(a,b) {
		var a1 = a.xMin;
		var b1 = b.xMin;
		var xMin = a1 < b1 ? b1 : a1;
		var a2 = a.yMin;
		var b2 = b.yMin;
		var yMin = a2 < b2 ? b2 : a2;
		var a3 = a.zMin;
		var b3 = b.zMin;
		var zMin = a3 < b3 ? b3 : a3;
		var a4 = a.xMax;
		var b4 = b.xMax;
		var xMax = a4 > b4 ? b4 : a4;
		var a5 = a.yMax;
		var b5 = b.yMax;
		var yMax = a5 > b5 ? b5 : a5;
		var a6 = a.zMax;
		var b6 = b.zMax;
		var zMax = a6 > b6 ? b6 : a6;
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
	}
	,offset: function(dx,dy,dz) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
		this.zMin += dz;
		this.zMax += dz;
	}
	,setMin: function(p) {
		this.xMin = p.x;
		this.yMin = p.y;
		this.zMin = p.z;
	}
	,setMax: function(p) {
		this.xMax = p.x;
		this.yMax = p.y;
		this.zMax = p.z;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.xMax = b.xMax;
		this.yMin = b.yMin;
		this.yMax = b.yMax;
		this.zMin = b.zMin;
		this.zMax = b.zMax;
	}
	,scalePivot: function(v) {
		this.xMin *= v;
		this.yMin *= v;
		this.zMin *= v;
		this.xMax *= v;
		this.yMax *= v;
		this.zMax *= v;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var dz = (this.zMax - this.zMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		var mz = (this.zMax + this.zMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.zMin = mz - dz;
		this.xMax = mx + dx;
		this.yMax = my + dy;
		this.zMax = mz + dz;
	}
	,getMin: function() {
		return new h3d_col_Point(this.xMin,this.yMin,this.zMin);
	}
	,getCenter: function() {
		return new h3d_col_Point((this.xMin + this.xMax) * 0.5,(this.yMin + this.yMax) * 0.5,(this.zMin + this.zMax) * 0.5);
	}
	,getSize: function() {
		return new h3d_col_Point(this.xMax - this.xMin,this.yMax - this.yMin,this.zMax - this.zMin);
	}
	,getMax: function() {
		return new h3d_col_Point(this.xMax,this.yMax,this.zMax);
	}
	,get_xSize: function() {
		return this.xMax - this.xMin;
	}
	,get_ySize: function() {
		return this.yMax - this.yMin;
	}
	,get_zSize: function() {
		return this.zMax - this.zMin;
	}
	,set_xSize: function(v) {
		this.xMax = this.xMin + v;
		return v;
	}
	,set_ySize: function(v) {
		this.yMax = this.yMin + v;
		return v;
	}
	,set_zSize: function(v) {
		this.zMax = this.zMin + v;
		return v;
	}
	,empty: function() {
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
	}
	,all: function() {
		this.xMin = -1e20;
		this.xMax = 1e20;
		this.yMin = -1e20;
		this.yMax = 1e20;
		this.zMin = -1e20;
		this.zMax = 1e20;
	}
	,clone: function() {
		var b = new h3d_col_Bounds();
		b.xMin = this.xMin;
		b.xMax = this.xMax;
		b.yMin = this.yMin;
		b.yMax = this.yMax;
		b.zMin = this.zMin;
		b.zMax = this.zMax;
		return b;
	}
	,toString: function() {
		return "Bounds{" + Std.string(new h3d_col_Point(this.xMin,this.yMin,this.zMin)) + "," + Std.string(new h3d_col_Point(this.xMax - this.xMin,this.yMax - this.yMin,this.zMax - this.zMin)) + "}";
	}
	,toSphere: function() {
		var dx = this.xMax - this.xMin;
		var dy = this.yMax - this.yMin;
		var dz = this.zMax - this.zMin;
		return new h3d_col_Sphere((this.xMin + this.xMax) * 0.5,(this.yMin + this.yMax) * 0.5,(this.zMin + this.zMax) * 0.5,Math.sqrt(dx * dx + dy * dy + dz * dz) * 0.5);
	}
	,customSerialize: function(ctx) {
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.xMin));
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.xMax));
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.yMin));
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.yMax));
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.zMin));
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.zMax));
	}
	,customUnserialize: function(ctx) {
		var v = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.xMin = v;
		var v1 = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.xMax = v1;
		var v2 = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.yMin = v2;
		var v3 = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.yMax = v3;
		var v4 = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.zMin = v4;
		var v5 = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.zMax = v5;
	}
	,__class__: h3d_col_Bounds
};
var h3d_col_OptimizedCollider = function(a,b) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.a = a;
	this.b = b;
};
$hxClasses["h3d.col.OptimizedCollider"] = h3d_col_OptimizedCollider;
h3d_col_OptimizedCollider.__name__ = ["h3d","col","OptimizedCollider"];
h3d_col_OptimizedCollider.__interfaces__ = [h3d_col_Collider,hxbit_Serializable];
h3d_col_OptimizedCollider.prototype = {
	rayIntersection: function(r,bestMatch) {
		if(this.a.rayIntersection(r,bestMatch) < 0) {
			return -1;
		}
		return this.b.rayIntersection(r,bestMatch);
	}
	,contains: function(p) {
		if(this.a.contains(p)) {
			return this.b.contains(p);
		} else {
			return false;
		}
	}
	,inFrustum: function(mvp) {
		if(this.a.inFrustum(mvp)) {
			return this.b.inFrustum(mvp);
		} else {
			return false;
		}
	}
	,customSerialize: function(ctx) {
	}
	,customUnserialize: function(ctx) {
	}
	,getCLID: function() {
		return h3d_col_OptimizedCollider.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.addStruct(this.a);
		__ctx.addStruct(this.b);
		this.customSerialize(__ctx);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("a");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PStruct);
		schema.fieldsNames.push("b");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PStruct);
		schema.isFinal = hxbit_Serializer.isClassFinal(h3d_col_OptimizedCollider.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		this.a = __ctx.getStruct();
		this.b = __ctx.getStruct();
		this.customUnserialize(__ctx);
	}
	,__class__: h3d_col_OptimizedCollider
};
var h3d_col_GroupCollider = function(colliders) {
	this.colliders = colliders;
};
$hxClasses["h3d.col.GroupCollider"] = h3d_col_GroupCollider;
h3d_col_GroupCollider.__name__ = ["h3d","col","GroupCollider"];
h3d_col_GroupCollider.__interfaces__ = [h3d_col_Collider];
h3d_col_GroupCollider.prototype = {
	rayIntersection: function(r,bestMatch) {
		var best = -1.;
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var d = c.rayIntersection(r,bestMatch);
			if(d >= 0) {
				if(!bestMatch) {
					return d;
				}
				if(best < 0 || d < best) {
					best = d;
				}
			}
		}
		return best;
	}
	,contains: function(p) {
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.contains(p)) {
				return true;
			}
		}
		return false;
	}
	,inFrustum: function(mvp) {
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.inFrustum(mvp)) {
				return true;
			}
		}
		return false;
	}
	,customSerialize: function(ctx) {
		var v = this.colliders.length;
		if(v >= 0 && v < 128) {
			ctx.out.b.push(v);
		} else {
			ctx.out.b.push(128);
			ctx.out.addInt32(v);
		}
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			ctx.addStruct(c);
		}
	}
	,customUnserialize: function(ctx) {
		var _g = [];
		var _g2 = 0;
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _g1 = v;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(ctx.getStruct());
		}
		this.colliders = _g;
	}
	,__class__: h3d_col_GroupCollider
};
var h3d_col_FPoint = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["h3d.col.FPoint"] = h3d_col_FPoint;
h3d_col_FPoint.__name__ = ["h3d","col","FPoint"];
h3d_col_FPoint.prototype = {
	sub: function(p) {
		return new h3d_col_FPoint(this.x - p.x,this.y - p.y,this.z - p.z);
	}
	,add: function(p) {
		return new h3d_col_FPoint(this.x + p.x,this.y + p.y,this.z + p.z);
	}
	,cross: function(p) {
		return new h3d_col_FPoint(this.y * p.z - this.z * p.y,this.z * p.x - this.x * p.z,this.x * p.y - this.y * p.x);
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y + this.z * p.z;
	}
	,toString: function() {
		return "FPoint{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "}";
	}
	,__class__: h3d_col_FPoint
};
var h3d_col_Frustum = function(mvp) {
	this.checkNearFar = true;
	this.pleft = new h3d_col_Plane(mvp._14 + mvp._11,mvp._24 + mvp._21,mvp._34 + mvp._31,-(mvp._44 + mvp._41));
	this.pright = new h3d_col_Plane(mvp._14 - mvp._11,mvp._24 - mvp._21,mvp._34 - mvp._31,mvp._41 - mvp._44);
	this.ptop = new h3d_col_Plane(mvp._14 - mvp._12,mvp._24 - mvp._22,mvp._34 - mvp._32,mvp._42 - mvp._44);
	this.pbottom = new h3d_col_Plane(mvp._14 + mvp._12,mvp._24 + mvp._22,mvp._34 + mvp._32,-(mvp._44 + mvp._42));
	this.pnear = new h3d_col_Plane(mvp._13,mvp._23,mvp._33,-mvp._43);
	this.pfar = new h3d_col_Plane(mvp._14 - mvp._13,mvp._24 - mvp._23,mvp._34 - mvp._33,mvp._43 - mvp._44);
	var _this = this.pleft;
	var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
	_this.nx *= len;
	_this.ny *= len;
	_this.nz *= len;
	_this.d *= len;
	var _this1 = this.pright;
	var len1 = 1. / Math.sqrt(_this1.nx * _this1.nx + _this1.ny * _this1.ny + _this1.nz * _this1.nz);
	_this1.nx *= len1;
	_this1.ny *= len1;
	_this1.nz *= len1;
	_this1.d *= len1;
	var _this2 = this.ptop;
	var len2 = 1. / Math.sqrt(_this2.nx * _this2.nx + _this2.ny * _this2.ny + _this2.nz * _this2.nz);
	_this2.nx *= len2;
	_this2.ny *= len2;
	_this2.nz *= len2;
	_this2.d *= len2;
	var _this3 = this.pbottom;
	var len3 = 1. / Math.sqrt(_this3.nx * _this3.nx + _this3.ny * _this3.ny + _this3.nz * _this3.nz);
	_this3.nx *= len3;
	_this3.ny *= len3;
	_this3.nz *= len3;
	_this3.d *= len3;
	var _this4 = this.pnear;
	var len4 = 1. / Math.sqrt(_this4.nx * _this4.nx + _this4.ny * _this4.ny + _this4.nz * _this4.nz);
	_this4.nx *= len4;
	_this4.ny *= len4;
	_this4.nz *= len4;
	_this4.d *= len4;
	var _this5 = this.pfar;
	var len5 = 1. / Math.sqrt(_this5.nx * _this5.nx + _this5.ny * _this5.ny + _this5.nz * _this5.nz);
	_this5.nx *= len5;
	_this5.ny *= len5;
	_this5.nz *= len5;
	_this5.d *= len5;
};
$hxClasses["h3d.col.Frustum"] = h3d_col_Frustum;
h3d_col_Frustum.__name__ = ["h3d","col","Frustum"];
h3d_col_Frustum.prototype = {
	transform: function(m) {
		var m2 = new h3d_Matrix();
		m2.initInverse(m);
		m2.transpose();
		var _this = this.pleft;
		var v_z;
		var v_y;
		var v_x;
		var v_w;
		v_x = _this.nx;
		v_y = _this.ny;
		v_z = _this.nz;
		v_w = -_this.d;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this1 = this.pright;
		var v_z1;
		var v_y1;
		var v_x1;
		var v_w1;
		v_x1 = _this1.nx;
		v_y1 = _this1.ny;
		v_z1 = _this1.nz;
		v_w1 = -_this1.d;
		var px1 = v_x1 * m2._11 + v_y1 * m2._21 + v_z1 * m2._31 + v_w1 * m2._41;
		var py1 = v_x1 * m2._12 + v_y1 * m2._22 + v_z1 * m2._32 + v_w1 * m2._42;
		var pz1 = v_x1 * m2._13 + v_y1 * m2._23 + v_z1 * m2._33 + v_w1 * m2._43;
		var pw1 = v_x1 * m2._14 + v_y1 * m2._24 + v_z1 * m2._34 + v_w1 * m2._44;
		v_x1 = px1;
		v_y1 = py1;
		v_z1 = pz1;
		v_w1 = pw1;
		_this1.nx = v_x1;
		_this1.ny = v_y1;
		_this1.nz = v_z1;
		_this1.d = -v_w1;
		var _this2 = this.ptop;
		var v_z2;
		var v_y2;
		var v_x2;
		var v_w2;
		v_x2 = _this2.nx;
		v_y2 = _this2.ny;
		v_z2 = _this2.nz;
		v_w2 = -_this2.d;
		var px2 = v_x2 * m2._11 + v_y2 * m2._21 + v_z2 * m2._31 + v_w2 * m2._41;
		var py2 = v_x2 * m2._12 + v_y2 * m2._22 + v_z2 * m2._32 + v_w2 * m2._42;
		var pz2 = v_x2 * m2._13 + v_y2 * m2._23 + v_z2 * m2._33 + v_w2 * m2._43;
		var pw2 = v_x2 * m2._14 + v_y2 * m2._24 + v_z2 * m2._34 + v_w2 * m2._44;
		v_x2 = px2;
		v_y2 = py2;
		v_z2 = pz2;
		v_w2 = pw2;
		_this2.nx = v_x2;
		_this2.ny = v_y2;
		_this2.nz = v_z2;
		_this2.d = -v_w2;
		var _this3 = this.pbottom;
		var v_z3;
		var v_y3;
		var v_x3;
		var v_w3;
		v_x3 = _this3.nx;
		v_y3 = _this3.ny;
		v_z3 = _this3.nz;
		v_w3 = -_this3.d;
		var px3 = v_x3 * m2._11 + v_y3 * m2._21 + v_z3 * m2._31 + v_w3 * m2._41;
		var py3 = v_x3 * m2._12 + v_y3 * m2._22 + v_z3 * m2._32 + v_w3 * m2._42;
		var pz3 = v_x3 * m2._13 + v_y3 * m2._23 + v_z3 * m2._33 + v_w3 * m2._43;
		var pw3 = v_x3 * m2._14 + v_y3 * m2._24 + v_z3 * m2._34 + v_w3 * m2._44;
		v_x3 = px3;
		v_y3 = py3;
		v_z3 = pz3;
		v_w3 = pw3;
		_this3.nx = v_x3;
		_this3.ny = v_y3;
		_this3.nz = v_z3;
		_this3.d = -v_w3;
		var _this4 = this.pfar;
		var v_z4;
		var v_y4;
		var v_x4;
		var v_w4;
		v_x4 = _this4.nx;
		v_y4 = _this4.ny;
		v_z4 = _this4.nz;
		v_w4 = -_this4.d;
		var px4 = v_x4 * m2._11 + v_y4 * m2._21 + v_z4 * m2._31 + v_w4 * m2._41;
		var py4 = v_x4 * m2._12 + v_y4 * m2._22 + v_z4 * m2._32 + v_w4 * m2._42;
		var pz4 = v_x4 * m2._13 + v_y4 * m2._23 + v_z4 * m2._33 + v_w4 * m2._43;
		var pw4 = v_x4 * m2._14 + v_y4 * m2._24 + v_z4 * m2._34 + v_w4 * m2._44;
		v_x4 = px4;
		v_y4 = py4;
		v_z4 = pz4;
		v_w4 = pw4;
		_this4.nx = v_x4;
		_this4.ny = v_y4;
		_this4.nz = v_z4;
		_this4.d = -v_w4;
		var _this5 = this.pnear;
		var v_z5;
		var v_y5;
		var v_x5;
		var v_w5;
		v_x5 = _this5.nx;
		v_y5 = _this5.ny;
		v_z5 = _this5.nz;
		v_w5 = -_this5.d;
		var px5 = v_x5 * m2._11 + v_y5 * m2._21 + v_z5 * m2._31 + v_w5 * m2._41;
		var py5 = v_x5 * m2._12 + v_y5 * m2._22 + v_z5 * m2._32 + v_w5 * m2._42;
		var pz5 = v_x5 * m2._13 + v_y5 * m2._23 + v_z5 * m2._33 + v_w5 * m2._43;
		var pw5 = v_x5 * m2._14 + v_y5 * m2._24 + v_z5 * m2._34 + v_w5 * m2._44;
		v_x5 = px5;
		v_y5 = py5;
		v_z5 = pz5;
		v_w5 = pw5;
		_this5.nx = v_x5;
		_this5.ny = v_y5;
		_this5.nz = v_z5;
		_this5.d = -v_w5;
		var _this6 = this.pleft;
		var len = 1. / Math.sqrt(_this6.nx * _this6.nx + _this6.ny * _this6.ny + _this6.nz * _this6.nz);
		_this6.nx *= len;
		_this6.ny *= len;
		_this6.nz *= len;
		_this6.d *= len;
		var _this7 = this.pright;
		var len1 = 1. / Math.sqrt(_this7.nx * _this7.nx + _this7.ny * _this7.ny + _this7.nz * _this7.nz);
		_this7.nx *= len1;
		_this7.ny *= len1;
		_this7.nz *= len1;
		_this7.d *= len1;
		var _this8 = this.ptop;
		var len2 = 1. / Math.sqrt(_this8.nx * _this8.nx + _this8.ny * _this8.ny + _this8.nz * _this8.nz);
		_this8.nx *= len2;
		_this8.ny *= len2;
		_this8.nz *= len2;
		_this8.d *= len2;
		var _this9 = this.pbottom;
		var len3 = 1. / Math.sqrt(_this9.nx * _this9.nx + _this9.ny * _this9.ny + _this9.nz * _this9.nz);
		_this9.nx *= len3;
		_this9.ny *= len3;
		_this9.nz *= len3;
		_this9.d *= len3;
		var _this10 = this.pnear;
		var len4 = 1. / Math.sqrt(_this10.nx * _this10.nx + _this10.ny * _this10.ny + _this10.nz * _this10.nz);
		_this10.nx *= len4;
		_this10.ny *= len4;
		_this10.nz *= len4;
		_this10.d *= len4;
		var _this11 = this.pfar;
		var len5 = 1. / Math.sqrt(_this11.nx * _this11.nx + _this11.ny * _this11.ny + _this11.nz * _this11.nz);
		_this11.nx *= len5;
		_this11.ny *= len5;
		_this11.nz *= len5;
		_this11.d *= len5;
	}
	,transform3x3: function(m) {
		var m2 = new h3d_Matrix();
		m2.initInverse3x3(m);
		m2.transpose();
		var _this = this.pleft;
		var v_z;
		var v_y;
		var v_x;
		var v_w;
		v_x = _this.nx;
		v_y = _this.ny;
		v_z = _this.nz;
		v_w = -_this.d;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this1 = this.pright;
		var v_z1;
		var v_y1;
		var v_x1;
		var v_w1;
		v_x1 = _this1.nx;
		v_y1 = _this1.ny;
		v_z1 = _this1.nz;
		v_w1 = -_this1.d;
		var px1 = v_x1 * m2._11 + v_y1 * m2._21 + v_z1 * m2._31 + v_w1 * m2._41;
		var py1 = v_x1 * m2._12 + v_y1 * m2._22 + v_z1 * m2._32 + v_w1 * m2._42;
		var pz1 = v_x1 * m2._13 + v_y1 * m2._23 + v_z1 * m2._33 + v_w1 * m2._43;
		var pw1 = v_x1 * m2._14 + v_y1 * m2._24 + v_z1 * m2._34 + v_w1 * m2._44;
		v_x1 = px1;
		v_y1 = py1;
		v_z1 = pz1;
		v_w1 = pw1;
		_this1.nx = v_x1;
		_this1.ny = v_y1;
		_this1.nz = v_z1;
		_this1.d = -v_w1;
		var _this2 = this.ptop;
		var v_z2;
		var v_y2;
		var v_x2;
		var v_w2;
		v_x2 = _this2.nx;
		v_y2 = _this2.ny;
		v_z2 = _this2.nz;
		v_w2 = -_this2.d;
		var px2 = v_x2 * m2._11 + v_y2 * m2._21 + v_z2 * m2._31 + v_w2 * m2._41;
		var py2 = v_x2 * m2._12 + v_y2 * m2._22 + v_z2 * m2._32 + v_w2 * m2._42;
		var pz2 = v_x2 * m2._13 + v_y2 * m2._23 + v_z2 * m2._33 + v_w2 * m2._43;
		var pw2 = v_x2 * m2._14 + v_y2 * m2._24 + v_z2 * m2._34 + v_w2 * m2._44;
		v_x2 = px2;
		v_y2 = py2;
		v_z2 = pz2;
		v_w2 = pw2;
		_this2.nx = v_x2;
		_this2.ny = v_y2;
		_this2.nz = v_z2;
		_this2.d = -v_w2;
		var _this3 = this.pbottom;
		var v_z3;
		var v_y3;
		var v_x3;
		var v_w3;
		v_x3 = _this3.nx;
		v_y3 = _this3.ny;
		v_z3 = _this3.nz;
		v_w3 = -_this3.d;
		var px3 = v_x3 * m2._11 + v_y3 * m2._21 + v_z3 * m2._31 + v_w3 * m2._41;
		var py3 = v_x3 * m2._12 + v_y3 * m2._22 + v_z3 * m2._32 + v_w3 * m2._42;
		var pz3 = v_x3 * m2._13 + v_y3 * m2._23 + v_z3 * m2._33 + v_w3 * m2._43;
		var pw3 = v_x3 * m2._14 + v_y3 * m2._24 + v_z3 * m2._34 + v_w3 * m2._44;
		v_x3 = px3;
		v_y3 = py3;
		v_z3 = pz3;
		v_w3 = pw3;
		_this3.nx = v_x3;
		_this3.ny = v_y3;
		_this3.nz = v_z3;
		_this3.d = -v_w3;
		var _this4 = this.pfar;
		var v_z4;
		var v_y4;
		var v_x4;
		var v_w4;
		v_x4 = _this4.nx;
		v_y4 = _this4.ny;
		v_z4 = _this4.nz;
		v_w4 = -_this4.d;
		var px4 = v_x4 * m2._11 + v_y4 * m2._21 + v_z4 * m2._31 + v_w4 * m2._41;
		var py4 = v_x4 * m2._12 + v_y4 * m2._22 + v_z4 * m2._32 + v_w4 * m2._42;
		var pz4 = v_x4 * m2._13 + v_y4 * m2._23 + v_z4 * m2._33 + v_w4 * m2._43;
		var pw4 = v_x4 * m2._14 + v_y4 * m2._24 + v_z4 * m2._34 + v_w4 * m2._44;
		v_x4 = px4;
		v_y4 = py4;
		v_z4 = pz4;
		v_w4 = pw4;
		_this4.nx = v_x4;
		_this4.ny = v_y4;
		_this4.nz = v_z4;
		_this4.d = -v_w4;
		var _this5 = this.pnear;
		var v_z5;
		var v_y5;
		var v_x5;
		var v_w5;
		v_x5 = _this5.nx;
		v_y5 = _this5.ny;
		v_z5 = _this5.nz;
		v_w5 = -_this5.d;
		var px5 = v_x5 * m2._11 + v_y5 * m2._21 + v_z5 * m2._31 + v_w5 * m2._41;
		var py5 = v_x5 * m2._12 + v_y5 * m2._22 + v_z5 * m2._32 + v_w5 * m2._42;
		var pz5 = v_x5 * m2._13 + v_y5 * m2._23 + v_z5 * m2._33 + v_w5 * m2._43;
		var pw5 = v_x5 * m2._14 + v_y5 * m2._24 + v_z5 * m2._34 + v_w5 * m2._44;
		v_x5 = px5;
		v_y5 = py5;
		v_z5 = pz5;
		v_w5 = pw5;
		_this5.nx = v_x5;
		_this5.ny = v_y5;
		_this5.nz = v_z5;
		_this5.d = -v_w5;
		var _this6 = this.pleft;
		var len = 1. / Math.sqrt(_this6.nx * _this6.nx + _this6.ny * _this6.ny + _this6.nz * _this6.nz);
		_this6.nx *= len;
		_this6.ny *= len;
		_this6.nz *= len;
		_this6.d *= len;
		var _this7 = this.pright;
		var len1 = 1. / Math.sqrt(_this7.nx * _this7.nx + _this7.ny * _this7.ny + _this7.nz * _this7.nz);
		_this7.nx *= len1;
		_this7.ny *= len1;
		_this7.nz *= len1;
		_this7.d *= len1;
		var _this8 = this.ptop;
		var len2 = 1. / Math.sqrt(_this8.nx * _this8.nx + _this8.ny * _this8.ny + _this8.nz * _this8.nz);
		_this8.nx *= len2;
		_this8.ny *= len2;
		_this8.nz *= len2;
		_this8.d *= len2;
		var _this9 = this.pbottom;
		var len3 = 1. / Math.sqrt(_this9.nx * _this9.nx + _this9.ny * _this9.ny + _this9.nz * _this9.nz);
		_this9.nx *= len3;
		_this9.ny *= len3;
		_this9.nz *= len3;
		_this9.d *= len3;
		var _this10 = this.pnear;
		var len4 = 1. / Math.sqrt(_this10.nx * _this10.nx + _this10.ny * _this10.ny + _this10.nz * _this10.nz);
		_this10.nx *= len4;
		_this10.ny *= len4;
		_this10.nz *= len4;
		_this10.d *= len4;
		var _this11 = this.pfar;
		var len5 = 1. / Math.sqrt(_this11.nx * _this11.nx + _this11.ny * _this11.ny + _this11.nz * _this11.nz);
		_this11.nx *= len5;
		_this11.ny *= len5;
		_this11.nz *= len5;
		_this11.d *= len5;
	}
	,hasSphere: function(s) {
		var p_z;
		var p_y;
		var p_x = s.x;
		p_y = s.y;
		p_z = s.z;
		var _this = this.pleft;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this1 = this.pright;
		if(_this1.nx * p_x + _this1.ny * p_y + _this1.nz * p_z - _this1.d < -s.r) {
			return false;
		}
		var _this2 = this.ptop;
		if(_this2.nx * p_x + _this2.ny * p_y + _this2.nz * p_z - _this2.d < -s.r) {
			return false;
		}
		var _this3 = this.pbottom;
		if(_this3.nx * p_x + _this3.ny * p_y + _this3.nz * p_z - _this3.d < -s.r) {
			return false;
		}
		if(this.checkNearFar) {
			var _this4 = this.pnear;
			if(_this4.nx * p_x + _this4.ny * p_y + _this4.nz * p_z - _this4.d < -s.r) {
				return false;
			}
			var _this5 = this.pfar;
			if(_this5.nx * p_x + _this5.ny * p_y + _this5.nz * p_z - _this5.d < -s.r) {
				return false;
			}
		}
		return true;
	}
	,hasBounds: function(b) {
		var p = this.pleft;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p1 = this.pright;
		var a1 = p1.nx;
		var b2 = p1.ny;
		var c1 = p1.nz;
		var dd1 = a1 * (b.xMax + b.xMin) + b2 * (b.yMax + b.yMin) + c1 * (b.zMax + b.zMin);
		if(a1 < 0) {
			a1 = -a1;
		}
		if(b2 < 0) {
			b2 = -b2;
		}
		if(c1 < 0) {
			c1 = -c1;
		}
		var rr1 = a1 * (b.xMax - b.xMin) + b2 * (b.yMax - b.yMin) + c1 * (b.zMax - b.zMin);
		if(dd1 + rr1 - p1.d * 2 < 0) {
			return false;
		}
		var p2 = this.ptop;
		var a2 = p2.nx;
		var b3 = p2.ny;
		var c2 = p2.nz;
		var dd2 = a2 * (b.xMax + b.xMin) + b3 * (b.yMax + b.yMin) + c2 * (b.zMax + b.zMin);
		if(a2 < 0) {
			a2 = -a2;
		}
		if(b3 < 0) {
			b3 = -b3;
		}
		if(c2 < 0) {
			c2 = -c2;
		}
		var rr2 = a2 * (b.xMax - b.xMin) + b3 * (b.yMax - b.yMin) + c2 * (b.zMax - b.zMin);
		if(dd2 + rr2 - p2.d * 2 < 0) {
			return false;
		}
		var p3 = this.ptop;
		var a3 = p3.nx;
		var b4 = p3.ny;
		var c3 = p3.nz;
		var dd3 = a3 * (b.xMax + b.xMin) + b4 * (b.yMax + b.yMin) + c3 * (b.zMax + b.zMin);
		if(a3 < 0) {
			a3 = -a3;
		}
		if(b4 < 0) {
			b4 = -b4;
		}
		if(c3 < 0) {
			c3 = -c3;
		}
		var rr3 = a3 * (b.xMax - b.xMin) + b4 * (b.yMax - b.yMin) + c3 * (b.zMax - b.zMin);
		if(dd3 + rr3 - p3.d * 2 < 0) {
			return false;
		}
		var p4 = this.pnear;
		var a4 = p4.nx;
		var b5 = p4.ny;
		var c4 = p4.nz;
		var dd4 = a4 * (b.xMax + b.xMin) + b5 * (b.yMax + b.yMin) + c4 * (b.zMax + b.zMin);
		if(a4 < 0) {
			a4 = -a4;
		}
		if(b5 < 0) {
			b5 = -b5;
		}
		if(c4 < 0) {
			c4 = -c4;
		}
		var rr4 = a4 * (b.xMax - b.xMin) + b5 * (b.yMax - b.yMin) + c4 * (b.zMax - b.zMin);
		if(dd4 + rr4 - p4.d * 2 < 0) {
			return false;
		}
		var p5 = this.pfar;
		var a5 = p5.nx;
		var b6 = p5.ny;
		var c5 = p5.nz;
		var dd5 = a5 * (b.xMax + b.xMin) + b6 * (b.yMax + b.yMin) + c5 * (b.zMax + b.zMin);
		if(a5 < 0) {
			a5 = -a5;
		}
		if(b6 < 0) {
			b6 = -b6;
		}
		if(c5 < 0) {
			c5 = -c5;
		}
		var rr5 = a5 * (b.xMax - b.xMin) + b6 * (b.yMax - b.yMin) + c5 * (b.zMax - b.zMin);
		if(dd5 + rr5 - p5.d * 2 < 0) {
			return false;
		}
		return true;
	}
	,__class__: h3d_col_Frustum
};
var h3d_col_ObjectCollider = function(obj,collider) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.tmpRay = new h3d_col_Ray();
	this.obj = obj;
	this.collider = collider;
};
$hxClasses["h3d.col.ObjectCollider"] = h3d_col_ObjectCollider;
h3d_col_ObjectCollider.__name__ = ["h3d","col","ObjectCollider"];
h3d_col_ObjectCollider.__interfaces__ = [hxbit_Serializable,h3d_col_Collider];
h3d_col_ObjectCollider.prototype = {
	rayIntersection: function(r,bestMatch) {
		var _this = this.tmpRay;
		_this.px = r.px;
		_this.py = r.py;
		_this.pz = r.pz;
		_this.lx = r.lx;
		_this.ly = r.ly;
		_this.lz = r.lz;
		var m = this.obj.getInvPos();
		var p_z;
		var p_y;
		var p_x;
		var p_w;
		p_x = r.px;
		p_y = r.py;
		p_z = r.pz;
		p_w = 1.;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
		p_x = px;
		p_y = py;
		p_z = pz;
		r.px = p_x;
		r.py = p_y;
		r.pz = p_z;
		var l_z;
		var l_y;
		var l_x;
		var l_w;
		l_x = r.lx;
		l_y = r.ly;
		l_z = r.lz;
		l_w = 1.;
		var px1 = l_x * m._11 + l_y * m._21 + l_z * m._31;
		var py1 = l_x * m._12 + l_y * m._22 + l_z * m._32;
		var pz1 = l_x * m._13 + l_y * m._23 + l_z * m._33;
		l_x = px1;
		l_y = py1;
		l_z = pz1;
		r.lx = l_x;
		r.ly = l_y;
		r.lz = l_z;
		r.normalize();
		var hit = this.collider.rayIntersection(r,bestMatch);
		if(hit < 0) {
			var r1 = this.tmpRay;
			r.px = r1.px;
			r.py = r1.py;
			r.pz = r1.pz;
			r.lx = r1.lx;
			r.ly = r1.ly;
			r.lz = r1.lz;
			return hit;
		}
		var pt_z;
		var pt_y;
		var pt_x = r.px + hit * r.lx;
		pt_y = r.py + hit * r.ly;
		pt_z = r.pz + hit * r.lz;
		var m1 = this.obj.absPos;
		var px2 = pt_x * m1._11 + pt_y * m1._21 + pt_z * m1._31 + m1._41;
		var py2 = pt_x * m1._12 + pt_y * m1._22 + pt_z * m1._32 + m1._42;
		var pz2 = pt_x * m1._13 + pt_y * m1._23 + pt_z * m1._33 + m1._43;
		pt_x = px2;
		pt_y = py2;
		pt_z = pz2;
		var r2 = this.tmpRay;
		r.px = r2.px;
		r.py = r2.py;
		r.pz = r2.pz;
		r.lx = r2.lx;
		r.ly = r2.ly;
		r.lz = r2.lz;
		var dx = pt_x - r.px;
		var dy = pt_y - r.py;
		var dz = pt_z - r.pz;
		return Math.sqrt(dx * dx + dy * dy + dz * dz);
	}
	,contains: function(p) {
		var ptmp_z;
		var ptmp_y;
		var ptmp_x = p.x;
		ptmp_y = p.y;
		ptmp_z = p.z;
		var m = this.obj.getInvPos();
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + m._43;
		p.x = px;
		p.y = py;
		p.z = pz;
		var b = this.collider.contains(p);
		p.x = ptmp_x;
		p.y = ptmp_y;
		p.z = ptmp_z;
		return b;
	}
	,inFrustum: function(mvp) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,customSerialize: function(ctx) {
	}
	,customUnserialize: function(ctx) {
	}
	,getCLID: function() {
		return h3d_col_ObjectCollider.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.addKnownRef(this.obj);
		__ctx.addStruct(this.collider);
		this.customSerialize(__ctx);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("obj");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PSerializable("h3d.scene.Object"));
		schema.fieldsNames.push("collider");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PStruct);
		schema.isFinal = hxbit_Serializer.isClassFinal(h3d_col_ObjectCollider.__clid);
		return schema;
	}
	,unserializeInit: function() {
		this.tmpRay = new h3d_col_Ray();
	}
	,unserialize: function(__ctx) {
		this.obj = __ctx.getRef(h3d_scene_Object,h3d_scene_Object.__clid);
		this.collider = __ctx.getStruct();
		this.customUnserialize(__ctx);
	}
	,__class__: h3d_col_ObjectCollider
};
var h3d_col_Plane = function(nx,ny,nz,d) {
	this.nx = nx;
	this.ny = ny;
	this.nz = nz;
	this.d = d;
};
$hxClasses["h3d.col.Plane"] = h3d_col_Plane;
h3d_col_Plane.__name__ = ["h3d","col","Plane"];
h3d_col_Plane.fromPoints = function(p0,p1,p2) {
	var d1_z;
	var d1_y;
	var d1_x = p1.x - p0.x;
	d1_y = p1.y - p0.y;
	d1_z = p1.z - p0.z;
	var d2_z;
	var d2_y;
	var d2_x = p2.x - p0.x;
	d2_y = p2.y - p0.y;
	d2_z = p2.z - p0.z;
	var n_z;
	var n_y;
	var n_x = d1_y * d2_z - d1_z * d2_y;
	n_y = d1_z * d2_x - d1_x * d2_z;
	n_z = d1_x * d2_y - d1_y * d2_x;
	return new h3d_col_Plane(n_x,n_y,n_z,n_x * p0.x + n_y * p0.y + n_z * p0.z);
};
h3d_col_Plane.fromNormalPoint = function(n,p) {
	return new h3d_col_Plane(n.x,n.y,n.z,n.x * p.x + n.y * p.y + n.z * p.z);
};
h3d_col_Plane.X = function(v) {
	return new h3d_col_Plane(1,0,0,v);
};
h3d_col_Plane.Y = function(v) {
	return new h3d_col_Plane(0,1,0,v);
};
h3d_col_Plane.Z = function(v) {
	return new h3d_col_Plane(0,0,1,v);
};
h3d_col_Plane.frustumLeft = function(mvp) {
	return new h3d_col_Plane(mvp._14 + mvp._11,mvp._24 + mvp._21,mvp._34 + mvp._31,-(mvp._44 + mvp._41));
};
h3d_col_Plane.frustumRight = function(mvp) {
	return new h3d_col_Plane(mvp._14 - mvp._11,mvp._24 - mvp._21,mvp._34 - mvp._31,mvp._41 - mvp._44);
};
h3d_col_Plane.frustumBottom = function(mvp) {
	return new h3d_col_Plane(mvp._14 + mvp._12,mvp._24 + mvp._22,mvp._34 + mvp._32,-(mvp._44 + mvp._42));
};
h3d_col_Plane.frustumTop = function(mvp) {
	return new h3d_col_Plane(mvp._14 - mvp._12,mvp._24 - mvp._22,mvp._34 - mvp._32,mvp._42 - mvp._44);
};
h3d_col_Plane.frustumNear = function(mvp) {
	return new h3d_col_Plane(mvp._13,mvp._23,mvp._33,-mvp._43);
};
h3d_col_Plane.frustumFar = function(mvp) {
	return new h3d_col_Plane(mvp._14 - mvp._13,mvp._24 - mvp._23,mvp._34 - mvp._33,mvp._43 - mvp._44);
};
h3d_col_Plane.prototype = {
	getNormal: function() {
		return new h3d_col_Point(this.nx,this.ny,this.nz);
	}
	,getNormalDistance: function() {
		return this.d;
	}
	,transform: function(m) {
		var m2 = new h3d_Matrix();
		m2.initInverse(m);
		m2.transpose();
		var v_z;
		var v_y;
		var v_x;
		var v_w;
		v_x = this.nx;
		v_y = this.ny;
		v_z = this.nz;
		v_w = -this.d;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	,transform3x3: function(m) {
		var m2 = new h3d_Matrix();
		m2.initInverse3x3(m);
		m2.transpose();
		var v_z;
		var v_y;
		var v_x;
		var v_w;
		v_x = this.nx;
		v_y = this.ny;
		v_z = this.nz;
		v_w = -this.d;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	,transformInverseTranspose: function(m) {
		var v_z;
		var v_y;
		var v_x;
		var v_w;
		v_x = this.nx;
		v_y = this.ny;
		v_z = this.nz;
		v_w = -this.d;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + v_w * m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + v_w * m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + v_w * m._43;
		var pw = v_x * m._14 + v_y * m._24 + v_z * m._34 + v_w * m._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	,normalize: function() {
		var len = 1. / Math.sqrt(this.nx * this.nx + this.ny * this.ny + this.nz * this.nz);
		this.nx *= len;
		this.ny *= len;
		this.nz *= len;
		this.d *= len;
	}
	,toString: function() {
		return "Plane{" + Std.string(new h3d_col_Point(this.nx,this.ny,this.nz)) + "," + hxd_Math.fmt(this.d) + "}";
	}
	,distance: function(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
	}
	,side: function(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d >= 0;
	}
	,project: function(p) {
		var d = this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
		return new h3d_col_Point(p.x - d * this.nx,p.y - d * this.ny,p.z - d * this.nz);
	}
	,projectTo: function(p,out) {
		var d = this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
		out.x = p.x - d * this.nx;
		out.y = p.y - d * this.ny;
		out.z = p.z - d * this.nz;
	}
	,__class__: h3d_col_Plane
};
var h3d_col_Point = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["h3d.col.Point"] = h3d_col_Point;
h3d_col_Point.__name__ = ["h3d","col","Point"];
h3d_col_Point.prototype = {
	scale: function(v) {
		this.x *= v;
		this.y *= v;
		this.z *= v;
	}
	,inFrustum: function(mvp) {
		var _this_nz;
		var _this_ny;
		var _this_nx;
		var _this_d;
		_this_nx = mvp._14 + mvp._11;
		_this_ny = mvp._24 + mvp._21;
		_this_nz = mvp._34 + mvp._31;
		_this_d = -(mvp._44 + mvp._41);
		if(!(_this_nx * this.x + _this_ny * this.y + _this_nz * this.z - _this_d >= 0)) {
			return false;
		}
		var _this_nz1;
		var _this_ny1;
		var _this_nx1;
		var _this_d1;
		_this_nx1 = mvp._14 - mvp._11;
		_this_ny1 = mvp._24 - mvp._21;
		_this_nz1 = mvp._34 - mvp._31;
		_this_d1 = mvp._41 - mvp._44;
		if(!(_this_nx1 * this.x + _this_ny1 * this.y + _this_nz1 * this.z - _this_d1 >= 0)) {
			return false;
		}
		var _this_nz2;
		var _this_ny2;
		var _this_nx2;
		var _this_d2;
		_this_nx2 = mvp._14 + mvp._12;
		_this_ny2 = mvp._24 + mvp._22;
		_this_nz2 = mvp._34 + mvp._32;
		_this_d2 = -(mvp._44 + mvp._42);
		if(!(_this_nx2 * this.x + _this_ny2 * this.y + _this_nz2 * this.z - _this_d2 >= 0)) {
			return false;
		}
		var _this_nz3;
		var _this_ny3;
		var _this_nx3;
		var _this_d3;
		_this_nx3 = mvp._14 - mvp._12;
		_this_ny3 = mvp._24 - mvp._22;
		_this_nz3 = mvp._34 - mvp._32;
		_this_d3 = mvp._42 - mvp._44;
		if(!(_this_nx3 * this.x + _this_ny3 * this.y + _this_nz3 * this.z - _this_d3 >= 0)) {
			return false;
		}
		var _this_nz4;
		var _this_ny4;
		var _this_nx4;
		var _this_d4;
		_this_nx4 = mvp._13;
		_this_ny4 = mvp._23;
		_this_nz4 = mvp._33;
		_this_d4 = -mvp._43;
		if(!(_this_nx4 * this.x + _this_ny4 * this.y + _this_nz4 * this.z - _this_d4 >= 0)) {
			return false;
		}
		var _this_nz5;
		var _this_ny5;
		var _this_nx5;
		var _this_d5;
		_this_nx5 = mvp._14 - mvp._13;
		_this_ny5 = mvp._24 - mvp._23;
		_this_nz5 = mvp._34 - mvp._33;
		_this_d5 = mvp._43 - mvp._44;
		if(!(_this_nx5 * this.x + _this_ny5 * this.y + _this_nz5 * this.z - _this_d5 >= 0)) {
			return false;
		}
		return true;
	}
	,set: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,sub: function(p) {
		return new h3d_col_Point(this.x - p.x,this.y - p.y,this.z - p.z);
	}
	,add: function(p) {
		return new h3d_col_Point(this.x + p.x,this.y + p.y,this.z + p.z);
	}
	,cross: function(p) {
		return new h3d_col_Point(this.y * p.z - this.z * p.y,this.z * p.x - this.x * p.z,this.x * p.y - this.y * p.x);
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,setLength: function(len) {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		k = 1. / Math.sqrt(k);
		this.x *= k;
		this.y *= k;
		this.z *= k;
		this.x *= len;
		this.y *= len;
		this.z *= len;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y + this.z * p.z;
	}
	,distanceSq: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		var dz = p.z - this.z;
		return dx * dx + dy * dy + dz * dz;
	}
	,distance: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		var dz = p.z - this.z;
		return Math.sqrt(dx * dx + dy * dy + dz * dz);
	}
	,normalize: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	,normalizeFast: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		k = 1. / Math.sqrt(k);
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	,transform: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + m._43;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,transform3x3: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,toVector: function() {
		return new h3d_Vector(this.x,this.y,this.z);
	}
	,clone: function() {
		return new h3d_col_Point(this.x,this.y,this.z);
	}
	,load: function(p) {
		this.x = p.x;
		this.y = p.y;
		this.z = p.z;
	}
	,toString: function() {
		return "Point{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "}";
	}
	,__class__: h3d_col_Point
};
var h3d_col_TriPlane = function() {
};
$hxClasses["h3d.col.TriPlane"] = h3d_col_TriPlane;
h3d_col_TriPlane.__name__ = ["h3d","col","TriPlane"];
h3d_col_TriPlane.__interfaces__ = [h3d_col_Collider];
h3d_col_TriPlane.prototype = {
	init: function(p0,p1,p2) {
		this.p0x = p0.x;
		this.p0y = p0.y;
		this.p0z = p0.z;
		var d1_z;
		var d1_y;
		var d1_x = p1.x - p0.x;
		d1_y = p1.y - p0.y;
		d1_z = p1.z - p0.z;
		var d2_z;
		var d2_y;
		var d2_x = p2.x - p0.x;
		d2_y = p2.y - p0.y;
		d2_z = p2.z - p0.z;
		var n_z;
		var n_y;
		var n_x = d1_y * d2_z - d1_z * d2_y;
		n_y = d1_z * d2_x - d1_x * d2_z;
		n_z = d1_x * d2_y - d1_y * d2_x;
		this.d = n_x * p0.x + n_y * p0.y + n_z * p0.z;
		this.nx = n_x;
		this.ny = n_y;
		this.nz = n_z;
		this.d1x = d1_x;
		this.d1y = d1_y;
		this.d1z = d1_z;
		this.d2x = d2_x;
		this.d2y = d2_y;
		this.d2z = d2_z;
		this.dot00 = d1_x * d1_x + d1_y * d1_y + d1_z * d1_z;
		this.dot01 = d1_x * d2_x + d1_y * d2_y + d1_z * d2_z;
		this.dot11 = d2_x * d2_x + d2_y * d2_y + d2_z * d2_z;
		this.invDenom = 1 / (this.dot00 * this.dot11 - this.dot01 * this.dot01);
	}
	,contains: function(p) {
		var v2_z;
		var v2_y;
		var v2_x = p.x - this.p0x;
		v2_y = p.y - this.p0y;
		v2_z = p.z - this.p0z;
		var dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		var dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		var u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		var v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(u >= 0 && v >= 0) {
			return u + v < 1;
		} else {
			return false;
		}
	}
	,side: function(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d >= 0;
	}
	,inFrustum: function(m) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,rayIntersection: function(r,bestMatch) {
		var dr = r.lx * this.nx + r.ly * this.ny + r.lz * this.nz;
		if(dr >= 0) {
			return -1.;
		}
		var nd = this.d - (r.px * this.nx + r.py * this.ny + r.pz * this.nz);
		var k = nd / dr;
		if(k < 0) {
			return -1;
		}
		var px = r.px + r.lx * k;
		var py = r.py + r.ly * k;
		var pz = r.pz + r.lz * k;
		var v2_z;
		var v2_y;
		var v2_x = px - this.p0x;
		v2_y = py - this.p0y;
		v2_z = pz - this.p0z;
		var dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		var dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		var u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		var v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(!(u >= 0 && v >= 0 && u + v < 1)) {
			return -1;
		}
		return k;
	}
	,isPointInTriangle: function(x,y,z) {
		var v2_z;
		var v2_y;
		var v2_x = x - this.p0x;
		v2_y = y - this.p0y;
		v2_z = z - this.p0z;
		var dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		var dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		var u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		var v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(u >= 0 && v >= 0) {
			return u + v < 1;
		} else {
			return false;
		}
	}
	,customSerialize: function(ctx) {
		throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(this));
	}
	,customUnserialize: function(ctx) {
	}
	,__class__: h3d_col_TriPlane
};
var h3d_col_Polygon = function() {
};
$hxClasses["h3d.col.Polygon"] = h3d_col_Polygon;
h3d_col_Polygon.__name__ = ["h3d","col","Polygon"];
h3d_col_Polygon.__interfaces__ = [h3d_col_Collider];
h3d_col_Polygon.prototype = {
	addBuffers: function(vertexes,indexes,stride) {
		if(stride == null) {
			stride = 3;
		}
		var _g1 = 0;
		var _g = indexes.length / 3 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			var k = i * 3;
			var t = new h3d_col_TriPlane();
			var i0 = indexes[k] * stride;
			var i1 = indexes[k + 1] * stride;
			var i2 = indexes[k + 2] * stride;
			var p0_z;
			var p0_y;
			var p0_x = vertexes[i0];
			p0_y = vertexes[i0 + 1];
			p0_z = vertexes[i0 + 2];
			var p1_z;
			var p1_y;
			var p1_x = vertexes[i1];
			p1_y = vertexes[i1 + 1];
			p1_z = vertexes[i1 + 2];
			var p2_z;
			var p2_y;
			var p2_x = vertexes[i2];
			p2_y = vertexes[i2 + 1];
			p2_z = vertexes[i2 + 2];
			t.p0x = p0_x;
			t.p0y = p0_y;
			t.p0z = p0_z;
			var d1_z;
			var d1_y;
			var d1_x = p1_x - p0_x;
			d1_y = p1_y - p0_y;
			d1_z = p1_z - p0_z;
			var d2_z;
			var d2_y;
			var d2_x = p2_x - p0_x;
			d2_y = p2_y - p0_y;
			d2_z = p2_z - p0_z;
			var n_z;
			var n_y;
			var n_x = d1_y * d2_z - d1_z * d2_y;
			n_y = d1_z * d2_x - d1_x * d2_z;
			n_z = d1_x * d2_y - d1_y * d2_x;
			t.d = n_x * p0_x + n_y * p0_y + n_z * p0_z;
			t.nx = n_x;
			t.ny = n_y;
			t.nz = n_z;
			t.d1x = d1_x;
			t.d1y = d1_y;
			t.d1z = d1_z;
			t.d2x = d2_x;
			t.d2y = d2_y;
			t.d2z = d2_z;
			t.dot00 = d1_x * d1_x + d1_y * d1_y + d1_z * d1_z;
			t.dot01 = d1_x * d2_x + d1_y * d2_y + d1_z * d2_z;
			t.dot11 = d2_x * d2_x + d2_y * d2_y + d2_z * d2_z;
			t.invDenom = 1 / (t.dot00 * t.dot11 - t.dot01 * t.dot01);
			t.next = this.triPlanes;
			this.triPlanes = t;
		}
	}
	,isConvex: function() {
		return true;
	}
	,contains: function(p) {
		if(!this.isConvex()) {
			throw new js__$Boot_HaxeError("Not implemented for concave polygon");
		}
		var t = this.triPlanes;
		while(t != null) {
			if(t.nx * p.x + t.ny * p.y + t.nz * p.z - t.d >= 0) {
				return false;
			}
			t = t.next;
		}
		return true;
	}
	,rayIntersection: function(r,bestMatch) {
		var t = this.triPlanes;
		var best = -1.;
		while(t != null) {
			var dr = r.lx * t.nx + r.ly * t.ny + r.lz * t.nz;
			var d;
			if(dr >= 0) {
				d = -1.;
			} else {
				var nd = t.d - (r.px * t.nx + r.py * t.ny + r.pz * t.nz);
				var k = nd / dr;
				if(k < 0) {
					d = -1;
				} else {
					var px = r.px + r.lx * k;
					var py = r.py + r.ly * k;
					var pz = r.pz + r.lz * k;
					var v2_z;
					var v2_y;
					var v2_x = px - t.p0x;
					v2_y = py - t.p0y;
					v2_z = pz - t.p0z;
					var dot02 = t.d1x * v2_x + t.d1y * v2_y + t.d1z * v2_z;
					var dot12 = t.d2x * v2_x + t.d2y * v2_y + t.d2z * v2_z;
					var u = (t.dot11 * dot02 - t.dot01 * dot12) * t.invDenom;
					var v = (t.dot00 * dot12 - t.dot01 * dot02) * t.invDenom;
					if(!(u >= 0 && v >= 0 && u + v < 1)) {
						d = -1;
					} else {
						d = k;
					}
				}
			}
			if(d >= 0) {
				if(!bestMatch) {
					return d;
				}
				if(best < 0 || d < best) {
					best = d;
				}
			}
			t = t.next;
		}
		return best;
	}
	,inFrustum: function(m) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,customSerialize: function(ctx) {
		throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(this));
	}
	,customUnserialize: function(ctx) {
	}
	,__class__: h3d_col_Polygon
};
var h3d_col_PolygonBuffer = function() {
};
$hxClasses["h3d.col.PolygonBuffer"] = h3d_col_PolygonBuffer;
h3d_col_PolygonBuffer.__name__ = ["h3d","col","PolygonBuffer"];
h3d_col_PolygonBuffer.__interfaces__ = [h3d_col_Collider];
h3d_col_PolygonBuffer.prototype = {
	setData: function(buffer,indexes,startIndex,triCount) {
		if(triCount == null) {
			triCount = -1;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		this.buffer = buffer;
		this.indexes = indexes;
		this.startIndex = startIndex;
		this.triCount = triCount >= 0 ? triCount : (indexes.length - startIndex) / 3 | 0;
	}
	,contains: function(p) {
		var i = this.startIndex;
		var p_z;
		var p_y;
		var p_x = p.x;
		p_y = p.y;
		p_z = p.z;
		var _g1 = 0;
		var _g = this.triCount;
		while(_g1 < _g) {
			var t = _g1++;
			var i0 = this.indexes[i++] * 3;
			var p0_z;
			var p0_y;
			var p0_x = this.buffer[i0++];
			p0_y = this.buffer[i0++];
			p0_z = this.buffer[i0];
			var i1 = this.indexes[i++] * 3;
			var p1_z;
			var p1_y;
			var p1_x = this.buffer[i1++];
			p1_y = this.buffer[i1++];
			p1_z = this.buffer[i1];
			var i2 = this.indexes[i++] * 3;
			var p2_z;
			var p2_y;
			var p2_x = this.buffer[i2++];
			p2_y = this.buffer[i2++];
			p2_z = this.buffer[i2];
			var d1_z;
			var d1_y;
			var d1_x = p1_x - p0_x;
			d1_y = p1_y - p0_y;
			d1_z = p1_z - p0_z;
			var d2_z;
			var d2_y;
			var d2_x = p2_x - p0_x;
			d2_y = p2_y - p0_y;
			d2_z = p2_z - p0_z;
			var n_z;
			var n_y;
			var n_x = d1_y * d2_z - d1_z * d2_y;
			n_y = d1_z * d2_x - d1_x * d2_z;
			n_z = d1_x * d2_y - d1_y * d2_x;
			var d = n_x * p0_x + n_y * p0_y + n_z * p0_z;
			if(n_x * p_x + n_y * p_y + n_z * p_z >= d) {
				return false;
			}
		}
		return true;
	}
	,inFrustum: function(m) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,rayIntersection: function(r,bestMatch) {
		var i = this.startIndex;
		var rdir_z;
		var rdir_y;
		var rdir_x = r.lx;
		rdir_y = r.ly;
		rdir_z = r.lz;
		var r0_z;
		var r0_y;
		var r0_x = r.px;
		r0_y = r.py;
		r0_z = r.pz;
		var best = -1.;
		var _g1 = 0;
		var _g = this.triCount;
		while(_g1 < _g) {
			var t = _g1++;
			var i0 = this.indexes[i++] * 3;
			var p0_z;
			var p0_y;
			var p0_x = this.buffer[i0++];
			p0_y = this.buffer[i0++];
			p0_z = this.buffer[i0];
			var i1 = this.indexes[i++] * 3;
			var p1_z;
			var p1_y;
			var p1_x = this.buffer[i1++];
			p1_y = this.buffer[i1++];
			p1_z = this.buffer[i1];
			var i2 = this.indexes[i++] * 3;
			var p2_z;
			var p2_y;
			var p2_x = this.buffer[i2++];
			p2_y = this.buffer[i2++];
			p2_z = this.buffer[i2];
			var e1_z;
			var e1_y;
			var e1_x = p1_x - p0_x;
			e1_y = p1_y - p0_y;
			e1_z = p1_z - p0_z;
			var e2_z;
			var e2_y;
			var e2_x = p2_x - p0_x;
			e2_y = p2_y - p0_y;
			e2_z = p2_z - p0_z;
			var p_z;
			var p_y;
			var p_x = rdir_y * e2_z - rdir_z * e2_y;
			p_y = rdir_z * e2_x - rdir_x * e2_z;
			p_z = rdir_x * e2_y - rdir_y * e2_x;
			var det = e1_x * p_x + e1_y * p_y + e1_z * p_z;
			if(det < 1e-10) {
				continue;
			}
			var invDet = 1 / det;
			var T_z;
			var T_y;
			var T_x = r0_x - p0_x;
			T_y = r0_y - p0_y;
			T_z = r0_z - p0_z;
			var u = (T_x * p_x + T_y * p_y + T_z * p_z) * invDet;
			if(u < 0 || u > 1) {
				continue;
			}
			var q_z;
			var q_y;
			var q_x = T_y * e1_z - T_z * e1_y;
			q_y = T_z * e1_x - T_x * e1_z;
			q_z = T_x * e1_y - T_y * e1_x;
			var v = (rdir_x * q_x + rdir_y * q_y + rdir_z * q_z) * invDet;
			if(v < 0 || u + v > 1) {
				continue;
			}
			var t1 = (e2_x * q_x + e2_y * q_y + e2_z * q_z) * invDet;
			if(t1 < 1e-10) {
				continue;
			}
			if(!bestMatch) {
				return t1;
			}
			if(best < 0 || t1 < best) {
				best = t1;
			}
		}
		return best;
	}
	,customSerialize: function(ctx) {
		if(this.source == null) {
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(this));
		}
		var s = this.source.entry.get_path();
		if(s == null) {
			ctx.out.b.push(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				ctx.out.b.push(v);
			} else {
				ctx.out.b.push(128);
				ctx.out.addInt32(v);
			}
			var _this = ctx.out;
			var b1 = _this.b;
			var b2 = b.b;
			var _g1 = 0;
			var _g = b.length;
			while(_g1 < _g) {
				var i = _g1++;
				_this.b.push(b2[i]);
			}
		}
		var s1 = this.source.geometryName;
		if(s1 == null) {
			ctx.out.b.push(0);
		} else {
			var b3 = haxe_io_Bytes.ofString(s1);
			var v1 = b3.length + 1;
			if(v1 >= 0 && v1 < 128) {
				ctx.out.b.push(v1);
			} else {
				ctx.out.b.push(128);
				ctx.out.addInt32(v1);
			}
			var _this1 = ctx.out;
			var b11 = _this1.b;
			var b21 = b3.b;
			var _g11 = 0;
			var _g2 = b3.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				_this1.b.push(b21[i1]);
			}
		}
	}
	,customUnserialize: function(ctx) {
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len = v;
		var file;
		if(len == 0) {
			file = null;
		} else {
			--len;
			var s = ctx.input.getString(ctx.inPos,len);
			ctx.inPos += len;
			file = s;
		}
		var v1 = ctx.input.b[ctx.inPos++];
		if(v1 == 128) {
			v1 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len1 = v1;
		var name;
		if(len1 == 0) {
			name = null;
		} else {
			--len1;
			var s1 = ctx.input.getString(ctx.inPos,len1);
			ctx.inPos += len1;
			name = s1;
		}
		var lib = hxd_res_Loader.currentInstance.load(file).toHmd();
		var gindex = -1;
		var _g = 0;
		var _g1 = lib.header.models;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			if(h.name == name) {
				gindex = h.geometry;
				break;
			}
		}
		if(gindex < 0) {
			throw new js__$Boot_HaxeError(file + " does not have model " + name);
		}
		var prim = lib.makePrimitive(gindex);
		prim.initCollider(this);
	}
	,__class__: h3d_col_PolygonBuffer
};
var h3d_col_Ray = function() {
};
$hxClasses["h3d.col.Ray"] = h3d_col_Ray;
h3d_col_Ray.__name__ = ["h3d","col","Ray"];
h3d_col_Ray.fromPoints = function(p1,p2) {
	var r = new h3d_col_Ray();
	r.px = p1.x;
	r.py = p1.y;
	r.pz = p1.z;
	r.lx = p2.x - p1.x;
	r.ly = p2.y - p1.y;
	r.lz = p2.z - p1.z;
	r.normalize();
	return r;
};
h3d_col_Ray.fromValues = function(x,y,z,dx,dy,dz) {
	var r = new h3d_col_Ray();
	r.px = x;
	r.py = y;
	r.pz = z;
	r.lx = dx;
	r.ly = dy;
	r.lz = dz;
	r.normalize();
	return r;
};
h3d_col_Ray.prototype = {
	clone: function() {
		var r = new h3d_col_Ray();
		r.px = this.px;
		r.py = this.py;
		r.pz = this.pz;
		r.lx = this.lx;
		r.ly = this.ly;
		r.lz = this.lz;
		return r;
	}
	,load: function(r) {
		this.px = r.px;
		this.py = r.py;
		this.pz = r.pz;
		this.lx = r.lx;
		this.ly = r.ly;
		this.lz = r.lz;
	}
	,normalize: function() {
		var l = this.lx * this.lx + this.ly * this.ly + this.lz * this.lz;
		if(l == 1.) {
			return;
		}
		if(l < 1e-10) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
		this.lz *= l;
	}
	,transform: function(m) {
		var p_z;
		var p_y;
		var p_x;
		var p_w;
		p_x = this.px;
		p_y = this.py;
		p_z = this.pz;
		p_w = 1.;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
		p_x = px;
		p_y = py;
		p_z = pz;
		this.px = p_x;
		this.py = p_y;
		this.pz = p_z;
		var l_z;
		var l_y;
		var l_x;
		var l_w;
		l_x = this.lx;
		l_y = this.ly;
		l_z = this.lz;
		l_w = 1.;
		var px1 = l_x * m._11 + l_y * m._21 + l_z * m._31;
		var py1 = l_x * m._12 + l_y * m._22 + l_z * m._32;
		var pz1 = l_x * m._13 + l_y * m._23 + l_z * m._33;
		l_x = px1;
		l_y = py1;
		l_z = pz1;
		this.lx = l_x;
		this.ly = l_y;
		this.lz = l_z;
		this.normalize();
	}
	,getPos: function() {
		return new h3d_col_Point(this.px,this.py,this.pz);
	}
	,getDir: function() {
		return new h3d_col_Point(this.lx,this.ly,this.lz);
	}
	,getPoint: function(distance) {
		return new h3d_col_Point(this.px + distance * this.lx,this.py + distance * this.ly,this.pz + distance * this.lz);
	}
	,toString: function() {
		return "Ray{" + Std.string(new h3d_col_Point(this.px,this.py,this.pz)) + "," + Std.string(new h3d_col_Point(this.lx,this.ly,this.lz)) + "}";
	}
	,intersect: function(p) {
		var d = this.lx * p.nx + this.ly * p.ny + this.lz * p.nz;
		var nd = p.d - (this.px * p.nx + this.py * p.ny + this.pz * p.nz);
		if((d < 0 ? -d : d) < 1e-10) {
			if((nd < 0 ? -nd : nd) < 1e-10) {
				return new h3d_col_Point(this.px,this.py,this.pz);
			} else {
				return null;
			}
		} else {
			var k = nd / d;
			return new h3d_col_Point(this.px + this.lx * k,this.py + this.ly * k,this.pz + this.lz * k);
		}
	}
	,collideFrustum: function(mvp) {
		var a_z;
		var a_y;
		var a_x;
		var a_w;
		a_x = this.px;
		a_y = this.py;
		a_z = this.pz;
		a_w = 1.;
		var px = a_x * mvp._11 + a_y * mvp._21 + a_z * mvp._31 + a_w * mvp._41;
		var py = a_x * mvp._12 + a_y * mvp._22 + a_z * mvp._32 + a_w * mvp._42;
		var pz = a_x * mvp._13 + a_y * mvp._23 + a_z * mvp._33 + a_w * mvp._43;
		var iw = 1 / (a_x * mvp._14 + a_y * mvp._24 + a_z * mvp._34 + a_w * mvp._44);
		a_x = px * iw;
		a_y = py * iw;
		a_z = pz * iw;
		a_w = 1;
		var b_z;
		var b_y;
		var b_x;
		var b_w;
		b_x = this.px + this.lx;
		b_y = this.py + this.ly;
		b_z = this.pz + this.lz;
		b_w = 1.;
		var px1 = b_x * mvp._11 + b_y * mvp._21 + b_z * mvp._31 + b_w * mvp._41;
		var py1 = b_x * mvp._12 + b_y * mvp._22 + b_z * mvp._32 + b_w * mvp._42;
		var pz1 = b_x * mvp._13 + b_y * mvp._23 + b_z * mvp._33 + b_w * mvp._43;
		var iw1 = 1 / (b_x * mvp._14 + b_y * mvp._24 + b_z * mvp._34 + b_w * mvp._44);
		b_x = px1 * iw1;
		b_y = py1 * iw1;
		b_z = pz1 * iw1;
		b_w = 1;
		var lx = b_x - a_x;
		var ly = b_y - a_y;
		var lz = b_z - a_z;
		var dx = 1 / lx;
		var dy = 1 / ly;
		var dz = 1 / lz;
		var t1 = (-1 - a_x) * dx;
		var t2 = (1 - a_x) * dx;
		var t3 = (-1 - a_y) * dy;
		var t4 = (1 - a_y) * dy;
		var t5 = (0 - a_z) * dz;
		var t6 = (1 - a_z) * dz;
		var a = t1 > t2 ? t2 : t1;
		var b = t3 > t4 ? t4 : t3;
		var a1 = a < b ? b : a;
		var b1 = t5 > t6 ? t6 : t5;
		var tmin = a1 < b1 ? b1 : a1;
		var a2 = t1 < t2 ? t2 : t1;
		var b2 = t3 < t4 ? t4 : t3;
		var a3 = a2 > b2 ? b2 : a2;
		var b3 = t5 < t6 ? t6 : t5;
		var tmax = a3 > b3 ? b3 : a3;
		return !(tmax < 0 || tmin > tmax);
	}
	,collide: function(b) {
		var dx = 1 / this.lx;
		var dy = 1 / this.ly;
		var dz = 1 / this.lz;
		var t1 = (b.xMin - this.px) * dx;
		var t2 = (b.xMax - this.px) * dx;
		var t3 = (b.yMin - this.py) * dy;
		var t4 = (b.yMax - this.py) * dy;
		var t5 = (b.zMin - this.pz) * dz;
		var t6 = (b.zMax - this.pz) * dz;
		var a = t1 > t2 ? t2 : t1;
		var b1 = t3 > t4 ? t4 : t3;
		var a1 = a < b1 ? b1 : a;
		var b2 = t5 > t6 ? t6 : t5;
		var tmin = a1 < b2 ? b2 : a1;
		var a2 = t1 < t2 ? t2 : t1;
		var b3 = t3 < t4 ? t4 : t3;
		var a3 = a2 > b3 ? b3 : a2;
		var b4 = t5 < t6 ? t6 : t5;
		var tmax = a3 > b4 ? b4 : a3;
		if(tmax < 0) {
			return false;
		} else if(tmin > tmax) {
			return false;
		} else {
			return true;
		}
	}
	,__class__: h3d_col_Ray
};
var h3d_col_SkinCollider = function(obj,col) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.obj = obj;
	this.col = col;
	this.transform = new h3d_col_PolygonBuffer();
	var tmp = this.transform;
	var this1 = col.buffer;
	var length = this1.length;
	var this2 = new Array(length);
	var r = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1,0,r,0,this1.length);
	tmp.setData(r,col.indexes,col.startIndex,col.triCount);
};
$hxClasses["h3d.col.SkinCollider"] = h3d_col_SkinCollider;
h3d_col_SkinCollider.__name__ = ["h3d","col","SkinCollider"];
h3d_col_SkinCollider.__interfaces__ = [h3d_col_Collider,hxbit_Serializable];
h3d_col_SkinCollider.prototype = {
	contains: function(p) {
		this.applyTransform();
		return this.transform.contains(p);
	}
	,inFrustum: function(p) {
		this.applyTransform();
		return this.transform.inFrustum(p);
	}
	,rayIntersection: function(r,bestMatch) {
		this.applyTransform();
		return this.transform.rayIntersection(r,bestMatch);
	}
	,applyTransform: function() {
		if(!this.obj.jointsUpdated && this.lastFrame == this.obj.lastFrame) {
			return;
		}
		this.lastFrame = this.obj.lastFrame;
		this.obj.syncJoints();
		var j = 0;
		var v = 0;
		var nbones = this.obj.skinData.bonesPerVertex;
		var _g1 = 0;
		var _g = this.obj.skinData.vertexCount;
		while(_g1 < _g) {
			var i = _g1++;
			var px = 0.;
			var py = 0.;
			var pz = 0.;
			var p_z;
			var p_y;
			var p_x = this.col.buffer[v];
			p_y = this.col.buffer[v + 1];
			p_z = this.col.buffer[v + 2];
			var _g3 = 0;
			var _g2 = nbones;
			while(_g3 < _g2) {
				var k = _g3++;
				var w = this.obj.skinData.vertexWeights[j];
				if(w == 0) {
					++j;
					continue;
				}
				var bid = this.obj.skinData.vertexJoints[j++];
				var p2_z;
				var p2_y;
				var p2_x = p_x;
				p2_y = p_y;
				p2_z = p_z;
				var m = this.obj.currentPalette[bid];
				var px1 = p2_x * m._11 + p2_y * m._21 + p2_z * m._31 + m._41;
				var py1 = p2_x * m._12 + p2_y * m._22 + p2_z * m._32 + m._42;
				var pz1 = p2_x * m._13 + p2_y * m._23 + p2_z * m._33 + m._43;
				p2_x = px1;
				p2_y = py1;
				p2_z = pz1;
				px += p2_x * w;
				py += p2_y * w;
				pz += p2_z * w;
			}
			this.transform.buffer[v++] = px;
			this.transform.buffer[v++] = py;
			this.transform.buffer[v++] = pz;
		}
	}
	,customSerialize: function(ctx) {
	}
	,customUnserialize: function(ctx) {
		this.transform = new h3d_col_PolygonBuffer();
		var tmp = this.transform;
		var this1 = this.col.buffer;
		var length = this1.length;
		var this2 = new Array(length);
		var r = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1,0,r,0,this1.length);
		tmp.setData(r,this.col.indexes,this.col.startIndex,this.col.triCount);
	}
	,getCLID: function() {
		return h3d_col_SkinCollider.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.addKnownRef(this.obj);
		__ctx.addStruct(this.col);
		this.customSerialize(__ctx);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("obj");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PSerializable("h3d.scene.Skin"));
		schema.fieldsNames.push("col");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PStruct);
		schema.isFinal = hxbit_Serializer.isClassFinal(h3d_col_SkinCollider.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		this.obj = __ctx.getRef(h3d_scene_Skin,h3d_scene_Skin.__clid);
		this.col = __ctx.getStruct();
		this.customUnserialize(__ctx);
	}
	,__class__: h3d_col_SkinCollider
};
var h3d_col_Sphere = function(x,y,z,r) {
	if(r == null) {
		r = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.r = r;
};
$hxClasses["h3d.col.Sphere"] = h3d_col_Sphere;
h3d_col_Sphere.__name__ = ["h3d","col","Sphere"];
h3d_col_Sphere.__interfaces__ = [h3d_col_Collider];
h3d_col_Sphere.prototype = {
	getCenter: function() {
		return new h3d_col_Point(this.x,this.y,this.z);
	}
	,contains: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		var dz = p.z - this.z;
		return dx * dx + dy * dy + dz * dz < this.r * this.r;
	}
	,rayIntersection: function(r,bestMatch) {
		var r2 = this.r * this.r;
		var px = r.px + r.lx;
		var py = r.py + r.ly;
		var pz = r.pz + r.lz;
		var a = r.lx * r.lx + r.ly * r.ly + r.lz * r.lz;
		var b = 2 * r.lx * (this.x - px) + 2 * r.ly * (this.y - py) + 2 * r.lz * (this.z - pz);
		var c = this.x * this.x + this.y * this.y + this.z * this.z + (px * px + py * py + pz * pz) - 2 * (this.x * px + this.y * py + this.z * pz) - r2;
		var d = b * b - 4 * a * c;
		if(d < 0) {
			return -1;
		}
		d = Math.sqrt(d);
		var t = (-b + d) / (2 * a);
		return 1 - t;
	}
	,inFrustum: function(mvp) {
		var p_z;
		var p_y;
		var p_x = this.x;
		p_y = this.y;
		p_z = this.z;
		var pl_nz;
		var pl_ny;
		var pl_nx;
		var pl_d;
		pl_nx = mvp._14 + mvp._11;
		pl_ny = mvp._24 + mvp._21;
		pl_nz = mvp._34 + mvp._31;
		pl_d = -(mvp._44 + mvp._41);
		var len = 1. / Math.sqrt(pl_nx * pl_nx + pl_ny * pl_ny + pl_nz * pl_nz);
		pl_nx *= len;
		pl_ny *= len;
		pl_nz *= len;
		pl_d *= len;
		if(pl_nx * p_x + pl_ny * p_y + pl_nz * p_z - pl_d < -this.r) {
			return false;
		}
		var pl_nz1;
		var pl_ny1;
		var pl_nx1;
		var pl_d1;
		pl_nx1 = mvp._14 - mvp._11;
		pl_ny1 = mvp._24 - mvp._21;
		pl_nz1 = mvp._34 - mvp._31;
		pl_d1 = mvp._41 - mvp._44;
		var len1 = 1. / Math.sqrt(pl_nx1 * pl_nx1 + pl_ny1 * pl_ny1 + pl_nz1 * pl_nz1);
		pl_nx1 *= len1;
		pl_ny1 *= len1;
		pl_nz1 *= len1;
		pl_d1 *= len1;
		if(pl_nx1 * p_x + pl_ny1 * p_y + pl_nz1 * p_z - pl_d1 < -this.r) {
			return false;
		}
		var pl_nz2;
		var pl_ny2;
		var pl_nx2;
		var pl_d2;
		pl_nx2 = mvp._14 + mvp._12;
		pl_ny2 = mvp._24 + mvp._22;
		pl_nz2 = mvp._34 + mvp._32;
		pl_d2 = -(mvp._44 + mvp._42);
		var len2 = 1. / Math.sqrt(pl_nx2 * pl_nx2 + pl_ny2 * pl_ny2 + pl_nz2 * pl_nz2);
		pl_nx2 *= len2;
		pl_ny2 *= len2;
		pl_nz2 *= len2;
		pl_d2 *= len2;
		if(pl_nx2 * p_x + pl_ny2 * p_y + pl_nz2 * p_z - pl_d2 < -this.r) {
			return false;
		}
		var pl_nz3;
		var pl_ny3;
		var pl_nx3;
		var pl_d3;
		pl_nx3 = mvp._14 - mvp._12;
		pl_ny3 = mvp._24 - mvp._22;
		pl_nz3 = mvp._34 - mvp._32;
		pl_d3 = mvp._42 - mvp._44;
		var len3 = 1. / Math.sqrt(pl_nx3 * pl_nx3 + pl_ny3 * pl_ny3 + pl_nz3 * pl_nz3);
		pl_nx3 *= len3;
		pl_ny3 *= len3;
		pl_nz3 *= len3;
		pl_d3 *= len3;
		if(pl_nx3 * p_x + pl_ny3 * p_y + pl_nz3 * p_z - pl_d3 < -this.r) {
			return false;
		}
		var pl_nz4;
		var pl_ny4;
		var pl_nx4;
		var pl_d4;
		pl_nx4 = mvp._13;
		pl_ny4 = mvp._23;
		pl_nz4 = mvp._33;
		pl_d4 = -mvp._43;
		var len4 = 1. / Math.sqrt(pl_nx4 * pl_nx4 + pl_ny4 * pl_ny4 + pl_nz4 * pl_nz4);
		pl_nx4 *= len4;
		pl_ny4 *= len4;
		pl_nz4 *= len4;
		pl_d4 *= len4;
		if(pl_nx4 * p_x + pl_ny4 * p_y + pl_nz4 * p_z - pl_d4 < -this.r) {
			return false;
		}
		var pl_nz5;
		var pl_ny5;
		var pl_nx5;
		var pl_d5;
		pl_nx5 = mvp._13;
		pl_ny5 = mvp._23;
		pl_nz5 = mvp._33;
		pl_d5 = -mvp._43;
		var len5 = 1. / Math.sqrt(pl_nx5 * pl_nx5 + pl_ny5 * pl_ny5 + pl_nz5 * pl_nz5);
		pl_nx5 *= len5;
		pl_ny5 *= len5;
		pl_nz5 *= len5;
		pl_d5 *= len5;
		if(pl_nx5 * p_x + pl_ny5 * p_y + pl_nz5 * p_z - pl_d5 < -this.r) {
			return false;
		}
		return true;
	}
	,toString: function() {
		return "Sphere{" + Std.string(new h3d_col_Point(this.x,this.y,this.z)) + "," + hxd_Math.fmt(this.r) + "}";
	}
	,customSerialize: function(ctx) {
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.x));
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.y));
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.z));
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.r));
	}
	,customUnserialize: function(ctx) {
		var v = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.x = v;
		var v1 = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.y = v1;
		var v2 = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.z = v2;
		var v3 = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.r = v3;
	}
	,__class__: h3d_col_Sphere
};
var h3d_impl_Feature = $hxClasses["h3d.impl.Feature"] = { __ename__ : true, __constructs__ : ["StandardDerivatives","FloatTextures","AllocDepthBuffer","HardwareAccelerated","MultipleRenderTargets","Queries"] };
h3d_impl_Feature.StandardDerivatives = ["StandardDerivatives",0];
h3d_impl_Feature.StandardDerivatives.toString = $estr;
h3d_impl_Feature.StandardDerivatives.__enum__ = h3d_impl_Feature;
h3d_impl_Feature.FloatTextures = ["FloatTextures",1];
h3d_impl_Feature.FloatTextures.toString = $estr;
h3d_impl_Feature.FloatTextures.__enum__ = h3d_impl_Feature;
h3d_impl_Feature.AllocDepthBuffer = ["AllocDepthBuffer",2];
h3d_impl_Feature.AllocDepthBuffer.toString = $estr;
h3d_impl_Feature.AllocDepthBuffer.__enum__ = h3d_impl_Feature;
h3d_impl_Feature.HardwareAccelerated = ["HardwareAccelerated",3];
h3d_impl_Feature.HardwareAccelerated.toString = $estr;
h3d_impl_Feature.HardwareAccelerated.__enum__ = h3d_impl_Feature;
h3d_impl_Feature.MultipleRenderTargets = ["MultipleRenderTargets",4];
h3d_impl_Feature.MultipleRenderTargets.toString = $estr;
h3d_impl_Feature.MultipleRenderTargets.__enum__ = h3d_impl_Feature;
h3d_impl_Feature.Queries = ["Queries",5];
h3d_impl_Feature.Queries.toString = $estr;
h3d_impl_Feature.Queries.__enum__ = h3d_impl_Feature;
h3d_impl_Feature.__empty_constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries];
var h3d_impl_QueryKind = $hxClasses["h3d.impl.QueryKind"] = { __ename__ : true, __constructs__ : ["TimeStamp","Samples"] };
h3d_impl_QueryKind.TimeStamp = ["TimeStamp",0];
h3d_impl_QueryKind.TimeStamp.toString = $estr;
h3d_impl_QueryKind.TimeStamp.__enum__ = h3d_impl_QueryKind;
h3d_impl_QueryKind.Samples = ["Samples",1];
h3d_impl_QueryKind.Samples.toString = $estr;
h3d_impl_QueryKind.Samples.__enum__ = h3d_impl_QueryKind;
h3d_impl_QueryKind.__empty_constructs__ = [h3d_impl_QueryKind.TimeStamp,h3d_impl_QueryKind.Samples];
var h3d_impl_Driver = function() { };
$hxClasses["h3d.impl.Driver"] = h3d_impl_Driver;
h3d_impl_Driver.__name__ = ["h3d","impl","Driver"];
h3d_impl_Driver.prototype = {
	hasFeature: function(f) {
		return false;
	}
	,isSupportedFormat: function(fmt) {
		return false;
	}
	,isDisposed: function() {
		return true;
	}
	,dispose: function() {
	}
	,begin: function(frame) {
	}
	,log: function(str) {
	}
	,generateMipMaps: function(texture) {
		throw new js__$Boot_HaxeError("Mipmaps auto generation is not supported on this platform");
	}
	,getNativeShaderCode: function(shader) {
		return null;
	}
	,logImpl: function(str) {
	}
	,clear: function(color,depth,stencil) {
	}
	,captureRenderBuffer: function(pixels) {
	}
	,capturePixels: function(tex,face,mipLevel) {
		throw new js__$Boot_HaxeError("Can't capture pixels on this platform");
	}
	,getDriverName: function(details) {
		return "Not available";
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
	}
	,resize: function(width,height) {
	}
	,selectShader: function(shader) {
		return false;
	}
	,selectMaterial: function(pass) {
	}
	,uploadShaderBuffers: function(buffers,which) {
	}
	,getShaderInputNames: function() {
		return null;
	}
	,selectBuffer: function(buffer) {
	}
	,selectMultiBuffers: function(buffers) {
	}
	,draw: function(ibuf,startIndex,ntriangles) {
	}
	,setRenderZone: function(x,y,width,height) {
	}
	,setRenderTarget: function(tex,face,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(face == null) {
			face = 0;
		}
	}
	,setRenderTargets: function(textures) {
	}
	,allocDepthBuffer: function(b) {
		return null;
	}
	,disposeDepthBuffer: function(b) {
	}
	,getDefaultDepthBuffer: function() {
		return null;
	}
	,present: function() {
	}
	,setDebug: function(b) {
	}
	,allocTexture: function(t) {
		return null;
	}
	,allocIndexes: function(count) {
		return null;
	}
	,allocVertexes: function(m) {
		return null;
	}
	,disposeTexture: function(t) {
	}
	,disposeIndexes: function(i) {
	}
	,disposeVertexes: function(v) {
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadIndexBytes: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadVertexBytes: function(v,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
	}
	,readVertexBytes: function(v,startVertex,vertexCount,buf,bufPos) {
		throw new js__$Boot_HaxeError("Driver does not allow to read vertex bytes");
	}
	,readIndexBytes: function(v,startVertex,vertexCount,buf,bufPos) {
		throw new js__$Boot_HaxeError("Driver does not allow to read index bytes");
	}
	,copyTexture: function(from,to) {
		return false;
	}
	,allocQuery: function(queryKind) {
		return null;
	}
	,deleteQuery: function(q) {
	}
	,beginQuery: function(q) {
	}
	,endQuery: function(q) {
	}
	,queryResultAvailable: function(q) {
		return true;
	}
	,queryResult: function(q) {
		return 0.;
	}
	,__class__: h3d_impl_Driver
};
var h3d_impl__$GlDriver_CompiledShader = function(s,vertex,shader) {
	this.s = s;
	this.vertex = vertex;
	this.shader = shader;
};
$hxClasses["h3d.impl._GlDriver.CompiledShader"] = h3d_impl__$GlDriver_CompiledShader;
h3d_impl__$GlDriver_CompiledShader.__name__ = ["h3d","impl","_GlDriver","CompiledShader"];
h3d_impl__$GlDriver_CompiledShader.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledShader
};
var h3d_impl__$GlDriver_CompiledAttribute = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledAttribute"] = h3d_impl__$GlDriver_CompiledAttribute;
h3d_impl__$GlDriver_CompiledAttribute.__name__ = ["h3d","impl","_GlDriver","CompiledAttribute"];
h3d_impl__$GlDriver_CompiledAttribute.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledAttribute
};
var h3d_impl__$GlDriver_CompiledProgram = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledProgram"] = h3d_impl__$GlDriver_CompiledProgram;
h3d_impl__$GlDriver_CompiledProgram.__name__ = ["h3d","impl","_GlDriver","CompiledProgram"];
h3d_impl__$GlDriver_CompiledProgram.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledProgram
};
var h3d_impl_GlDriver = function(antiAlias) {
	if(antiAlias == null) {
		antiAlias = 0;
	}
	this.firstShader = true;
	this.boundTextures = [];
	this.lastActiveIndex = 0;
	this.canvas = hxd_Stage.getInstance().canvas;
	this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,{ alpha : false, antialias : antiAlias > 0});
	if(this.gl == null) {
		throw new js__$Boot_HaxeError("Could not acquire GL context");
	}
	if(typeof(WebGLDebugUtils) != "undefined") {
		this.gl = WebGLDebugUtils.makeDebugContext(this.gl);
	}
	this.commonFB = this.gl.createFramebuffer();
	this.programs = new haxe_ds_IntMap();
	this.curAttribs = 0;
	this.curMatBits = -1;
	this.defStencil = new h3d_mat_Stencil();
};
$hxClasses["h3d.impl.GlDriver"] = h3d_impl_GlDriver;
h3d_impl_GlDriver.__name__ = ["h3d","impl","GlDriver"];
h3d_impl_GlDriver.bytesToUint8Array = function(b) {
	return new Uint8Array(b.b.bufferValue);
};
h3d_impl_GlDriver.__super__ = h3d_impl_Driver;
h3d_impl_GlDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	logImpl: function(str) {
		console.log(str);
	}
	,setDebug: function(d) {
		this.debug = d;
	}
	,begin: function(frame) {
		this.frame = frame;
		this.resetStream();
		this.gl.useProgram(null);
		this.curShader = null;
		this.curBuffer = null;
	}
	,getShaderInputNames: function() {
		return this.curShader.attribNames;
	}
	,getNativeShaderCode: function(shader) {
		return "// vertex:\n" + hxsl_GlslOut.compile(shader.vertex.data) + "// fragment:\n" + hxsl_GlslOut.compile(shader.fragment.data);
	}
	,getDriverName: function(details) {
		var render = this.gl.getParameter(7937);
		if(details) {
			render += " GLv" + Std.string(this.gl.getParameter(7938));
		} else {
			render = render.split("/").shift();
		}
		render = render.split("WebGL ").join("");
		return "OpenGL " + render;
	}
	,compileShader: function(glout,shader) {
		var type = shader.vertex ? 35633 : 35632;
		var s = this.gl.createShader(type);
		var code = glout.run(shader.data);
		this.gl.shaderSource(s,code);
		this.gl.compileShader(s);
		var log = this.gl.getShaderInfoLog(s);
		if(this.gl.getShaderParameter(s,35713) != 1) {
			var log1 = this.gl.getShaderInfoLog(s);
			var lid = Std.parseInt(HxOverrides.substr(log1,9,null));
			var line = lid == null ? null : code.split("\n")[lid - 1];
			if(line == null) {
				line = "";
			} else {
				line = "(" + StringTools.trim(line) + ")";
			}
			var codeLines = code.split("\n");
			var _g1 = 0;
			var _g = codeLines.length;
			while(_g1 < _g) {
				var i = _g1++;
				codeLines[i] = i + 1 + "\t" + codeLines[i];
			}
			throw new js__$Boot_HaxeError("An error occurred compiling the shaders: " + log1 + line + "\n\n" + codeLines.join("\n"));
		}
		return new h3d_impl__$GlDriver_CompiledShader(s,shader.vertex,shader);
	}
	,initShader: function(p,s,shader) {
		var prefix = s.vertex ? "vertex" : "fragment";
		s.globals = this.gl.getUniformLocation(p.p,prefix + "Globals");
		s.params = this.gl.getUniformLocation(p.p,prefix + "Params");
		var _g = [];
		var _g2 = 0;
		var _g1 = shader.textures2DCount;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(this.gl.getUniformLocation(p.p,prefix + "Textures[" + i + "]"));
		}
		s.textures = _g;
		var _g11 = [];
		var _g3 = 0;
		var _g21 = shader.texturesCubeCount;
		while(_g3 < _g21) {
			var i1 = _g3++;
			_g11.push(this.gl.getUniformLocation(p.p,prefix + "TexturesCube[" + i1 + "]"));
		}
		s.cubeTextures = _g11;
	}
	,selectShader: function(shader) {
		var p = this.programs.h[shader.id];
		if(p == null) {
			p = new h3d_impl__$GlDriver_CompiledProgram();
			var glout = new hxsl_GlslOut();
			if(this.shaderVersion != null) {
				glout.version = this.shaderVersion;
			} else {
				glout.glES = true;
			}
			p.vertex = this.compileShader(glout,shader.vertex);
			p.fragment = this.compileShader(glout,shader.fragment);
			p.p = this.gl.createProgram();
			this.gl.attachShader(p.p,p.vertex.s);
			this.gl.attachShader(p.p,p.fragment.s);
			var log = null;
			try {
				this.gl.linkProgram(p.p);
				if(this.gl.getProgramParameter(p.p,35714) != 1) {
					log = this.gl.getProgramInfoLog(p.p);
				}
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				throw new js__$Boot_HaxeError("Shader linkage error: " + Std.string(e) + " (" + this.getDriverName(false) + ")");
			}
			this.gl.deleteShader(p.vertex.s);
			this.gl.deleteShader(p.fragment.s);
			if(log != null) {
				this.gl.deleteProgram(p.p);
				throw new js__$Boot_HaxeError("Program linkage failure: " + log + "\nVertex=\n" + glout.run(shader.vertex.data) + "\n\nFragment=\n" + glout.run(shader.fragment.data));
			}
			this.firstShader = false;
			this.initShader(p,p.vertex,shader.vertex);
			this.initShader(p,p.fragment,shader.fragment);
			p.attribNames = [];
			p.attribs = [];
			p.stride = 0;
			var _g = 0;
			var _g1 = shader.vertex.data.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				var _g2 = v.kind;
				if(_g2[1] == 1) {
					var t = 5126;
					var size;
					var _g21 = v.type;
					switch(_g21[1]) {
					case 3:
						size = 1;
						break;
					case 5:
						var n = _g21[2];
						size = n;
						break;
					case 9:
						var n1 = _g21[2];
						t = 5120;
						size = n1;
						break;
					default:
						throw new js__$Boot_HaxeError("assert " + Std.string(v.type));
					}
					var index = this.gl.getAttribLocation(p.p,glout.varNames.get(v.id));
					if(index < 0) {
						p.stride += size;
						continue;
					}
					var a = new h3d_impl__$GlDriver_CompiledAttribute();
					a.type = t;
					a.size = size;
					a.index = index;
					a.offset = p.stride;
					p.attribs.push(a);
					p.attribNames.push(v.name);
					p.stride += size;
				}
			}
			this.programs.h[shader.id] = p;
		}
		if(this.curShader == p) {
			return false;
		}
		this.gl.useProgram(p.p);
		var _g11 = this.curAttribs;
		var _g3 = p.attribs.length;
		while(_g11 < _g3) {
			var i = _g11++;
			this.gl.enableVertexAttribArray(i);
			this.curAttribs++;
		}
		while(this.curAttribs > p.attribs.length) this.gl.disableVertexAttribArray(--this.curAttribs);
		this.curShader = p;
		this.curBuffer = null;
		var _g12 = 0;
		var _g4 = this.boundTextures.length;
		while(_g12 < _g4) {
			var i1 = _g12++;
			this.boundTextures[i1] = null;
		}
		return true;
	}
	,uploadShaderBuffers: function(buf,which) {
		this.uploadBuffer(this.curShader.vertex,buf.vertex,which);
		this.uploadBuffer(this.curShader.fragment,buf.fragment,which);
	}
	,uploadBuffer: function(s,buf,which) {
		switch(which) {
		case 0:
			if(s.globals != null) {
				var a = buf.globals.subarray(0,s.shader.globalsSize * 4);
				this.gl.uniform4fv(s.globals,a);
			}
			break;
		case 1:
			if(s.params != null) {
				var a1 = buf.params.subarray(0,s.shader.paramsSize * 4);
				this.gl.uniform4fv(s.params,a1);
			}
			break;
		case 2:
			var tcount = s.textures.length;
			var _g1 = 0;
			var _g = s.textures.length + s.cubeTextures.length;
			while(_g1 < _g) {
				var i = _g1++;
				var t = buf.tex[i];
				var isCube = i >= tcount;
				if(t == null || t.t == null && t.realloc == null) {
					if(isCube) {
						t = h3d_mat_Texture.defaultCubeTexture();
					} else {
						var color = h3d_mat_Defaults.loadingTextureColor;
						t = h3d_mat_Texture.fromColor(color,(color >>> 24) / 255);
					}
				}
				if(t != null && t.t == null && t.realloc != null) {
					t.alloc();
					t.realloc();
				}
				t.lastFrame = this.frame;
				var pt = isCube ? s.cubeTextures[i - tcount] : s.textures[i];
				if(pt == null) {
					continue;
				}
				if(this.boundTextures[i] == t.t) {
					continue;
				}
				this.boundTextures[i] = t.t;
				var mode = isCube ? 34067 : 3553;
				this.gl.activeTexture(33984 + i);
				this.gl.uniform1i(pt,i);
				this.gl.bindTexture(mode,t.t.t);
				this.lastActiveIndex = i;
				var mip = t.mipMap[1];
				var filter = t.filter[1];
				var wrap = t.wrap[1];
				var bits = mip | filter << 3 | wrap << 6;
				if(bits != t.t.bits) {
					t.t.bits = bits;
					var flags = h3d_impl_GlDriver.TFILTERS[mip][filter];
					this.gl.texParameteri(mode,10240,flags[0]);
					this.gl.texParameteri(mode,10241,flags[1]);
					var w = h3d_impl_GlDriver.TWRAP[wrap];
					this.gl.texParameteri(mode,10242,w);
					this.gl.texParameteri(mode,10243,w);
				}
			}
			break;
		}
	}
	,selectMaterial: function(pass) {
		this.selectMaterialBits(pass.bits);
		var s = this.defStencil;
		if(pass.stencil == null) {
			if(this.curStEnabled) {
				this.gl.disable(2960);
				this.curStEnabled = false;
			}
		} else {
			s = pass.stencil;
			if(!this.curStEnabled) {
				this.gl.enable(2960);
				this.curStEnabled = true;
			}
		}
		this.selectStencilBits(s.opBits,s.frontRefBits,s.backRefBits);
	}
	,selectMaterialBits: function(bits) {
		var diff = bits ^ this.curMatBits;
		if(this.curMatBits < 0) {
			diff = -1;
		}
		if(diff == 0) {
			return;
		}
		if((diff & 3) != 0) {
			var cull = bits & 3;
			if(cull == 0) {
				this.gl.disable(2884);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits & 3) == 0) {
					this.gl.enable(2884);
				}
				this.gl.cullFace(h3d_impl_GlDriver.FACES[cull]);
			}
		}
		if((diff & 4194240) != 0) {
			var csrc = bits >> 6 & 15;
			var cdst = bits >> 10 & 15;
			var asrc = bits >> 14 & 15;
			var adst = bits >> 18 & 15;
			if(csrc == asrc && cdst == adst) {
				if(csrc == 0 && cdst == 1) {
					this.gl.disable(3042);
				} else {
					if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
						this.gl.enable(3042);
					}
					this.gl.blendFunc(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst]);
				}
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
					this.gl.enable(3042);
				}
				this.gl.blendFuncSeparate(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst],h3d_impl_GlDriver.BLEND[asrc],h3d_impl_GlDriver.BLEND[adst]);
			}
		}
		if((diff & 62914560) != 0) {
			var cop = bits >> 22 & 3;
			var aop = bits >> 24 & 3;
			if(cop == aop) {
				this.gl.blendEquation(h3d_impl_GlDriver.OP[cop]);
			} else {
				this.gl.blendEquationSeparate(h3d_impl_GlDriver.OP[cop],h3d_impl_GlDriver.OP[aop]);
			}
		}
		if((diff & 4) != 0) {
			this.gl.depthMask((bits >> 2 & 1) != 0);
		}
		if((diff & 56) != 0) {
			var cmp = bits >> 3 & 7;
			if(cmp == 0) {
				this.gl.disable(2929);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 3 & 7) == 0) {
					this.gl.enable(2929);
				}
				this.gl.depthFunc(h3d_impl_GlDriver.COMPARE[cmp]);
			}
		}
		if((diff & 1006632960) != 0) {
			var m = bits >> 26 & 15;
			this.gl.colorMask((m & 1) != 0,(m & 2) != 0,(m & 4) != 0,(m & 8) != 0);
		}
		this.curMatBits = bits;
	}
	,selectStencilBits: function(opBits,frBits,brBits) {
		var diffOp = opBits ^ this.curStOpBits;
		var diffFr = frBits ^ this.curStFrBits;
		var diffBr = brBits ^ this.curStBrBits;
		if((diffOp | diffFr | diffBr) == 0) {
			return;
		}
		if((diffOp & 4088) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.STENCIL_OP[opBits >> 3 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 6 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 9 & 7]);
		}
		if((diffOp & 16744448) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.STENCIL_OP[opBits >> 15 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 18 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 21 & 7]);
		}
		if((diffOp & 7 | diffFr & 65535) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.COMPARE[opBits & 7],frBits & 255,frBits >> 8 & 255);
		}
		if((diffOp & 28672 | diffBr & 65535) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.COMPARE[opBits >> 12 & 7],brBits & 255,brBits >> 8 & 255);
		}
		if((diffFr & 16711680) != 0) {
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[2],frBits >> 16 & 255);
		}
		if((diffBr & 16711680) != 0) {
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[1],brBits >> 16 & 255);
		}
		this.curStOpBits = opBits;
		this.curStFrBits = frBits;
		this.curStBrBits = brBits;
	}
	,clear: function(color,depth,stencil) {
		var bits = 0;
		if(color != null) {
			this.gl.colorMask(true,true,true,true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 1006632960;
			}
			this.gl.clearColor(color.x,color.y,color.z,color.w);
			bits |= 16384;
		}
		if(depth != null) {
			this.gl.depthMask(true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 4;
			}
			this.gl.clearDepth(depth);
			bits |= 256;
		}
		if(stencil != null) {
			this.selectStencilBits(this.defStencil.opBits,this.defStencil.frontRefBits,this.defStencil.backRefBits);
			this.gl.clearStencil(stencil);
			bits |= 1024;
		}
		if(bits != 0) {
			this.gl.clear(bits);
		}
		if(this.curTarget != null) {
			this.curTarget.flags |= 1 << h3d_mat_TextureFlags.WasCleared[1];
		}
	}
	,resize: function(width,height) {
		if(this.canvas.style.width == "") {
			this.canvas.style.width = (width / window.devicePixelRatio | 0) + "px";
			this.canvas.style.height = (height / window.devicePixelRatio | 0) + "px";
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.bufferWidth = width;
		this.bufferHeight = height;
		this.gl.viewport(0,0,width,height);
		if(this.defaultDepth != null) {
			this.disposeDepthBuffer(this.defaultDepth);
			this.defaultDepth.width = this.bufferWidth;
			this.defaultDepth.height = this.bufferHeight;
			this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		}
	}
	,getChannels: function(t) {
		var _g = t.internalFmt;
		switch(_g) {
		case 6406:
			return 6406;
		case 6408:
			return 6408;
		default:
			throw new js__$Boot_HaxeError("Invalid format " + t.internalFmt);
		}
	}
	,isSupportedFormat: function(fmt) {
		switch(fmt[1]) {
		case 2:case 5:
			return true;
		case 4:
			return this.hasFeature(h3d_impl_Feature.FloatTextures);
		default:
			return false;
		}
	}
	,allocTexture: function(t) {
		var tt = this.gl.createTexture();
		var bind = (t.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0 ? 34067 : 3553;
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : bind};
		var _g = t.format;
		switch(_g[1]) {
		case 2:
			break;
		case 4:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.pixelFmt = 5126;
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 5:
			tt1.internalFmt = 6406;
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
		}
		t.lastFrame = this.frame;
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared[1]);
		this.gl.bindTexture(bind,tt1.t);
		var outOfMem = false;
		if((t.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0) {
			var _g1 = 0;
			while(_g1 < 6) {
				var i = _g1++;
				this.gl.texImage2D(h3d_impl_GlDriver.CUBE_FACES[i],0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
				if(this.gl.getError() == 1285) {
					outOfMem = true;
					break;
				}
			}
		} else {
			this.gl.texImage2D(bind,0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
			if(this.gl.getError() == 1285) {
				outOfMem = true;
			}
		}
		this.restoreBind();
		if(outOfMem) {
			this.gl.deleteTexture(tt1.t);
			return null;
		}
		return tt1;
	}
	,restoreBind: function() {
		var t = this.boundTextures[this.lastActiveIndex];
		if(t == null) {
			this.gl.bindTexture(3553,null);
		} else {
			this.gl.bindTexture(t.bind,t.t);
		}
	}
	,allocDepthBuffer: function(b) {
		var r = this.gl.createRenderbuffer();
		this.gl.bindRenderbuffer(36161,r);
		this.gl.renderbufferStorage(36161,33189,b.width,b.height);
		this.gl.bindRenderbuffer(36161,null);
		return { r : r};
	}
	,disposeDepthBuffer: function(b) {
		if(b.b != null && b.b.r != null) {
			this.gl.deleteRenderbuffer(b.b.r);
			b.b = null;
		}
	}
	,getDefaultDepthBuffer: function() {
		if(this.defaultDepth != null) {
			return this.defaultDepth;
		}
		this.defaultDepth = new h3d_mat_DepthBuffer(this.bufferWidth,this.bufferHeight);
		return this.defaultDepth;
	}
	,allocVertexes: function(m) {
		var b = this.gl.createBuffer();
		this.gl.bindBuffer(34962,b);
		if(m.size * m.stride == 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		this.gl.bufferData(34962,m.size * m.stride * 4,(m.flags & 1 << h3d_BufferFlag.Dynamic[1]) != 0 ? 35048 : 35044);
		var outOfMem = this.gl.getError() == 1285;
		this.gl.bindBuffer(34962,null);
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, stride : m.stride};
	}
	,allocIndexes: function(count) {
		var b = this.gl.createBuffer();
		this.gl.bindBuffer(34963,b);
		this.gl.bufferData(34963,count * 2,35044);
		var outOfMem = this.gl.getError() == 1285;
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return b;
	}
	,disposeTexture: function(t) {
		var tt = t.t;
		if(tt == null) {
			return;
		}
		t.t = null;
		var _g1 = 0;
		var _g = this.boundTextures.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.boundTextures[i] == tt) {
				this.boundTextures[i] = null;
			}
		}
		this.gl.deleteTexture(tt.t);
	}
	,disposeIndexes: function(i) {
		this.gl.deleteBuffer(i);
	}
	,disposeVertexes: function(v) {
		this.gl.deleteBuffer(v.b);
	}
	,generateMipMaps: function(t) {
		var bind = (t.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0 ? 34067 : 3553;
		this.gl.bindTexture(bind,t.t.t);
		this.gl.generateMipmap(bind);
		this.restoreBind();
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
		if(t.format != hxd_PixelFormat.RGBA || (t.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0) {
			var pixels = bmp.getPixels();
			this.uploadTexturePixels(t,pixels,mipLevel,side);
			pixels.dispose();
		} else {
			var img = bmp.ctx;
			this.gl.bindTexture(3553,t.t.t);
			this.gl.pixelStorei(37440,1);
			this.gl.texImage2D(3553,mipLevel,t.t.internalFmt,this.getChannels(t.t),t.t.pixelFmt,img.getImageData(0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height));
			this.restoreBind();
		}
	}
	,resetStream: function() {
	}
	,streamData: function(data,pos,length) {
		return data;
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0;
		var bind = cubic ? 34067 : 3553;
		var face = cubic ? h3d_impl_GlDriver.CUBE_FACES[side] : 3553;
		this.gl.bindTexture(bind,t.t.t);
		pixels.convert(t.format);
		this.gl.pixelStorei(37440,cubic ? 0 : 1);
		this.gl.texImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,this.getChannels(t.t),t.t.pixelFmt,new Uint8Array(pixels.bytes.b.bufferValue));
		this.restoreBind();
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
		var stride = v.stride;
		this.gl.bindBuffer(34962,v.b);
		var buf1 = buf.array;
		var sub = new Float32Array(buf1.buffer,bufPos * 4,vertexCount * stride);
		this.gl.bufferSubData(34962,startVertex * stride * 4,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadVertexBytes: function(v,startVertex,vertexCount,buf,bufPos) {
		var stride = v.stride;
		this.gl.bindBuffer(34962,v.b);
		var buf1 = new Uint8Array(buf.b.bufferValue);
		var sub = new Uint8Array(buf1.buffer,bufPos * 4,vertexCount * stride * 4);
		this.gl.bufferSubData(34962,startVertex * stride * 4,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
		this.gl.bindBuffer(34963,i);
		var buf1 = new Uint16Array(buf);
		var sub = new Uint16Array(buf1.buffer,bufPos * 2,indiceCount);
		this.gl.bufferSubData(34963,startIndice * 2,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,uploadIndexBytes: function(i,startIndice,indiceCount,buf,bufPos) {
		this.gl.bindBuffer(34963,i);
		var buf1 = new Uint8Array(buf.b.bufferValue);
		var sub = new Uint8Array(buf1.buffer,bufPos * 2,indiceCount * 2);
		this.gl.bufferSubData(34963,startIndice * 2,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,selectBuffer: function(v) {
		if(v == this.curBuffer) {
			return;
		}
		if(this.curBuffer != null && v.buffer == this.curBuffer.buffer && (v.buffer.flags & 1 << h3d_BufferFlag.RawFormat[1]) != 0 == ((this.curBuffer.flags & 1 << h3d_BufferFlag.RawFormat[1]) != 0)) {
			this.curBuffer = v;
			return;
		}
		if(this.curShader == null) {
			throw new js__$Boot_HaxeError("No shader selected");
		}
		this.curBuffer = v;
		var m = v.buffer.vbuf;
		if(m.stride < this.curShader.stride) {
			throw new js__$Boot_HaxeError("Buffer stride (" + m.stride + ") and shader stride (" + this.curShader.stride + ") mismatch");
		}
		this.gl.bindBuffer(34962,m.b);
		if((v.flags & 1 << h3d_BufferFlag.RawFormat[1]) != 0) {
			var _g = 0;
			var _g1 = this.curShader.attribs;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				var pos = a.offset;
				this.gl.vertexAttribPointer(a.index,a.size,a.type,false,m.stride * 4,pos * 4);
			}
		} else {
			var offset = 8;
			var _g11 = 0;
			var _g2 = this.curShader.attribs.length;
			while(_g11 < _g2) {
				var i = _g11++;
				var a1 = this.curShader.attribs[i];
				var pos1;
				var _g21 = this.curShader.attribNames[i];
				switch(_g21) {
				case "normal":
					if(m.stride < 6) {
						throw new js__$Boot_HaxeError("Buffer is missing NORMAL data, set it to RAW format ?");
					}
					pos1 = 3;
					break;
				case "position":
					pos1 = 0;
					break;
				case "uv":
					if(m.stride < 8) {
						throw new js__$Boot_HaxeError("Buffer is missing UV data, set it to RAW format ?");
					}
					pos1 = 6;
					break;
				default:
					var s = _g21;
					pos1 = offset;
					offset += a1.size;
					if(offset > m.stride) {
						throw new js__$Boot_HaxeError("Buffer is missing '" + s + "' data, set it to RAW format ?");
					}
				}
				this.gl.vertexAttribPointer(a1.index,a1.size,a1.type,false,m.stride * 4,pos1 * 4);
			}
		}
	}
	,selectMultiBuffers: function(buffers) {
		var _g = 0;
		var _g1 = this.curShader.attribs;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.gl.bindBuffer(34962,buffers.buffer.buffer.vbuf.b);
			this.gl.vertexAttribPointer(a.index,a.size,a.type,false,buffers.buffer.buffer.stride * 4,buffers.offset * 4);
			buffers = buffers.next;
		}
		this.curBuffer = null;
	}
	,draw: function(ibuf,startIndex,ntriangles) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf);
		}
		this.gl.drawElements(4,ntriangles * 3,5123,startIndex * 2);
	}
	,present: function() {
	}
	,isDisposed: function() {
		return this.gl.isContextLost();
	}
	,setRenderZone: function(x,y,width,height) {
		if(x == 0 && y == 0 && width < 0 && height < 0) {
			this.gl.disable(3089);
		} else {
			this.gl.enable(3089);
			var th = this.curTarget == null ? this.bufferHeight : this.curTarget.height;
			this.gl.scissor(x,th - (y + height),width,height);
		}
	}
	,setDrawBuffers: function(k) {
		if(this.mrtExt != null) {
			this.mrtExt.drawBuffersWEBGL(h3d_impl_GlDriver.CBUFFERS[k]);
		}
	}
	,unbindTargets: function() {
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
			this.setDrawBuffers(1);
		}
	}
	,capturePixels: function(tex,face,mipLevel) {
		var old = this.curTarget;
		var oldCount = this.numTargets;
		var oldFace = this.curTargetFace;
		var oldMip = this.curTargetMip;
		this.numTargets = 1;
		this.setRenderTarget(tex,face,mipLevel);
		var pixels = hxd_Pixels.alloc(tex.width >> mipLevel,tex.height >> mipLevel,hxd_PixelFormat.RGBA);
		this.captureRenderBuffer(pixels);
		this.setRenderTarget(old,oldFace,oldMip);
		if(oldCount > 1) {
			this.setDrawBuffers(oldCount);
			this.numTargets = oldCount;
		}
		return pixels;
	}
	,setRenderTarget: function(tex,face,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(face == null) {
			face = 0;
		}
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
			this.setDrawBuffers(1);
		}
		this.curTarget = tex;
		if(tex == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.bufferWidth,this.bufferHeight);
			return;
		}
		if(mipLevel > 0) {
			throw new js__$Boot_HaxeError("Cannot render to mipLevel, use upload() instead");
		}
		if(tex.t == null) {
			tex.alloc();
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.MipMapped[1]) != 0 && (tex.flags & 1 << h3d_mat_TextureFlags.WasCleared[1]) == 0) {
			var bind = (tex.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0 ? 34067 : 3553;
			this.gl.bindTexture(bind,tex.t.t);
			this.gl.generateMipmap(bind);
			this.restoreBind();
		}
		tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared[1];
		tex.lastFrame = this.frame;
		this.curTargetFace = face;
		this.curTargetMip = mipLevel;
		this.gl.bindFramebuffer(36160,this.commonFB);
		this.gl.framebufferTexture2D(36160,36064,(tex.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0 ? h3d_impl_GlDriver.CUBE_FACES[face] : 3553,tex.t.t,mipLevel);
		if(tex.depthBuffer != null) {
			this.gl.framebufferRenderbuffer(36160,36096,36161,tex.depthBuffer.b.r);
		} else {
			this.gl.framebufferRenderbuffer(36160,36096,36161,null);
		}
		this.gl.viewport(0,0,tex.width >> mipLevel,tex.height >> mipLevel);
		var _g1 = 0;
		var _g = this.boundTextures.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.boundTextures[i] = null;
		}
	}
	,setRenderTargets: function(textures) {
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
			this.setDrawBuffers(1);
		}
		this.setRenderTarget(textures[0]);
		if(textures.length < 2) {
			return;
		}
		this.numTargets = textures.length;
		var _g1 = 1;
		var _g = textures.length;
		while(_g1 < _g) {
			var i = _g1++;
			var tex = textures[i];
			if(tex.t == null) {
				tex.alloc();
			}
			this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
			tex.lastFrame = this.frame;
			tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared[1];
		}
		this.setDrawBuffers(textures.length);
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		var ready = false;
		if(window.document.readyState == "complete") {
			var f = onCreate;
			haxe_Timer.delay(function() {
				f(false);
			},1);
		} else {
			window.addEventListener("load",function(_) {
				if(!ready) {
					ready = true;
					onCreate(false);
				}
			});
		}
	}
	,hasFeature: function(f) {
		switch(f[1]) {
		case 0:
			return this.gl.getExtension("OES_standard_derivatives") != null;
		case 1:
			if(this.gl.getExtension("OES_texture_float") != null) {
				return this.gl.getExtension("OES_texture_float_linear") != null;
			} else {
				return false;
			}
			break;
		case 2:
			return true;
		case 3:
			return true;
		case 4:
			if(this.mrtExt == null) {
				return (this.mrtExt = this.gl.getExtension("WEBGL_draw_buffers")) != null;
			} else {
				return true;
			}
			break;
		case 5:
			return false;
		}
	}
	,captureRenderBuffer: function(pixels) {
		if(this.curTarget == null) {
			throw new js__$Boot_HaxeError("Can't capture main render buffer in GL");
		}
		this.gl.readPixels(0,0,pixels.width,pixels.height,6408,5121,pixels.bytes.b);
		pixels.set_innerFormat(hxd_PixelFormat.RGBA);
		pixels.flags |= 1 << hxd_Flags.FlipY[1];
	}
	,__class__: h3d_impl_GlDriver
});
var h3d_impl_MacroHelper = function() { };
$hxClasses["h3d.impl.MacroHelper"] = h3d_impl_MacroHelper;
h3d_impl_MacroHelper.__name__ = ["h3d","impl","MacroHelper"];
var h3d_impl__$ManagedBuffer_FreeCell = function(pos,count,next) {
	this.pos = pos;
	this.count = count;
	this.next = next;
};
$hxClasses["h3d.impl._ManagedBuffer.FreeCell"] = h3d_impl__$ManagedBuffer_FreeCell;
h3d_impl__$ManagedBuffer_FreeCell.__name__ = ["h3d","impl","_ManagedBuffer","FreeCell"];
h3d_impl__$ManagedBuffer_FreeCell.prototype = {
	__class__: h3d_impl__$ManagedBuffer_FreeCell
};
var h3d_impl_ManagedBuffer = function(stride,size,flags) {
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f[1];
		}
	}
	this.size = size;
	this.stride = stride;
	this.freeList = new h3d_impl__$ManagedBuffer_FreeCell(0,size,null);
	this.mem = h3d_Engine.CURRENT.mem;
	this.mem.allocManaged(this);
};
$hxClasses["h3d.impl.ManagedBuffer"] = h3d_impl_ManagedBuffer;
h3d_impl_ManagedBuffer.__name__ = ["h3d","impl","ManagedBuffer"];
h3d_impl_ManagedBuffer.prototype = {
	uploadVertexBuffer: function(start,vertices,buf,bufPos) {
		if(bufPos == null) {
			bufPos = 0;
		}
		this.mem.driver.uploadVertexBuffer(this.vbuf,start,vertices,buf,bufPos);
	}
	,uploadVertexBytes: function(start,vertices,data,dataPos) {
		if(dataPos == null) {
			dataPos = 0;
		}
		this.mem.driver.uploadVertexBytes(this.vbuf,start,vertices,data,dataPos);
	}
	,readVertexBytes: function(start,vertices,data,dataPos) {
		if(dataPos == null) {
			dataPos = 0;
		}
		this.mem.driver.readVertexBytes(this.vbuf,start,vertices,data,dataPos);
	}
	,alloc: function(vertices,align) {
		var p = this.allocPosition(vertices,align);
		if(p < 0) {
			return null;
		}
		var b = new h3d_Buffer(vertices,this.stride,[h3d_BufferFlag.NoAlloc]);
		b.position = p;
		b.buffer = this;
		return b;
	}
	,getFreeVertices: function() {
		var m = 0;
		var l = this.freeList;
		while(l != null) {
			m += l.count;
			l = l.next;
		}
		return m;
	}
	,allocPosition: function(nvert,align) {
		var free = this.freeList;
		while(free != null) {
			if(free.count >= nvert) {
				var d = (align - free.pos % align) % align;
				if(d == 0) {
					break;
				}
				if(free.count >= nvert + d) {
					free.next = new h3d_impl__$ManagedBuffer_FreeCell(free.pos + d,free.count - d,free.next);
					free.count = d;
					free = free.next;
					break;
				}
			}
			free = free.next;
		}
		if(free == null) {
			return -1;
		}
		var pos = free.pos;
		free.pos += nvert;
		free.count -= nvert;
		return pos;
	}
	,allocBuffer: function(b) {
		var align = (b.flags & 1 << h3d_BufferFlag.Quads[1]) != 0 ? 4 : (b.flags & 1 << h3d_BufferFlag.Triangles[1]) != 0 ? 3 : 1;
		var p = this.allocPosition(b.vertices,align);
		if(p < 0) {
			return false;
		}
		b.position = p;
		b.buffer = this;
		return true;
	}
	,freeBuffer: function(b) {
		var prev = null;
		var f = this.freeList;
		var nvert = b.vertices;
		var end = b.position + nvert;
		while(f != null) {
			if(f.pos == end) {
				f.pos -= nvert;
				f.count += nvert;
				if(prev != null && prev.pos + prev.count == f.pos) {
					prev.count += f.count;
					prev.next = f.next;
				}
				nvert = 0;
				break;
			}
			if(f.pos > end) {
				if(prev != null && prev.pos + prev.count == b.position) {
					prev.count += nvert;
				} else {
					var n = new h3d_impl__$ManagedBuffer_FreeCell(b.position,nvert,f);
					if(prev == null) {
						this.freeList = n;
					} else {
						prev.next = n;
					}
				}
				nvert = 0;
				break;
			}
			prev = f;
			f = f.next;
		}
		if(nvert != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		if(this.freeList.count == this.size && (this.flags & 1 << h3d_BufferFlag.Managed[1]) == 0) {
			this.dispose();
		}
	}
	,dispose: function() {
		this.mem.freeManaged(this);
	}
	,isDisposed: function() {
		return this.vbuf == null;
	}
	,__class__: h3d_impl_ManagedBuffer
};
var h3d_impl_MemoryManager = function(driver) {
	this.bufferCount = 0;
	this.texMemory = 0;
	this.usedMemory = 0;
	this.driver = driver;
};
$hxClasses["h3d.impl.MemoryManager"] = h3d_impl_MemoryManager;
h3d_impl_MemoryManager.__name__ = ["h3d","impl","MemoryManager"];
h3d_impl_MemoryManager.prototype = {
	init: function() {
		this.indexes = [];
		this.textures = [];
		this.buffers = [];
		this.initIndexes();
	}
	,initIndexes: function() {
		var this1 = new Array(0);
		var indices = this1;
		var _g = 0;
		while(_g < 65533) {
			var i = _g++;
			indices.push(i);
		}
		this.triIndexes = h3d_Indexes.alloc(indices);
		var this2 = new Array(0);
		var indices1 = this2;
		var p = 0;
		var _g1 = 0;
		var _g2 = 16383;
		while(_g1 < _g2) {
			var i1 = _g1++;
			var k = i1 << 2;
			indices1.push(k);
			indices1.push(k + 1);
			indices1.push(k + 2);
			indices1.push(k + 2);
			indices1.push(k + 1);
			indices1.push(k + 3);
		}
		indices1.push(65533);
		this.quadIndexes = h3d_Indexes.alloc(indices1);
	}
	,garbage: function() {
	}
	,cleanManagedBuffers: function() {
		var _g1 = 1;
		var _g = this.buffers.length;
		while(_g1 < _g) {
			var i = _g1++;
			var b = this.buffers[i];
			var prev = null;
			while(b != null) {
				if(b.freeList.count == b.size) {
					b.dispose();
					if(prev == null) {
						this.buffers[i] = b.next;
					} else {
						prev.next = b.next;
					}
				} else {
					prev = b;
				}
				b = b.next;
			}
		}
	}
	,allocManaged: function(m) {
		if(m.vbuf != null) {
			return;
		}
		var mem = m.size * m.stride * 4;
		if(mem == 0) {
			return;
		}
		while(this.usedMemory + mem > 4294967296. || this.bufferCount >= 65536 || (m.vbuf = this.driver.allocVertexes(m)) == null) {
			var size = this.usedMemory - this.freeMemorySize();
			this.garbage();
			this.cleanManagedBuffers();
			if(this.usedMemory - this.freeMemorySize() == size) {
				if(this.bufferCount >= 65536) {
					throw new js__$Boot_HaxeError("Too many buffers");
				}
				throw new js__$Boot_HaxeError("Memory full (" + Math.ceil(size / 1024) + " KB," + this.bufferCount + " buffers)");
			}
		}
		this.usedMemory += mem;
		this.bufferCount++;
	}
	,freeManaged: function(m) {
		if(m.vbuf == null) {
			return;
		}
		this.driver.disposeVertexes(m.vbuf);
		m.vbuf = null;
		this.usedMemory -= m.size * m.stride * 4;
		this.bufferCount--;
	}
	,allocBuffer: function(b,stride) {
		var max = (b.flags & 1 << h3d_BufferFlag.Quads[1]) != 0 ? 65532 : (b.flags & 1 << h3d_BufferFlag.Triangles[1]) != 0 ? 65533 : 65534;
		if(b.vertices > max) {
			if(max == 65534) {
				throw new js__$Boot_HaxeError("Cannot split buffer with " + b.vertices + " vertices if it's not Quads/Triangles");
			}
			var rem = b.vertices - max;
			b.vertices = max;
			this.allocBuffer(b,stride);
			var n = b;
			while(n.next != null) n = n.next;
			var flags = [];
			var _g = 0;
			var _g1 = h3d_impl_MemoryManager.ALL_FLAGS;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if((b.flags & 1 << f[1]) != 0) {
					flags.push(f);
				}
			}
			n.next = new h3d_Buffer(rem,stride,flags);
			return;
		}
		if((b.flags & 1 << h3d_BufferFlag.Managed[1]) == 0) {
			var m = new h3d_impl_ManagedBuffer(stride,b.vertices);
			if(!m.allocBuffer(b)) {
				throw new js__$Boot_HaxeError("assert");
			}
			return;
		}
		var m1 = this.buffers[stride];
		var prev = null;
		while(m1 != null) {
			if(m1.allocBuffer(b)) {
				return;
			}
			prev = m1;
			m1 = m1.next;
		}
		var align = (b.flags & 1 << h3d_BufferFlag.Triangles[1]) != 0 ? 3 : (b.flags & 1 << h3d_BufferFlag.Quads[1]) != 0 ? 4 : 0;
		if(m1 == null && align > 0) {
			var total = b.vertices;
			var size = total;
			while(size > 2048) {
				m1 = this.buffers[stride];
				size >>= 1;
				size -= size % align;
				b.vertices = size;
				while(m1 != null) {
					if(m1.allocBuffer(b)) {
						var flags1 = [];
						var _g2 = 0;
						var _g11 = h3d_impl_MemoryManager.ALL_FLAGS;
						while(_g2 < _g11.length) {
							var f1 = _g11[_g2];
							++_g2;
							if((b.flags & 1 << f1[1]) != 0) {
								flags1.push(f1);
							}
						}
						b.next = new h3d_Buffer(total - size,stride,flags1);
						return;
					}
					m1 = m1.next;
				}
			}
			b.vertices = total;
		}
		m1 = new h3d_impl_ManagedBuffer(stride,65533,[h3d_BufferFlag.Managed]);
		if(prev == null) {
			this.buffers[stride] = m1;
		} else {
			prev.next = m1;
		}
		if(!m1.allocBuffer(b)) {
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,deleteIndexes: function(i) {
		HxOverrides.remove(this.indexes,i);
		this.driver.disposeIndexes(i.ibuf);
		i.ibuf = null;
		this.usedMemory -= i.count * 2;
	}
	,allocIndexes: function(i) {
		i.ibuf = this.driver.allocIndexes(i.count);
		this.indexes.push(i);
		this.usedMemory += i.count * 2;
	}
	,bpp: function(t) {
		return 4;
	}
	,cleanTextures: function(force) {
		if(force == null) {
			force = true;
		}
		this.textures.sort($bind(this,this.sortByLRU));
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.realloc == null) {
				continue;
			}
			if(force || t.lastFrame < h3d_Engine.CURRENT.frameCount - 3600) {
				t.dispose();
				return true;
			}
		}
		return false;
	}
	,sortByLRU: function(t1,t2) {
		return t1.lastFrame - t2.lastFrame;
	}
	,deleteTexture: function(t) {
		HxOverrides.remove(this.textures,t);
		this.driver.disposeTexture(t);
		this.texMemory -= t.width * t.height * this.bpp(t);
	}
	,allocTexture: function(t) {
		var free = this.cleanTextures(false);
		t.t = this.driver.allocTexture(t);
		if(t.t == null) {
			if(!this.cleanTextures(true)) {
				throw new js__$Boot_HaxeError("Maximum texture memory reached");
			}
			this.allocTexture(t);
			return;
		}
		this.textures.push(t);
		this.texMemory += t.width * t.height * this.bpp(t);
	}
	,onContextLost: function() {
		this.dispose();
		this.initIndexes();
	}
	,dispose: function() {
		this.triIndexes.dispose();
		this.quadIndexes.dispose();
		this.triIndexes = null;
		this.quadIndexes = null;
		var _g = 0;
		var _g1 = this.textures.slice();
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		var _g2 = 0;
		var _g11 = this.buffers.slice();
		while(_g2 < _g11.length) {
			var b = _g11[_g2];
			++_g2;
			var b1 = b;
			while(b1 != null) {
				b1.dispose();
				b1 = b1.next;
			}
		}
		var _g3 = 0;
		var _g12 = this.indexes.slice();
		while(_g3 < _g12.length) {
			var i = _g12[_g3];
			++_g3;
			i.dispose();
		}
		this.buffers = [];
		this.indexes = [];
		this.textures = [];
		this.bufferCount = 0;
		this.usedMemory = 0;
		this.texMemory = 0;
	}
	,freeMemorySize: function() {
		var size = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				var free = b1.freeList;
				while(free != null) {
					size += free.count * b1.stride * 4;
					free = free.next;
				}
				b1 = b1.next;
			}
		}
		return size;
	}
	,stats: function() {
		var total = 0;
		var free = 0;
		var count = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				total += b1.stride * b1.size * 4;
				var f = b1.freeList;
				while(f != null) {
					free += f.count * b1.stride * 4;
					f = f.next;
				}
				++count;
				b1 = b1.next;
			}
		}
		return { bufferCount : this.bufferCount, freeManagedMemory : free, managedMemory : total, totalMemory : this.usedMemory + this.texMemory, textureCount : this.textures.length, textureMemory : this.texMemory};
	}
	,allocStats: function() {
		return [];
	}
	,__class__: h3d_impl_MemoryManager
};
var h3d_impl_TextureCache = function() {
	this.position = 0;
	this.cache = [];
	var engine = h3d_Engine.CURRENT;
	this.defaultFormat = h3d_mat_Texture.nativeFormat;
	this.defaultDepthBuffer = h3d_mat_DepthBuffer.getDefault();
};
$hxClasses["h3d.impl.TextureCache"] = h3d_impl_TextureCache;
h3d_impl_TextureCache.__name__ = ["h3d","impl","TextureCache"];
h3d_impl_TextureCache.prototype = {
	get: function(index) {
		if(index == null) {
			index = 0;
		}
		return this.cache[index];
	}
	,set: function(t,index) {
		this.cache[index] = t;
	}
	,begin: function(ctx) {
		if(this.frame != ctx.frame) {
			while(this.cache.length > this.position) {
				var t = this.cache.pop();
				if(t != null) {
					t.dispose();
				}
			}
			this.frame = ctx.frame;
			this.position = 0;
		}
	}
	,allocTarget: function(name,ctx,width,height,defaultDepth,format) {
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		this.begin(ctx);
		var t = this.cache[this.position];
		if(format == null) {
			format = this.defaultFormat;
		}
		if(t == null || t.t == null && t.realloc == null || t.width != width || t.height != height || t.format != format) {
			if(t != null) {
				t.dispose();
			}
			var flags = [h3d_mat_TextureFlags.Target];
			t = new h3d_mat_Texture(width,height,flags,format);
			this.cache[this.position] = t;
		}
		t.depthBuffer = defaultDepth ? this.defaultDepthBuffer : null;
		t.setName(name);
		this.position++;
		return t;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.cache;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		this.cache = [];
		this.frame = -1;
	}
	,__class__: h3d_impl_TextureCache
};
var h3d_mat_BaseMaterial = function(shader) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	if(shader != null) {
		this.addPass(new h3d_mat_Pass("default",null)).addShader(shader);
	}
};
$hxClasses["h3d.mat.BaseMaterial"] = h3d_mat_BaseMaterial;
h3d_mat_BaseMaterial.__name__ = ["h3d","mat","BaseMaterial"];
h3d_mat_BaseMaterial.__interfaces__ = [hxbit_Serializable];
h3d_mat_BaseMaterial.prototype = {
	addPass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			prev = cur;
			cur = cur.nextPass;
		}
		if(prev == null) {
			this.passes = p;
		} else {
			prev.nextPass = p;
		}
		p.nextPass = null;
		return p;
	}
	,removePass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			if(cur == p) {
				if(prev == null) {
					this.passes = p.nextPass;
				} else {
					prev.nextPass = p.nextPass;
				}
				p.nextPass = null;
				return true;
			}
			prev = cur;
			cur = cur.nextPass;
		}
		return false;
	}
	,get_mainPass: function() {
		return this.passes;
	}
	,getPasses: function() {
		var p = this.passes;
		var out = [];
		while(p != null) {
			out.push(p);
			p = p.nextPass;
		}
		return HxOverrides.iter(out);
	}
	,getPass: function(name) {
		var p = this.passes;
		while(p != null) {
			if(p.name == name) {
				return p;
			}
			p = p.nextPass;
		}
		return null;
	}
	,allocPass: function(name,inheritMain) {
		if(inheritMain == null) {
			inheritMain = true;
		}
		var p = this.getPass(name);
		if(p != null) {
			return p;
		}
		var p1 = new h3d_mat_Pass(name,null,inheritMain ? this.passes : null);
		this.addPass(p1);
		return p1;
	}
	,clone: function(m) {
		if(m == null) {
			m = new h3d_mat_BaseMaterial();
		}
		m.passes.load(this.passes);
		m.name = this.name;
		return m;
	}
	,getCLID: function() {
		return h3d_mat_BaseMaterial.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.addKnownRef(this.passes);
		var s = this.name;
		if(s == null) {
			__ctx.out.b.push(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.b.push(v);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v);
			}
			var _this = __ctx.out;
			var b1 = _this.b;
			var b2 = b.b;
			var _g1 = 0;
			var _g = b.length;
			while(_g1 < _g) {
				var i = _g1++;
				_this.b.push(b2[i]);
			}
		}
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("passes");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PSerializable("h3d.mat.Pass"));
		schema.fieldsNames.push("name");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.isFinal = hxbit_Serializer.isClassFinal(h3d_mat_BaseMaterial.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		this.passes = __ctx.getRef(h3d_mat_Pass,h3d_mat_Pass.__clid);
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.name = tmp;
	}
	,__class__: h3d_mat_BaseMaterial
};
var h3d_mat_Face = $hxClasses["h3d.mat.Face"] = { __ename__ : true, __constructs__ : ["None","Back","Front","Both"] };
h3d_mat_Face.None = ["None",0];
h3d_mat_Face.None.toString = $estr;
h3d_mat_Face.None.__enum__ = h3d_mat_Face;
h3d_mat_Face.Back = ["Back",1];
h3d_mat_Face.Back.toString = $estr;
h3d_mat_Face.Back.__enum__ = h3d_mat_Face;
h3d_mat_Face.Front = ["Front",2];
h3d_mat_Face.Front.toString = $estr;
h3d_mat_Face.Front.__enum__ = h3d_mat_Face;
h3d_mat_Face.Both = ["Both",3];
h3d_mat_Face.Both.toString = $estr;
h3d_mat_Face.Both.__enum__ = h3d_mat_Face;
h3d_mat_Face.__empty_constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
var h3d_mat_Blend = $hxClasses["h3d.mat.Blend"] = { __ename__ : true, __constructs__ : ["One","Zero","SrcAlpha","SrcColor","DstAlpha","DstColor","OneMinusSrcAlpha","OneMinusSrcColor","OneMinusDstAlpha","OneMinusDstColor","ConstantColor","ConstantAlpha","OneMinusConstantColor","OneMinusConstantAlpha","SrcAlphaSaturate"] };
h3d_mat_Blend.One = ["One",0];
h3d_mat_Blend.One.toString = $estr;
h3d_mat_Blend.One.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.Zero = ["Zero",1];
h3d_mat_Blend.Zero.toString = $estr;
h3d_mat_Blend.Zero.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.SrcAlpha = ["SrcAlpha",2];
h3d_mat_Blend.SrcAlpha.toString = $estr;
h3d_mat_Blend.SrcAlpha.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.SrcColor = ["SrcColor",3];
h3d_mat_Blend.SrcColor.toString = $estr;
h3d_mat_Blend.SrcColor.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.DstAlpha = ["DstAlpha",4];
h3d_mat_Blend.DstAlpha.toString = $estr;
h3d_mat_Blend.DstAlpha.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.DstColor = ["DstColor",5];
h3d_mat_Blend.DstColor.toString = $estr;
h3d_mat_Blend.DstColor.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.OneMinusSrcAlpha = ["OneMinusSrcAlpha",6];
h3d_mat_Blend.OneMinusSrcAlpha.toString = $estr;
h3d_mat_Blend.OneMinusSrcAlpha.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.OneMinusSrcColor = ["OneMinusSrcColor",7];
h3d_mat_Blend.OneMinusSrcColor.toString = $estr;
h3d_mat_Blend.OneMinusSrcColor.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.OneMinusDstAlpha = ["OneMinusDstAlpha",8];
h3d_mat_Blend.OneMinusDstAlpha.toString = $estr;
h3d_mat_Blend.OneMinusDstAlpha.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.OneMinusDstColor = ["OneMinusDstColor",9];
h3d_mat_Blend.OneMinusDstColor.toString = $estr;
h3d_mat_Blend.OneMinusDstColor.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.ConstantColor = ["ConstantColor",10];
h3d_mat_Blend.ConstantColor.toString = $estr;
h3d_mat_Blend.ConstantColor.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.ConstantAlpha = ["ConstantAlpha",11];
h3d_mat_Blend.ConstantAlpha.toString = $estr;
h3d_mat_Blend.ConstantAlpha.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.OneMinusConstantColor = ["OneMinusConstantColor",12];
h3d_mat_Blend.OneMinusConstantColor.toString = $estr;
h3d_mat_Blend.OneMinusConstantColor.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.OneMinusConstantAlpha = ["OneMinusConstantAlpha",13];
h3d_mat_Blend.OneMinusConstantAlpha.toString = $estr;
h3d_mat_Blend.OneMinusConstantAlpha.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.SrcAlphaSaturate = ["SrcAlphaSaturate",14];
h3d_mat_Blend.SrcAlphaSaturate.toString = $estr;
h3d_mat_Blend.SrcAlphaSaturate.__enum__ = h3d_mat_Blend;
h3d_mat_Blend.__empty_constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
var h3d_mat_Compare = $hxClasses["h3d.mat.Compare"] = { __ename__ : true, __constructs__ : ["Always","Never","Equal","NotEqual","Greater","GreaterEqual","Less","LessEqual"] };
h3d_mat_Compare.Always = ["Always",0];
h3d_mat_Compare.Always.toString = $estr;
h3d_mat_Compare.Always.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.Never = ["Never",1];
h3d_mat_Compare.Never.toString = $estr;
h3d_mat_Compare.Never.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.Equal = ["Equal",2];
h3d_mat_Compare.Equal.toString = $estr;
h3d_mat_Compare.Equal.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.NotEqual = ["NotEqual",3];
h3d_mat_Compare.NotEqual.toString = $estr;
h3d_mat_Compare.NotEqual.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.Greater = ["Greater",4];
h3d_mat_Compare.Greater.toString = $estr;
h3d_mat_Compare.Greater.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.GreaterEqual = ["GreaterEqual",5];
h3d_mat_Compare.GreaterEqual.toString = $estr;
h3d_mat_Compare.GreaterEqual.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.Less = ["Less",6];
h3d_mat_Compare.Less.toString = $estr;
h3d_mat_Compare.Less.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.LessEqual = ["LessEqual",7];
h3d_mat_Compare.LessEqual.toString = $estr;
h3d_mat_Compare.LessEqual.__enum__ = h3d_mat_Compare;
h3d_mat_Compare.__empty_constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
var h3d_mat_StencilOp = $hxClasses["h3d.mat.StencilOp"] = { __ename__ : true, __constructs__ : ["Keep","Zero","Replace","Increment","IncrementWrap","Decrement","DecrementWrap","Invert"] };
h3d_mat_StencilOp.Keep = ["Keep",0];
h3d_mat_StencilOp.Keep.toString = $estr;
h3d_mat_StencilOp.Keep.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.Zero = ["Zero",1];
h3d_mat_StencilOp.Zero.toString = $estr;
h3d_mat_StencilOp.Zero.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.Replace = ["Replace",2];
h3d_mat_StencilOp.Replace.toString = $estr;
h3d_mat_StencilOp.Replace.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.Increment = ["Increment",3];
h3d_mat_StencilOp.Increment.toString = $estr;
h3d_mat_StencilOp.Increment.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.IncrementWrap = ["IncrementWrap",4];
h3d_mat_StencilOp.IncrementWrap.toString = $estr;
h3d_mat_StencilOp.IncrementWrap.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.Decrement = ["Decrement",5];
h3d_mat_StencilOp.Decrement.toString = $estr;
h3d_mat_StencilOp.Decrement.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.DecrementWrap = ["DecrementWrap",6];
h3d_mat_StencilOp.DecrementWrap.toString = $estr;
h3d_mat_StencilOp.DecrementWrap.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.Invert = ["Invert",7];
h3d_mat_StencilOp.Invert.toString = $estr;
h3d_mat_StencilOp.Invert.__enum__ = h3d_mat_StencilOp;
h3d_mat_StencilOp.__empty_constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
var h3d_mat_MipMap = $hxClasses["h3d.mat.MipMap"] = { __ename__ : true, __constructs__ : ["None","Nearest","Linear"] };
h3d_mat_MipMap.None = ["None",0];
h3d_mat_MipMap.None.toString = $estr;
h3d_mat_MipMap.None.__enum__ = h3d_mat_MipMap;
h3d_mat_MipMap.Nearest = ["Nearest",1];
h3d_mat_MipMap.Nearest.toString = $estr;
h3d_mat_MipMap.Nearest.__enum__ = h3d_mat_MipMap;
h3d_mat_MipMap.Linear = ["Linear",2];
h3d_mat_MipMap.Linear.toString = $estr;
h3d_mat_MipMap.Linear.__enum__ = h3d_mat_MipMap;
h3d_mat_MipMap.__empty_constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
var h3d_mat_Filter = $hxClasses["h3d.mat.Filter"] = { __ename__ : true, __constructs__ : ["Nearest","Linear"] };
h3d_mat_Filter.Nearest = ["Nearest",0];
h3d_mat_Filter.Nearest.toString = $estr;
h3d_mat_Filter.Nearest.__enum__ = h3d_mat_Filter;
h3d_mat_Filter.Linear = ["Linear",1];
h3d_mat_Filter.Linear.toString = $estr;
h3d_mat_Filter.Linear.__enum__ = h3d_mat_Filter;
h3d_mat_Filter.__empty_constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
var h3d_mat_Wrap = $hxClasses["h3d.mat.Wrap"] = { __ename__ : true, __constructs__ : ["Clamp","Repeat"] };
h3d_mat_Wrap.Clamp = ["Clamp",0];
h3d_mat_Wrap.Clamp.toString = $estr;
h3d_mat_Wrap.Clamp.__enum__ = h3d_mat_Wrap;
h3d_mat_Wrap.Repeat = ["Repeat",1];
h3d_mat_Wrap.Repeat.toString = $estr;
h3d_mat_Wrap.Repeat.__enum__ = h3d_mat_Wrap;
h3d_mat_Wrap.__empty_constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
var h3d_mat_Operation = $hxClasses["h3d.mat.Operation"] = { __ename__ : true, __constructs__ : ["Add","Sub","ReverseSub"] };
h3d_mat_Operation.Add = ["Add",0];
h3d_mat_Operation.Add.toString = $estr;
h3d_mat_Operation.Add.__enum__ = h3d_mat_Operation;
h3d_mat_Operation.Sub = ["Sub",1];
h3d_mat_Operation.Sub.toString = $estr;
h3d_mat_Operation.Sub.__enum__ = h3d_mat_Operation;
h3d_mat_Operation.ReverseSub = ["ReverseSub",2];
h3d_mat_Operation.ReverseSub.toString = $estr;
h3d_mat_Operation.ReverseSub.__enum__ = h3d_mat_Operation;
h3d_mat_Operation.__empty_constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub];
var h3d_mat_TextureFlags = $hxClasses["h3d.mat.TextureFlags"] = { __ename__ : true, __constructs__ : ["Target","Cube","MipMapped","ManualMipMapGen","IsNPOT","NoAlloc","Dynamic","AlphaPremultiplied","WasCleared","Loading","Serialize"] };
h3d_mat_TextureFlags.Target = ["Target",0];
h3d_mat_TextureFlags.Target.toString = $estr;
h3d_mat_TextureFlags.Target.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.Cube = ["Cube",1];
h3d_mat_TextureFlags.Cube.toString = $estr;
h3d_mat_TextureFlags.Cube.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.MipMapped = ["MipMapped",2];
h3d_mat_TextureFlags.MipMapped.toString = $estr;
h3d_mat_TextureFlags.MipMapped.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.ManualMipMapGen = ["ManualMipMapGen",3];
h3d_mat_TextureFlags.ManualMipMapGen.toString = $estr;
h3d_mat_TextureFlags.ManualMipMapGen.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.IsNPOT = ["IsNPOT",4];
h3d_mat_TextureFlags.IsNPOT.toString = $estr;
h3d_mat_TextureFlags.IsNPOT.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.NoAlloc = ["NoAlloc",5];
h3d_mat_TextureFlags.NoAlloc.toString = $estr;
h3d_mat_TextureFlags.NoAlloc.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.Dynamic = ["Dynamic",6];
h3d_mat_TextureFlags.Dynamic.toString = $estr;
h3d_mat_TextureFlags.Dynamic.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.AlphaPremultiplied = ["AlphaPremultiplied",7];
h3d_mat_TextureFlags.AlphaPremultiplied.toString = $estr;
h3d_mat_TextureFlags.AlphaPremultiplied.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.WasCleared = ["WasCleared",8];
h3d_mat_TextureFlags.WasCleared.toString = $estr;
h3d_mat_TextureFlags.WasCleared.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.Loading = ["Loading",9];
h3d_mat_TextureFlags.Loading.toString = $estr;
h3d_mat_TextureFlags.Loading.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.Serialize = ["Serialize",10];
h3d_mat_TextureFlags.Serialize.toString = $estr;
h3d_mat_TextureFlags.Serialize.__enum__ = h3d_mat_TextureFlags;
h3d_mat_TextureFlags.__empty_constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize];
var h3d_mat_Defaults = function() { };
$hxClasses["h3d.mat.Defaults"] = h3d_mat_Defaults;
h3d_mat_Defaults.__name__ = ["h3d","mat","Defaults"];
h3d_mat_Defaults.get_shadowShader = function() {
	var s = h3d_mat_Defaults.shadowShader;
	if(s == null) {
		s = new h3d_shader_Shadow();
		h3d_mat_Defaults.set_shadowShader(s);
	}
	return s;
};
h3d_mat_Defaults.set_shadowShader = function(s) {
	return h3d_mat_Defaults.shadowShader = s;
};
h3d_mat_Defaults.makeVolumeDecal = function(bounds) {
	return new h3d_shader_VolumeDecal(bounds.xMax - bounds.xMin,bounds.yMax - bounds.yMin);
};
var h3d_mat_DepthBuffer = function(width,height) {
	this.width = width;
	this.height = height;
	if(width >= 0) {
		this.b = h3d_Engine.CURRENT.driver.allocDepthBuffer(this);
	}
};
$hxClasses["h3d.mat.DepthBuffer"] = h3d_mat_DepthBuffer;
h3d_mat_DepthBuffer.__name__ = ["h3d","mat","DepthBuffer"];
h3d_mat_DepthBuffer.getDefault = function() {
	return h3d_Engine.CURRENT.driver.getDefaultDepthBuffer();
};
h3d_mat_DepthBuffer.prototype = {
	dispose: function() {
		if(this.b != null) {
			h3d_Engine.CURRENT.driver.disposeDepthBuffer(this);
			this.b = null;
		}
	}
	,isDisposed: function() {
		return this.b == null;
	}
	,__class__: h3d_mat_DepthBuffer
};
var h3d_mat_Material = function(texture) {
	this.mshader = new h3d_shader_BaseMesh();
	this.set_blendMode(h2d_BlendMode.None);
	h3d_mat_BaseMaterial.call(this,this.mshader);
	this.set_texture(texture);
};
$hxClasses["h3d.mat.Material"] = h3d_mat_Material;
h3d_mat_Material.__name__ = ["h3d","mat","Material"];
h3d_mat_Material.__super__ = h3d_mat_BaseMaterial;
h3d_mat_Material.prototype = $extend(h3d_mat_BaseMaterial.prototype,{
	get_specularPower: function() {
		return this.mshader.specularPower__;
	}
	,set_specularPower: function(v) {
		return this.mshader.specularPower__ = v;
	}
	,get_specularAmount: function() {
		return this.mshader.specularAmount__;
	}
	,set_specularAmount: function(v) {
		return this.mshader.specularAmount__ = v;
	}
	,get_color: function() {
		return this.mshader.color__;
	}
	,set_color: function(v) {
		return this.mshader.color__ = v;
	}
	,get_shadows: function() {
		if(this.castShadows) {
			return this.receiveShadows;
		} else {
			return false;
		}
	}
	,set_shadows: function(v) {
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		return v;
	}
	,set_castShadows: function(v) {
		if(this.castShadows == v) {
			return v;
		}
		if(this.passes != null) {
			if(v) {
				this.addPass(new h3d_mat_Pass("shadow",null,this.passes));
			} else {
				this.removePass(this.getPass("shadow"));
			}
		}
		return this.castShadows = v;
	}
	,set_receiveShadows: function(v) {
		if(v == this.receiveShadows) {
			return v;
		}
		if(this.passes != null) {
			var shadows = h3d_mat_Defaults.get_shadowShader();
			if(v) {
				this.passes.addShader(shadows);
			} else {
				this.passes.removeShader(shadows);
			}
		}
		return this.receiveShadows = v;
	}
	,clone: function(m) {
		var m1 = m == null ? new h3d_mat_Material() : m;
		h3d_mat_BaseMaterial.prototype.clone.call(this,m1);
		m1.set_castShadows(this.castShadows);
		m1.set_receiveShadows(this.receiveShadows);
		m1.set_texture(this.get_texture());
		if(this.textureShader != null) {
			var _this = m1.textureShader;
			_this.constModified = true;
			_this.additive__ = this.textureShader.additive__;
			var _this1 = m1.textureShader;
			_this1.constModified = true;
			_this1.killAlpha__ = this.textureShader.killAlpha__;
			m1.textureShader.killAlphaThreshold__ = this.textureShader.killAlphaThreshold__;
		}
		m1.mshader.color__ = this.mshader.color__;
		m1.set_blendMode(this.blendMode);
		return m1;
	}
	,set_blendMode: function(v) {
		if(this.passes != null) {
			this.passes.setBlendMode(v);
			switch(v[1]) {
			case 0:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("default");
				break;
			case 1:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("alpha");
				break;
			case 2:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			case 3:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			case 4:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			case 5:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			case 6:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			}
		}
		return this.blendMode = v;
	}
	,get_specularTexture: function() {
		if(this.specularShader == null) {
			return null;
		} else {
			return this.specularShader.texture__;
		}
	}
	,get_texture: function() {
		if(this.textureShader == null) {
			return null;
		} else {
			return this.textureShader.texture__;
		}
	}
	,set_texture: function(t) {
		if(t == null) {
			if(this.textureShader != null) {
				this.passes.removeShader(this.textureShader);
				this.textureShader = null;
			}
		} else {
			if(this.textureShader == null) {
				this.textureShader = new h3d_shader_Texture();
				this.passes.addShader(this.textureShader);
			}
			this.textureShader.texture__ = t;
		}
		return t;
	}
	,set_specularTexture: function(t) {
		if(t == null) {
			if(this.specularShader != null) {
				this.passes.removeShader(this.specularShader);
				this.specularShader = null;
			}
		} else {
			if(this.specularShader == null) {
				this.specularShader = new h3d_shader_SpecularTexture();
				this.passes.addShader(this.specularShader);
			}
			this.specularShader.texture__ = t;
		}
		return t;
	}
	,set_props: function(p) {
		this.props = p;
		this.refreshProps();
		return p;
	}
	,refreshProps: function() {
		if(this.props != null && this.passes != null) {
			h3d_mat_MaterialSetup.current.applyProps(this);
		}
	}
	,customSerialize: function(ctx) {
		var v = this.blendMode[1];
		if(v >= 0 && v < 128) {
			ctx.out.b.push(v);
		} else {
			ctx.out.b.push(128);
			ctx.out.addInt32(v);
		}
		ctx.out.b.push(this.castShadows ? 1 : 0);
		ctx.out.b.push(this.receiveShadows ? 1 : 0);
		ctx.addDynamic(this.props);
	}
	,customUnserialize: function(ctx) {
		var last = this.passes.shaders;
		while(last.next != null) last = last.next;
		this.mshader = last.s;
		var old = this.passes;
		this.passes = null;
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		this.set_blendMode(Type.createEnumIndex(h2d_BlendMode,v,null));
		this.set_castShadows(ctx.input.b[ctx.inPos++] != 0);
		this.set_receiveShadows(ctx.input.b[ctx.inPos++] != 0);
		this.set_props(ctx.getDynamic());
		this.passes = old;
	}
	,getCLID: function() {
		return h3d_mat_Material.__clid;
	}
	,serialize: function(__ctx) {
		h3d_mat_BaseMaterial.prototype.serialize.call(this,__ctx);
		this.customSerialize(__ctx);
	}
	,getSerializeSchema: function() {
		var schema = h3d_mat_BaseMaterial.prototype.getSerializeSchema.call(this);
		schema.isFinal = hxbit_Serializer.isClassFinal(h3d_mat_Material.__clid);
		return schema;
	}
	,unserialize: function(__ctx) {
		h3d_mat_BaseMaterial.prototype.unserialize.call(this,__ctx);
		this.customUnserialize(__ctx);
	}
	,__class__: h3d_mat_Material
});
var h3d_mat_MaterialDatabase = function(file) {
	this.file = file;
};
$hxClasses["h3d.mat.MaterialDatabase"] = h3d_mat_MaterialDatabase;
h3d_mat_MaterialDatabase.__name__ = ["h3d","mat","MaterialDatabase"];
h3d_mat_MaterialDatabase.prototype = {
	getPath: function(material,setup) {
		var path = material.model == null ? [] : material.model.entry.get_path().split("/");
		path.pop();
		path.push(material.name);
		path.unshift(setup.name);
		return path;
	}
	,load: function() {
		var tmp;
		try {
			tmp = JSON.parse(hxd_res_Loader.currentInstance.load(this.file).toText());
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,hxd_fs_NotFound) ) {
				tmp = { type : "materialDB"};
			} else throw(e);
		}
		this.db = tmp;
	}
	,save: function() {
		throw new js__$Boot_HaxeError("Can't save material props database " + this.file);
	}
	,loadProps: function(material,setup) {
		if(this.db == null) {
			this.load();
		}
		var path = this.getPath(material,setup);
		var root = this.db;
		while(path.length > 0) {
			root = Reflect.field(root,path.shift());
			if(root == null) {
				return null;
			}
		}
		return root;
	}
	,saveProps: function(material,setup) {
		if(this.db == null) {
			this.load();
		}
		var path = this.getPath(material,setup);
		var root = this.db;
		var prevs = [];
		var _g1 = 0;
		var _g = path.length - 1;
		while(_g1 < _g) {
			var i = _g1++;
			var next = Reflect.field(root,path[i]);
			if(next == null) {
				next = { };
				root[path[i]] = next;
			}
			prevs.push(root);
			root = next;
		}
		var name = path.pop();
		Reflect.deleteField(root,name);
		var currentProps = material.props;
		setup.initModelMaterial(material);
		if(currentProps == null || Std.string(material.props) == Std.string(currentProps)) {
			while(path.length > 0) {
				var name1 = path.pop();
				var root1 = prevs.pop();
				if(Reflect.fields(Reflect.field(root1,name1)).length != 0) {
					break;
				}
				Reflect.deleteField(root1,name1);
			}
		} else {
			root[name] = currentProps;
		}
		material.set_props(currentProps);
		this.save();
	}
	,__class__: h3d_mat_MaterialDatabase
};
var h3d_mat_MaterialSetup = function(name) {
	if(this.database == null) {
		this.database = new h3d_mat_MaterialDatabase("materials.json");
	}
	this.name = name;
};
$hxClasses["h3d.mat.MaterialSetup"] = h3d_mat_MaterialSetup;
h3d_mat_MaterialSetup.__name__ = ["h3d","mat","MaterialSetup"];
h3d_mat_MaterialSetup.prototype = {
	createRenderer: function() {
		return new h3d_scene_Renderer();
	}
	,createLightSystem: function() {
		return new h3d_pass_LightSystem();
	}
	,initModelMaterial: function(material) {
		var props = this.database.loadProps(material,this);
		if(props == null) {
			props = this.getDefaults();
			var props1 = props;
			var _g = material.blendMode;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				props1.kind = "Alpha";
				break;
			case 2:
				props1.kind = "Add";
				props1.culled = false;
				props1.shadows = false;
				props1.lighted = false;
				break;
			default:
				throw new js__$Boot_HaxeError("Unsupported HMD material " + Std.string(material.blendMode));
			}
		}
		material.set_props(props);
	}
	,saveModelMaterial: function(material) {
		this.database.saveProps(material,this);
	}
	,initMeshAfterLoad: function(mesh) {
	}
	,getDefaults: function(type) {
		var props;
		if(type == null) {
			props = { kind : "Opaque", shadows : true, culled : true, lighted : true};
		} else {
			switch(type) {
			case "particles3D":
				props = { kind : "Opaque", shadows : false, culled : false, lighted : true};
				break;
			case "trail3D":
				props = { kind : "Opaque", shadows : false, culled : false, lighted : true};
				break;
			default:
				props = { kind : "Opaque", shadows : true, culled : true, lighted : true};
			}
		}
		return props;
	}
	,applyProps: function(m) {
		var props = m.props;
		var mainPass = m.passes;
		var _g = props.kind;
		switch(_g) {
		case "Add":
			mainPass.setBlendMode(h2d_BlendMode.Add);
			mainPass.set_depthWrite(false);
			mainPass.setPassName("additive");
			break;
		case "Alpha":
			mainPass.setBlendMode(h2d_BlendMode.Alpha);
			mainPass.set_depthWrite(true);
			mainPass.setPassName("alpha");
			break;
		case "AlphaKill":case "Opaque":
			mainPass.setBlendMode(h2d_BlendMode.None);
			mainPass.set_depthWrite(true);
			mainPass.setPassName("default");
			break;
		case "SoftAdd":
			mainPass.setBlendMode(h2d_BlendMode.SoftAdd);
			mainPass.set_depthWrite(false);
			mainPass.setPassName("additive");
			break;
		}
		var tshader = m.textureShader;
		if(tshader != null) {
			tshader.constModified = true;
			tshader.killAlpha__ = props.kind == "AlphaKill";
			tshader.killAlphaThreshold__ = 0.5;
		}
		mainPass.set_culling(props.culled ? h3d_mat_Face.Back : h3d_mat_Face.None);
		mainPass.enableLights = props.lighted;
		var v = props.shadows;
		m.set_castShadows(v);
		m.set_receiveShadows(v);
		if(m.castShadows && m.receiveShadows) {
			m.getPass("shadow").set_culling(mainPass.culling);
		}
	}
	,editMaterial: function(props) {
		return $("\n\t\t\t<dl>\n\t\t\t\t<dt>Kind</dt>\n\t\t\t\t<dd>\n\t\t\t\t\t<select field=\"kind\">\n\t\t\t\t\t\t<option value=\"Opaque\">Opaque</option>\n\t\t\t\t\t\t<option value=\"Alpha\">Alpha</option>\n\t\t\t\t\t\t<option value=\"AlphaKill\">AlphaKill</option>\n\t\t\t\t\t\t<option value=\"Add\">Add</option>\n\t\t\t\t\t\t<option value=\"SoftAdd\">SoftAdd</option>\n\t\t\t\t\t</select>\n\t\t\t\t</dd>\n\t\t\t\t<dt>Shadows</dt><dd><input type=\"checkbox\" field=\"shadows\"/></dd>\n\t\t\t\t<dt>Culled</dt><dd><input type=\"checkbox\" field=\"culled\"/></dd>\n\t\t\t\t<dt>Lighted</dt><dd><input type=\"checkbox\" field=\"lighted\"/></dd>\n\t\t\t</dl>\n\t\t");
	}
	,__class__: h3d_mat_MaterialSetup
};
var h3d_mat_Pass = function(name,shaders,parent) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.bits = 0;
	this.parentPass = parent;
	this.shaders = shaders;
	this.setPassName(name);
	this.set_culling(h3d_mat_Face.Back);
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	this.set_blendSrc(src);
	this.set_blendAlphaSrc(src);
	this.set_blendDst(dst);
	this.set_blendAlphaDst(dst);
	this.depth(true,h3d_mat_Compare.Less);
	this.set_blendOp(this.set_blendAlphaOp(h3d_mat_Operation.Add));
	this.set_colorMask(15);
};
$hxClasses["h3d.mat.Pass"] = h3d_mat_Pass;
h3d_mat_Pass.__name__ = ["h3d","mat","Pass"];
h3d_mat_Pass.__interfaces__ = [hxbit_Serializable];
h3d_mat_Pass.getCulling = function(v) {
	return v & 3;
};
h3d_mat_Pass.getDepthWrite = function(v) {
	return v >> 2 & 1;
};
h3d_mat_Pass.getDepthTest = function(v) {
	return v >> 3 & 7;
};
h3d_mat_Pass.getBlendSrc = function(v) {
	return v >> 6 & 15;
};
h3d_mat_Pass.getBlendDst = function(v) {
	return v >> 10 & 15;
};
h3d_mat_Pass.getBlendAlphaSrc = function(v) {
	return v >> 14 & 15;
};
h3d_mat_Pass.getBlendAlphaDst = function(v) {
	return v >> 18 & 15;
};
h3d_mat_Pass.getBlendOp = function(v) {
	return v >> 22 & 3;
};
h3d_mat_Pass.getBlendAlphaOp = function(v) {
	return v >> 24 & 3;
};
h3d_mat_Pass.getColorMask = function(v) {
	return v >> 26 & 15;
};
h3d_mat_Pass.prototype = {
	load: function(p) {
		this.name = p.name;
		this.passId = p.passId;
		this.bits = p.bits;
		this.enableLights = p.enableLights;
		this.dynamicParameters = p.dynamicParameters;
		this.set_culling(p.culling);
		this.set_depthWrite(p.depthWrite);
		this.set_depthTest(p.depthTest);
		this.set_blendSrc(p.blendSrc);
		this.set_blendDst(p.blendDst);
		this.set_blendOp(p.blendOp);
		this.set_blendAlphaSrc(p.blendAlphaSrc);
		this.set_blendAlphaDst(p.blendAlphaDst);
		this.set_blendAlphaOp(p.blendAlphaOp);
		this.set_colorMask(p.colorMask);
		if(p.stencil != null) {
			if(this.stencil == null) {
				this.stencil = new h3d_mat_Stencil();
			}
			this.stencil.load(p.stencil);
		}
	}
	,setPassName: function(name) {
		this.name = name;
		this.passId = hxsl_Globals.allocID(name);
	}
	,blend: function(src,dst) {
		this.set_blendSrc(src);
		this.set_blendAlphaSrc(src);
		this.set_blendDst(dst);
		this.set_blendAlphaDst(dst);
	}
	,setBlendMode: function(b) {
		switch(b[1]) {
		case 0:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 1:
			var src1 = h3d_mat_Blend.SrcAlpha;
			var dst1 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src1);
			this.set_blendAlphaSrc(src1);
			this.set_blendDst(dst1);
			this.set_blendAlphaDst(dst1);
			break;
		case 2:
			var src2 = h3d_mat_Blend.SrcAlpha;
			var dst2 = h3d_mat_Blend.One;
			this.set_blendSrc(src2);
			this.set_blendAlphaSrc(src2);
			this.set_blendDst(dst2);
			this.set_blendAlphaDst(dst2);
			break;
		case 3:
			var src3 = h3d_mat_Blend.OneMinusDstColor;
			var dst3 = h3d_mat_Blend.One;
			this.set_blendSrc(src3);
			this.set_blendAlphaSrc(src3);
			this.set_blendDst(dst3);
			this.set_blendAlphaDst(dst3);
			break;
		case 4:
			var src4 = h3d_mat_Blend.DstColor;
			var dst4 = h3d_mat_Blend.Zero;
			this.set_blendSrc(src4);
			this.set_blendAlphaSrc(src4);
			this.set_blendDst(dst4);
			this.set_blendAlphaDst(dst4);
			break;
		case 5:
			var src5 = h3d_mat_Blend.Zero;
			var dst5 = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src5);
			this.set_blendAlphaSrc(src5);
			this.set_blendDst(dst5);
			this.set_blendAlphaDst(dst5);
			break;
		case 6:
			var src6 = h3d_mat_Blend.One;
			var dst6 = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src6);
			this.set_blendAlphaSrc(src6);
			this.set_blendDst(dst6);
			this.set_blendAlphaDst(dst6);
			break;
		}
	}
	,depth: function(write,test) {
		this.set_depthWrite(write);
		this.set_depthTest(test);
	}
	,setColorMask: function(r,g,b,a) {
		this.set_colorMask((r ? 1 : 0) | (g ? 2 : 0) | (b ? 4 : 0) | (a ? 8 : 0));
	}
	,addShader: function(s) {
		this.shaders = new hxsl_ShaderList(s,this.shaders);
		return s;
	}
	,addShaderAt: function(s,index) {
		var prev = null;
		var cur = this.shaders;
		while(index > 0 && cur != this.parentShaders) {
			prev = cur;
			cur = cur.next;
			--index;
		}
		if(prev == null) {
			this.shaders = new hxsl_ShaderList(s,cur);
		} else {
			prev.next = new hxsl_ShaderList(s,cur);
		}
		return s;
	}
	,removeShader: function(s) {
		var sl = this.shaders;
		var prev = null;
		while(sl != null) {
			if(sl.s == s) {
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		return false;
	}
	,getShader: function(t) {
		var s = this.shaders;
		while(s != this.parentShaders) {
			var value = s.s;
			var sh = (value instanceof t) ? value : null;
			if(sh != null) {
				return sh;
			}
			s = s.next;
		}
		return null;
	}
	,getShaderByName: function(name) {
		var s = this.shaders;
		while(s != this.parentShaders) {
			if(js_Boot.__instanceof(s.s,hxsl_DynamicShader)) {
				haxe_Log.trace(s.s.shader.data.name,{ fileName : "Pass.hx", lineNumber : 160, className : "h3d.mat.Pass", methodName : "getShaderByName"});
			}
			if(s.s.shader.data.name == name) {
				return s.s;
			}
			s = s.next;
		}
		return null;
	}
	,getShaders: function() {
		return new hxsl__$ShaderList_ShaderIterator(this.shaders,this.parentShaders);
	}
	,getShadersRec: function() {
		if(this.parentPass == null || this.parentShaders == this.parentPass.shaders) {
			return this.shaders;
		}
		var s = this.shaders;
		var prev = null;
		while(s != null && s != this.parentShaders) {
			prev = s;
			s = s.next;
		}
		this.parentShaders = this.parentPass.shaders;
		if(prev == null) {
			this.shaders = this.parentShaders;
		} else {
			prev.next = this.parentShaders;
		}
		return this.shaders;
	}
	,clone: function() {
		var p = new h3d_mat_Pass(this.name,this.shaders.clone());
		p.bits = this.bits;
		p.enableLights = this.enableLights;
		if(this.stencil != null) {
			p.stencil = this.stencil.clone();
		}
		return p;
	}
	,getDebugShaderCode: function(scene,toHxsl) {
		if(toHxsl == null) {
			toHxsl = true;
		}
		var shader = scene.renderer.compileShader(this);
		if(toHxsl) {
			var toString = function(s) {
				return hxsl_Printer.shaderToString(s,true);
			};
			return "// vertex:\n" + toString(shader.vertex.data) + "\n\nfragment:\n" + toString(shader.fragment.data);
		} else {
			return h3d_Engine.CURRENT.driver.getNativeShaderCode(shader);
		}
	}
	,customSerialize: function(ctx) {
		var ctx1 = ctx;
		var s = this.shaders;
		while(s != this.parentShaders) {
			ctx1.addShader(s.s);
			s = s.next;
		}
		ctx1.addShader(null);
	}
	,customUnserialize: function(ctx) {
		var ctx1 = ctx;
		var head = null;
		while(true) {
			var s = ctx1.getShader();
			if(s == null) {
				break;
			}
			var sl = new hxsl_ShaderList(s);
			if(head == null) {
				head = this.shaders = sl;
			} else {
				head.next = sl;
				head = sl;
			}
		}
		this.setPassName(this.name);
		this.loadBits(this.bits);
	}
	,getCLID: function() {
		return h3d_mat_Pass.__clid;
	}
	,serialize: function(__ctx) {
		var s = this.name;
		if(s == null) {
			__ctx.out.b.push(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.b.push(v);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v);
			}
			var _this = __ctx.out;
			var b1 = _this.b;
			var b2 = b.b;
			var _g1 = 0;
			var _g = b.length;
			while(_g1 < _g) {
				var i = _g1++;
				_this.b.push(b2[i]);
			}
		}
		var v1 = this.bits;
		if(v1 >= 0 && v1 < 128) {
			__ctx.out.b.push(v1);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v1);
		}
		__ctx.addKnownRef(this.parentPass);
		__ctx.addKnownRef(this.nextPass);
		__ctx.out.b.push(this.enableLights ? 1 : 0);
		__ctx.out.b.push(this.dynamicParameters ? 1 : 0);
		__ctx.addKnownRef(this.stencil);
		this.customSerialize(__ctx);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("name");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("bits");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("parentPass");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PSerializable("h3d.mat.Pass"));
		schema.fieldsNames.push("nextPass");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PSerializable("h3d.mat.Pass"));
		schema.fieldsNames.push("enableLights");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("dynamicParameters");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("stencil");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PSerializable("h3d.mat.Stencil"));
		schema.isFinal = hxbit_Serializer.isClassFinal(h3d_mat_Pass.__clid);
		return schema;
	}
	,unserializeInit: function() {
		this.bits = 0;
	}
	,unserialize: function(__ctx) {
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.name = tmp;
		var v1 = __ctx.input.b[__ctx.inPos++];
		if(v1 == 128) {
			v1 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.bits = v1;
		this.parentPass = __ctx.getRef(h3d_mat_Pass,h3d_mat_Pass.__clid);
		this.nextPass = __ctx.getRef(h3d_mat_Pass,h3d_mat_Pass.__clid);
		this.enableLights = __ctx.input.b[__ctx.inPos++] != 0;
		this.dynamicParameters = __ctx.input.b[__ctx.inPos++] != 0;
		this.stencil = __ctx.getRef(h3d_mat_Stencil,h3d_mat_Stencil.__clid);
		this.customUnserialize(__ctx);
	}
	,set_culling: function(v) {
		this.bits = this.bits & -4 | v[1];
		return this.culling = v;
	}
	,set_depthWrite: function(v) {
		this.bits = this.bits & -5 | (v ? 1 : 0) << 2;
		return this.depthWrite = v;
	}
	,set_depthTest: function(v) {
		this.bits = this.bits & -57 | v[1] << 3;
		return this.depthTest = v;
	}
	,set_blendSrc: function(v) {
		this.bits = this.bits & -961 | v[1] << 6;
		return this.blendSrc = v;
	}
	,set_blendDst: function(v) {
		this.bits = this.bits & -15361 | v[1] << 10;
		return this.blendDst = v;
	}
	,set_blendAlphaSrc: function(v) {
		this.bits = this.bits & -245761 | v[1] << 14;
		return this.blendAlphaSrc = v;
	}
	,set_blendAlphaDst: function(v) {
		this.bits = this.bits & -3932161 | v[1] << 18;
		return this.blendAlphaDst = v;
	}
	,set_blendOp: function(v) {
		this.bits = this.bits & -12582913 | v[1] << 22;
		return this.blendOp = v;
	}
	,set_blendAlphaOp: function(v) {
		this.bits = this.bits & -50331649 | v[1] << 24;
		return this.blendAlphaOp = v;
	}
	,set_colorMask: function(v) {
		this.bits = this.bits & -1006632961 | (v & 15) << 26;
		return this.colorMask = v;
	}
	,loadBits: function(bits) {
		this.bits = bits;
		this.set_culling(Type.createEnumIndex(h3d_mat_Face,this.bits & 3));
		this.set_depthWrite((this.bits >> 2 & 1) != 0);
		this.set_depthTest(Type.createEnumIndex(h3d_mat_Compare,this.bits >> 3 & 7));
		this.set_blendSrc(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 6 & 15));
		this.set_blendDst(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 10 & 15));
		this.set_blendAlphaSrc(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 14 & 15));
		this.set_blendAlphaDst(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 18 & 15));
		this.set_blendOp(Type.createEnumIndex(h3d_mat_Operation,this.bits >> 22 & 3));
		this.set_blendAlphaOp(Type.createEnumIndex(h3d_mat_Operation,this.bits >> 24 & 3));
		this.set_colorMask(this.bits >> 26 & 15);
	}
	,__class__: h3d_mat_Pass
};
var h3d_mat_Stencil = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.opBits = 0;
	this.backRefBits = 0;
	this.frontRefBits = 0;
	this.setFunc(h3d_mat_Face.Both,h3d_mat_Compare.Always,0,255);
	this.setOp(h3d_mat_Face.Both,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep);
	this.setMask(h3d_mat_Face.Both,255);
};
$hxClasses["h3d.mat.Stencil"] = h3d_mat_Stencil;
h3d_mat_Stencil.__name__ = ["h3d","mat","Stencil"];
h3d_mat_Stencil.__interfaces__ = [hxbit_Serializable];
h3d_mat_Stencil.getFrontTest = function(v) {
	return v & 7;
};
h3d_mat_Stencil.getFrontSTfail = function(v) {
	return v >> 3 & 7;
};
h3d_mat_Stencil.getFrontDPfail = function(v) {
	return v >> 6 & 7;
};
h3d_mat_Stencil.getFrontDPpass = function(v) {
	return v >> 9 & 7;
};
h3d_mat_Stencil.getFrontRef = function(v) {
	return v & 255;
};
h3d_mat_Stencil.getFrontReadMask = function(v) {
	return v >> 8 & 255;
};
h3d_mat_Stencil.getFrontWriteMask = function(v) {
	return v >> 16 & 255;
};
h3d_mat_Stencil.getBackTest = function(v) {
	return v >> 12 & 7;
};
h3d_mat_Stencil.getBackSTfail = function(v) {
	return v >> 15 & 7;
};
h3d_mat_Stencil.getBackDPfail = function(v) {
	return v >> 18 & 7;
};
h3d_mat_Stencil.getBackDPpass = function(v) {
	return v >> 21 & 7;
};
h3d_mat_Stencil.getBackRef = function(v) {
	return v & 255;
};
h3d_mat_Stencil.getBackReadMask = function(v) {
	return v >> 8 & 255;
};
h3d_mat_Stencil.getBackWriteMask = function(v) {
	return v >> 16 & 255;
};
h3d_mat_Stencil.prototype = {
	setOp: function(face,stfail,dpfail,dppass) {
		if(face == null) {
			face = h3d_mat_Face.Both;
		}
		if(face == null) {
			throw new js__$Boot_HaxeError("Invalid face (" + Std.string(face) + "), should be one of [Front, Back, Both]");
		} else {
			switch(face[1]) {
			case 1:
				this.set_backSTfail(stfail);
				this.set_backDPfail(dpfail);
				this.set_backDPpass(dppass);
				break;
			case 2:
				this.set_frontSTfail(stfail);
				this.set_frontDPfail(dpfail);
				this.set_frontDPpass(dppass);
				break;
			case 3:
				this.set_frontSTfail(this.set_backSTfail(stfail));
				this.set_frontDPfail(this.set_backDPfail(dpfail));
				this.set_frontDPpass(this.set_backDPpass(dppass));
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid face (" + Std.string(face) + "), should be one of [Front, Back, Both]");
			}
		}
	}
	,setMask: function(face,mask) {
		if(face == null) {
			face = h3d_mat_Face.Both;
		}
		if(face == null) {
			throw new js__$Boot_HaxeError("Invalid face (" + Std.string(face) + "), should be one of [Front, Back, Both]");
		} else {
			switch(face[1]) {
			case 1:
				this.set_backWriteMask(mask);
				break;
			case 2:
				this.set_frontWriteMask(mask);
				break;
			case 3:
				this.set_frontWriteMask(this.set_backWriteMask(mask));
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid face (" + Std.string(face) + "), should be one of [Front, Back, Both]");
			}
		}
	}
	,setFunc: function(face,test,ref,mask) {
		if(face == null) {
			face = h3d_mat_Face.Both;
		}
		if(face == null) {
			throw new js__$Boot_HaxeError("Invalid face (" + Std.string(face) + "), should be one of [Front, Back, Both]");
		} else {
			switch(face[1]) {
			case 1:
				this.set_backTest(test);
				this.set_backRef(ref);
				this.set_backReadMask(mask);
				break;
			case 2:
				this.set_frontTest(test);
				this.set_frontRef(ref);
				this.set_frontReadMask(mask);
				break;
			case 3:
				this.set_frontTest(this.set_backTest(test));
				this.set_frontRef(this.set_backRef(ref));
				this.set_frontReadMask(this.set_backReadMask(mask));
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid face (" + Std.string(face) + "), should be one of [Front, Back, Both]");
			}
		}
	}
	,clone: function() {
		var s = new h3d_mat_Stencil();
		s.frontRefBits = this.frontRefBits;
		s.backRefBits = this.backRefBits;
		s.opBits = this.opBits;
		return s;
	}
	,load: function(s) {
		this.frontRefBits = s.frontRefBits;
		this.backRefBits = s.backRefBits;
		this.opBits = s.opBits;
	}
	,customSerialize: function(ctx) {
	}
	,customUnserialize: function(ctx) {
		this.loadFrontRefBits(this.frontRefBits);
		this.loadBackRefBits(this.backRefBits);
		this.loadOpBits(this.opBits);
	}
	,getCLID: function() {
		return h3d_mat_Stencil.__clid;
	}
	,serialize: function(__ctx) {
		var v = this.frontRefBits;
		if(v >= 0 && v < 128) {
			__ctx.out.b.push(v);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v);
		}
		var v1 = this.backRefBits;
		if(v1 >= 0 && v1 < 128) {
			__ctx.out.b.push(v1);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v1);
		}
		var v2 = this.opBits;
		if(v2 >= 0 && v2 < 128) {
			__ctx.out.b.push(v2);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v2);
		}
		this.customSerialize(__ctx);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("frontRefBits");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("backRefBits");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("opBits");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.isFinal = hxbit_Serializer.isClassFinal(h3d_mat_Stencil.__clid);
		return schema;
	}
	,unserializeInit: function() {
		this.frontRefBits = 0;
		this.backRefBits = 0;
		this.opBits = 0;
	}
	,unserialize: function(__ctx) {
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.frontRefBits = v;
		var v1 = __ctx.input.b[__ctx.inPos++];
		if(v1 == 128) {
			v1 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.backRefBits = v1;
		var v2 = __ctx.input.b[__ctx.inPos++];
		if(v2 == 128) {
			v2 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.opBits = v2;
		this.customUnserialize(__ctx);
	}
	,set_frontTest: function(v) {
		this.opBits = this.opBits & -8 | v[1];
		return this.frontTest = v;
	}
	,set_frontSTfail: function(v) {
		this.opBits = this.opBits & -57 | v[1] << 3;
		return this.frontSTfail = v;
	}
	,set_frontDPfail: function(v) {
		this.opBits = this.opBits & -449 | v[1] << 6;
		return this.frontDPfail = v;
	}
	,set_frontDPpass: function(v) {
		this.opBits = this.opBits & -3585 | v[1] << 9;
		return this.frontDPpass = v;
	}
	,set_frontRef: function(v) {
		this.frontRefBits = this.frontRefBits & -256 | v & 255;
		return this.frontRef = v;
	}
	,set_frontReadMask: function(v) {
		this.frontRefBits = this.frontRefBits & -65281 | (v & 255) << 8;
		return this.frontReadMask = v;
	}
	,set_frontWriteMask: function(v) {
		this.frontRefBits = this.frontRefBits & -16711681 | (v & 255) << 16;
		return this.frontWriteMask = v;
	}
	,set_backTest: function(v) {
		this.opBits = this.opBits & -28673 | v[1] << 12;
		return this.backTest = v;
	}
	,set_backSTfail: function(v) {
		this.opBits = this.opBits & -229377 | v[1] << 15;
		return this.backSTfail = v;
	}
	,set_backDPfail: function(v) {
		this.opBits = this.opBits & -1835009 | v[1] << 18;
		return this.backDPfail = v;
	}
	,set_backDPpass: function(v) {
		this.opBits = this.opBits & -14680065 | v[1] << 21;
		return this.backDPpass = v;
	}
	,set_backRef: function(v) {
		this.backRefBits = this.backRefBits & -256 | v & 255;
		return this.backRef = v;
	}
	,set_backReadMask: function(v) {
		this.backRefBits = this.backRefBits & -65281 | (v & 255) << 8;
		return this.backReadMask = v;
	}
	,set_backWriteMask: function(v) {
		this.backRefBits = this.backRefBits & -16711681 | (v & 255) << 16;
		return this.backWriteMask = v;
	}
	,loadBackRefBits: function(bits) {
		this.backRefBits = bits;
		this.set_backRef(this.backRefBits & 255);
		this.set_backReadMask(this.backRefBits >> 8 & 255);
		this.set_backWriteMask(this.backRefBits >> 16 & 255);
	}
	,loadOpBits: function(bits) {
		this.opBits = bits;
		this.set_frontTest(Type.createEnumIndex(h3d_mat_Compare,this.opBits & 7));
		this.set_frontSTfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 3 & 7));
		this.set_frontDPfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 6 & 7));
		this.set_frontDPpass(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 9 & 7));
		this.set_backTest(Type.createEnumIndex(h3d_mat_Compare,this.opBits >> 12 & 7));
		this.set_backSTfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 15 & 7));
		this.set_backDPfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 18 & 7));
		this.set_backDPpass(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 21 & 7));
	}
	,loadFrontRefBits: function(bits) {
		this.frontRefBits = bits;
		this.set_frontRef(this.frontRefBits & 255);
		this.set_frontReadMask(this.frontRefBits >> 8 & 255);
		this.set_frontWriteMask(this.frontRefBits >> 16 & 255);
	}
	,__class__: h3d_mat_Stencil
};
var hxd_PixelFormat = $hxClasses["hxd.PixelFormat"] = { __ename__ : true, __constructs__ : ["ARGB","BGRA","RGBA","RGBA16F","RGBA32F","ALPHA8","ALPHA16F","ALPHA32F"] };
hxd_PixelFormat.ARGB = ["ARGB",0];
hxd_PixelFormat.ARGB.toString = $estr;
hxd_PixelFormat.ARGB.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.BGRA = ["BGRA",1];
hxd_PixelFormat.BGRA.toString = $estr;
hxd_PixelFormat.BGRA.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.RGBA = ["RGBA",2];
hxd_PixelFormat.RGBA.toString = $estr;
hxd_PixelFormat.RGBA.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.RGBA16F = ["RGBA16F",3];
hxd_PixelFormat.RGBA16F.toString = $estr;
hxd_PixelFormat.RGBA16F.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.RGBA32F = ["RGBA32F",4];
hxd_PixelFormat.RGBA32F.toString = $estr;
hxd_PixelFormat.RGBA32F.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.ALPHA8 = ["ALPHA8",5];
hxd_PixelFormat.ALPHA8.toString = $estr;
hxd_PixelFormat.ALPHA8.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.ALPHA16F = ["ALPHA16F",6];
hxd_PixelFormat.ALPHA16F.toString = $estr;
hxd_PixelFormat.ALPHA16F.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.ALPHA32F = ["ALPHA32F",7];
hxd_PixelFormat.ALPHA32F.toString = $estr;
hxd_PixelFormat.ALPHA32F.__enum__ = hxd_PixelFormat;
hxd_PixelFormat.__empty_constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.ALPHA8,hxd_PixelFormat.ALPHA16F,hxd_PixelFormat.ALPHA32F];
var h3d_mat_Texture = function(w,h,flags,format,allocPos) {
	var engine = h3d_Engine.CURRENT;
	this.mem = engine.mem;
	if(format == null) {
		format = h3d_mat_Texture.nativeFormat;
	}
	this.id = ++h3d_mat_Texture.UID;
	this.format = format;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f[1];
		}
	}
	var tw = 1;
	var th = 1;
	while(tw < w) tw <<= 1;
	while(th < h) th <<= 1;
	if(tw != w || th != h) {
		this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT[1];
	}
	if((this.flags & 1 << h3d_mat_TextureFlags.Target[1]) != 0) {
		this.realloc = function() {
		};
	}
	this.width = w;
	this.height = h;
	this.set_mipMap((this.flags & 1 << h3d_mat_TextureFlags.MipMapped[1]) != 0 ? h3d_mat_MipMap.Nearest : h3d_mat_MipMap.None);
	this.set_filter(h3d_mat_Filter.Linear);
	this.set_wrap(h3d_mat_Wrap.Clamp);
	this.bits &= 32767;
	if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc[1]) == 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.Texture"] = h3d_mat_Texture;
h3d_mat_Texture.__name__ = ["h3d","mat","Texture"];
h3d_mat_Texture.fromBitmap = function(bmp,allocPos) {
	var t = new h3d_mat_Texture(bmp.ctx.canvas.width,bmp.ctx.canvas.height,null,null,allocPos);
	t.uploadBitmap(bmp);
	return t;
};
h3d_mat_Texture.fromPixels = function(pixels,allocPos) {
	var t = new h3d_mat_Texture(pixels.width,pixels.height,null,null,allocPos);
	t.uploadPixels(pixels);
	return t;
};
h3d_mat_Texture.fromColor = function(color,alpha,allocPos) {
	if(alpha == null) {
		alpha = 1.;
	}
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	var key = color & 16777215 | aval << 24;
	var t = engine.textureColorCache.h[key];
	if(t != null) {
		return t;
	}
	var t1 = new h3d_mat_Texture(1,1,null,null,allocPos);
	t1.clear(color,alpha);
	t1.realloc = function() {
		t1.clear(color,alpha);
	};
	engine.textureColorCache.h[key] = t1;
	return t1;
};
h3d_mat_Texture.defaultCubeTexture = function() {
	var engine = h3d_Engine.CURRENT;
	var t = engine.resCache.h[h3d_mat_Texture.__id__];
	if(t != null) {
		return t;
	}
	t = new h3d_mat_Texture(1,1,[h3d_mat_TextureFlags.Cube]);
	t.clear(2105376);
	t.realloc = function() {
		t.clear(2105376);
	};
	engine.resCache.set(h3d_mat_Texture,t);
	return t;
};
h3d_mat_Texture.genNoise = function(size) {
	var t = h3d_mat_Texture.noiseTextures.h[size];
	if(t != null && !(t.t == null && t.realloc == null)) {
		return t;
	}
	var t1 = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.NoAlloc]);
	var t2 = t1;
	var a1 = size;
	t1.realloc = function() {
		h3d_mat_Texture.allocNoise(t2,a1);
	};
	h3d_mat_Texture.noiseTextures.h[size] = t1;
	return t1;
};
h3d_mat_Texture.allocNoise = function(t,size) {
	var b = new hxd_BitmapData(size,size);
	var _g1 = 0;
	var _g = size;
	while(_g1 < _g) {
		var x = _g1++;
		var _g3 = 0;
		var _g2 = size;
		while(_g3 < _g2) {
			var y = _g3++;
			var n = Std.random(256);
			b.setPixel(x,y,-16777216 | n | n << 8 | n << 16);
		}
	}
	t.uploadBitmap(b);
	b.ctx = null;
	b.pixel = null;
};
h3d_mat_Texture.prototype = {
	alloc: function() {
		if(this.t == null) {
			this.mem.allocTexture(this);
		}
	}
	,clone: function(allocPos) {
		var old = this.lastFrame;
		this.preventAutoDispose();
		var t = new h3d_mat_Texture(this.width,this.height,null,this.format,allocPos);
		h3d_pass_Copy.run(this,t);
		this.lastFrame = old;
		return t;
	}
	,preventAutoDispose: function() {
		this.lastFrame = 2147483647;
	}
	,waitLoad: function(f) {
		if((this.flags & 1 << h3d_mat_TextureFlags.Loading[1]) == 0) {
			f();
			return;
		}
		if(this.waitLoads == null) {
			this.waitLoads = [];
		}
		this.waitLoads.push(f);
	}
	,toString: function() {
		var str = this.name;
		if(this.name == null) {
			str = "Texture_" + this.id;
		}
		return str + "(" + this.width + "x" + this.height + ")";
	}
	,setName: function(n) {
		this.name = n;
	}
	,set_mipMap: function(m) {
		this.bits = this.bits & -4 | m[1];
		return this.mipMap = m;
	}
	,set_filter: function(f) {
		this.bits = this.bits & -25 | f[1] << 3;
		return this.filter = f;
	}
	,set_wrap: function(w) {
		this.bits = this.bits & -193 | w[1] << 6;
		return this.wrap = w;
	}
	,isDisposed: function() {
		if(this.t == null) {
			return this.realloc == null;
		} else {
			return false;
		}
	}
	,resize: function(width,height) {
		this.dispose();
		var tw = 1;
		var th = 1;
		while(tw < width) tw <<= 1;
		while(th < height) th <<= 1;
		if(tw != width || th != height) {
			this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT[1];
		} else {
			this.flags &= -1 - (1 << h3d_mat_TextureFlags.IsNPOT[1]);
		}
		this.width = width;
		this.height = height;
		if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc[1]) == 0) {
			this.alloc();
		}
	}
	,clear: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.alloc();
		var p = hxd_Pixels.alloc(this.width,this.height,h3d_mat_Texture.nativeFormat);
		var k = 0;
		var b = color & 255;
		var g = color >> 8 & 255;
		var r = color >> 16 & 255;
		var a = alpha * 255 | 0;
		if(a < 0) {
			a = 0;
		} else if(a > 255) {
			a = 255;
		}
		var _g = h3d_mat_Texture.nativeFormat;
		switch(_g[1]) {
		case 1:
			var tmp = r;
			r = b;
			b = tmp;
			break;
		case 2:
			break;
		default:
			throw new js__$Boot_HaxeError("TODO");
		}
		var _g2 = 0;
		var _g1 = this.width * this.height;
		while(_g2 < _g1) {
			var i = _g2++;
			p.bytes.b[k++] = r & 255;
			p.bytes.b[k++] = g & 255;
			p.bytes.b[k++] = b & 255;
			p.bytes.b[k++] = a & 255;
		}
		var _g21 = 0;
		var _g11 = (this.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0 ? 6 : 1;
		while(_g21 < _g11) {
			var i1 = _g21++;
			this.uploadPixels(p,0,i1);
		}
		p.dispose();
	}
	,checkSize: function(width,height,mip) {
		if(width != this.width >> mip || height != this.height >> mip) {
			throw new js__$Boot_HaxeError("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mip) + "x" + (this.height >> mip));
		}
	}
	,checkMipMapGen: function(mipLevel,side) {
		if(mipLevel == 0 && (this.flags & 1 << h3d_mat_TextureFlags.MipMapped[1]) != 0 && (this.flags & 1 << h3d_mat_TextureFlags.ManualMipMapGen[1]) == 0 && ((this.flags & 1 << h3d_mat_TextureFlags.Cube[1]) == 0 || side == 5)) {
			this.mem.driver.generateMipMaps(this);
		}
	}
	,uploadBitmap: function(bmp,mipLevel,side) {
		if(side == null) {
			side = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		var width = bmp.ctx.canvas.width;
		var height = bmp.ctx.canvas.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw new js__$Boot_HaxeError("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTextureBitmap(this,bmp,mipLevel,side);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared[1];
		this.checkMipMapGen(mipLevel,side);
	}
	,uploadPixels: function(pixels,mipLevel,side) {
		if(side == null) {
			side = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		var width = pixels.width;
		var height = pixels.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw new js__$Boot_HaxeError("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTexturePixels(this,pixels,mipLevel,side);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared[1];
		this.checkMipMapGen(mipLevel,side);
	}
	,dispose: function() {
		if(this.t != null) {
			this.mem.deleteTexture(this);
		}
	}
	,swapTexture: function(t) {
		if(this.t == null && this.realloc == null || t.t == null && t.realloc == null) {
			throw new js__$Boot_HaxeError("One of the two texture is disposed");
		}
		var tmp = this.t;
		this.t = t.t;
		t.t = tmp;
	}
	,capturePixels: function(face,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(face == null) {
			face = 0;
		}
		var old = this.lastFrame;
		this.preventAutoDispose();
		var pix = this.mem.driver.capturePixels(this,face,mipLevel);
		this.lastFrame = old;
		return pix;
	}
	,__class__: h3d_mat_Texture
};
var h3d_mat_TextureChannels = function(w,h,flags,format,allocPos) {
	this.allowAsync = true;
	this.channels = [];
	if(flags == null) {
		flags = [];
	}
	flags.push(h3d_mat_TextureFlags.NoAlloc);
	h3d_mat_Texture.call(this,w,h,flags,format,allocPos);
	this.pixels = new hxd_Pixels(w,h,new haxe_io_Bytes(new ArrayBuffer(w * h * 4)),h3d_mat_Texture.nativeFormat);
	this.realloc = $bind(this,this.restore);
};
$hxClasses["h3d.mat.TextureChannels"] = h3d_mat_TextureChannels;
h3d_mat_TextureChannels.__name__ = ["h3d","mat","TextureChannels"];
h3d_mat_TextureChannels.__super__ = h3d_mat_Texture;
h3d_mat_TextureChannels.prototype = $extend(h3d_mat_Texture.prototype,{
	restore: function() {
		this.uploadPixels(this.pixels);
	}
	,reset: function() {
		if(this.t != null) {
			this.mem.deleteTexture(this);
		}
	}
	,setPixels: function(c,src,srcChannel) {
		this.reset();
		this.channels[c] = { r : null, c : srcChannel};
		this.setPixelsInner(c,src,srcChannel);
	}
	,setPixelsInner: function(c,src,srcChannel) {
		if(src.width != this.width || src.height != this.height) {
			throw new js__$Boot_HaxeError("Size mismatch : " + src.width + "x" + src.height + " should be " + this.width + "x" + this.height);
		}
		var bpp = hxd_Pixels.bytesPerPixel(this.pixels.innerFormat);
		var off = hxd_Pixels.getChannelOffset(this.pixels.innerFormat,c);
		var srcBpp = hxd_Pixels.bytesPerPixel(src.innerFormat);
		var srcOff = hxd_Pixels.getChannelOffset(src.innerFormat,srcChannel);
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var r = y * src.width * srcBpp + srcOff;
			var w = y * this.width * bpp + off;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				this.pixels.bytes.b[w] = src.bytes.b[r] & 255;
				w += bpp;
				r += srcBpp;
			}
		}
	}
	,setResource: function(c,res,srcChannel) {
		var _gthis = this;
		if(srcChannel == null) {
			srcChannel = c;
		}
		if(!this.allowAsync || res.getFormat() != 0) {
			var tmp = res.getPixels();
			this.setPixelsInner(c,tmp,srcChannel);
		} else {
			res.entry.loadBitmap(function(bmp) {
				var bmp1 = hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toBitmap(bmp);
				var pix = bmp1.getPixels();
				bmp1.ctx = null;
				bmp1.pixel = null;
				_gthis.setPixelsInner(c,pix,srcChannel);
			});
		}
		this.channels[c] = { r : res, c : srcChannel};
		res.watch(function() {
			if(_gthis.t != null) {
				_gthis.setResource(c,res,srcChannel);
			}
		});
	}
	,__class__: h3d_mat_TextureChannels
});
var h3d_pass_Base = function() {
	this.forceProcessing = false;
	this.priority = 0;
};
$hxClasses["h3d.pass.Base"] = h3d_pass_Base;
h3d_pass_Base.__name__ = ["h3d","pass","Base"];
h3d_pass_Base.prototype = {
	getTexture: function(index) {
		if(index == null) {
			index = 0;
		}
		return null;
	}
	,setTexture: function(t,index) {
		if(index == null) {
			index = 0;
		}
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,compileShader: function(p) {
		throw new js__$Boot_HaxeError("Not implemented for this pass");
	}
	,setContext: function(ctx) {
		this.ctx = ctx;
	}
	,dispose: function() {
	}
	,draw: function(passes) {
		return passes;
	}
	,__class__: h3d_pass_Base
};
var h3d_pass_ScreenFx = function(shader) {
	this.shader = shader;
	this.shaders = new hxsl_ShaderList(shader);
	this.manager = new h3d_pass_ShaderManager();
	this.pass = new h3d_mat_Pass(Std.string(this),new hxsl_ShaderList(shader));
	this.pass.set_culling(h3d_mat_Face.None);
	this.pass.depth(false,h3d_mat_Compare.Always);
	this.plan = h3d_prim_Plan2D.get();
	this.engine = h3d_Engine.CURRENT;
};
$hxClasses["h3d.pass.ScreenFx"] = h3d_pass_ScreenFx;
h3d_pass_ScreenFx.__name__ = ["h3d","pass","ScreenFx"];
h3d_pass_ScreenFx.prototype = {
	setGlobals: function(ctx) {
		var _g = 0;
		var _g1 = ctx.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			this.manager.globals.map.set(g.gid,g.value);
		}
	}
	,render: function() {
		var rts = this.manager.compileShaders(this.shaders);
		this.engine.selectMaterial(this.pass);
		this.engine.selectShader(rts);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(rts);
		} else {
			var _this = this.buffers;
			_this.vertex.grow(rts.vertex);
			_this.fragment.grow(rts.fragment);
		}
		this.manager.fillGlobals(this.buffers,rts);
		this.manager.fillParams(this.buffers,rts,this.shaders);
		this.engine.uploadShaderBuffers(this.buffers,0);
		this.engine.uploadShaderBuffers(this.buffers,1);
		this.engine.uploadShaderBuffers(this.buffers,2);
		this.plan.render(this.engine);
	}
	,dispose: function() {
	}
	,__class__: h3d_pass_ScreenFx
};
var h3d_pass_Blur = function(quality,passes,sigma) {
	if(sigma == null) {
		sigma = 1.;
	}
	if(passes == null) {
		passes = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	h3d_pass_ScreenFx.call(this,new h3d_shader_Blur());
	this.set_quality(quality);
	this.passes = passes;
	this.set_sigma(sigma);
};
$hxClasses["h3d.pass.Blur"] = h3d_pass_Blur;
h3d_pass_Blur.__name__ = ["h3d","pass","Blur"];
h3d_pass_Blur.__super__ = h3d_pass_ScreenFx;
h3d_pass_Blur.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	set_quality: function(q) {
		this.values = null;
		return this.quality = q;
	}
	,set_sigma: function(s) {
		this.values = null;
		return this.sigma = s;
	}
	,set_depthBlur: function(d) {
		this.depthBlur = d;
		if(d == null) {
			var _this = this.shader;
			_this.constModified = true;
			_this.isDepthDependant__ = false;
			this.shader.depthTexture__ = null;
			this.shader.normalTexture__ = null;
		} else {
			var _this1 = this.shader;
			_this1.constModified = true;
			_this1.isDepthDependant__ = true;
			this.shader.depthTexture__ = d.depths;
			this.shader.normalTexture__ = d.normals;
		}
		return d;
	}
	,gauss: function(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		var sq = s * s;
		var p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	,calcValues: function() {
		this.values = [];
		var tot = 0.;
		var _g1 = 0;
		var _g = this.quality + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var g = this.gauss(i,this.sigma);
			this.values[i] = g;
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		var _g11 = 0;
		var _g2 = this.quality + 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.values[i1] /= tot;
		}
	}
	,apply: function(src,tmp,output,isDepth) {
		if(isDepth == null) {
			isDepth = false;
		}
		if((this.quality <= 0 || this.passes <= 0 || this.sigma <= 0) && this.shader.fixedColor__ == null) {
			return;
		}
		if(output == null) {
			output = src;
		}
		var alloc = tmp == null;
		if(alloc) {
			tmp = new h3d_mat_Texture(src.width,src.height,[h3d_mat_TextureFlags.Target]);
		}
		if(this.values == null) {
			this.calcValues();
		}
		var _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.quality + 1;
		this.shader.values__ = this.values;
		var _this1 = this.shader;
		_this1.constModified = true;
		_this1.isDepth__ = isDepth;
		if(this.depthBlur != null) {
			this.shader.cameraInverseViewProj__ = this.depthBlur.camera.getInverseViewProj();
		}
		var outDepth = output.depthBuffer;
		var tmpDepth = tmp.depthBuffer;
		output.depthBuffer = null;
		tmp.depthBuffer = null;
		var _g1 = 0;
		var _g = this.passes;
		while(_g1 < _g) {
			var i = _g1++;
			this.shader.texture__ = src;
			var _this2 = this.shader.pixel__;
			_this2.x = 1 / src.width;
			_this2.y = 0;
			_this2.z = 0.;
			_this2.w = 1.;
			this.engine.pushTarget(tmp);
			this.render();
			this.engine.popTarget();
			this.shader.texture__ = tmp;
			var _this3 = this.shader.pixel__;
			_this3.x = 0;
			_this3.y = 1 / tmp.height;
			_this3.z = 0.;
			_this3.w = 1.;
			this.engine.pushTarget(output);
			this.render();
			this.engine.popTarget();
		}
		output.depthBuffer = outDepth;
		tmp.depthBuffer = tmpDepth;
		if(alloc) {
			tmp.dispose();
		}
	}
	,__class__: h3d_pass_Blur
});
var hxsl_Shader = function() {
	this.priority = 0;
	this.initialize();
};
$hxClasses["hxsl.Shader"] = hxsl_Shader;
hxsl_Shader.__name__ = ["hxsl","Shader"];
hxsl_Shader.prototype = {
	initialize: function() {
		this.constModified = true;
		if(this.shader != null) {
			return;
		}
		var cl = js_Boot.getClass(this);
		this.shader = cl._SHADER;
		if(this.shader == null) {
			var curClass = cl;
			while(curClass != null && curClass.SRC == null) curClass = Type.getSuperClass(curClass);
			if(curClass == null) {
				throw new js__$Boot_HaxeError(Type.getClassName(cl) + " has no shader source");
			}
			this.shader = curClass._SHADER;
			if(this.shader == null) {
				this.shader = new hxsl_SharedShader(curClass.SRC);
				curClass._SHADER = this.shader;
			}
		}
	}
	,getParamValue: function(index) {
		throw new js__$Boot_HaxeError("assert");
	}
	,getParamFloatValue: function(index) {
		throw new js__$Boot_HaxeError("assert");
	}
	,updateConstants: function(globals) {
		throw new js__$Boot_HaxeError("assert");
	}
	,updateConstantsFinal: function(globals) {
		var c = this.shader.consts;
		while(c != null) {
			if(c.globalId == 0) {
				c = c.next;
				continue;
			}
			var v = globals.map.get(c.globalId);
			var _g = c.v.type;
			switch(_g[1]) {
			case 1:
				var v1 = v;
				if(v1 >>> c.bits != 0) {
					throw new js__$Boot_HaxeError("Constant " + c.v.name + " is outside range (" + v1 + " > " + ((1 << c.bits) - 1) + ")");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				var v2 = v;
				if(v2) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 15:
				var count = _g[2];
				if(v == null) {
					c = c.next;
					continue;
				}
				var v3 = v;
				var sel = v3.channel;
				if(v3.texture == null) {
					sel = hxsl_Channel.Unknown;
				} else if(sel == null || sel == hxsl_Channel.Unknown) {
					switch(count) {
					case 1:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedFloat;
						} else {
							throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					case 3:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedNormal;
						} else {
							throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					default:
						throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
					}
				}
				this.constBits |= (globals.allocChannelID(v3.texture) << 3 | sel[1]) << c.pos;
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
			c = c.next;
		}
		var _this = this.shader;
		var constBits = this.constBits;
		var i = _this.instanceCache.get(constBits);
		this.instance = i == null ? _this.makeInstance(constBits) : i;
	}
	,clone: function() {
		return this;
	}
	,toString: function() {
		return Type.getClassName(js_Boot.getClass(this));
	}
	,__class__: hxsl_Shader
};
var h3d_pass__$Border_BorderShader = function() {
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
};
$hxClasses["h3d.pass._Border.BorderShader"] = h3d_pass__$Border_BorderShader;
h3d_pass__$Border_BorderShader.__name__ = ["h3d","pass","_Border","BorderShader"];
h3d_pass__$Border_BorderShader.__super__ = hxsl_Shader;
h3d_pass__$Border_BorderShader.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_pass__$Border_BorderShader);
		s.shader = this.shader;
		s.color__ = this.color__;
		return s;
	}
	,__class__: h3d_pass__$Border_BorderShader
});
var h3d_pass_Border = function(width,height,size) {
	if(size == null) {
		size = 1;
	}
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Border_BorderShader());
	var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
	var bbuf = this1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize1 = bbuf.array.length << 1;
		if(newSize1 < 128) {
			newSize1 = 128;
		}
		var newArray1 = new Float32Array(newSize1);
		newArray1.set(bbuf.array);
		bbuf.array = newArray1;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize2 = bbuf.array.length << 1;
		if(newSize2 < 128) {
			newSize2 = 128;
		}
		var newArray2 = new Float32Array(newSize2);
		newArray2.set(bbuf.array);
		bbuf.array = newArray2;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize3 = bbuf.array.length << 1;
		if(newSize3 < 128) {
			newSize3 = 128;
		}
		var newArray3 = new Float32Array(newSize3);
		newArray3.set(bbuf.array);
		bbuf.array = newArray3;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize4 = bbuf.array.length << 1;
		if(newSize4 < 128) {
			newSize4 = 128;
		}
		var newArray4 = new Float32Array(newSize4);
		newArray4.set(bbuf.array);
		bbuf.array = newArray4;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize5 = bbuf.array.length << 1;
		if(newSize5 < 128) {
			newSize5 = 128;
		}
		var newArray5 = new Float32Array(newSize5);
		newArray5.set(bbuf.array);
		bbuf.array = newArray5;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize6 = bbuf.array.length << 1;
		if(newSize6 < 128) {
			newSize6 = 128;
		}
		var newArray6 = new Float32Array(newSize6);
		newArray6.set(bbuf.array);
		bbuf.array = newArray6;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize7 = bbuf.array.length << 1;
		if(newSize7 < 128) {
			newSize7 = 128;
		}
		var newArray7 = new Float32Array(newSize7);
		newArray7.set(bbuf.array);
		bbuf.array = newArray7;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize8 = bbuf.array.length << 1;
		if(newSize8 < 128) {
			newSize8 = 128;
		}
		var newArray8 = new Float32Array(newSize8);
		newArray8.set(bbuf.array);
		bbuf.array = newArray8;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize9 = bbuf.array.length << 1;
		if(newSize9 < 128) {
			newSize9 = 128;
		}
		var newArray9 = new Float32Array(newSize9);
		newArray9.set(bbuf.array);
		bbuf.array = newArray9;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize10 = bbuf.array.length << 1;
		if(newSize10 < 128) {
			newSize10 = 128;
		}
		var newArray10 = new Float32Array(newSize10);
		newArray10.set(bbuf.array);
		bbuf.array = newArray10;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize11 = bbuf.array.length << 1;
		if(newSize11 < 128) {
			newSize11 = 128;
		}
		var newArray11 = new Float32Array(newSize11);
		newArray11.set(bbuf.array);
		bbuf.array = newArray11;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize12 = bbuf.array.length << 1;
		if(newSize12 < 128) {
			newSize12 = 128;
		}
		var newArray12 = new Float32Array(newSize12);
		newArray12.set(bbuf.array);
		bbuf.array = newArray12;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize13 = bbuf.array.length << 1;
		if(newSize13 < 128) {
			newSize13 = 128;
		}
		var newArray13 = new Float32Array(newSize13);
		newArray13.set(bbuf.array);
		bbuf.array = newArray13;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize14 = bbuf.array.length << 1;
		if(newSize14 < 128) {
			newSize14 = 128;
		}
		var newArray14 = new Float32Array(newSize14);
		newArray14.set(bbuf.array);
		bbuf.array = newArray14;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize15 = bbuf.array.length << 1;
		if(newSize15 < 128) {
			newSize15 = 128;
		}
		var newArray15 = new Float32Array(newSize15);
		newArray15.set(bbuf.array);
		bbuf.array = newArray15;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize16 = bbuf.array.length << 1;
		if(newSize16 < 128) {
			newSize16 = 128;
		}
		var newArray16 = new Float32Array(newSize16);
		newArray16.set(bbuf.array);
		bbuf.array = newArray16;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize17 = bbuf.array.length << 1;
		if(newSize17 < 128) {
			newSize17 = 128;
		}
		var newArray17 = new Float32Array(newSize17);
		newArray17.set(bbuf.array);
		bbuf.array = newArray17;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize18 = bbuf.array.length << 1;
		if(newSize18 < 128) {
			newSize18 = 128;
		}
		var newArray18 = new Float32Array(newSize18);
		newArray18.set(bbuf.array);
		bbuf.array = newArray18;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize19 = bbuf.array.length << 1;
		if(newSize19 < 128) {
			newSize19 = 128;
		}
		var newArray19 = new Float32Array(newSize19);
		newArray19.set(bbuf.array);
		bbuf.array = newArray19;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize20 = bbuf.array.length << 1;
		if(newSize20 < 128) {
			newSize20 = 128;
		}
		var newArray20 = new Float32Array(newSize20);
		newArray20.set(bbuf.array);
		bbuf.array = newArray20;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize21 = bbuf.array.length << 1;
		if(newSize21 < 128) {
			newSize21 = 128;
		}
		var newArray21 = new Float32Array(newSize21);
		newArray21.set(bbuf.array);
		bbuf.array = newArray21;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize22 = bbuf.array.length << 1;
		if(newSize22 < 128) {
			newSize22 = 128;
		}
		var newArray22 = new Float32Array(newSize22);
		newArray22.set(bbuf.array);
		bbuf.array = newArray22;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize23 = bbuf.array.length << 1;
		if(newSize23 < 128) {
			newSize23 = 128;
		}
		var newArray23 = new Float32Array(newSize23);
		newArray23.set(bbuf.array);
		bbuf.array = newArray23;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize24 = bbuf.array.length << 1;
		if(newSize24 < 128) {
			newSize24 = 128;
		}
		var newArray24 = new Float32Array(newSize24);
		newArray24.set(bbuf.array);
		bbuf.array = newArray24;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize25 = bbuf.array.length << 1;
		if(newSize25 < 128) {
			newSize25 = 128;
		}
		var newArray25 = new Float32Array(newSize25);
		newArray25.set(bbuf.array);
		bbuf.array = newArray25;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize26 = bbuf.array.length << 1;
		if(newSize26 < 128) {
			newSize26 = 128;
		}
		var newArray26 = new Float32Array(newSize26);
		newArray26.set(bbuf.array);
		bbuf.array = newArray26;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize27 = bbuf.array.length << 1;
		if(newSize27 < 128) {
			newSize27 = 128;
		}
		var newArray27 = new Float32Array(newSize27);
		newArray27.set(bbuf.array);
		bbuf.array = newArray27;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize28 = bbuf.array.length << 1;
		if(newSize28 < 128) {
			newSize28 = 128;
		}
		var newArray28 = new Float32Array(newSize28);
		newArray28.set(bbuf.array);
		bbuf.array = newArray28;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize29 = bbuf.array.length << 1;
		if(newSize29 < 128) {
			newSize29 = 128;
		}
		var newArray29 = new Float32Array(newSize29);
		newArray29.set(bbuf.array);
		bbuf.array = newArray29;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize30 = bbuf.array.length << 1;
		if(newSize30 < 128) {
			newSize30 = 128;
		}
		var newArray30 = new Float32Array(newSize30);
		newArray30.set(bbuf.array);
		bbuf.array = newArray30;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize31 = bbuf.array.length << 1;
		if(newSize31 < 128) {
			newSize31 = 128;
		}
		var newArray31 = new Float32Array(newSize31);
		newArray31.set(bbuf.array);
		bbuf.array = newArray31;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	this.plan = new h3d_prim_RawPrimitive({ vbuf : bbuf, stride : 2, quads : true},true);
	var _this = this.shader.color__;
	_this.x = 1;
	_this.y = 1;
	_this.z = 1;
	_this.w = 1;
};
$hxClasses["h3d.pass.Border"] = h3d_pass_Border;
h3d_pass_Border.__name__ = ["h3d","pass","Border"];
h3d_pass_Border.__super__ = h3d_pass_ScreenFx;
h3d_pass_Border.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	__class__: h3d_pass_Border
});
var h3d_shader_ScreenShader = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.ScreenShader"] = h3d_shader_ScreenShader;
h3d_shader_ScreenShader.__name__ = ["h3d","shader","ScreenShader"];
h3d_shader_ScreenShader.__super__ = hxsl_Shader;
h3d_shader_ScreenShader.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ScreenShader
});
var h3d_pass__$Copy_CopyShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.CopyShader"] = h3d_pass__$Copy_CopyShader;
h3d_pass__$Copy_CopyShader.__name__ = ["h3d","pass","_Copy","CopyShader"];
h3d_pass__$Copy_CopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_CopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_pass__$Copy_CopyShader);
		s.shader = this.shader;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_pass__$Copy_CopyShader
});
var h3d_pass_Copy = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Copy_CopyShader());
};
$hxClasses["h3d.pass.Copy"] = h3d_pass_Copy;
h3d_pass_Copy.__name__ = ["h3d","pass","Copy"];
h3d_pass_Copy.run = function(from,to,blend,pass) {
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && h3d_Engine.CURRENT.driver.copyTexture(from,to)) {
		return;
	}
	if(h3d_pass_Copy.inst == null) {
		h3d_pass_Copy.inst = new h3d_pass_Copy();
	}
	h3d_pass_Copy.inst.apply(from,to,blend,pass);
	return;
};
h3d_pass_Copy.__super__ = h3d_pass_ScreenFx;
h3d_pass_Copy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,to,blend,customPass) {
		this.engine.pushTarget(to);
		this.shader.texture__ = from;
		if(customPass != null) {
			var old = this.pass;
			this.pass = customPass;
			if(blend != null) {
				this.pass.setBlendMode(blend);
			}
			var h = this.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		this.engine.popTarget();
	}
	,__class__: h3d_pass_Copy
});
var h3d_pass_Default = function() {
	this.sortPasses = true;
	this.textureCount = 1;
	this.shaderCount = 1;
	h3d_pass_Base.call(this);
	this.manager = new h3d_pass_ShaderManager(this.getOutputs());
	this.tcache = new h3d_impl_TextureCache();
	this.shaderIdMap = [];
	this.textureIdMap = [];
	this.initGlobals();
};
$hxClasses["h3d.pass.Default"] = h3d_pass_Default;
h3d_pass_Default.__name__ = ["h3d","pass","Default"];
h3d_pass_Default.__super__ = h3d_pass_Base;
h3d_pass_Default.prototype = $extend(h3d_pass_Base.prototype,{
	get_globals: function() {
		return this.manager.globals;
	}
	,get_logEnable: function() {
		return false;
	}
	,getTexture: function(index) {
		if(index == null) {
			index = 0;
		}
		return this.tcache.cache[index];
	}
	,setTexture: function(t,index) {
		if(index == null) {
			index = 0;
		}
		this.tcache.set(t,index);
	}
	,dispose: function() {
		h3d_pass_Base.prototype.dispose.call(this);
		this.tcache.dispose();
	}
	,getOutputs: function() {
		return [hxsl_Output.Value("output.color")];
	}
	,compileShader: function(p) {
		var o = new h3d_pass_Object();
		o.pass = p;
		this.setupShaders(o);
		return this.manager.compileShaders(o.shaders);
	}
	,processShaders: function(p,shaders) {
		var p1 = this.ctx.extraShaders;
		while(p1 != null) {
			shaders = this.ctx.allocShaderList(p1.s,shaders);
			p1 = p1.next;
		}
		return shaders;
	}
	,setupShaders: function(passes) {
		var p = passes;
		var lightInit = false;
		while(p != null) {
			var shaders = p.pass.getShadersRec();
			shaders = this.processShaders(p,shaders);
			if(p.pass.enableLights && this.ctx.lightSystem != null) {
				if(!lightInit) {
					this.ctx.lightSystem.initGlobals(this.manager.globals);
					lightInit = true;
				}
				shaders = this.ctx.lightSystem.computeLight(p.obj,shaders);
			}
			p.shader = this.manager.compileShaders(shaders);
			p.shaders = shaders;
			var t = p.shader.fragment.textures2D;
			if(t == null) {
				p.texture = 0;
			} else {
				var t1;
				if(t.perObjectGlobal != null) {
					var v = this.manager.globals.map.get(t.perObjectGlobal.gid);
					if(v == null) {
						throw new js__$Boot_HaxeError("Missing global value " + t.perObjectGlobal.path);
					}
					var _g = t.type;
					if(_g[1] == 15) {
						t1 = v.texture;
					} else {
						t1 = v;
					}
				} else {
					var si = shaders;
					var n = t.instance;
					while(--n > 0) si = si.next;
					var v1 = si.s.getParamValue(t.index);
					if(v1 == null && false) {
						throw new js__$Boot_HaxeError("Missing param value " + Std.string(si.s) + "." + t.name);
					}
					t1 = v1;
				}
				p.texture = t1 == null ? 0 : t1.id;
			}
			p = p.next;
		}
	}
	,uploadParams: function() {
		this.manager.fillParams(this.cachedBuffer,this.ctx.drawPass.shader,this.ctx.drawPass.shaders);
		this.ctx.engine.uploadShaderBuffers(this.cachedBuffer,1);
		this.ctx.engine.uploadShaderBuffers(this.cachedBuffer,2);
	}
	,log: function(str) {
		var _this = this.ctx.engine.driver;
	}
	,drawObject: function(p) {
		this.ctx.drawPass = p;
		this.ctx.engine.selectMaterial(p.pass);
		p.obj.draw(this.ctx);
	}
	,draw: function(passes) {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.ctx.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			this.manager.globals.map.set(g.gid,g.value);
		}
		this.setGlobals();
		this.setupShaders(passes);
		var p = passes;
		var shaderStart = this.shaderCount;
		var textureStart = this.textureCount;
		while(p != null) {
			if(this.shaderIdMap[p.shader.id] < shaderStart) {
				this.shaderIdMap[p.shader.id] = this.shaderCount++;
			}
			if(this.textureIdMap[p.texture] < textureStart) {
				this.textureIdMap[p.texture] = this.textureCount++;
			}
			p = p.next;
		}
		if(this.sortPasses) {
			var list = passes;
			if(list == null) {
				passes = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p1;
				var q;
				var e;
				var tail;
				while(true) {
					p1 = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p1 != null) {
						++nmerges;
						q = p1;
						psize = 0;
						var _g11 = 0;
						var _g2 = insize;
						while(_g11 < _g2) {
							var i = _g11++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else {
								var passes1;
								if(!(qsize == 0 || q == null)) {
									var d = _gthis.shaderIdMap[p1.shader.id] - _gthis.shaderIdMap[q.shader.id];
									passes1 = (d != 0 ? d : _gthis.textureIdMap[p1.texture] - _gthis.textureIdMap[q.texture]) <= 0;
								} else {
									passes1 = true;
								}
								if(passes1) {
									e = p1;
									p1 = p1.next;
									--psize;
								} else {
									e = q;
									q = q.next;
									--qsize;
								}
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p1 = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				passes = list;
			}
		}
		this.ctx.uploadParams = $bind(this,this.uploadParams);
		var p2 = passes;
		var buf = this.cachedBuffer;
		var prevShader = null;
		var drawTri = 0;
		var drawCalls = 0;
		var shaderSwitches = 0;
		if(this.ctx.engine.driver.logEnable) {
			drawTri = this.ctx.engine.drawTriangles;
			drawCalls = this.ctx.engine.drawCalls;
			shaderSwitches = this.ctx.engine.shaderSwitches;
		}
		while(p2 != null) {
			var v = p2.obj.absPos;
			this.manager.globals.map.set(this.globalModelView_id,v);
			if(p2.shader.globals.exists(this.globalModelViewInverse_id)) {
				var v1 = p2.obj.getInvPos();
				this.manager.globals.map.set(this.globalModelViewInverse_id,v1);
			}
			if(prevShader != p2.shader) {
				prevShader = p2.shader;
				this.ctx.engine.selectShader(p2.shader);
				if(buf == null) {
					buf = this.cachedBuffer = new h3d_shader_Buffers(p2.shader);
				} else {
					var s = p2.shader;
					buf.vertex.grow(s.vertex);
					buf.fragment.grow(s.fragment);
				}
				this.manager.fillGlobals(buf,p2.shader);
				this.ctx.engine.uploadShaderBuffers(buf,0);
			}
			if(!p2.pass.dynamicParameters) {
				this.manager.fillParams(buf,p2.shader,p2.shaders);
				this.ctx.engine.uploadShaderBuffers(buf,1);
				this.ctx.engine.uploadShaderBuffers(buf,2);
			}
			this.drawObject(p2);
			p2 = p2.next;
		}
		var _this = this.ctx;
		_this.cachedPos = 0;
		_this.drawPass = null;
		return passes;
	}
	,get_cameraView: function() {
		return this.manager.globals.map.get(this.cameraView_id);
	}
	,set_cameraView: function(v) {
		this.manager.globals.map.set(this.cameraView_id,v);
		return v;
	}
	,get_cameraNear: function() {
		return this.manager.globals.map.get(this.cameraNear_id);
	}
	,set_cameraNear: function(v) {
		this.manager.globals.map.set(this.cameraNear_id,v);
		return v;
	}
	,get_cameraFar: function() {
		return this.manager.globals.map.get(this.cameraFar_id);
	}
	,set_cameraFar: function(v) {
		this.manager.globals.map.set(this.cameraFar_id,v);
		return v;
	}
	,get_cameraProj: function() {
		return this.manager.globals.map.get(this.cameraProj_id);
	}
	,set_cameraProj: function(v) {
		this.manager.globals.map.set(this.cameraProj_id,v);
		return v;
	}
	,get_cameraPos: function() {
		return this.manager.globals.map.get(this.cameraPos_id);
	}
	,set_cameraPos: function(v) {
		this.manager.globals.map.set(this.cameraPos_id,v);
		return v;
	}
	,get_cameraProjDiag: function() {
		return this.manager.globals.map.get(this.cameraProjDiag_id);
	}
	,set_cameraProjDiag: function(v) {
		this.manager.globals.map.set(this.cameraProjDiag_id,v);
		return v;
	}
	,get_cameraViewProj: function() {
		return this.manager.globals.map.get(this.cameraViewProj_id);
	}
	,set_cameraViewProj: function(v) {
		this.manager.globals.map.set(this.cameraViewProj_id,v);
		return v;
	}
	,get_cameraInverseViewProj: function() {
		return this.manager.globals.map.get(this.cameraInverseViewProj_id);
	}
	,set_cameraInverseViewProj: function(v) {
		this.manager.globals.map.set(this.cameraInverseViewProj_id,v);
		return v;
	}
	,get_globalTime: function() {
		return this.manager.globals.map.get(this.globalTime_id);
	}
	,set_globalTime: function(v) {
		this.manager.globals.map.set(this.globalTime_id,v);
		return v;
	}
	,get_pixelSize: function() {
		return this.manager.globals.map.get(this.pixelSize_id);
	}
	,set_pixelSize: function(v) {
		this.manager.globals.map.set(this.pixelSize_id,v);
		return v;
	}
	,get_globalModelView: function() {
		return this.manager.globals.map.get(this.globalModelView_id);
	}
	,set_globalModelView: function(v) {
		this.manager.globals.map.set(this.globalModelView_id,v);
		return v;
	}
	,get_globalModelViewInverse: function() {
		return this.manager.globals.map.get(this.globalModelViewInverse_id);
	}
	,set_globalModelViewInverse: function(v) {
		this.manager.globals.map.set(this.globalModelViewInverse_id,v);
		return v;
	}
	,initGlobals: function() {
		var this1 = hxsl_Globals.allocID("camera.view");
		this.cameraView_id = this1;
		var this2 = hxsl_Globals.allocID("camera.zNear");
		this.cameraNear_id = this2;
		var this3 = hxsl_Globals.allocID("camera.zFar");
		this.cameraFar_id = this3;
		var this4 = hxsl_Globals.allocID("camera.proj");
		this.cameraProj_id = this4;
		var this5 = hxsl_Globals.allocID("camera.position");
		this.cameraPos_id = this5;
		var this6 = hxsl_Globals.allocID("camera.projDiag");
		this.cameraProjDiag_id = this6;
		var this7 = hxsl_Globals.allocID("camera.viewProj");
		this.cameraViewProj_id = this7;
		var this8 = hxsl_Globals.allocID("camera.inverseViewProj");
		this.cameraInverseViewProj_id = this8;
		var this9 = hxsl_Globals.allocID("global.time");
		this.globalTime_id = this9;
		var this10 = hxsl_Globals.allocID("global.pixelSize");
		this.pixelSize_id = this10;
		var this11 = hxsl_Globals.allocID("global.modelView");
		this.globalModelView_id = this11;
		var this12 = hxsl_Globals.allocID("global.modelViewInverse");
		this.globalModelViewInverse_id = this12;
	}
	,setGlobals: function() {
		var v = this.ctx.camera.mcam;
		this.manager.globals.map.set(this.cameraView_id,v);
		var v1 = this.ctx.camera.zNear;
		this.manager.globals.map.set(this.cameraNear_id,v1);
		var v2 = this.ctx.camera.zFar;
		this.manager.globals.map.set(this.cameraFar_id,v2);
		var v3 = this.ctx.camera.mproj;
		this.manager.globals.map.set(this.cameraProj_id,v3);
		var v4 = this.ctx.camera.pos;
		this.manager.globals.map.set(this.cameraPos_id,v4);
		var v5 = new h3d_Vector(this.ctx.camera.mproj._11,this.ctx.camera.mproj._22,this.ctx.camera.mproj._33,this.ctx.camera.mproj._44);
		this.manager.globals.map.set(this.cameraProjDiag_id,v5);
		var v6 = this.ctx.camera.m;
		this.manager.globals.map.set(this.cameraViewProj_id,v6);
		var v7 = this.ctx.camera.getInverseViewProj();
		this.manager.globals.map.set(this.cameraInverseViewProj_id,v7);
		var v8 = this.ctx.time;
		this.manager.globals.map.set(this.globalTime_id,v8);
		var v9 = new h3d_Vector(2 / this.ctx.engine.width,2 / this.ctx.engine.height);
		this.manager.globals.map.set(this.pixelSize_id,v9);
	}
	,__class__: h3d_pass_Default
});
var h3d_pass_Depth = function() {
	this.reduceSize = 0;
	this.enableSky = false;
	h3d_pass_Default.call(this);
	this.priority = 10;
	this.depthMapId = hxsl_Globals.allocID("depthMap");
};
$hxClasses["h3d.pass.Depth"] = h3d_pass_Depth;
h3d_pass_Depth.__name__ = ["h3d","pass","Depth"];
h3d_pass_Depth.__super__ = h3d_pass_Default;
h3d_pass_Depth.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
	}
	,draw: function(passes) {
		var texture = this.tcache.allocTarget("depthMap",this.ctx,this.ctx.engine.width >> this.reduceSize,this.ctx.engine.height >> this.reduceSize,true);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(this.enableSky ? 0 : 16711680,1);
		passes = h3d_pass_Default.prototype.draw.call(this,passes);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.depthMapId,{ texture : texture});
		return passes;
	}
	,__class__: h3d_pass_Depth
});
var h3d_pass__$HardwarePick_FixedColor = function() {
	this.viewport__ = new h3d_Vector();
	this.colorID__ = new h3d_Vector();
	hxsl_Shader.call(this);
};
$hxClasses["h3d.pass._HardwarePick.FixedColor"] = h3d_pass__$HardwarePick_FixedColor;
h3d_pass__$HardwarePick_FixedColor.__name__ = ["h3d","pass","_HardwarePick","FixedColor"];
h3d_pass__$HardwarePick_FixedColor.__super__ = hxsl_Shader;
h3d_pass__$HardwarePick_FixedColor.prototype = $extend(hxsl_Shader.prototype,{
	get_colorID: function() {
		return this.colorID__;
	}
	,set_colorID: function(_v) {
		return this.colorID__ = _v;
	}
	,get_viewport: function() {
		return this.viewport__;
	}
	,set_viewport: function(_v) {
		return this.viewport__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.colorID__;
		case 1:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_pass__$HardwarePick_FixedColor);
		s.shader = this.shader;
		s.colorID__ = this.colorID__;
		s.viewport__ = this.viewport__;
		return s;
	}
	,__class__: h3d_pass__$HardwarePick_FixedColor
});
var h3d_pass_HardwarePick = function() {
	this.pickedIndex = -1;
	this.fixedColor = new h3d_pass__$HardwarePick_FixedColor();
	h3d_pass_Default.call(this);
	this.material = new h3d_mat_Pass("");
	var _this = this.material;
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	_this.set_blendSrc(src);
	_this.set_blendAlphaSrc(src);
	_this.set_blendDst(dst);
	_this.set_blendAlphaDst(dst);
	this.texOut = new h3d_mat_Texture(3,3,[h3d_mat_TextureFlags.Target]);
	this.texOut.depthBuffer = new h3d_mat_DepthBuffer(3,3);
};
$hxClasses["h3d.pass.HardwarePick"] = h3d_pass_HardwarePick;
h3d_pass_HardwarePick.__name__ = ["h3d","pass","HardwarePick"];
h3d_pass_HardwarePick.__super__ = h3d_pass_Default;
h3d_pass_HardwarePick.prototype = $extend(h3d_pass_Default.prototype,{
	dispose: function() {
		h3d_pass_Default.prototype.dispose.call(this);
		this.texOut.dispose();
		this.texOut.depthBuffer.dispose();
	}
	,getOutputs: function() {
		return [hxsl_Output.Value("output.colorID")];
	}
	,drawObject: function(p) {
		h3d_pass_Default.prototype.drawObject.call(this,p);
		var _this = this.fixedColor.colorID__;
		var c = -16777216 | ++this.colorID;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
	}
	,nextID: function() {
		var _this = this.fixedColor.colorID__;
		var c = -16777216 | ++this.colorID;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
	}
	,draw: function(passes) {
		var cur = passes;
		while(cur != null) {
			var mask = 1073741760;
			cur.pass.bits &= ~mask;
			cur.pass.bits |= this.material.bits & mask;
			cur = cur.next;
		}
		this.colorID = 0;
		var _this = this.fixedColor.colorID__;
		var c = -16777216 | ++this.colorID;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		var _this1 = this.fixedColor.viewport__;
		_this1.x = -(this.pickX * 2 / this.ctx.engine.width - 1);
		_this1.y = this.pickY * 2 / this.ctx.engine.height - 1;
		_this1.z = this.ctx.engine.width / this.texOut.width;
		_this1.w = this.ctx.engine.height / this.texOut.height;
		this.ctx.engine.pushTarget(this.texOut);
		this.ctx.engine.clear(-16777216,1);
		this.ctx.extraShaders = this.ctx.allocShaderList(this.fixedColor);
		var passes1 = h3d_pass_Default.prototype.draw.call(this,passes);
		this.ctx.extraShaders = null;
		this.ctx.engine.popTarget();
		var cur1 = passes1;
		while(cur1 != null) {
			cur1.pass.set_blendSrc(cur1.pass.blendSrc);
			cur1.pass.set_blendDst(cur1.pass.blendDst);
			cur1.pass.set_blendOp(cur1.pass.blendOp);
			cur1.pass.set_blendAlphaSrc(cur1.pass.blendAlphaSrc);
			cur1.pass.set_blendAlphaDst(cur1.pass.blendAlphaDst);
			cur1.pass.set_blendAlphaOp(cur1.pass.blendAlphaOp);
			cur1.pass.set_colorMask(cur1.pass.colorMask);
			cur1 = cur1.next;
		}
		this.ctx.engine.clear(null,null,0);
		var pix = this.texOut.capturePixels();
		this.pickedIndex = (pix.getPixel(pix.width >> 1,pix.height >> 1) & 16777215) - 1;
		return passes1;
	}
	,__class__: h3d_pass_HardwarePick
});
var h3d_pass_LightSystem = function() {
	this.perPixelLighting = true;
	this.maxLightsPerObject = 6;
	this.ambientLight = new h3d_Vector(0.5,0.5,0.5);
	this.ambientShader = new h3d_shader_AmbientLight();
	this.set_additiveLighting(true);
};
$hxClasses["h3d.pass.LightSystem"] = h3d_pass_LightSystem;
h3d_pass_LightSystem.__name__ = ["h3d","pass","LightSystem"];
h3d_pass_LightSystem.prototype = {
	get_additiveLighting: function() {
		var value = this.ambientShader;
		return ((value instanceof h3d_shader_AmbientLight) ? value : null).additive__;
	}
	,set_additiveLighting: function(b) {
		var value = this.ambientShader;
		var _this = (value instanceof h3d_shader_AmbientLight) ? value : null;
		_this.constModified = true;
		return _this.additive__ = b;
	}
	,initLights: function(ctx) {
		this.lightCount = 0;
		this.ctx = ctx;
		var l = ctx.lights;
		var prev = null;
		var frustum = new h3d_col_Frustum(ctx.camera.m);
		var s = new h3d_col_Sphere();
		while(l != null) {
			s.x = l.absPos._41;
			s.y = l.absPos._42;
			s.z = l.absPos._43;
			s.r = l.cullingDistance;
			if(!frustum.hasSphere(s)) {
				if(prev == null) {
					ctx.lights = l.next;
				} else {
					prev.next = l.next;
				}
				l = l.next;
				continue;
			}
			this.lightCount++;
			l.objectDistance = 0.;
			prev = l;
			l = l.next;
		}
		if(this.lightCount <= this.maxLightsPerObject) {
			var list = ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g1 = 0;
						var _g = insize;
						while(_g1 < _g) {
							var i = _g1++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			ctx.lights = tmp;
		}
		if(this.shadowLight == null || this.shadowLight.parent == null) {
			var l1 = ctx.lights;
			while(l1 != null) {
				var dl = (l1 instanceof h3d_scene_DirLight) ? l1 : null;
				if(dl != null) {
					this.shadowLight = dl;
					break;
				}
				l1 = l1.next;
			}
		}
	}
	,initGlobals: function(globals) {
		globals.set("global.ambientLight",this.ambientLight);
		globals.set("global.perPixelLighting",this.perPixelLighting);
	}
	,sortLight: function(l1,l2) {
		var p = l1.priority - l2.priority;
		if(p != 0) {
			return -p;
		}
		if(l1.objectDistance < l2.objectDistance) {
			return -1;
		} else {
			return 1;
		}
	}
	,computeLight: function(obj,shaders) {
		var _gthis = this;
		if(this.lightCount > this.maxLightsPerObject) {
			var l = this.ctx.lights;
			while(l != null) {
				if((obj.flags & 16) != 0) {
					var dx = l.absPos._41 - this.ctx.camera.target.x;
					var dy = l.absPos._42 - this.ctx.camera.target.y;
					var dz = l.absPos._43 - this.ctx.camera.target.z;
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				} else {
					var dx1 = l.absPos._41 - obj.absPos._41;
					var dy1 = l.absPos._42 - obj.absPos._42;
					var dz1 = l.absPos._43 - obj.absPos._43;
					l.objectDistance = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
				}
				l = l.next;
			}
			var list = this.ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g1 = 0;
						var _g = insize;
						while(_g1 < _g) {
							var i = _g1++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			this.ctx.lights = tmp;
		}
		shaders = _gthis.ctx.allocShaderList(this.ambientShader,shaders);
		var l1 = this.ctx.lights;
		var i1 = 0;
		while(l1 != null) {
			if(i1++ == this.maxLightsPerObject) {
				break;
			}
			shaders = _gthis.ctx.allocShaderList(l1.shader,shaders);
			l1 = l1.next;
		}
		return shaders;
	}
	,__class__: h3d_pass_LightSystem
};
var h3d_pass_Normal = function() {
	h3d_pass_Default.call(this);
	this.priority = 10;
	this.normalMapId = hxsl_Globals.allocID("normalMap");
};
$hxClasses["h3d.pass.Normal"] = h3d_pass_Normal;
h3d_pass_Normal.__name__ = ["h3d","pass","Normal"];
h3d_pass_Normal.__super__ = h3d_pass_Default;
h3d_pass_Normal.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackNormal(hxsl_Output.Value("output.normal"))];
	}
	,draw: function(passes) {
		var texture = this.tcache.allocTarget("normalMal",this.ctx,this.ctx.engine.width,this.ctx.engine.height);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(8421504,1);
		passes = h3d_pass_Default.prototype.draw.call(this,passes);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.normalMapId,texture);
		return passes;
	}
	,__class__: h3d_pass_Normal
});
var h3d_pass_Object = function() {
	this.texture = 0;
};
$hxClasses["h3d.pass.Object"] = h3d_pass_Object;
h3d_pass_Object.__name__ = ["h3d","pass","Object"];
h3d_pass_Object.prototype = {
	__class__: h3d_pass_Object
};
var h3d_pass_ShaderManager = function(output) {
	this.shaderCache = hxsl_Cache.get();
	this.globals = new hxsl_Globals();
	this.currentOutput = new hxsl_ShaderList(null);
	this.setOutput(output);
};
$hxClasses["h3d.pass.ShaderManager"] = h3d_pass_ShaderManager;
h3d_pass_ShaderManager.__name__ = ["h3d","pass","ShaderManager"];
h3d_pass_ShaderManager.prototype = {
	setOutput: function(output) {
		if(output == null) {
			output = [hxsl_Output.Value("output.color")];
		}
		this.currentOutput.s = this.shaderCache.getLinkShader(output);
	}
	,fillRec: function(v,type,out,pos) {
		switch(type[1]) {
		case 3:
			out[pos] = v;
			return 1;
		case 5:
			var n = type[2];
			var v1 = v;
			out[pos++] = v1.x;
			out[pos++] = v1.y;
			switch(n) {
			case 3:
				out[pos++] = v1.z;
				break;
			case 4:
				out[pos++] = v1.z;
				out[pos++] = v1.w;
				break;
			}
			return n;
		case 6:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = 0;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = 0;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = 0;
			return 12;
		case 7:
			var m1 = v;
			out[pos++] = m1._11;
			out[pos++] = m1._21;
			out[pos++] = m1._31;
			out[pos++] = m1._41;
			out[pos++] = m1._12;
			out[pos++] = m1._22;
			out[pos++] = m1._32;
			out[pos++] = m1._42;
			out[pos++] = m1._13;
			out[pos++] = m1._23;
			out[pos++] = m1._33;
			out[pos++] = m1._43;
			out[pos++] = m1._14;
			out[pos++] = m1._24;
			out[pos++] = m1._34;
			out[pos++] = m1._44;
			return 16;
		case 8:
			var m2 = v;
			out[pos++] = m2._11;
			out[pos++] = m2._21;
			out[pos++] = m2._31;
			out[pos++] = m2._41;
			out[pos++] = m2._12;
			out[pos++] = m2._22;
			out[pos++] = m2._32;
			out[pos++] = m2._42;
			out[pos++] = m2._13;
			out[pos++] = m2._23;
			out[pos++] = m2._33;
			out[pos++] = m2._43;
			return 12;
		case 12:
			var vl = type[2];
			var tot = 0;
			var _g = 0;
			while(_g < vl.length) {
				var vv = vl[_g];
				++_g;
				tot += this.fillRec(Reflect.field(v,vv.name),vv.type,out,pos + tot);
			}
			return tot;
		case 14:
			switch(type[2][1]) {
			case 3:
				if(type[3][1] == 0) {
					var len = type[3][2];
					var v2 = v;
					var size = 0;
					var count = v2.length < len ? v2.length : len;
					var _g1 = 0;
					var _g2 = count;
					while(_g1 < _g2) {
						var i = _g1++;
						out[pos++] = v2[i];
					}
					return len;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			case 5:
				if(type[2][2] == 4) {
					if(type[2][3][1] == 1) {
						if(type[3][1] == 0) {
							var len1 = type[3][2];
							var v3 = v;
							var _g11 = 0;
							var _g3 = len1;
							while(_g11 < _g3) {
								var i1 = _g11++;
								var n1 = v3[i1];
								if(n1 == null) {
									break;
								}
								out[pos++] = n1.x;
								out[pos++] = n1.y;
								out[pos++] = n1.z;
								out[pos++] = n1.w;
							}
							return len1 * 4;
						} else {
							throw new js__$Boot_HaxeError("assert " + Std.string(type));
						}
					} else if(type[3][1] == 0) {
						var len2 = type[3][2];
						var t = type[2];
						var v4 = v;
						var size1 = 0;
						var _g12 = 0;
						var _g4 = len2;
						while(_g12 < _g4) {
							var i2 = _g12++;
							var n2 = v4[i2];
							if(n2 == null) {
								break;
							}
							size1 = this.fillRec(n2,t,out,pos);
							pos += size1;
						}
						return len2 * size1;
					} else {
						throw new js__$Boot_HaxeError("assert " + Std.string(type));
					}
				} else if(type[3][1] == 0) {
					var len3 = type[3][2];
					var t1 = type[2];
					var v5 = v;
					var size2 = 0;
					var _g13 = 0;
					var _g5 = len3;
					while(_g13 < _g5) {
						var i3 = _g13++;
						var n3 = v5[i3];
						if(n3 == null) {
							break;
						}
						size2 = this.fillRec(n3,t1,out,pos);
						pos += size2;
					}
					return len3 * size2;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			case 8:
				if(type[3][1] == 0) {
					var len4 = type[3][2];
					var v6 = v;
					var _g14 = 0;
					var _g6 = len4;
					while(_g14 < _g6) {
						var i4 = _g14++;
						var m3 = v6[i4];
						if(m3 == null) {
							break;
						}
						out[pos++] = m3._11;
						out[pos++] = m3._21;
						out[pos++] = m3._31;
						out[pos++] = m3._41;
						out[pos++] = m3._12;
						out[pos++] = m3._22;
						out[pos++] = m3._32;
						out[pos++] = m3._42;
						out[pos++] = m3._13;
						out[pos++] = m3._23;
						out[pos++] = m3._33;
						out[pos++] = m3._43;
					}
					return len4 * 12;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			default:
				if(type[3][1] == 0) {
					var len5 = type[3][2];
					var t2 = type[2];
					var v7 = v;
					var size3 = 0;
					var _g15 = 0;
					var _g7 = len5;
					while(_g15 < _g7) {
						var i5 = _g15++;
						var n4 = v7[i5];
						if(n4 == null) {
							break;
						}
						size3 = this.fillRec(n4,t2,out,pos);
						pos += size3;
					}
					return len5 * size3;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
			}
			break;
		default:
			throw new js__$Boot_HaxeError("assert " + Std.string(type));
		}
	}
	,getParamValue: function(p,shaders,opt) {
		if(opt == null) {
			opt = false;
		}
		if(p.perObjectGlobal != null) {
			var v = this.globals.map.get(p.perObjectGlobal.gid);
			if(v == null) {
				throw new js__$Boot_HaxeError("Missing global value " + p.perObjectGlobal.path);
			}
			var _g = p.type;
			if(_g[1] == 15) {
				return v.texture;
			}
			return v;
		}
		var si = shaders;
		var n = p.instance;
		while(--n > 0) si = si.next;
		var v1 = si.s.getParamValue(p.index);
		if(v1 == null && !opt) {
			throw new js__$Boot_HaxeError("Missing param value " + Std.string(si.s) + "." + p.name);
		}
		return v1;
	}
	,fillGlobals: function(buf,s) {
		var _gthis = this;
		var buf1 = buf.vertex;
		var s1 = s.vertex;
		var g = s1.globals;
		while(g != null) {
			var v = _gthis.globals.map.get(g.gid);
			if(v == null) {
				if(g.path == "__consts__") {
					_gthis.fillRec(s1.consts,g.type,buf1.globals,g.pos);
					g = g.next;
					continue;
				}
				throw new js__$Boot_HaxeError("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,buf1.globals,g.pos);
			g = g.next;
		}
		var buf2 = buf.fragment;
		var s2 = s.fragment;
		var g1 = s2.globals;
		while(g1 != null) {
			var v1 = _gthis.globals.map.get(g1.gid);
			if(v1 == null) {
				if(g1.path == "__consts__") {
					_gthis.fillRec(s2.consts,g1.type,buf2.globals,g1.pos);
					g1 = g1.next;
					continue;
				}
				throw new js__$Boot_HaxeError("Missing global value " + g1.path);
			}
			_gthis.fillRec(v1,g1.type,buf2.globals,g1.pos);
			g1 = g1.next;
		}
	}
	,fillParams: function(buf,s,shaders) {
		var _gthis = this;
		var buf1 = buf.vertex;
		var s1 = s.vertex;
		var p = s1.params;
		while(p != null) {
			if(p.type == hxsl_Type.TFloat && p.perObjectGlobal == null) {
				var si = shaders;
				var n = p.instance;
				while(--n > 0) si = si.next;
				buf1.params[p.pos] = si.s.getParamFloatValue(p.index);
				p = p.next;
				continue;
			}
			var v;
			if(p.perObjectGlobal != null) {
				var v1 = _gthis.globals.map.get(p.perObjectGlobal.gid);
				if(v1 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p.perObjectGlobal.path);
				}
				var _g = p.type;
				if(_g[1] == 15) {
					v = v1.texture;
				} else {
					v = v1;
				}
			} else {
				var si1 = shaders;
				var n1 = p.instance;
				while(--n1 > 0) si1 = si1.next;
				var v2 = si1.s.getParamValue(p.index);
				if(v2 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si1.s) + "." + p.name);
				}
				v = v2;
			}
			var v3 = v;
			_gthis.fillRec(v3,p.type,buf1.params,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p1 = s1.textures2D;
		while(p1 != null) {
			var t;
			if(p1.perObjectGlobal != null) {
				var v4 = _gthis.globals.map.get(p1.perObjectGlobal.gid);
				if(v4 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p1.perObjectGlobal.path);
				}
				var _g1 = p1.type;
				if(_g1[1] == 15) {
					t = v4.texture;
				} else {
					t = v4;
				}
			} else {
				var si2 = shaders;
				var n2 = p1.instance;
				while(--n2 > 0) si2 = si2.next;
				var v5 = si2.s.getParamValue(p1.index);
				if(v5 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si2.s) + "." + p1.name);
				}
				t = v5;
			}
			var t1 = t;
			if(t1 == null) {
				t1 = h3d_mat_Texture.fromColor(16711935);
			}
			buf1.tex[tid++] = t1;
			p1 = p1.next;
		}
		var p2 = s1.texturesCube;
		while(p2 != null) {
			var t2;
			if(p2.perObjectGlobal != null) {
				var v6 = _gthis.globals.map.get(p2.perObjectGlobal.gid);
				if(v6 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p2.perObjectGlobal.path);
				}
				var _g2 = p2.type;
				if(_g2[1] == 15) {
					t2 = v6.texture;
				} else {
					t2 = v6;
				}
			} else {
				var si3 = shaders;
				var n3 = p2.instance;
				while(--n3 > 0) si3 = si3.next;
				var v7 = si3.s.getParamValue(p2.index);
				if(v7 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si3.s) + "." + p2.name);
				}
				t2 = v7;
			}
			var t3 = t2;
			if(t3 == null) {
				t3 = h3d_mat_Texture.fromColor(16711935);
			}
			buf1.tex[tid++] = t3;
			p2 = p2.next;
		}
		var buf2 = buf.fragment;
		var s2 = s.fragment;
		var p3 = s2.params;
		while(p3 != null) {
			if(p3.type == hxsl_Type.TFloat && p3.perObjectGlobal == null) {
				var si4 = shaders;
				var n4 = p3.instance;
				while(--n4 > 0) si4 = si4.next;
				buf2.params[p3.pos] = si4.s.getParamFloatValue(p3.index);
				p3 = p3.next;
				continue;
			}
			var v8;
			if(p3.perObjectGlobal != null) {
				var v9 = _gthis.globals.map.get(p3.perObjectGlobal.gid);
				if(v9 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p3.perObjectGlobal.path);
				}
				var _g3 = p3.type;
				if(_g3[1] == 15) {
					v8 = v9.texture;
				} else {
					v8 = v9;
				}
			} else {
				var si5 = shaders;
				var n5 = p3.instance;
				while(--n5 > 0) si5 = si5.next;
				var v10 = si5.s.getParamValue(p3.index);
				if(v10 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si5.s) + "." + p3.name);
				}
				v8 = v10;
			}
			var v11 = v8;
			_gthis.fillRec(v11,p3.type,buf2.params,p3.pos);
			p3 = p3.next;
		}
		var tid1 = 0;
		var p4 = s2.textures2D;
		while(p4 != null) {
			var t4;
			if(p4.perObjectGlobal != null) {
				var v12 = _gthis.globals.map.get(p4.perObjectGlobal.gid);
				if(v12 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p4.perObjectGlobal.path);
				}
				var _g4 = p4.type;
				if(_g4[1] == 15) {
					t4 = v12.texture;
				} else {
					t4 = v12;
				}
			} else {
				var si6 = shaders;
				var n6 = p4.instance;
				while(--n6 > 0) si6 = si6.next;
				var v13 = si6.s.getParamValue(p4.index);
				if(v13 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si6.s) + "." + p4.name);
				}
				t4 = v13;
			}
			var t5 = t4;
			if(t5 == null) {
				t5 = h3d_mat_Texture.fromColor(16711935);
			}
			buf2.tex[tid1++] = t5;
			p4 = p4.next;
		}
		var p5 = s2.texturesCube;
		while(p5 != null) {
			var t6;
			if(p5.perObjectGlobal != null) {
				var v14 = _gthis.globals.map.get(p5.perObjectGlobal.gid);
				if(v14 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p5.perObjectGlobal.path);
				}
				var _g5 = p5.type;
				if(_g5[1] == 15) {
					t6 = v14.texture;
				} else {
					t6 = v14;
				}
			} else {
				var si7 = shaders;
				var n7 = p5.instance;
				while(--n7 > 0) si7 = si7.next;
				var v15 = si7.s.getParamValue(p5.index);
				if(v15 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si7.s) + "." + p5.name);
				}
				t6 = v15;
			}
			var t7 = t6;
			if(t7 == null) {
				t7 = h3d_mat_Texture.fromColor(16711935);
			}
			buf2.tex[tid1++] = t7;
			p5 = p5.next;
		}
	}
	,compileShaders: function(shaders) {
		this.globals.maxChannels = 0;
		var _g_last;
		var _g_l = shaders;
		_g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			s1.updateConstants(this.globals);
		}
		this.currentOutput.next = shaders;
		var s2 = this.shaderCache.link(this.currentOutput);
		this.currentOutput.next = null;
		return s2;
	}
	,__class__: h3d_pass_ShaderManager
};
var h3d_pass_ShadowMap = function(size) {
	this.bias = 0.01;
	this.power = 10.0;
	h3d_pass_Default.call(this);
	this.set_size(size);
	this.priority = 9;
	this.lightCamera = new h3d_Camera();
	this.lightCamera.orthoBounds = new h3d_col_Bounds();
	this.shadowMapId = hxsl_Globals.allocID("shadow.map");
	this.shadowProjId = hxsl_Globals.allocID("shadow.proj");
	this.shadowColorId = hxsl_Globals.allocID("shadow.color");
	this.shadowPowerId = hxsl_Globals.allocID("shadow.power");
	this.shadowBiasId = hxsl_Globals.allocID("shadow.bias");
	this.color = new h3d_Vector();
	this.blur = new h3d_pass_Blur(2,3);
	this.border = new h3d_pass_Border(size,size);
	this.customDepth = h3d_Engine.CURRENT.driver.hasFeature(h3d_impl_Feature.AllocDepthBuffer);
	if(!this.customDepth) {
		this.depth = h3d_mat_DepthBuffer.getDefault();
	}
};
$hxClasses["h3d.pass.ShadowMap"] = h3d_pass_ShadowMap;
h3d_pass_ShadowMap.__name__ = ["h3d","pass","ShadowMap"];
h3d_pass_ShadowMap.__super__ = h3d_pass_Default;
h3d_pass_ShadowMap.prototype = $extend(h3d_pass_Default.prototype,{
	set_size: function(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d_pass_Border(s,s);
		}
		return this.size = s;
	}
	,dispose: function() {
		h3d_pass_Default.prototype.dispose.call(this);
		this.blur.dispose();
		if(this.border != null) {
			this.border.dispose();
		}
	}
	,calcShadowBounds: function(camera) {
		var bounds = camera.orthoBounds;
		var mtmp = new h3d_Matrix();
		this.ctx.scene.iterVisibleMeshes(function(m) {
			if(m.primitive == null || !m.material.castShadows) {
				return;
			}
			var b = m.primitive.getBounds();
			if(b.xMin > b.xMax) {
				return;
			}
			var tmp = m.getAbsPos();
			mtmp.multiply3x4(tmp,camera.mcam);
			var p_z;
			var p_y;
			var p_x = b.xMin;
			p_y = b.yMin;
			p_z = b.zMin;
			var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
			var p_z1;
			var p_y1;
			var p_x1 = b.xMin;
			p_y1 = b.yMin;
			p_z1 = b.zMax;
			var px1 = p_x1 * mtmp._11 + p_y1 * mtmp._21 + p_z1 * mtmp._31 + mtmp._41;
			var py1 = p_x1 * mtmp._12 + p_y1 * mtmp._22 + p_z1 * mtmp._32 + mtmp._42;
			var pz1 = p_x1 * mtmp._13 + p_y1 * mtmp._23 + p_z1 * mtmp._33 + mtmp._43;
			p_x1 = px1;
			p_y1 = py1;
			p_z1 = pz1;
			if(p_x1 < bounds.xMin) {
				bounds.xMin = p_x1;
			}
			if(p_x1 > bounds.xMax) {
				bounds.xMax = p_x1;
			}
			if(p_y1 < bounds.yMin) {
				bounds.yMin = p_y1;
			}
			if(p_y1 > bounds.yMax) {
				bounds.yMax = p_y1;
			}
			if(p_z1 < bounds.zMin) {
				bounds.zMin = p_z1;
			}
			if(p_z1 > bounds.zMax) {
				bounds.zMax = p_z1;
			}
			var p_z2;
			var p_y2;
			var p_x2 = b.xMin;
			p_y2 = b.yMax;
			p_z2 = b.zMin;
			var px2 = p_x2 * mtmp._11 + p_y2 * mtmp._21 + p_z2 * mtmp._31 + mtmp._41;
			var py2 = p_x2 * mtmp._12 + p_y2 * mtmp._22 + p_z2 * mtmp._32 + mtmp._42;
			var pz2 = p_x2 * mtmp._13 + p_y2 * mtmp._23 + p_z2 * mtmp._33 + mtmp._43;
			p_x2 = px2;
			p_y2 = py2;
			p_z2 = pz2;
			if(p_x2 < bounds.xMin) {
				bounds.xMin = p_x2;
			}
			if(p_x2 > bounds.xMax) {
				bounds.xMax = p_x2;
			}
			if(p_y2 < bounds.yMin) {
				bounds.yMin = p_y2;
			}
			if(p_y2 > bounds.yMax) {
				bounds.yMax = p_y2;
			}
			if(p_z2 < bounds.zMin) {
				bounds.zMin = p_z2;
			}
			if(p_z2 > bounds.zMax) {
				bounds.zMax = p_z2;
			}
			var p_z3;
			var p_y3;
			var p_x3 = b.xMin;
			p_y3 = b.yMax;
			p_z3 = b.zMax;
			var px3 = p_x3 * mtmp._11 + p_y3 * mtmp._21 + p_z3 * mtmp._31 + mtmp._41;
			var py3 = p_x3 * mtmp._12 + p_y3 * mtmp._22 + p_z3 * mtmp._32 + mtmp._42;
			var pz3 = p_x3 * mtmp._13 + p_y3 * mtmp._23 + p_z3 * mtmp._33 + mtmp._43;
			p_x3 = px3;
			p_y3 = py3;
			p_z3 = pz3;
			if(p_x3 < bounds.xMin) {
				bounds.xMin = p_x3;
			}
			if(p_x3 > bounds.xMax) {
				bounds.xMax = p_x3;
			}
			if(p_y3 < bounds.yMin) {
				bounds.yMin = p_y3;
			}
			if(p_y3 > bounds.yMax) {
				bounds.yMax = p_y3;
			}
			if(p_z3 < bounds.zMin) {
				bounds.zMin = p_z3;
			}
			if(p_z3 > bounds.zMax) {
				bounds.zMax = p_z3;
			}
			var p_z4;
			var p_y4;
			var p_x4 = b.xMax;
			p_y4 = b.yMin;
			p_z4 = b.zMin;
			var px4 = p_x4 * mtmp._11 + p_y4 * mtmp._21 + p_z4 * mtmp._31 + mtmp._41;
			var py4 = p_x4 * mtmp._12 + p_y4 * mtmp._22 + p_z4 * mtmp._32 + mtmp._42;
			var pz4 = p_x4 * mtmp._13 + p_y4 * mtmp._23 + p_z4 * mtmp._33 + mtmp._43;
			p_x4 = px4;
			p_y4 = py4;
			p_z4 = pz4;
			if(p_x4 < bounds.xMin) {
				bounds.xMin = p_x4;
			}
			if(p_x4 > bounds.xMax) {
				bounds.xMax = p_x4;
			}
			if(p_y4 < bounds.yMin) {
				bounds.yMin = p_y4;
			}
			if(p_y4 > bounds.yMax) {
				bounds.yMax = p_y4;
			}
			if(p_z4 < bounds.zMin) {
				bounds.zMin = p_z4;
			}
			if(p_z4 > bounds.zMax) {
				bounds.zMax = p_z4;
			}
			var p_z5;
			var p_y5;
			var p_x5 = b.xMax;
			p_y5 = b.yMin;
			p_z5 = b.zMax;
			var px5 = p_x5 * mtmp._11 + p_y5 * mtmp._21 + p_z5 * mtmp._31 + mtmp._41;
			var py5 = p_x5 * mtmp._12 + p_y5 * mtmp._22 + p_z5 * mtmp._32 + mtmp._42;
			var pz5 = p_x5 * mtmp._13 + p_y5 * mtmp._23 + p_z5 * mtmp._33 + mtmp._43;
			p_x5 = px5;
			p_y5 = py5;
			p_z5 = pz5;
			if(p_x5 < bounds.xMin) {
				bounds.xMin = p_x5;
			}
			if(p_x5 > bounds.xMax) {
				bounds.xMax = p_x5;
			}
			if(p_y5 < bounds.yMin) {
				bounds.yMin = p_y5;
			}
			if(p_y5 > bounds.yMax) {
				bounds.yMax = p_y5;
			}
			if(p_z5 < bounds.zMin) {
				bounds.zMin = p_z5;
			}
			if(p_z5 > bounds.zMax) {
				bounds.zMax = p_z5;
			}
			var p_z6;
			var p_y6;
			var p_x6 = b.xMax;
			p_y6 = b.yMax;
			p_z6 = b.zMin;
			var px6 = p_x6 * mtmp._11 + p_y6 * mtmp._21 + p_z6 * mtmp._31 + mtmp._41;
			var py6 = p_x6 * mtmp._12 + p_y6 * mtmp._22 + p_z6 * mtmp._32 + mtmp._42;
			var pz6 = p_x6 * mtmp._13 + p_y6 * mtmp._23 + p_z6 * mtmp._33 + mtmp._43;
			p_x6 = px6;
			p_y6 = py6;
			p_z6 = pz6;
			if(p_x6 < bounds.xMin) {
				bounds.xMin = p_x6;
			}
			if(p_x6 > bounds.xMax) {
				bounds.xMax = p_x6;
			}
			if(p_y6 < bounds.yMin) {
				bounds.yMin = p_y6;
			}
			if(p_y6 > bounds.yMax) {
				bounds.yMax = p_y6;
			}
			if(p_z6 < bounds.zMin) {
				bounds.zMin = p_z6;
			}
			if(p_z6 > bounds.zMax) {
				bounds.zMax = p_z6;
			}
			var p_z7;
			var p_y7;
			var p_x7 = b.xMax;
			p_y7 = b.yMax;
			p_z7 = b.zMax;
			var px7 = p_x7 * mtmp._11 + p_y7 * mtmp._21 + p_z7 * mtmp._31 + mtmp._41;
			var py7 = p_x7 * mtmp._12 + p_y7 * mtmp._22 + p_z7 * mtmp._32 + mtmp._42;
			var pz7 = p_x7 * mtmp._13 + p_y7 * mtmp._23 + p_z7 * mtmp._33 + mtmp._43;
			p_x7 = px7;
			p_y7 = py7;
			p_z7 = pz7;
			if(p_x7 < bounds.xMin) {
				bounds.xMin = p_x7;
			}
			if(p_x7 > bounds.xMax) {
				bounds.xMax = p_x7;
			}
			if(p_y7 < bounds.yMin) {
				bounds.yMin = p_y7;
			}
			if(p_y7 > bounds.yMax) {
				bounds.yMax = p_y7;
			}
			if(p_z7 < bounds.zMin) {
				bounds.zMin = p_z7;
			}
			if(p_z7 > bounds.zMax) {
				bounds.zMax = p_z7;
			}
		});
		var cameraBounds = new h3d_col_Bounds();
		var _g = 0;
		var _g1 = this.ctx.camera.getFrustumCorners();
		while(_g < _g1.length) {
			var pt = _g1[_g];
			++_g;
			var m1 = camera.mcam;
			var px8 = pt.x * m1._11 + pt.y * m1._21 + pt.z * m1._31 + pt.w * m1._41;
			var py8 = pt.x * m1._12 + pt.y * m1._22 + pt.z * m1._32 + pt.w * m1._42;
			var pz8 = pt.x * m1._13 + pt.y * m1._23 + pt.z * m1._33 + pt.w * m1._43;
			var pw = pt.x * m1._14 + pt.y * m1._24 + pt.z * m1._34 + pt.w * m1._44;
			pt.x = px8;
			pt.y = py8;
			pt.z = pz8;
			pt.w = pw;
			var x = pt.x;
			var y = pt.y;
			var z = pt.z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
		}
		bounds.intersection(bounds,cameraBounds);
		bounds.scaleCenter(1.01);
	}
	,getOutputs: function() {
		return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
	}
	,setGlobals: function() {
		h3d_pass_Default.prototype.setGlobals.call(this);
		var _this = this.lightCamera.orthoBounds;
		_this.xMin = 1e20;
		_this.xMax = -1e20;
		_this.yMin = 1e20;
		_this.yMax = -1e20;
		_this.zMin = 1e20;
		_this.zMax = -1e20;
		this.calcShadowBounds(this.lightCamera);
		this.lightCamera.update();
		var v = this.lightCamera.m;
		this.manager.globals.map.set(this.cameraViewProj_id,v);
	}
	,draw: function(passes) {
		var texture = this.tcache.allocTarget("shadowMap",this.ctx,this.size,this.size,false);
		if(this.customDepth && (this.depth == null || this.depth.width != this.size || this.depth.height != this.size || this.depth.isDisposed())) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_DepthBuffer(this.size,this.size);
		}
		texture.depthBuffer = this.depth;
		var ct = this.ctx.camera.target;
		var slight = this.ctx.lightSystem.shadowLight;
		if(slight == null) {
			var _this = this.lightCamera.target;
			_this.x = 0;
			_this.y = 0;
			_this.z = -1;
			_this.w = 1.;
		} else {
			var _this1 = this.lightCamera.target;
			_this1.x = slight.direction.x;
			_this1.y = slight.direction.y;
			_this1.z = slight.direction.z;
			_this1.w = 1.;
			this.lightCamera.target.normalize();
		}
		this.lightCamera.target.x += ct.x;
		this.lightCamera.target.y += ct.y;
		this.lightCamera.target.z += ct.z;
		var _this2 = this.lightCamera.pos;
		_this2.x = ct.x;
		_this2.y = ct.y;
		_this2.z = ct.z;
		_this2.w = ct.w;
		this.lightCamera.update();
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(16777215,1);
		passes = h3d_pass_Default.prototype.draw.call(this,passes);
		if(this.border != null) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		if(this.blur.quality > 0 && this.blur.passes > 0) {
			this.blur.apply(texture,this.tcache.allocTarget("tmpBlur",this.ctx,this.size,this.size,false),null,true);
		}
		this.ctx.setGlobalID(this.shadowMapId,{ texture : texture});
		this.ctx.setGlobalID(this.shadowProjId,this.lightCamera.m);
		this.ctx.setGlobalID(this.shadowColorId,this.color);
		this.ctx.setGlobalID(this.shadowPowerId,this.power);
		this.ctx.setGlobalID(this.shadowBiasId,this.bias);
		return passes;
	}
	,__class__: h3d_pass_ShadowMap
});
var h3d_prim_BigPrimitive = function(stride,isRaw,pos) {
	if(isRaw == null) {
		isRaw = false;
	}
	this.startIndex = 0;
	this.idxPos = 0;
	this.bufPos = 0;
	h3d_prim_Primitive.call(this);
	this.isRaw = isRaw;
	this.buffers = [];
	this.allIndexes = [];
	this.bounds = new h3d_col_Bounds();
	this.stride = stride;
	if(stride < 3) {
		throw new js__$Boot_HaxeError("Minimum stride = 3");
	}
};
$hxClasses["h3d.prim.BigPrimitive"] = h3d_prim_BigPrimitive;
h3d_prim_BigPrimitive.__name__ = ["h3d","prim","BigPrimitive"];
h3d_prim_BigPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_BigPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	begin: function(vcount,icount) {
		this.startIndex = this.bufPos / this.stride | 0;
		if(this.startIndex + vcount >= 65535) {
			if(vcount >= 65535) {
				throw new js__$Boot_HaxeError("Too many vertices in begin()");
			}
			this.flush();
		}
		if(this.tmpBuf == null) {
			this.tmpBuf = h3d_prim_BigPrimitive.PREV_BUFFER;
			if(this.tmpBuf == null) {
				var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
				this.tmpBuf = this1;
			} else {
				h3d_prim_BigPrimitive.PREV_BUFFER = null;
			}
			var this2 = this.tmpBuf;
			var _g1 = this2.pos;
			var _g = 65535 * this.stride;
			while(_g1 < _g) {
				var i = _g1++;
				if(this2.pos == this2.array.length) {
					var newSize = this2.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(this2.array);
					this2.array = newArray;
				}
				this2.array[this2.pos++] = 0.;
			}
		}
		if(this.tmpIdx == null) {
			this.tmpIdx = h3d_prim_BigPrimitive.PREV_INDEX;
			if(this.tmpIdx == null) {
				var this3 = new Array(0);
				this.tmpIdx = this3;
			} else {
				h3d_prim_BigPrimitive.PREV_INDEX = null;
			}
		}
		if(this.idxPos + icount > this.tmpIdx.length) {
			var size = this.tmpIdx.length == 0 ? 1024 : this.tmpIdx.length;
			var req = this.idxPos + icount;
			while(size < req) size <<= 1;
			var this4 = this.tmpIdx;
			while(this4.length < size) this4.push(0);
		}
	}
	,addPoint: function(x,y,z) {
		this.tmpBuf.array[this.bufPos++] = x;
		this.tmpBuf.array[this.bufPos++] = y;
		this.tmpBuf.array[this.bufPos++] = z;
		var _this = this.bounds;
		if(x < _this.xMin) {
			_this.xMin = x;
		}
		if(x > _this.xMax) {
			_this.xMax = x;
		}
		if(y < _this.yMin) {
			_this.yMin = y;
		}
		if(y > _this.yMax) {
			_this.yMax = y;
		}
		if(z < _this.zMin) {
			_this.zMin = z;
		}
		if(z > _this.zMax) {
			_this.zMax = z;
		}
	}
	,addBounds: function(x,y,z) {
		var _this = this.bounds;
		if(x < _this.xMin) {
			_this.xMin = x;
		}
		if(x > _this.xMax) {
			_this.xMax = x;
		}
		if(y < _this.yMin) {
			_this.yMin = y;
		}
		if(y > _this.yMax) {
			_this.yMax = y;
		}
		if(z < _this.zMin) {
			_this.zMin = z;
		}
		if(z > _this.zMax) {
			_this.zMax = z;
		}
	}
	,addVertexValue: function(v) {
		this.tmpBuf.array[this.bufPos++] = v;
	}
	,addIndex: function(i) {
		this.tmpIdx[this.idxPos++] = i + this.startIndex;
	}
	,triCount: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this.allIndexes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			count += i.count;
		}
		count += this.idxPos;
		return count / 3 | 0;
	}
	,vertexCount: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			count += b.vertices;
		}
		count += this.bufPos / this.stride | 0;
		return count;
	}
	,flush: function() {
		if(this.tmpBuf != null) {
			if(this.bufPos > 0 && this.idxPos > 0) {
				this.flushing = true;
				var b = h3d_Buffer.ofSubFloats(this.tmpBuf,this.stride,this.bufPos / this.stride | 0);
				if(this.isRaw) {
					b.flags |= 1 << h3d_BufferFlag.RawFormat[1];
				}
				this.buffers.push(b);
				this.allIndexes.push(h3d_Indexes.alloc(this.tmpIdx,0,this.idxPos));
				this.flushing = false;
			}
			if(h3d_prim_BigPrimitive.PREV_BUFFER == null || h3d_prim_BigPrimitive.PREV_BUFFER.pos < this.tmpBuf.pos) {
				h3d_prim_BigPrimitive.PREV_BUFFER = this.tmpBuf;
			}
			if(h3d_prim_BigPrimitive.PREV_INDEX == null || h3d_prim_BigPrimitive.PREV_INDEX.length < this.tmpIdx.length) {
				h3d_prim_BigPrimitive.PREV_INDEX = this.tmpIdx;
			}
			this.tmpBuf = null;
			this.tmpIdx = null;
			this.bufPos = 0;
			this.idxPos = 0;
			this.startIndex = 0;
		}
	}
	,render: function(engine) {
		if(this.tmpBuf != null) {
			this.flush();
		}
		var _g1 = 0;
		var _g = this.buffers.length;
		while(_g1 < _g) {
			var i = _g1++;
			engine.renderIndexed(this.buffers[i],this.allIndexes[i]);
		}
	}
	,getBounds: function() {
		return this.bounds;
	}
	,dispose: function() {
		this.clear();
	}
	,clear: function() {
		if(this.flushing) {
			throw new js__$Boot_HaxeError("Cannot clear() BigPrimitive while it's flushing");
		}
		var _this = this.bounds;
		_this.xMin = 1e20;
		_this.xMax = -1e20;
		_this.yMin = 1e20;
		_this.yMax = -1e20;
		_this.zMin = 1e20;
		_this.zMax = -1e20;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.dispose();
		}
		var _g2 = 0;
		var _g11 = this.allIndexes;
		while(_g2 < _g11.length) {
			var i = _g11[_g2];
			++_g2;
			i.dispose();
		}
		this.buffers = [];
		this.allIndexes = [];
		this.bufPos = 0;
		this.tmpBuf = null;
		this.tmpIdx = null;
	}
	,add: function(buf,idx,dx,dy,dz,rotation,scale,stride) {
		if(stride == null) {
			stride = -1;
		}
		if(scale == null) {
			scale = 1.;
		}
		if(rotation == null) {
			rotation = 0.;
		}
		if(dz == null) {
			dz = 0.;
		}
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		this.addSub(buf,idx,0,0,buf.pos / (stride < 0 ? this.stride : stride) | 0,idx.length / 3 | 0,dx,dy,dz,rotation,scale,stride);
		return;
	}
	,addSub: function(buf,idx,startVert,startTri,nvert,triCount,dx,dy,dz,rotation,scale,stride,deltaU,deltaV,color) {
		if(color == null) {
			color = 1.;
		}
		if(deltaV == null) {
			deltaV = 0.;
		}
		if(deltaU == null) {
			deltaU = 0.;
		}
		if(stride == null) {
			stride = -1;
		}
		if(scale == null) {
			scale = 1.;
		}
		if(rotation == null) {
			rotation = 0.;
		}
		if(dz == null) {
			dz = 0.;
		}
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		if(stride < 0) {
			stride = this.stride;
		}
		if(stride < this.stride) {
			throw new js__$Boot_HaxeError("only stride >= " + this.stride + " allowed");
		}
		this.begin(nvert,triCount * 3);
		var start = this.startIndex;
		var cr = Math.cos(rotation);
		var sr = Math.sin(rotation);
		var pos = this.bufPos;
		var tmpBuf = this.tmpBuf;
		var _g1 = 0;
		var _g = nvert;
		while(_g1 < _g) {
			var i = _g1++;
			var p = (i + startVert) * stride;
			var x = buf.array[p++];
			var y = buf.array[p++];
			var z = buf.array[p++];
			var tx = (x * cr - y * sr) * scale;
			var ty = (x * sr + y * cr) * scale;
			var vx = dx + tx;
			var vy = dy + ty;
			var vz = dz + z * scale;
			tmpBuf.array[pos++] = vx;
			tmpBuf.array[pos++] = vy;
			tmpBuf.array[pos++] = vz;
			var _this = this.bounds;
			if(vx < _this.xMin) {
				_this.xMin = vx;
			}
			if(vx > _this.xMax) {
				_this.xMax = vx;
			}
			if(vy < _this.yMin) {
				_this.yMin = vy;
			}
			if(vy > _this.yMax) {
				_this.yMax = vy;
			}
			if(vz < _this.zMin) {
				_this.zMin = vz;
			}
			if(vz > _this.zMax) {
				_this.zMax = vz;
			}
			var _g2 = this.stride;
			switch(_g2) {
			case 3:
				continue;
				break;
			case 4:
				tmpBuf.array[pos++] = buf.array[p++];
				break;
			case 5:
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				tmpBuf.array[pos++] = buf.array[p++] + deltaV;
				break;
			case 6:
				var nx = buf.array[p++];
				var ny = buf.array[p++];
				var nz = buf.array[p++];
				var tnx = nx * cr - ny * sr;
				var tny = nx * sr + ny * cr;
				tmpBuf.array[pos++] = tnx;
				tmpBuf.array[pos++] = tny;
				tmpBuf.array[pos++] = nz;
				break;
			case 7:
				var nx1 = buf.array[p++];
				var ny1 = buf.array[p++];
				var nz1 = buf.array[p++];
				var tnx1 = nx1 * cr - ny1 * sr;
				var tny1 = nx1 * sr + ny1 * cr;
				tmpBuf.array[pos++] = tnx1;
				tmpBuf.array[pos++] = tny1;
				tmpBuf.array[pos++] = nz1;
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				break;
			case 8:case 9:case 10:
				var nx2 = buf.array[p++];
				var ny2 = buf.array[p++];
				var nz2 = buf.array[p++];
				var tnx2 = nx2 * cr - ny2 * sr;
				var tny2 = nx2 * sr + ny2 * cr;
				tmpBuf.array[pos++] = tnx2;
				tmpBuf.array[pos++] = tny2;
				tmpBuf.array[pos++] = nz2;
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				tmpBuf.array[pos++] = buf.array[p++] + deltaV;
				var _g3 = 8;
				var _g21 = this.stride;
				while(_g3 < _g21) {
					var i1 = _g3++;
					tmpBuf.array[pos++] = buf.array[p++];
				}
				break;
			default:
				var nx3 = buf.array[p++];
				var ny3 = buf.array[p++];
				var nz3 = buf.array[p++];
				var tnx3 = nx3 * cr - ny3 * sr;
				var tny3 = nx3 * sr + ny3 * cr;
				tmpBuf.array[pos++] = tnx3;
				tmpBuf.array[pos++] = tny3;
				tmpBuf.array[pos++] = nz3;
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				tmpBuf.array[pos++] = buf.array[p++] + deltaV;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				var _g31 = 11;
				var _g22 = this.stride;
				while(_g31 < _g22) {
					var i2 = _g31++;
					tmpBuf.array[pos++] = buf.array[p++];
				}
			}
		}
		this.bufPos = pos;
		start -= startVert;
		var _g11 = 0;
		var _g4 = triCount * 3;
		while(_g11 < _g4) {
			var i3 = _g11++;
			var tmp = idx[i3 + startTri * 3] + start;
			this.tmpIdx[this.idxPos++] = tmp;
		}
	}
	,customSerialize: function(ctx) {
		this.flush();
		ctx.out.b.push(this.isRaw ? 1 : 0);
		var v = this.stride;
		if(v >= 0 && v < 128) {
			ctx.out.b.push(v);
		} else {
			ctx.out.b.push(128);
			ctx.out.addInt32(v);
		}
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.bounds.xMin));
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.bounds.yMin));
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.bounds.zMin));
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.bounds.xMax));
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.bounds.yMax));
		ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.bounds.zMax));
		var v1 = this.buffers.length;
		if(v1 >= 0 && v1 < 128) {
			ctx.out.b.push(v1);
		} else {
			ctx.out.b.push(128);
			ctx.out.addInt32(v1);
		}
		var reqSize = 0;
		var _g = 0;
		var _g1 = this.allIndexes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var sz = a.count << 1;
			if(reqSize < sz) {
				reqSize = sz;
			}
		}
		var _g2 = 0;
		var _g11 = this.buffers;
		while(_g2 < _g11.length) {
			var b = _g11[_g2];
			++_g2;
			var sz1 = b.vertices * this.stride << 2;
			if(reqSize < sz1) {
				reqSize = sz1;
			}
		}
		var tmpBytes = new haxe_io_Bytes(new ArrayBuffer(reqSize));
		var _g12 = 0;
		var _g3 = this.buffers.length;
		while(_g12 < _g3) {
			var i = _g12++;
			var idx = this.allIndexes[i];
			idx.readBytes(tmpBytes,0,idx.count);
			var v2 = idx.count;
			if(v2 >= 0 && v2 < 128) {
				ctx.out.b.push(v2);
			} else {
				ctx.out.b.push(128);
				ctx.out.addInt32(v2);
			}
			var len = idx.count << 1;
			if(tmpBytes == null) {
				ctx.out.b.push(0);
			} else {
				var v3 = len + 1;
				if(v3 >= 0 && v3 < 128) {
					ctx.out.b.push(v3);
				} else {
					ctx.out.b.push(128);
					ctx.out.addInt32(v3);
				}
				var _this = ctx.out;
				if(len < 0 || len > tmpBytes.length) {
					throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
				}
				var b1 = _this.b;
				var b2 = tmpBytes.b;
				var _g13 = 0;
				var _g4 = len;
				while(_g13 < _g4) {
					var i1 = _g13++;
					_this.b.push(b2[i1]);
				}
			}
			var b3 = this.buffers[i];
			b3.readBytes(tmpBytes,0,b3.vertices);
			var v4 = b3.vertices;
			if(v4 >= 0 && v4 < 128) {
				ctx.out.b.push(v4);
			} else {
				ctx.out.b.push(128);
				ctx.out.addInt32(v4);
			}
			var len1 = b3.vertices * this.stride << 2;
			if(tmpBytes == null) {
				ctx.out.b.push(0);
			} else {
				var v5 = len1 + 1;
				if(v5 >= 0 && v5 < 128) {
					ctx.out.b.push(v5);
				} else {
					ctx.out.b.push(128);
					ctx.out.addInt32(v5);
				}
				var _this1 = ctx.out;
				if(len1 < 0 || len1 > tmpBytes.length) {
					throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
				}
				var b11 = _this1.b;
				var b21 = tmpBytes.b;
				var _g14 = 0;
				var _g5 = len1;
				while(_g14 < _g5) {
					var i2 = _g14++;
					_this1.b.push(b21[i2]);
				}
			}
		}
	}
	,customUnserialize: function(ctx) {
		this.isRaw = ctx.input.b[ctx.inPos++] != 0;
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		this.stride = v;
		this.bounds = new h3d_col_Bounds();
		var v1 = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.bounds.xMin = v1;
		var v2 = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.bounds.yMin = v2;
		var v3 = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.bounds.zMin = v3;
		var v4 = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.bounds.xMin = v4;
		var v5 = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.bounds.yMax = v5;
		var v6 = ctx.input.getFloat(ctx.inPos);
		ctx.inPos += 4;
		this.bounds.zMax = v6;
		var v7 = ctx.input.b[ctx.inPos++];
		if(v7 == 128) {
			v7 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var count = v7;
		this.buffers = [];
		this.allIndexes = [];
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			var v8 = ctx.input.b[ctx.inPos++];
			if(v8 == 128) {
				v8 = ctx.input.getInt32(ctx.inPos);
				ctx.inPos += 4;
			}
			var nidx = v8;
			var idx = new h3d_Indexes(nidx);
			var v9 = ctx.input.b[ctx.inPos++];
			if(v9 == 128) {
				v9 = ctx.input.getInt32(ctx.inPos);
				ctx.inPos += 4;
			}
			var len = v9;
			var tmp;
			if(len == 0) {
				tmp = null;
			} else {
				--len;
				var s = ctx.input.sub(ctx.inPos,len);
				ctx.inPos += len;
				tmp = s;
			}
			idx.uploadBytes(tmp,0,nidx);
			this.allIndexes.push(idx);
			var v10 = ctx.input.b[ctx.inPos++];
			if(v10 == 128) {
				v10 = ctx.input.getInt32(ctx.inPos);
				ctx.inPos += 4;
			}
			var nvert = v10;
			var buf = new h3d_Buffer(nvert,this.stride);
			var v11 = ctx.input.b[ctx.inPos++];
			if(v11 == 128) {
				v11 = ctx.input.getInt32(ctx.inPos);
				ctx.inPos += 4;
			}
			var len1 = v11;
			var tmp1;
			if(len1 == 0) {
				tmp1 = null;
			} else {
				--len1;
				var s1 = ctx.input.sub(ctx.inPos,len1);
				ctx.inPos += len1;
				tmp1 = s1;
			}
			buf.uploadBytes(tmp1,0,nvert);
			this.buffers.push(buf);
		}
	}
	,getCLID: function() {
		return h3d_prim_BigPrimitive.__clid;
	}
	,unserializeInit: function() {
		h3d_prim_Primitive.prototype.unserializeInit.call(this);
		this.bufPos = 0;
		this.idxPos = 0;
		this.startIndex = 0;
	}
	,unserialize: function(__ctx) {
		h3d_prim_Primitive.prototype.unserialize.call(this,__ctx);
	}
	,__class__: h3d_prim_BigPrimitive
});
var h3d_prim_MeshPrimitive = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.MeshPrimitive"] = h3d_prim_MeshPrimitive;
h3d_prim_MeshPrimitive.__name__ = ["h3d","prim","MeshPrimitive"];
h3d_prim_MeshPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_MeshPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	allocBuffer: function(engine,name) {
		return null;
	}
	,hasBuffer: function(name) {
		if(this.bufferCache == null) {
			return false;
		}
		var this1 = this.bufferCache;
		var key = hxsl_Globals.allocID(name);
		return this1.h.hasOwnProperty(key);
	}
	,addBuffer: function(name,buf,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(this.bufferCache == null) {
			this.bufferCache = new haxe_ds_IntMap();
		}
		var id = hxsl_Globals.allocID(name);
		var old = this.bufferCache.h[id];
		if(old != null) {
			old.dispose();
		}
		var this1 = this.bufferCache;
		var value = new h3d_BufferOffset(buf,offset);
		this1.h[id] = value;
	}
	,dispose: function() {
		h3d_prim_Primitive.prototype.dispose.call(this);
		if(this.bufferCache != null) {
			var b = this.bufferCache.iterator();
			while(b.hasNext()) {
				var b1 = b.next();
				b1.dispose();
			}
		}
		this.bufferCache = null;
		this.prevNames = null;
	}
	,getBuffers: function(engine) {
		if(this.bufferCache == null) {
			this.bufferCache = new haxe_ds_IntMap();
		}
		var names = engine.driver.getShaderInputNames();
		if(names == this.prevNames) {
			return this.prevBuffers;
		}
		var buffers = null;
		var prev = null;
		var _g = 0;
		while(_g < names.length) {
			var name = names[_g];
			++_g;
			var id = hxsl_Globals.allocID(name);
			var b = this.bufferCache.h[id];
			if(b == null) {
				b = this.allocBuffer(engine,name);
				if(b == null) {
					throw new js__$Boot_HaxeError("Buffer " + name + " is not available");
				}
				this.bufferCache.h[id] = b;
			}
			b.next = null;
			if(prev == null) {
				prev = b;
				buffers = prev;
			} else {
				prev.next = b;
				prev = b;
			}
		}
		this.prevNames = names;
		return this.prevBuffers = buffers;
	}
	,render: function(engine) {
		if(this.indexes == null || this.indexes.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderMultiBuffers(this.getBuffers(engine),this.indexes);
	}
	,getCLID: function() {
		return h3d_prim_MeshPrimitive.__clid;
	}
	,__class__: h3d_prim_MeshPrimitive
});
var h3d_prim_HMDModel = function(data,dataPos,lib) {
	this.bufferAliases = new haxe_ds_StringMap();
	h3d_prim_MeshPrimitive.call(this);
	this.data = data;
	this.dataPosition = dataPos;
	this.lib = lib;
};
$hxClasses["h3d.prim.HMDModel"] = h3d_prim_HMDModel;
h3d_prim_HMDModel.__name__ = ["h3d","prim","HMDModel"];
h3d_prim_HMDModel.__super__ = h3d_prim_MeshPrimitive;
h3d_prim_HMDModel.prototype = $extend(h3d_prim_MeshPrimitive.prototype,{
	triCount: function() {
		return this.data.get_indexCount() / 3 | 0;
	}
	,vertexCount: function() {
		return this.data.vertexCount;
	}
	,getBounds: function() {
		return this.data.bounds;
	}
	,selectMaterial: function(i) {
		this.curMaterial = i;
	}
	,getDataBuffers: function(fmt,defaults,material) {
		return this.lib.getBuffers(this.data,fmt,defaults,material);
	}
	,loadSkin: function(skin) {
		this.lib.loadSkin(this.data,skin);
	}
	,addAlias: function(name,realName,offset) {
		if(offset == null) {
			offset = 0;
		}
		var _this = this.bufferAliases;
		var value = { realName : realName, offset : offset};
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
	}
	,alloc: function(engine) {
		this.dispose();
		this.buffer = new h3d_Buffer(this.data.vertexCount,this.data.vertexStride);
		var entry = this.lib.entry;
		entry.open();
		entry.skip(this.dataPosition + this.data.vertexPosition);
		var size = this.data.vertexCount * this.data.vertexStride * 4;
		var bytes = hxd_impl_Tmp.getBytes(size);
		entry.read(bytes,0,size);
		this.buffer.uploadBytes(bytes,0,this.data.vertexCount);
		hxd_impl_Tmp.saveBytes(bytes);
		this.indexCount = 0;
		this.indexesTriPos = [];
		var _g = 0;
		var _g1 = this.data.indexCounts;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			this.indexesTriPos.push(this.indexCount / 3 | 0);
			this.indexCount += n;
		}
		this.indexes = new h3d_Indexes(this.indexCount);
		entry.skip(this.data.indexPosition - (this.data.vertexPosition + size));
		var bytes1 = hxd_impl_Tmp.getBytes(this.indexCount * 2);
		entry.read(bytes1,0,this.indexCount * 2);
		this.indexes.uploadBytes(bytes1,0,this.indexCount);
		hxd_impl_Tmp.saveBytes(bytes1);
		entry.close();
		var pos = 0;
		var _g2 = 0;
		var _g11 = this.data.vertexFormat;
		while(_g2 < _g11.length) {
			var f = _g11[_g2];
			++_g2;
			this.addBuffer(f.name,this.buffer,pos);
			pos += f.format & 7;
		}
		if(this.normalsRecomputed != null) {
			this.recomputeNormals(this.normalsRecomputed);
		}
		var name = this.bufferAliases.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var _this = this.bufferAliases;
			var alias = __map_reserved[name1] != null ? _this.getReserved(name1) : _this.h[name1];
			var this1 = this.bufferCache;
			var key = hxsl_Globals.allocID(alias.realName);
			var buffer = this1.h[key];
			if(buffer == null) {
				throw new js__$Boot_HaxeError("Buffer " + alias.realName + " not found for alias " + name1);
			}
			if(buffer.offset + alias.offset > buffer.buffer.buffer.stride) {
				throw new js__$Boot_HaxeError("Alias " + name1 + " for buffer " + alias.realName + " outside stride");
			}
			this.addBuffer(name1,buffer.buffer,buffer.offset + alias.offset);
		}
	}
	,recomputeNormals: function(name) {
		if(name == null) {
			name = "normal";
		}
		var pos = this.lib.getBuffers(this.data,[new hxd_fmt_hmd_GeometryFormat("position",3)]);
		var ids = [];
		var pts = [];
		var _g1 = 0;
		var _g = this.data.vertexCount;
		while(_g1 < _g) {
			var i = _g1++;
			var added = false;
			var pt = new h3d_col_Point(pos.vertexes[i * 3],pos.vertexes[i * 3 + 1],pos.vertexes[i * 3 + 2]);
			var _g3 = 0;
			var _g2 = pts.length;
			while(_g3 < _g2) {
				var i1 = _g3++;
				var p = pts[i1];
				if(p.x == pt.x && p.y == pt.y && p.z == pt.z) {
					ids.push(i1);
					added = true;
					break;
				}
			}
			if(!added) {
				ids.push(pts.length);
				pts.push(pt);
			}
		}
		var this1 = new Array(0);
		var idx = this1;
		var _g4 = 0;
		var _g11 = pos.indexes;
		while(_g4 < _g11.length) {
			var i2 = _g11[_g4];
			++_g4;
			idx.push(ids[i2]);
		}
		var pol = new h3d_prim_Polygon(pts,idx);
		pol.addNormals();
		var this2 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		var v = this2;
		var _g12 = 0;
		var _g5 = this.data.vertexCount;
		while(_g12 < _g5) {
			var i3 = _g12++;
			var n = pol.normals[ids[i3]];
			var v1 = n.x;
			if(v.pos == v.array.length) {
				var newSize = v.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(v.array);
				v.array = newArray;
			}
			v.array[v.pos++] = v1;
			var v2 = n.y;
			if(v.pos == v.array.length) {
				var newSize1 = v.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(v.array);
				v.array = newArray1;
			}
			v.array[v.pos++] = v2;
			var v3 = n.z;
			if(v.pos == v.array.length) {
				var newSize2 = v.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(v.array);
				v.array = newArray2;
			}
			v.array[v.pos++] = v3;
		}
		var buf = h3d_Buffer.ofFloats(v,3);
		this.addBuffer(name,buf,0);
		this.normalsRecomputed = name;
	}
	,render: function(engine) {
		if(this.curMaterial < 0) {
			h3d_prim_MeshPrimitive.prototype.render.call(this,engine);
			return;
		}
		if(this.indexes == null || this.indexes.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderMultiBuffers(this.getBuffers(engine),this.indexes,this.indexesTriPos[this.curMaterial],this.data.indexCounts[this.curMaterial] / 3 | 0);
		this.curMaterial = -1;
	}
	,initCollider: function(poly) {
		var buf = this.lib.getBuffers(this.data,[new hxd_fmt_hmd_GeometryFormat("position",3)]);
		poly.setData(buf.vertexes,buf.indexes);
		if(this.collider == null) {
			var _this = this.data.bounds;
			var dx = _this.xMax - _this.xMin;
			var dy = _this.yMax - _this.yMin;
			var dz = _this.zMax - _this.zMin;
			var sphere = new h3d_col_Sphere((_this.xMin + _this.xMax) * 0.5,(_this.yMin + _this.yMax) * 0.5,(_this.zMin + _this.zMax) * 0.5,Math.sqrt(dx * dx + dy * dy + dz * dz) * 0.5);
			this.collider = new h3d_col_OptimizedCollider(sphere,poly);
		}
	}
	,getCollider: function() {
		if(this.collider != null) {
			return this.collider;
		}
		var poly = new h3d_col_PolygonBuffer();
		poly.source = { entry : this.lib.entry, geometryName : null};
		var _g = 0;
		var _g1 = this.lib.header.models;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			if(this.lib.header.geometries[h.geometry] == this.data) {
				poly.source.geometryName = h.name;
				break;
			}
		}
		this.initCollider(poly);
		return this.collider;
	}
	,customSerialize: function(ctx) {
		var s = this.lib.entry.get_path();
		if(s == null) {
			ctx.out.b.push(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				ctx.out.b.push(v);
			} else {
				ctx.out.b.push(128);
				ctx.out.addInt32(v);
			}
			var _this = ctx.out;
			var b1 = _this.b;
			var b2 = b.b;
			var _g1 = 0;
			var _g = b.length;
			while(_g1 < _g) {
				var i = _g1++;
				_this.b.push(b2[i]);
			}
		}
		var _g2 = 0;
		var _g11 = this.lib.header.models;
		while(_g2 < _g11.length) {
			var m = _g11[_g2];
			++_g2;
			if(this.lib.header.geometries[m.geometry] == this.data) {
				var s1 = m.name;
				if(s1 == null) {
					ctx.out.b.push(0);
				} else {
					var b3 = haxe_io_Bytes.ofString(s1);
					var v1 = b3.length + 1;
					if(v1 >= 0 && v1 < 128) {
						ctx.out.b.push(v1);
					} else {
						ctx.out.b.push(128);
						ctx.out.addInt32(v1);
					}
					var _this1 = ctx.out;
					var b11 = _this1.b;
					var b21 = b3.b;
					var _g12 = 0;
					var _g3 = b3.length;
					while(_g12 < _g3) {
						var i1 = _g12++;
						_this1.b.push(b21[i1]);
					}
				}
				break;
			}
		}
	}
	,customUnserialize: function(ctx) {
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len = v;
		var libPath;
		if(len == 0) {
			libPath = null;
		} else {
			--len;
			var s = ctx.input.getString(ctx.inPos,len);
			ctx.inPos += len;
			libPath = s;
		}
		var v1 = ctx.input.b[ctx.inPos++];
		if(v1 == 128) {
			v1 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len1 = v1;
		var modelPath;
		if(len1 == 0) {
			modelPath = null;
		} else {
			--len1;
			var s1 = ctx.input.getString(ctx.inPos,len1);
			ctx.inPos += len1;
			modelPath = s1;
		}
		var ctx1 = ctx;
		this.lib = ctx1.loadHMD(libPath);
		var _g = 0;
		var _g1 = this.lib.header.models;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.name == modelPath) {
				this.data = this.lib.header.geometries[m.geometry];
				this.lib.cachedPrimitives[m.geometry] = this;
				break;
			}
		}
		this.dataPosition = this.lib.header.dataPosition;
	}
	,getCLID: function() {
		return h3d_prim_HMDModel.__clid;
	}
	,unserializeInit: function() {
		h3d_prim_MeshPrimitive.prototype.unserializeInit.call(this);
		this.bufferAliases = new haxe_ds_StringMap();
	}
	,unserialize: function(__ctx) {
		h3d_prim_MeshPrimitive.prototype.unserialize.call(this,__ctx);
	}
	,__class__: h3d_prim_HMDModel
});
var h3d_prim_Plan2D = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.Plan2D"] = h3d_prim_Plan2D;
h3d_prim_Plan2D.__name__ = ["h3d","prim","Plan2D"];
h3d_prim_Plan2D.get = function() {
	if(h3d_prim_Plan2D.inst == null) {
		h3d_prim_Plan2D.inst = new h3d_prim_Plan2D();
	}
	return h3d_prim_Plan2D.inst;
};
h3d_prim_Plan2D.__super__ = h3d_prim_Primitive;
h3d_prim_Plan2D.prototype = $extend(h3d_prim_Primitive.prototype,{
	triCount: function() {
		return 2;
	}
	,vertexCount: function() {
		return 4;
	}
	,alloc: function(engine) {
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		var v = this1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize1 = v.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(v.array);
			v.array = newArray1;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize2 = v.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(v.array);
			v.array = newArray2;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize3 = v.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(v.array);
			v.array = newArray3;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize4 = v.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(v.array);
			v.array = newArray4;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize5 = v.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(v.array);
			v.array = newArray5;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize6 = v.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(v.array);
			v.array = newArray6;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize7 = v.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(v.array);
			v.array = newArray7;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize8 = v.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(v.array);
			v.array = newArray8;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize9 = v.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(v.array);
			v.array = newArray9;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize10 = v.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(v.array);
			v.array = newArray10;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize11 = v.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(v.array);
			v.array = newArray11;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize12 = v.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(v.array);
			v.array = newArray12;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize13 = v.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(v.array);
			v.array = newArray13;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize14 = v.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(v.array);
			v.array = newArray14;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize15 = v.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(v.array);
			v.array = newArray15;
		}
		v.array[v.pos++] = 0;
		this.buffer = h3d_Buffer.ofFloats(v,4,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
	}
	,getCLID: function() {
		return h3d_prim_Plan2D.__clid;
	}
	,__class__: h3d_prim_Plan2D
});
var h3d_prim_Polygon = function(points,idx) {
	this.translatedZ = 0.;
	this.translatedY = 0.;
	this.translatedX = 0.;
	this.scaled = 1.;
	h3d_prim_Primitive.call(this);
	this.points = points;
	this.idx = idx;
};
$hxClasses["h3d.prim.Polygon"] = h3d_prim_Polygon;
h3d_prim_Polygon.__name__ = ["h3d","prim","Polygon"];
h3d_prim_Polygon.__super__ = h3d_prim_Primitive;
h3d_prim_Polygon.prototype = $extend(h3d_prim_Primitive.prototype,{
	getBounds: function() {
		var b = new h3d_col_Bounds();
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p.x < b.xMin) {
				b.xMin = p.x;
			}
			if(p.x > b.xMax) {
				b.xMax = p.x;
			}
			if(p.y < b.yMin) {
				b.yMin = p.y;
			}
			if(p.y > b.yMax) {
				b.yMax = p.y;
			}
			if(p.z < b.zMin) {
				b.zMin = p.z;
			}
			if(p.z > b.zMax) {
				b.zMax = p.z;
			}
		}
		return b;
	}
	,alloc: function(engine) {
		this.dispose();
		var size = 3;
		if(this.normals != null) {
			size += 3;
		}
		if(this.uvs != null) {
			size += 2;
		}
		if(this.colors != null) {
			size += 3;
		}
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		var buf = this1;
		var _g1 = 0;
		var _g = this.points.length;
		while(_g1 < _g) {
			var k = _g1++;
			var p = this.points[k];
			var v = p.x;
			if(buf.pos == buf.array.length) {
				var newSize = buf.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(buf.array);
				buf.array = newArray;
			}
			buf.array[buf.pos++] = v;
			var v1 = p.y;
			if(buf.pos == buf.array.length) {
				var newSize1 = buf.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(buf.array);
				buf.array = newArray1;
			}
			buf.array[buf.pos++] = v1;
			var v2 = p.z;
			if(buf.pos == buf.array.length) {
				var newSize2 = buf.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(buf.array);
				buf.array = newArray2;
			}
			buf.array[buf.pos++] = v2;
			if(this.normals != null) {
				var n = this.normals[k];
				var v3 = n.x;
				if(buf.pos == buf.array.length) {
					var newSize3 = buf.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(buf.array);
					buf.array = newArray3;
				}
				buf.array[buf.pos++] = v3;
				var v4 = n.y;
				if(buf.pos == buf.array.length) {
					var newSize4 = buf.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(buf.array);
					buf.array = newArray4;
				}
				buf.array[buf.pos++] = v4;
				var v5 = n.z;
				if(buf.pos == buf.array.length) {
					var newSize5 = buf.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(buf.array);
					buf.array = newArray5;
				}
				buf.array[buf.pos++] = v5;
			}
			if(this.uvs != null) {
				var t = this.uvs[k];
				var v6 = t.u;
				if(buf.pos == buf.array.length) {
					var newSize6 = buf.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(buf.array);
					buf.array = newArray6;
				}
				buf.array[buf.pos++] = v6;
				var v7 = t.v;
				if(buf.pos == buf.array.length) {
					var newSize7 = buf.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(buf.array);
					buf.array = newArray7;
				}
				buf.array[buf.pos++] = v7;
			}
			if(this.colors != null) {
				var c = this.colors[k];
				var v8 = c.x;
				if(buf.pos == buf.array.length) {
					var newSize8 = buf.array.length << 1;
					if(newSize8 < 128) {
						newSize8 = 128;
					}
					var newArray8 = new Float32Array(newSize8);
					newArray8.set(buf.array);
					buf.array = newArray8;
				}
				buf.array[buf.pos++] = v8;
				var v9 = c.y;
				if(buf.pos == buf.array.length) {
					var newSize9 = buf.array.length << 1;
					if(newSize9 < 128) {
						newSize9 = 128;
					}
					var newArray9 = new Float32Array(newSize9);
					newArray9.set(buf.array);
					buf.array = newArray9;
				}
				buf.array[buf.pos++] = v9;
				var v10 = c.z;
				if(buf.pos == buf.array.length) {
					var newSize10 = buf.array.length << 1;
					if(newSize10 < 128) {
						newSize10 = 128;
					}
					var newArray10 = new Float32Array(newSize10);
					newArray10.set(buf.array);
					buf.array = newArray10;
				}
				buf.array[buf.pos++] = v10;
			}
		}
		var flags = [];
		if(this.idx == null) {
			flags.push(h3d_BufferFlag.Triangles);
		}
		if(this.normals == null) {
			flags.push(h3d_BufferFlag.RawFormat);
		}
		this.buffer = h3d_Buffer.ofFloats(buf,size,flags);
		if(this.idx != null) {
			this.indexes = h3d_Indexes.alloc(this.idx);
		}
	}
	,unindex: function() {
		if(this.idx != null && this.points.length != this.idx.length) {
			var p = [];
			var _g1 = 0;
			var _g = this.idx.length;
			while(_g1 < _g) {
				var i = _g1++;
				var _this = this.points[this.idx[i]];
				p.push(new h3d_col_Point(_this.x,_this.y,_this.z));
			}
			if(this.normals != null) {
				var n = [];
				var _g11 = 0;
				var _g2 = this.idx.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					var _this1 = this.normals[this.idx[i1]];
					n.push(new h3d_col_Point(_this1.x,_this1.y,_this1.z));
				}
				this.normals = n;
			}
			if(this.colors != null) {
				var n1 = [];
				var _g12 = 0;
				var _g3 = this.idx.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					var _this2 = this.colors[this.idx[i2]];
					n1.push(new h3d_col_Point(_this2.x,_this2.y,_this2.z));
				}
				this.colors = n1;
			}
			if(this.uvs != null) {
				var t = [];
				var _g13 = 0;
				var _g4 = this.idx.length;
				while(_g13 < _g4) {
					var i3 = _g13++;
					t.push(this.uvs[this.idx[i3]].clone());
				}
				this.uvs = t;
			}
			this.points = p;
			this.idx = null;
		}
	}
	,translate: function(dx,dy,dz) {
		this.translatedX += dx;
		this.translatedY += dy;
		this.translatedZ += dz;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.x += dx;
			p.y += dy;
			p.z += dz;
		}
	}
	,scale: function(s) {
		this.scaled *= s;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.x *= s;
			p.y *= s;
			p.z *= s;
		}
	}
	,addNormals: function() {
		this.normals = [];
		var _g1 = 0;
		var _g = this.points.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.normals[i] = new h3d_col_Point();
		}
		var pos = 0;
		var _g11 = 0;
		var _g2 = this.triCount();
		while(_g11 < _g2) {
			var i1 = _g11++;
			var i0;
			var i11;
			var i2;
			if(this.idx == null) {
				i0 = pos++;
				i11 = pos++;
				i2 = pos++;
			} else {
				i0 = this.idx[pos++];
				i11 = this.idx[pos++];
				i2 = this.idx[pos++];
			}
			var p0 = this.points[i0];
			var p1 = this.points[i11];
			var p2 = this.points[i2];
			var n_z;
			var n_y;
			var n_x;
			var _this_z;
			var _this_y;
			var _this_x = p1.x - p0.x;
			_this_y = p1.y - p0.y;
			_this_z = p1.z - p0.z;
			var p_z;
			var p_y;
			var p_x = p2.x - p0.x;
			p_y = p2.y - p0.y;
			p_z = p2.z - p0.z;
			n_x = _this_y * p_z - _this_z * p_y;
			n_y = _this_z * p_x - _this_x * p_z;
			n_z = _this_x * p_y - _this_y * p_x;
			this.normals[i0].x += n_x;
			this.normals[i0].y += n_y;
			this.normals[i0].z += n_z;
			this.normals[i11].x += n_x;
			this.normals[i11].y += n_y;
			this.normals[i11].z += n_z;
			this.normals[i2].x += n_x;
			this.normals[i2].y += n_y;
			this.normals[i2].z += n_z;
		}
		var _g3 = 0;
		var _g12 = this.normals;
		while(_g3 < _g12.length) {
			var n = _g12[_g3];
			++_g3;
			n.normalize();
		}
	}
	,addUVs: function() {
		throw new js__$Boot_HaxeError("Not implemented for this polygon");
	}
	,uvScale: function(su,sv) {
		if(this.uvs == null) {
			throw new js__$Boot_HaxeError("Missing UVs");
		}
		var m = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = this.uvs;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(m.h.__keys__[t.__id__] != null) {
				continue;
			}
			m.set(t,true);
			t.u *= su;
			t.v *= sv;
		}
	}
	,triCount: function() {
		var n = h3d_prim_Primitive.prototype.triCount.call(this);
		if(n != 0) {
			return n;
		}
		return (this.idx == null ? this.points.length : this.idx.length) / 3 | 0;
	}
	,vertexCount: function() {
		return this.points.length;
	}
	,getCollider: function() {
		var length = this.points.length * 3;
		var this1 = new Array(length);
		var vertexes = this1;
		var length1 = this.idx.length;
		var this2 = new Array(length1);
		var indexes = this2;
		var vid = 0;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			vertexes[vid++] = p.x;
			vertexes[vid++] = p.y;
			vertexes[vid++] = p.z;
		}
		var _g11 = 0;
		var _g2 = this.idx.length;
		while(_g11 < _g2) {
			var i = _g11++;
			indexes[i] = this.idx[i];
		}
		var poly = new h3d_col_Polygon();
		poly.addBuffers(vertexes,indexes);
		return poly;
	}
	,customSerialize: function(ctx) {
		var v = this.points.length;
		if(v >= 0 && v < 128) {
			ctx.out.b.push(v);
		} else {
			ctx.out.b.push(128);
			ctx.out.addInt32(v);
		}
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(p.x));
			ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(p.y));
			ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(p.z));
		}
		if(this.normals == null) {
			ctx.out.b.push(0);
		} else {
			var v1 = this.normals.length;
			if(v1 >= 0 && v1 < 128) {
				ctx.out.b.push(v1);
			} else {
				ctx.out.b.push(128);
				ctx.out.addInt32(v1);
			}
			var _g2 = 0;
			var _g11 = this.normals;
			while(_g2 < _g11.length) {
				var p1 = _g11[_g2];
				++_g2;
				ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(p1.x));
				ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(p1.y));
				ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(p1.z));
			}
		}
		if(this.uvs == null) {
			ctx.out.b.push(0);
		} else {
			var v2 = this.uvs.length;
			if(v2 >= 0 && v2 < 128) {
				ctx.out.b.push(v2);
			} else {
				ctx.out.b.push(128);
				ctx.out.addInt32(v2);
			}
			var _g3 = 0;
			var _g12 = this.uvs;
			while(_g3 < _g12.length) {
				var uv = _g12[_g3];
				++_g3;
				ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(uv.u));
				ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(uv.v));
			}
		}
		if(this.idx == null) {
			ctx.out.b.push(0);
		} else {
			var v3 = this.idx.length;
			if(v3 >= 0 && v3 < 128) {
				ctx.out.b.push(v3);
			} else {
				ctx.out.b.push(128);
				ctx.out.addInt32(v3);
			}
			var _g4 = 0;
			var _g13 = this.idx;
			while(_g4 < _g13.length) {
				var i = _g13[_g4];
				++_g4;
				if(i >= 0 && i < 128) {
					ctx.out.b.push(i);
				} else {
					ctx.out.b.push(128);
					ctx.out.addInt32(i);
				}
			}
		}
		if(this.colors == null) {
			ctx.out.b.push(0);
		} else {
			var v4 = this.colors.length;
			if(v4 >= 0 && v4 < 128) {
				ctx.out.b.push(v4);
			} else {
				ctx.out.b.push(128);
				ctx.out.addInt32(v4);
			}
			var _g5 = 0;
			var _g14 = this.colors;
			while(_g5 < _g14.length) {
				var c = _g14[_g5];
				++_g5;
				ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(c.x));
				ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(c.y));
				ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(c.z));
			}
		}
	}
	,customUnserialize: function(ctx) {
		var _g = [];
		var _g2 = 0;
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _g1 = v;
		while(_g2 < _g1) {
			var i = _g2++;
			var v1 = ctx.input.getDouble(ctx.inPos);
			ctx.inPos += 8;
			var v2 = ctx.input.getDouble(ctx.inPos);
			ctx.inPos += 8;
			var v3 = ctx.input.getDouble(ctx.inPos);
			ctx.inPos += 8;
			_g.push(new h3d_col_Point(v1,v2,v3));
		}
		this.points = _g;
		var _g11 = [];
		var _g3 = 0;
		var v4 = ctx.input.b[ctx.inPos++];
		if(v4 == 128) {
			v4 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _g21 = v4;
		while(_g3 < _g21) {
			var i1 = _g3++;
			var v5 = ctx.input.getDouble(ctx.inPos);
			ctx.inPos += 8;
			var v6 = ctx.input.getDouble(ctx.inPos);
			ctx.inPos += 8;
			var v7 = ctx.input.getDouble(ctx.inPos);
			ctx.inPos += 8;
			_g11.push(new h3d_col_Point(v5,v6,v7));
		}
		this.normals = _g11;
		var _g22 = [];
		var _g4 = 0;
		var v8 = ctx.input.b[ctx.inPos++];
		if(v8 == 128) {
			v8 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _g31 = v8;
		while(_g4 < _g31) {
			var i2 = _g4++;
			var v9 = ctx.input.getDouble(ctx.inPos);
			ctx.inPos += 8;
			var v10 = ctx.input.getDouble(ctx.inPos);
			ctx.inPos += 8;
			_g22.push(new h3d_prim_UV(v9,v10));
		}
		this.uvs = _g22;
		if(this.normals.length == 0) {
			this.normals = null;
		}
		if(this.uvs.length == 0) {
			this.uvs = null;
		}
		var v11 = ctx.input.b[ctx.inPos++];
		if(v11 == 128) {
			v11 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var nindex = v11;
		if(nindex > 0) {
			var this1 = new Array(0);
			this.idx = this1;
			var this2 = this.idx;
			while(this2.length < nindex) this2.push(0);
			var _g41 = 0;
			var _g32 = nindex;
			while(_g41 < _g32) {
				var i3 = _g41++;
				var this3 = this.idx;
				var v12 = ctx.input.b[ctx.inPos++];
				if(v12 == 128) {
					v12 = ctx.input.getInt32(ctx.inPos);
					ctx.inPos += 4;
				}
				this3[i3] = v12;
			}
		}
		var _g33 = [];
		var _g5 = 0;
		var v13 = ctx.input.b[ctx.inPos++];
		if(v13 == 128) {
			v13 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _g42 = v13;
		while(_g5 < _g42) {
			var i4 = _g5++;
			var v14 = ctx.input.getDouble(ctx.inPos);
			ctx.inPos += 8;
			var v15 = ctx.input.getDouble(ctx.inPos);
			ctx.inPos += 8;
			var v16 = ctx.input.getDouble(ctx.inPos);
			ctx.inPos += 8;
			_g33.push(new h3d_col_Point(v14,v15,v16));
		}
		this.colors = _g33;
		if(this.colors.length == 0) {
			this.colors = null;
		}
	}
	,getCLID: function() {
		return h3d_prim_Polygon.__clid;
	}
	,serialize: function(__ctx) {
		h3d_prim_Primitive.prototype.serialize.call(this,__ctx);
		__ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.scaled));
		__ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.translatedX));
		__ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.translatedY));
		__ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.translatedZ));
	}
	,getSerializeSchema: function() {
		var schema = h3d_prim_Primitive.prototype.getSerializeSchema.call(this);
		schema.fieldsNames.push("scaled");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PFloat);
		schema.fieldsNames.push("translatedX");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PFloat);
		schema.fieldsNames.push("translatedY");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PFloat);
		schema.fieldsNames.push("translatedZ");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PFloat);
		schema.isFinal = hxbit_Serializer.isClassFinal(h3d_prim_Polygon.__clid);
		return schema;
	}
	,unserializeInit: function() {
		h3d_prim_Primitive.prototype.unserializeInit.call(this);
		this.scaled = 1.;
		this.translatedX = 0.;
		this.translatedY = 0.;
		this.translatedZ = 0.;
	}
	,unserialize: function(__ctx) {
		h3d_prim_Primitive.prototype.unserialize.call(this,__ctx);
		var v = __ctx.input.getFloat(__ctx.inPos);
		__ctx.inPos += 4;
		this.scaled = v;
		var v1 = __ctx.input.getFloat(__ctx.inPos);
		__ctx.inPos += 4;
		this.translatedX = v1;
		var v2 = __ctx.input.getFloat(__ctx.inPos);
		__ctx.inPos += 4;
		this.translatedY = v2;
		var v3 = __ctx.input.getFloat(__ctx.inPos);
		__ctx.inPos += 4;
		this.translatedZ = v3;
	}
	,__class__: h3d_prim_Polygon
});
var h3d_prim_RawPrimitive = function(inf,persist) {
	if(persist == null) {
		persist = false;
	}
	h3d_prim_Primitive.call(this);
	this.onContextLost = function() {
		return inf;
	};
	this.bounds = inf.bounds;
	this.alloc(null);
	if(!persist) {
		this.onContextLost = null;
	}
};
$hxClasses["h3d.prim.RawPrimitive"] = h3d_prim_RawPrimitive;
h3d_prim_RawPrimitive.__name__ = ["h3d","prim","RawPrimitive"];
h3d_prim_RawPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_RawPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		if(this.onContextLost == null) {
			throw new js__$Boot_HaxeError("Cannot realloc " + Std.string(this));
		}
		var inf = this.onContextLost();
		var flags = [];
		if(inf.ibuf == null) {
			flags.push(inf.quads ? h3d_BufferFlag.Quads : h3d_BufferFlag.Triangles);
		}
		if(inf.stride < 8) {
			flags.push(h3d_BufferFlag.RawFormat);
		}
		this.buffer = h3d_Buffer.ofFloats(inf.vbuf,inf.stride,flags);
		this.vcount = this.buffer.vertices;
		this.tcount = inf.ibuf != null ? inf.ibuf.length / 3 | 0 : inf.quads ? this.vcount >> 1 : this.vcount / 3 | 0;
		if(inf.ibuf != null) {
			this.indexes = h3d_Indexes.alloc(inf.ibuf);
		} else if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,getBounds: function() {
		if(this.bounds == null) {
			throw new js__$Boot_HaxeError("Bounds not defined for " + Std.string(this));
		}
		return this.bounds;
	}
	,triCount: function() {
		return this.tcount;
	}
	,vertexCount: function() {
		return this.vcount;
	}
	,getCLID: function() {
		return h3d_prim_RawPrimitive.__clid;
	}
	,__class__: h3d_prim_RawPrimitive
});
var h3d_prim_UV = function(u,v) {
	this.u = u;
	this.v = v;
};
$hxClasses["h3d.prim.UV"] = h3d_prim_UV;
h3d_prim_UV.__name__ = ["h3d","prim","UV"];
h3d_prim_UV.prototype = {
	clone: function() {
		return new h3d_prim_UV(this.u,this.v);
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.u) + "," + hxd_Math.fmt(this.v) + "}";
	}
	,__class__: h3d_prim_UV
};
var h3d_scene_Object = function(parent) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	var this1 = 0;
	this.flags = this1;
	this.absPos = new h3d_Matrix();
	this.absPos.identity();
	this.x = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.y = 0;
	var f1 = 1;
	var b1 = true;
	if(b1) {
		this.flags |= f1;
	} else {
		this.flags &= ~f1;
	}
	this.z = 0;
	var f2 = 1;
	var b2 = true;
	if(b2) {
		this.flags |= f2;
	} else {
		this.flags &= ~f2;
	}
	this.scaleX = 1;
	var f3 = 1;
	var b3 = true;
	if(b3) {
		this.flags |= f3;
	} else {
		this.flags &= ~f3;
	}
	this.scaleY = 1;
	var f4 = 1;
	var b4 = true;
	if(b4) {
		this.flags |= f4;
	} else {
		this.flags &= ~f4;
	}
	this.scaleZ = 1;
	var f5 = 1;
	var b5 = true;
	if(b5) {
		this.flags |= f5;
	} else {
		this.flags &= ~f5;
	}
	this.qRot = new h3d_Quat();
	var f6 = 1;
	var b6 = this.follow != null;
	if(b6) {
		this.flags |= f6;
	} else {
		this.flags &= ~f6;
	}
	var f7 = 2;
	this.flags |= f7;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h3d.scene.Object"] = h3d_scene_Object;
h3d_scene_Object.__name__ = ["h3d","scene","Object"];
h3d_scene_Object.__interfaces__ = [hxbit_Serializable];
h3d_scene_Object.prototype = {
	get_visible: function() {
		return (this.flags & 2) != 0;
	}
	,get_allocated: function() {
		return (this.flags & 32) != 0;
	}
	,get_posChanged: function() {
		return (this.flags & 1) != 0;
	}
	,get_culled: function() {
		return (this.flags & 4) != 0;
	}
	,get_followPositionOnly: function() {
		return (this.flags & 8) != 0;
	}
	,get_lightCameraCenter: function() {
		return (this.flags & 16) != 0;
	}
	,get_alwaysSync: function() {
		return (this.flags & 64) != 0;
	}
	,get_inheritCulled: function() {
		return (this.flags & 128) != 0;
	}
	,get_ignoreCollide: function() {
		return (this.flags & 1024) != 0;
	}
	,get_allowSerialize: function() {
		return (this.flags & 256) == 0;
	}
	,set_posChanged: function(b) {
		var f = 1;
		var b1 = b || this.follow != null;
		if(b1) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b1;
	}
	,set_culled: function(b) {
		var f = 4;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_visible: function(b) {
		var f = 2;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_allocated: function(b) {
		var f = 32;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_followPositionOnly: function(b) {
		var f = 8;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_lightCameraCenter: function(b) {
		var f = 16;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_alwaysSync: function(b) {
		var f = 64;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_inheritCulled: function(b) {
		var f = 128;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_ignoreCollide: function(b) {
		var f = 1024;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_allowSerialize: function(b) {
		var f = 256;
		var b1 = !b;
		if(b1) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return !b1;
	}
	,playAnimation: function(a) {
		return this.currentAnimation = a.createInstance(this);
	}
	,switchToAnimation: function(a) {
		return this.currentAnimation = a;
	}
	,stopAnimation: function() {
		this.currentAnimation = null;
	}
	,applyAnimationTransform: function(recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(this.defaultTransform != null) {
			var _this = this.defaultTransform;
			var v = new h3d_Vector();
			v.x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
			v.y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
			v.z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
			if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
				v.x *= -1;
				v.y *= -1;
				v.z *= -1;
			}
			var s = v;
			var v1 = s.x;
			this.scaleX = v1;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var v2 = s.y;
			this.scaleY = v2;
			var f1 = 1;
			var b1 = true;
			if(b1) {
				this.flags |= f1;
			} else {
				this.flags &= ~f1;
			}
			var v3 = s.z;
			this.scaleZ = v3;
			var f2 = 1;
			var b2 = true;
			if(b2) {
				this.flags |= f2;
			} else {
				this.flags &= ~f2;
			}
			this.qRot.initRotateMatrix(this.defaultTransform);
			var v4 = this.defaultTransform._41;
			this.x = v4;
			var f3 = 1;
			var b3 = true;
			if(b3) {
				this.flags |= f3;
			} else {
				this.flags &= ~f3;
			}
			var v5 = this.defaultTransform._42;
			this.y = v5;
			var f4 = 1;
			var b4 = true;
			if(b4) {
				this.flags |= f4;
			} else {
				this.flags &= ~f4;
			}
			var v6 = this.defaultTransform._43;
			this.z = v6;
			var f5 = 1;
			var b5 = true;
			if(b5) {
				this.flags |= f5;
			} else {
				this.flags &= ~f5;
			}
			this.defaultTransform = null;
			var f6 = 1;
			var b6 = true;
			if(b6) {
				this.flags |= f6;
			} else {
				this.flags &= ~f6;
			}
		}
		if(recursive) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.applyAnimationTransform();
			}
		}
	}
	,getObjectsCount: function() {
		var k = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			k += c.getObjectsCount() + 1;
		}
		return k;
	}
	,getMaterialByName: function(name) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var m = o.getMaterialByName(name);
			if(m != null) {
				return m;
			}
		}
		return null;
	}
	,find: function(f) {
		var v = f(this);
		if(v != null) {
			return v;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var v1 = o.find(f);
			if(v1 != null) {
				return v1;
			}
		}
		return null;
	}
	,findAll: function(f,arr) {
		if(arr == null) {
			arr = [];
		}
		var v = f(this);
		if(v != null) {
			arr.push(v);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.findAll(f,arr);
		}
		return arr;
	}
	,getMaterials: function(a) {
		if(a == null) {
			a = [];
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.getMaterials(a);
		}
		return a;
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h3d_Vector();
		}
		var m = this.absPos;
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + pt.w * m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + pt.w * m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + pt.w * m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,globalToLocal: function(pt) {
		var m = this.getInvPos();
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + pt.w * m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + pt.w * m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + pt.w * m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,getInvPos: function() {
		this.syncPos();
		if(this.invPos == null) {
			this.invPos = new h3d_Matrix();
			this.invPos._44 = 0;
		}
		if(this.invPos._44 == 0) {
			this.invPos.inverse3x4(this.absPos);
		}
		return this.invPos;
	}
	,getBounds: function(b,rec) {
		if(rec == null) {
			rec = false;
		}
		if(!rec) {
			this.syncPos();
		}
		if(b == null) {
			b = new h3d_col_Bounds();
		}
		if((this.flags & 1) != 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
			var f1 = 1;
			var b2 = this.follow != null;
			if(b2) {
				this.flags |= f1;
			} else {
				this.flags &= ~f1;
			}
			this.calcAbsPos();
		}
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var c1 = _g11[_g2];
			++_g2;
			c1.getBounds(b,true);
		}
		return b;
	}
	,getMeshes: function(out) {
		if(out == null) {
			out = [];
		}
		var m = (this instanceof h3d_scene_Mesh) ? this : null;
		if(m != null) {
			out.push(m);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.getMeshes(out);
		}
		return out;
	}
	,getMeshByName: function(name) {
		var value = this.getObjectByName(name);
		if((value instanceof h3d_scene_Mesh)) {
			return value;
		} else {
			return null;
		}
	}
	,getObjectByName: function(name) {
		if(this.name == name) {
			return this;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var o = c.getObjectByName(name);
			if(o != null) {
				return o;
			}
		}
		return null;
	}
	,clone: function(o) {
		if(o == null) {
			o = new h3d_scene_Object();
		}
		var v = this.x;
		o.x = v;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var v1 = this.y;
		o.y = v1;
		var f1 = 1;
		var b1 = true;
		if(b1) {
			o.flags |= f1;
		} else {
			o.flags &= ~f1;
		}
		var v2 = this.z;
		o.z = v2;
		var f2 = 1;
		var b2 = true;
		if(b2) {
			o.flags |= f2;
		} else {
			o.flags &= ~f2;
		}
		var v3 = this.scaleX;
		o.scaleX = v3;
		var f3 = 1;
		var b3 = true;
		if(b3) {
			o.flags |= f3;
		} else {
			o.flags &= ~f3;
		}
		var v4 = this.scaleY;
		o.scaleY = v4;
		var f4 = 1;
		var b4 = true;
		if(b4) {
			o.flags |= f4;
		} else {
			o.flags &= ~f4;
		}
		var v5 = this.scaleZ;
		o.scaleZ = v5;
		var f5 = 1;
		var b5 = true;
		if(b5) {
			o.flags |= f5;
		} else {
			o.flags &= ~f5;
		}
		var _this = o.qRot;
		var q = this.qRot;
		_this.x = q.x;
		_this.y = q.y;
		_this.z = q.z;
		_this.w = q.w;
		o.name = this.name;
		o.set_follow(this.follow);
		var b6 = (this.flags & 8) != 0;
		var f6 = 8;
		if(b6) {
			o.flags |= f6;
		} else {
			o.flags &= ~f6;
		}
		var b7 = (this.flags & 2) != 0;
		var f7 = 2;
		if(b7) {
			o.flags |= f7;
		} else {
			o.flags &= ~f7;
		}
		if(this.defaultTransform != null) {
			var v6 = this.defaultTransform.clone();
			o.defaultTransform = v6;
			var f8 = 1;
			var b8 = true;
			if(b8) {
				o.flags |= f8;
			} else {
				o.flags &= ~f8;
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var c1 = c.clone();
			c1.parent = o;
			o.children.push(c1);
		}
		return o;
	}
	,addChild: function(o) {
		this.addChildAt(o,this.children.length);
	}
	,addChildAt: function(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == o) {
				throw new js__$Boot_HaxeError("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			var old = (o.flags & 32) != 0;
			var f = 32;
			o.flags &= ~f;
			o.parent.removeChild(o);
			var f1 = 32;
			if(old) {
				o.flags |= f1;
			} else {
				o.flags &= ~f1;
			}
		}
		this.children.splice(pos,0,o);
		if((this.flags & 32) == 0 && (o.flags & 32) != 0) {
			o.onRemove();
		}
		o.parent = this;
		var f2 = 1;
		var b = true;
		if(b) {
			o.flags |= f2;
		} else {
			o.flags &= ~f2;
		}
		if((this.flags & 32) != 0) {
			if((o.flags & 32) == 0) {
				o.onAdd();
			} else {
				o.onParentChanged();
			}
		}
	}
	,iterVisibleMeshes: function(callb) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 4) == 0) {
			var m = (this instanceof h3d_scene_Mesh) ? this : null;
			if(m != null) {
				callb(m);
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.iterVisibleMeshes(callb);
		}
	}
	,onParentChanged: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	,onAdd: function() {
		var f = 32;
		this.flags |= f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		var f = 32;
		this.flags &= ~f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,removeChild: function(o) {
		if(HxOverrides.remove(this.children,o)) {
			if((o.flags & 32) != 0) {
				o.onRemove();
			}
			o.parent = null;
			var f = 1;
			var b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		return (p instanceof h3d_scene_Scene) ? p : null;
	}
	,getAbsPos: function() {
		this.syncPos();
		return this.absPos;
	}
	,isMesh: function() {
		return ((this instanceof h3d_scene_Mesh) ? this : null) != null;
	}
	,toMesh: function() {
		var m = (this instanceof h3d_scene_Mesh) ? this : null;
		if(m != null) {
			return m;
		}
		throw new js__$Boot_HaxeError(Std.string(this) + " is not a Mesh");
	}
	,getCollider: function() {
		if((this.flags & 1024) != 0) {
			return null;
		}
		var colliders = [];
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			var c = obj.getCollider();
			if(c == null) {
				continue;
			}
			var cgrp = (c instanceof h3d_col_GroupCollider) ? c : null;
			if(cgrp != null) {
				var _g2 = 0;
				var _g3 = cgrp.colliders;
				while(_g2 < _g3.length) {
					var c1 = _g3[_g2];
					++_g2;
					colliders.push(c1);
				}
			} else {
				colliders.push(c);
			}
		}
		if(colliders.length == 0) {
			return null;
		}
		if(colliders.length == 1) {
			return colliders[0];
		}
		return new h3d_col_GroupCollider(colliders);
	}
	,remove: function() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,draw: function(ctx) {
	}
	,set_follow: function(v) {
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return this.follow = v;
	}
	,calcAbsPos: function() {
		this.qRot.saveToMatrix(this.absPos);
		this.absPos._11 *= this.scaleX;
		this.absPos._12 *= this.scaleX;
		this.absPos._13 *= this.scaleX;
		this.absPos._21 *= this.scaleY;
		this.absPos._22 *= this.scaleY;
		this.absPos._23 *= this.scaleY;
		this.absPos._31 *= this.scaleZ;
		this.absPos._32 *= this.scaleZ;
		this.absPos._33 *= this.scaleZ;
		this.absPos._41 = this.x;
		this.absPos._42 = this.y;
		this.absPos._43 = this.z;
		if(this.follow != null) {
			this.follow.syncPos();
			if((this.flags & 8) != 0) {
				var _g = this.absPos;
				_g._41 += this.follow.absPos._41;
				var _g1 = this.absPos;
				_g1._42 += this.follow.absPos._42;
				var _g2 = this.absPos;
				_g2._43 += this.follow.absPos._43;
			} else {
				this.absPos.multiply3x4(this.absPos,this.follow.absPos);
			}
		} else if(this.parent != null) {
			var _this = this.absPos;
			var a = this.absPos;
			var b = this.parent.absPos;
			var m11 = a._11;
			var m12 = a._12;
			var m13 = a._13;
			var m21 = a._21;
			var m22 = a._22;
			var m23 = a._23;
			var a31 = a._31;
			var a32 = a._32;
			var a33 = a._33;
			var a41 = a._41;
			var a42 = a._42;
			var a43 = a._43;
			var b11 = b._11;
			var b12 = b._12;
			var b13 = b._13;
			var b21 = b._21;
			var b22 = b._22;
			var b23 = b._23;
			var b31 = b._31;
			var b32 = b._32;
			var b33 = b._33;
			var b41 = b._41;
			var b42 = b._42;
			var b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.defaultTransform != null) {
			var _this1 = this.absPos;
			var a1 = this.defaultTransform;
			var b1 = this.absPos;
			var m111 = a1._11;
			var m121 = a1._12;
			var m131 = a1._13;
			var m211 = a1._21;
			var m221 = a1._22;
			var m231 = a1._23;
			var a311 = a1._31;
			var a321 = a1._32;
			var a331 = a1._33;
			var a411 = a1._41;
			var a421 = a1._42;
			var a431 = a1._43;
			var b111 = b1._11;
			var b121 = b1._12;
			var b131 = b1._13;
			var b211 = b1._21;
			var b221 = b1._22;
			var b231 = b1._23;
			var b311 = b1._31;
			var b321 = b1._32;
			var b331 = b1._33;
			var b411 = b1._41;
			var b421 = b1._42;
			var b431 = b1._43;
			_this1._11 = m111 * b111 + m121 * b211 + m131 * b311;
			_this1._12 = m111 * b121 + m121 * b221 + m131 * b321;
			_this1._13 = m111 * b131 + m121 * b231 + m131 * b331;
			_this1._14 = 0;
			_this1._21 = m211 * b111 + m221 * b211 + m231 * b311;
			_this1._22 = m211 * b121 + m221 * b221 + m231 * b321;
			_this1._23 = m211 * b131 + m221 * b231 + m231 * b331;
			_this1._24 = 0;
			_this1._31 = a311 * b111 + a321 * b211 + a331 * b311;
			_this1._32 = a311 * b121 + a321 * b221 + a331 * b321;
			_this1._33 = a311 * b131 + a321 * b231 + a331 * b331;
			_this1._34 = 0;
			_this1._41 = a411 * b111 + a421 * b211 + a431 * b311 + b411;
			_this1._42 = a411 * b121 + a421 * b221 + a431 * b321 + b421;
			_this1._43 = a411 * b131 + a421 * b231 + a431 * b331 + b431;
			_this1._44 = 1;
		}
		if(this.invPos != null) {
			this.invPos._44 = 0;
		}
	}
	,sync: function(ctx) {
	}
	,syncRec: function(ctx) {
		if(this.currentAnimation != null) {
			var old = this.parent;
			var dt = ctx.elapsedTime;
			while(dt > 0 && this.currentAnimation != null) dt = this.currentAnimation.update(dt);
			if(this.currentAnimation != null && (ctx.visibleFlag && (this.flags & 2) != 0 && (this.flags & 4) == 0 || (this.flags & 64) != 0)) {
				this.currentAnimation.sync();
			}
			if(this.parent == null && old != null) {
				return;
			}
		}
		var old1 = ctx.visibleFlag;
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			ctx.visibleFlag = false;
		}
		var changed = (this.flags & 1) != 0;
		if(changed) {
			this.calcAbsPos();
		}
		this.sync(ctx);
		var f = 1;
		var b = this.follow != null;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					var f1 = 1;
					var b1 = true;
					if(b1) {
						c.flags |= f1;
					} else {
						c.flags &= ~f1;
					}
				}
				c.syncRec(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
		ctx.visibleFlag = old1;
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if((this.flags & 1) != 0) {
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f1 = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f1;
				} else {
					c.flags &= ~f1;
				}
			}
		}
	}
	,emit: function(ctx) {
	}
	,emitRec: function(ctx) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 1) != 0) {
			if(this.currentAnimation != null) {
				this.currentAnimation.sync();
			}
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f1 = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f1;
				} else {
					c.flags &= ~f1;
				}
			}
		}
		if((this.flags & 4) == 0) {
			this.emit(ctx);
		}
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var c1 = _g11[_g2];
			++_g2;
			c1.emitRec(ctx);
		}
	}
	,set_x: function(v) {
		this.x = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_y: function(v) {
		this.y = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_z: function(v) {
		this.z = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_scaleX: function(v) {
		this.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_scaleY: function(v) {
		this.scaleY = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_scaleZ: function(v) {
		this.scaleZ = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_defaultTransform: function(v) {
		this.defaultTransform = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,setPos: function(x,y,z) {
		this.x = x;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.y = y;
		var f1 = 1;
		var b1 = true;
		if(b1) {
			this.flags |= f1;
		} else {
			this.flags &= ~f1;
		}
		this.z = z;
		var f2 = 1;
		var b2 = true;
		if(b2) {
			this.flags |= f2;
		} else {
			this.flags &= ~f2;
		}
		var f3 = 1;
		var b3 = true;
		if(b3) {
			this.flags |= f3;
		} else {
			this.flags &= ~f3;
		}
	}
	,rotate: function(rx,ry,rz) {
		var qTmp = new h3d_Quat();
		qTmp.initRotate(rx,ry,rz);
		this.qRot.multiply(qTmp,this.qRot);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setRotate: function(rx,ry,rz) {
		this.qRot.initRotate(rx,ry,rz);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setRotateAxis: function(ax,ay,az,angle) {
		this.qRot.initRotateAxis(ax,ay,az,angle);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,getRotationQuat: function() {
		return this.qRot;
	}
	,setRotationQuat: function(q) {
		this.qRot = q;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,scale: function(v) {
		var _g = this;
		var v1 = _g.scaleX * v;
		_g.scaleX = v1;
		var f = 1;
		var b = true;
		if(b) {
			_g.flags |= f;
		} else {
			_g.flags &= ~f;
		}
		var _g1 = this;
		var v2 = _g1.scaleY * v;
		_g1.scaleY = v2;
		var f1 = 1;
		var b1 = true;
		if(b1) {
			_g1.flags |= f1;
		} else {
			_g1.flags &= ~f1;
		}
		var _g2 = this;
		var v3 = _g2.scaleZ * v;
		_g2.scaleZ = v3;
		var f2 = 1;
		var b2 = true;
		if(b2) {
			_g2.flags |= f2;
		} else {
			_g2.flags &= ~f2;
		}
		var f3 = 1;
		var b3 = true;
		if(b3) {
			this.flags |= f3;
		} else {
			this.flags &= ~f3;
		}
	}
	,setScale: function(v) {
		this.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.scaleY = v;
		var f1 = 1;
		var b1 = true;
		if(b1) {
			this.flags |= f1;
		} else {
			this.flags &= ~f1;
		}
		this.scaleZ = v;
		var f2 = 1;
		var b2 = true;
		if(b2) {
			this.flags |= f2;
		} else {
			this.flags &= ~f2;
		}
		var f3 = 1;
		var b3 = true;
		if(b3) {
			this.flags |= f3;
		} else {
			this.flags &= ~f3;
		}
	}
	,toString: function() {
		return Type.getClassName(js_Boot.getClass(this)).split(".").pop() + (this.name == null ? "" : "(" + this.name + ")");
	}
	,getChildAt: function(n) {
		return this.children[n];
	}
	,get_numChildren: function() {
		return this.children.length;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$h3d_$scene_$Object(this.children);
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.dispose();
		}
	}
	,customSerialize: function(ctx) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var o = _g2[_g1];
			++_g1;
			if((o.flags & 256) == 0) {
				_g.push(o);
			}
		}
		var children = _g;
		var v = children.length;
		if(v >= 0 && v < 128) {
			ctx.out.b.push(v);
		} else {
			ctx.out.b.push(128);
			ctx.out.addInt32(v);
		}
		var _g11 = 0;
		while(_g11 < children.length) {
			var o1 = children[_g11];
			++_g11;
			ctx.addKnownRef(o1);
		}
		ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.qRot.x));
		ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.qRot.y));
		ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.qRot.z));
		ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.qRot.w));
	}
	,customUnserialize: function(ctx) {
		var _g = [];
		var _g2 = 0;
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _g1 = v;
		while(_g2 < _g1) {
			var i = _g2++;
			var c = h3d_scene_Object;
			_g.push(ctx.getRef(c,c.__clid));
		}
		this.children = _g;
		var v1 = ctx.input.getDouble(ctx.inPos);
		ctx.inPos += 8;
		var v2 = ctx.input.getDouble(ctx.inPos);
		ctx.inPos += 8;
		var v3 = ctx.input.getDouble(ctx.inPos);
		ctx.inPos += 8;
		var v4 = ctx.input.getDouble(ctx.inPos);
		ctx.inPos += 8;
		this.qRot = new h3d_Quat(v1,v2,v3,v4);
		var _g11 = 0;
		var _g21 = this.children;
		while(_g11 < _g21.length) {
			var c1 = _g21[_g11];
			++_g11;
			c1.parent = this;
		}
		var f = 32;
		this.flags &= ~f;
		var f1 = 1;
		var b = true;
		if(b) {
			this.flags |= f1;
		} else {
			this.flags &= ~f1;
		}
		this.absPos = new h3d_Matrix();
		this.absPos.identity();
	}
	,getCLID: function() {
		return h3d_scene_Object.__clid;
	}
	,serialize: function(__ctx) {
		var v = this.flags;
		if(v >= 0 && v < 128) {
			__ctx.out.b.push(v);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v);
		}
		var s = this.name;
		if(s == null) {
			__ctx.out.b.push(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v1 = b.length + 1;
			if(v1 >= 0 && v1 < 128) {
				__ctx.out.b.push(v1);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v1);
			}
			var _this = __ctx.out;
			var b1 = _this.b;
			var b2 = b.b;
			var _g1 = 0;
			var _g = b.length;
			while(_g1 < _g) {
				var i = _g1++;
				_this.b.push(b2[i]);
			}
		}
		__ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.x));
		__ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.y));
		__ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.z));
		__ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.scaleX));
		__ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.scaleY));
		__ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.scaleZ));
		__ctx.addKnownRef(this.follow);
		this.customSerialize(__ctx);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("flags");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("name");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("x");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PFloat);
		schema.fieldsNames.push("y");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PFloat);
		schema.fieldsNames.push("z");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PFloat);
		schema.fieldsNames.push("scaleX");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PFloat);
		schema.fieldsNames.push("scaleY");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PFloat);
		schema.fieldsNames.push("scaleZ");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PFloat);
		schema.fieldsNames.push("follow");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PSerializable("h3d.scene.Object"));
		schema.isFinal = hxbit_Serializer.isClassFinal(h3d_scene_Object.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		var v0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		v0 = v;
		this.flags = v0;
		var v1 = __ctx.input.b[__ctx.inPos++];
		if(v1 == 128) {
			v1 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v1;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			tmp = s;
		}
		this.name = tmp;
		var v2 = __ctx.input.getFloat(__ctx.inPos);
		__ctx.inPos += 4;
		var v3 = v2;
		this.x = v3;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v4 = __ctx.input.getFloat(__ctx.inPos);
		__ctx.inPos += 4;
		var v5 = v4;
		this.y = v5;
		var f1 = 1;
		var b1 = true;
		if(b1) {
			this.flags |= f1;
		} else {
			this.flags &= ~f1;
		}
		var v6 = __ctx.input.getFloat(__ctx.inPos);
		__ctx.inPos += 4;
		var v7 = v6;
		this.z = v7;
		var f2 = 1;
		var b2 = true;
		if(b2) {
			this.flags |= f2;
		} else {
			this.flags &= ~f2;
		}
		var v8 = __ctx.input.getFloat(__ctx.inPos);
		__ctx.inPos += 4;
		var v9 = v8;
		this.scaleX = v9;
		var f3 = 1;
		var b3 = true;
		if(b3) {
			this.flags |= f3;
		} else {
			this.flags &= ~f3;
		}
		var v10 = __ctx.input.getFloat(__ctx.inPos);
		__ctx.inPos += 4;
		var v11 = v10;
		this.scaleY = v11;
		var f4 = 1;
		var b4 = true;
		if(b4) {
			this.flags |= f4;
		} else {
			this.flags &= ~f4;
		}
		var v12 = __ctx.input.getFloat(__ctx.inPos);
		__ctx.inPos += 4;
		var v13 = v12;
		this.scaleZ = v13;
		var f5 = 1;
		var b5 = true;
		if(b5) {
			this.flags |= f5;
		} else {
			this.flags &= ~f5;
		}
		this.set_follow(__ctx.getRef(h3d_scene_Object,h3d_scene_Object.__clid));
		this.customUnserialize(__ctx);
	}
	,__class__: h3d_scene_Object
};
var h3d_scene_Light = function(shader,parent) {
	this.priority = 0;
	this.cullingDistance = 1e10;
	h3d_scene_Object.call(this,parent);
	this.shader = shader;
};
$hxClasses["h3d.scene.Light"] = h3d_scene_Light;
h3d_scene_Light.__name__ = ["h3d","scene","Light"];
h3d_scene_Light.__super__ = h3d_scene_Object;
h3d_scene_Light.prototype = $extend(h3d_scene_Object.prototype,{
	get_color: function() {
		return new h3d_Vector();
	}
	,get_enableSpecular: function() {
		return false;
	}
	,set_enableSpecular: function(b) {
		if(b) {
			throw new js__$Boot_HaxeError("Not implemented for this light");
		}
		return false;
	}
	,emit: function(ctx) {
		ctx.emitLight(this);
	}
	,customSerialize: function(ctx) {
		h3d_scene_Object.prototype.customSerialize.call(this,ctx);
		var v = this.get_color().x;
		ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(v));
		var v1 = this.get_color().y;
		ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(v1));
		var v2 = this.get_color().z;
		ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(v2));
		var v3 = this.get_color().w;
		ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(v3));
		var v4 = this.get_enableSpecular();
		ctx.out.b.push(v4 ? 1 : 0);
	}
	,customUnserialize: function(ctx) {
		h3d_scene_Object.prototype.customUnserialize.call(this,ctx);
		var _this = this.get_color();
		var v = ctx.input.getDouble(ctx.inPos);
		ctx.inPos += 8;
		var v1 = ctx.input.getDouble(ctx.inPos);
		ctx.inPos += 8;
		var v2 = ctx.input.getDouble(ctx.inPos);
		ctx.inPos += 8;
		var v3 = ctx.input.getDouble(ctx.inPos);
		ctx.inPos += 8;
		_this.x = v;
		_this.y = v1;
		_this.z = v2;
		_this.w = v3;
		this.set_enableSpecular(ctx.input.b[ctx.inPos++] != 0);
	}
	,getCLID: function() {
		return h3d_scene_Light.__clid;
	}
	,serialize: function(__ctx) {
		h3d_scene_Object.prototype.serialize.call(this,__ctx);
		__ctx.out.addInt32(haxe_io_FPHelper.floatToI32(this.cullingDistance));
		var v = this.priority;
		if(v >= 0 && v < 128) {
			__ctx.out.b.push(v);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v);
		}
	}
	,getSerializeSchema: function() {
		var schema = h3d_scene_Object.prototype.getSerializeSchema.call(this);
		schema.fieldsNames.push("cullingDistance");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PFloat);
		schema.fieldsNames.push("priority");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.isFinal = hxbit_Serializer.isClassFinal(h3d_scene_Light.__clid);
		return schema;
	}
	,unserializeInit: function() {
		h3d_scene_Object.prototype.unserializeInit.call(this);
		this.cullingDistance = 1e10;
		this.priority = 0;
	}
	,unserialize: function(__ctx) {
		h3d_scene_Object.prototype.unserialize.call(this,__ctx);
		var v = __ctx.input.getFloat(__ctx.inPos);
		__ctx.inPos += 4;
		this.cullingDistance = v;
		var v1 = __ctx.input.b[__ctx.inPos++];
		if(v1 == 128) {
			v1 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.priority = v1;
	}
	,__class__: h3d_scene_Light
});
var h3d_scene_DirLight = function(dir,parent) {
	this.dshader = new h3d_shader_DirLight();
	this.direction = dir;
	h3d_scene_Light.call(this,this.dshader,parent);
	this.priority = 100;
};
$hxClasses["h3d.scene.DirLight"] = h3d_scene_DirLight;
h3d_scene_DirLight.__name__ = ["h3d","scene","DirLight"];
h3d_scene_DirLight.__super__ = h3d_scene_Light;
h3d_scene_DirLight.prototype = $extend(h3d_scene_Light.prototype,{
	get_color: function() {
		return this.dshader.color__;
	}
	,get_enableSpecular: function() {
		return this.dshader.enableSpecular__;
	}
	,set_enableSpecular: function(b) {
		var _this = this.dshader;
		_this.constModified = true;
		return _this.enableSpecular__ = b;
	}
	,emit: function(ctx) {
		var _this = this.dshader.direction__;
		_this.x = this.direction.x;
		_this.y = this.direction.y;
		_this.z = this.direction.z;
		_this.w = 1.;
		this.dshader.direction__.normalize();
		h3d_scene_Light.prototype.emit.call(this,ctx);
	}
	,customSerialize: function(ctx) {
		h3d_scene_Light.prototype.customSerialize.call(this,ctx);
		ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.direction.x));
		ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.direction.y));
		ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.direction.z));
	}
	,customUnserialize: function(ctx) {
		this.shader = this.dshader = new h3d_shader_DirLight();
		h3d_scene_Light.prototype.customUnserialize.call(this,ctx);
		var v = ctx.input.getDouble(ctx.inPos);
		ctx.inPos += 8;
		var v1 = ctx.input.getDouble(ctx.inPos);
		ctx.inPos += 8;
		var v2 = ctx.input.getDouble(ctx.inPos);
		ctx.inPos += 8;
		this.direction = new h3d_Vector(v,v1,v2);
	}
	,getCLID: function() {
		return h3d_scene_DirLight.__clid;
	}
	,__class__: h3d_scene_DirLight
});
var h3d_scene__$Graphics_GPoint = function(x,y,z,r,g,b,a) {
	this.x = x;
	this.y = y;
	this.z = z;
	this.r = r;
	this.g = g;
	this.b = b;
	this.a = a;
};
$hxClasses["h3d.scene._Graphics.GPoint"] = h3d_scene__$Graphics_GPoint;
h3d_scene__$Graphics_GPoint.__name__ = ["h3d","scene","_Graphics","GPoint"];
h3d_scene__$Graphics_GPoint.prototype = {
	__class__: h3d_scene__$Graphics_GPoint
};
var h3d_scene_Mesh = function(prim,mat,parent) {
	h3d_scene_Object.call(this,parent);
	this.primitive = prim;
	if(mat == null) {
		mat = new h3d_mat_Material(null);
	}
	this.material = mat;
};
$hxClasses["h3d.scene.Mesh"] = h3d_scene_Mesh;
h3d_scene_Mesh.__name__ = ["h3d","scene","Mesh"];
h3d_scene_Mesh.__super__ = h3d_scene_Object;
h3d_scene_Mesh.prototype = $extend(h3d_scene_Object.prototype,{
	getMeshMaterials: function() {
		return [this.material];
	}
	,getBounds: function(b,rec) {
		if(rec == null) {
			rec = false;
		}
		b = h3d_scene_Object.prototype.getBounds.call(this,b,rec);
		if(this.primitive == null || (this.flags & 512) != 0) {
			return b;
		}
		var _this = this.primitive.getBounds();
		var b1 = new h3d_col_Bounds();
		b1.xMin = _this.xMin;
		b1.xMax = _this.xMax;
		b1.yMin = _this.yMin;
		b1.yMax = _this.yMax;
		b1.zMin = _this.zMin;
		b1.zMax = _this.zMax;
		var tmp = b1;
		tmp.transform(this.absPos);
		if(tmp.xMin < b.xMin) {
			b.xMin = tmp.xMin;
		}
		if(tmp.xMax > b.xMax) {
			b.xMax = tmp.xMax;
		}
		if(tmp.yMin < b.yMin) {
			b.yMin = tmp.yMin;
		}
		if(tmp.yMax > b.yMax) {
			b.yMax = tmp.yMax;
		}
		if(tmp.zMin < b.zMin) {
			b.zMin = tmp.zMin;
		}
		if(tmp.zMax > b.zMax) {
			b.zMax = tmp.zMax;
		}
		return b;
	}
	,clone: function(o) {
		var m = o == null ? new h3d_scene_Mesh(null,this.material) : o;
		m.primitive = this.primitive;
		m.material = this.material.clone();
		h3d_scene_Object.prototype.clone.call(this,m);
		return m;
	}
	,getCollider: function() {
		return new h3d_col_ObjectCollider(this,this.primitive.getCollider());
	}
	,draw: function(ctx) {
		this.primitive.render(ctx.engine);
	}
	,emit: function(ctx) {
		var p = this.material.passes;
		while(p != null) {
			ctx.emitPass(p,this).index = 0;
			p = p.nextPass;
		}
	}
	,getMaterialByName: function(name) {
		if(this.material != null && this.material.name == name) {
			return this.material;
		}
		return h3d_scene_Object.prototype.getMaterialByName.call(this,name);
	}
	,getMaterials: function(a) {
		if(a == null) {
			a = [];
		}
		if(this.material != null && a.indexOf(this.material) < 0) {
			a.push(this.material);
		}
		return h3d_scene_Object.prototype.getMaterials.call(this,a);
	}
	,dispose: function() {
		if(this.primitive != null) {
			this.primitive.dispose();
		}
		h3d_scene_Object.prototype.dispose.call(this);
	}
	,customSerialize: function(ctx) {
		h3d_scene_Object.prototype.customSerialize.call(this,ctx);
		ctx.addKnownRef(this.primitive);
		ctx.addKnownRef(this.material);
	}
	,customUnserialize: function(ctx) {
		h3d_scene_Object.prototype.customUnserialize.call(this,ctx);
		var c = h3d_prim_Primitive;
		this.primitive = ctx.getRef(c,c.__clid);
		var c1 = h3d_mat_Material;
		this.material = ctx.getRef(c1,c1.__clid);
	}
	,getCLID: function() {
		return h3d_scene_Mesh.__clid;
	}
	,__class__: h3d_scene_Mesh
});
var h3d_scene_Graphics = function(parent) {
	this.lineSize = 0.;
	this.curR = 0.;
	this.curZ = 0.;
	this.curY = 0.;
	this.curX = 0.;
	this.bprim = new h3d_prim_BigPrimitive(12);
	h3d_scene_Mesh.call(this,this.bprim,null,parent);
	this.tmpPoints = [];
	this.lineShader = new h3d_shader_LineShader();
	this.material.passes.addShader(this.lineShader);
	this.material.passes.addShader(new h3d_shader_VertexColorAlpha());
	this.material.passes.set_culling(h3d_mat_Face.None);
};
$hxClasses["h3d.scene.Graphics"] = h3d_scene_Graphics;
h3d_scene_Graphics.__name__ = ["h3d","scene","Graphics"];
h3d_scene_Graphics.__super__ = h3d_scene_Mesh;
h3d_scene_Graphics.prototype = $extend(h3d_scene_Mesh.prototype,{
	set_is3D: function(v) {
		if(this.is3D == v) {
			return v;
		}
		if(v) {
			this.material.passes.removeShader(this.lineShader);
		} else {
			this.material.passes.addShaderAt(this.lineShader,0);
		}
		this.bprim.clear();
		this.tmpPoints = [];
		return this.is3D = v;
	}
	,flushLine: function() {
		var _gthis = this;
		var pts = this.tmpPoints;
		var last = pts.length - 1;
		var prev = pts[last];
		var p = pts[0];
		var closed = p.x == prev.x && p.y == prev.y && p.z == prev.z;
		var count = pts.length;
		if(!closed) {
			var prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			pts.push(new h3d_scene__$Graphics_GPoint(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,prev.z * 2 - prevLast.z,0,0,0,0));
			var pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			prev = new h3d_scene__$Graphics_GPoint(p.x * 2 - pNext.x,p.y * 2 - pNext.y,p.z * 2 - pNext.z,0,0,0,0);
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		var start = this.bprim.vertexCount();
		var pindex = start;
		var v = 0.;
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			var next = pts[(i + 1) % pts.length];
			var nx1 = prev.y - p.y;
			var ny1 = p.x - prev.x;
			var ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			var nx2 = p.y - next.y;
			var ny2 = next.x - p.x;
			var ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			var nx = nx1 * ns1 + nx2 * ns2;
			var ny = ny1 * ns1 + ny2 * ns2;
			var ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			var size = nx * nx1 * ns1 + ny * ny1 * ns1;
			var d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			var hasIndex = i < count - 1 || closed;
			this.bprim.begin(2,hasIndex ? 6 : 0);
			var _this = _gthis.bprim;
			_this.tmpBuf.array[_this.bufPos++] = p.x + nx;
			var _this1 = _gthis.bprim;
			_this1.tmpBuf.array[_this1.bufPos++] = p.y + ny;
			var _this2 = _gthis.bprim;
			_this2.tmpBuf.array[_this2.bufPos++] = p.z;
			var _this3 = _gthis.bprim;
			_this3.tmpBuf.array[_this3.bufPos++] = 0;
			var _this4 = _gthis.bprim;
			_this4.tmpBuf.array[_this4.bufPos++] = 0;
			var _this5 = _gthis.bprim;
			_this5.tmpBuf.array[_this5.bufPos++] = 1;
			var _this6 = _gthis.bprim;
			_this6.tmpBuf.array[_this6.bufPos++] = 0;
			var _this7 = _gthis.bprim;
			_this7.tmpBuf.array[_this7.bufPos++] = v;
			var _this8 = _gthis.bprim;
			_this8.tmpBuf.array[_this8.bufPos++] = p.r;
			var _this9 = _gthis.bprim;
			_this9.tmpBuf.array[_this9.bufPos++] = p.g;
			var _this10 = _gthis.bprim;
			_this10.tmpBuf.array[_this10.bufPos++] = p.b;
			var _this11 = _gthis.bprim;
			_this11.tmpBuf.array[_this11.bufPos++] = p.a;
			var _this12 = _gthis.bprim;
			_this12.tmpBuf.array[_this12.bufPos++] = p.x - nx;
			var _this13 = _gthis.bprim;
			_this13.tmpBuf.array[_this13.bufPos++] = p.y - ny;
			var _this14 = _gthis.bprim;
			_this14.tmpBuf.array[_this14.bufPos++] = p.z;
			var _this15 = _gthis.bprim;
			_this15.tmpBuf.array[_this15.bufPos++] = 0;
			var _this16 = _gthis.bprim;
			_this16.tmpBuf.array[_this16.bufPos++] = 0;
			var _this17 = _gthis.bprim;
			_this17.tmpBuf.array[_this17.bufPos++] = 1;
			var _this18 = _gthis.bprim;
			_this18.tmpBuf.array[_this18.bufPos++] = 1;
			var _this19 = _gthis.bprim;
			_this19.tmpBuf.array[_this19.bufPos++] = v;
			var _this20 = _gthis.bprim;
			_this20.tmpBuf.array[_this20.bufPos++] = p.r;
			var _this21 = _gthis.bprim;
			_this21.tmpBuf.array[_this21.bufPos++] = p.g;
			var _this22 = _gthis.bprim;
			_this22.tmpBuf.array[_this22.bufPos++] = p.b;
			var _this23 = _gthis.bprim;
			_this23.tmpBuf.array[_this23.bufPos++] = p.a;
			v = 1 - v;
			if(hasIndex) {
				var pnext = i == last ? start - pindex : 2;
				var _this24 = this.bprim;
				_this24.tmpIdx[_this24.idxPos++] = _this24.startIndex;
				var _this25 = this.bprim;
				_this25.tmpIdx[_this25.idxPos++] = 1 + _this25.startIndex;
				var _this26 = this.bprim;
				_this26.tmpIdx[_this26.idxPos++] = pnext + _this26.startIndex;
				var _this27 = this.bprim;
				_this27.tmpIdx[_this27.idxPos++] = pnext + _this27.startIndex;
				var _this28 = this.bprim;
				_this28.tmpIdx[_this28.idxPos++] = 1 + _this28.startIndex;
				var _this29 = this.bprim;
				_this29.tmpIdx[_this29.idxPos++] = pnext + 1 + _this29.startIndex;
			}
			pindex += 2;
			prev = p;
			p = next;
		}
	}
	,flush: function() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.is3D) {
			this.flushLine();
			this.tmpPoints = [];
		}
	}
	,sync: function(ctx) {
		h3d_scene_Mesh.prototype.sync.call(this,ctx);
		this.flush();
		this.bprim.flush();
	}
	,draw: function(ctx) {
		this.flush();
		this.bprim.flush();
		h3d_scene_Mesh.prototype.draw.call(this,ctx);
	}
	,clear: function() {
		this.flush();
		this.bprim.clear();
	}
	,lineStyle: function(size,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		if(size == null) {
			size = 0.;
		}
		this.flush();
		if(size > 0 && this.lineSize != size) {
			this.lineSize = size;
			if(!this.is3D) {
				this.lineShader.width__ = this.lineSize;
			}
		}
		this.setColor(color,alpha);
	}
	,setColor: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.curA = alpha;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
	}
	,drawLine: function(p1,p2) {
		this.moveTo(p1.x,p1.y,p1.z);
		this.lineTo(p2.x,p2.y,p2.z);
	}
	,moveTo: function(x,y,z) {
		if(this.is3D) {
			this.flush();
			this.lineTo(x,y,z);
		} else {
			this.curX = x;
			this.curY = y;
			this.curZ = z;
		}
	}
	,addVertex: function(x,y,z,r,g,b,a) {
		this.tmpPoints.push(new h3d_scene__$Graphics_GPoint(x,y,z,r,g,b,a));
	}
	,lineTo: function(x,y,z) {
		var _gthis = this;
		if(this.is3D) {
			this.tmpPoints.push(new h3d_scene__$Graphics_GPoint(x,y,z,this.curR,this.curG,this.curB,this.curA));
			return;
		}
		this.bprim.begin(4,6);
		var nx = x - this.curX;
		var ny = y - this.curY;
		var nz = z - this.curZ;
		var x1 = this.curX;
		var y1 = this.curY;
		var z1 = this.curZ;
		var _this = this.bprim.bounds;
		if(x1 < _this.xMin) {
			_this.xMin = x1;
		}
		if(x1 > _this.xMax) {
			_this.xMax = x1;
		}
		if(y1 < _this.yMin) {
			_this.yMin = y1;
		}
		if(y1 > _this.yMax) {
			_this.yMax = y1;
		}
		if(z1 < _this.zMin) {
			_this.zMin = z1;
		}
		if(z1 > _this.zMax) {
			_this.zMax = z1;
		}
		var _this1 = this.bprim.bounds;
		if(x < _this1.xMin) {
			_this1.xMin = x;
		}
		if(x > _this1.xMax) {
			_this1.xMax = x;
		}
		if(y < _this1.yMin) {
			_this1.yMin = y;
		}
		if(y > _this1.yMax) {
			_this1.yMax = y;
		}
		if(z < _this1.zMin) {
			_this1.zMin = z;
		}
		if(z > _this1.zMax) {
			_this1.zMax = z;
		}
		var _this2 = _gthis.bprim;
		_this2.tmpBuf.array[_this2.bufPos++] = _gthis.curX;
		var _this3 = _gthis.bprim;
		_this3.tmpBuf.array[_this3.bufPos++] = _gthis.curY;
		var _this4 = _gthis.bprim;
		_this4.tmpBuf.array[_this4.bufPos++] = _gthis.curZ;
		var _this5 = _gthis.bprim;
		_this5.tmpBuf.array[_this5.bufPos++] = nx;
		var _this6 = _gthis.bprim;
		_this6.tmpBuf.array[_this6.bufPos++] = ny;
		var _this7 = _gthis.bprim;
		_this7.tmpBuf.array[_this7.bufPos++] = nz;
		var _this8 = _gthis.bprim;
		_this8.tmpBuf.array[_this8.bufPos++] = 0;
		var _this9 = _gthis.bprim;
		_this9.tmpBuf.array[_this9.bufPos++] = 0;
		var _this10 = _gthis.bprim;
		_this10.tmpBuf.array[_this10.bufPos++] = _gthis.curR;
		var _this11 = _gthis.bprim;
		_this11.tmpBuf.array[_this11.bufPos++] = _gthis.curG;
		var _this12 = _gthis.bprim;
		_this12.tmpBuf.array[_this12.bufPos++] = _gthis.curB;
		var _this13 = _gthis.bprim;
		_this13.tmpBuf.array[_this13.bufPos++] = _gthis.curA;
		var _this14 = _gthis.bprim;
		_this14.tmpBuf.array[_this14.bufPos++] = _gthis.curX;
		var _this15 = _gthis.bprim;
		_this15.tmpBuf.array[_this15.bufPos++] = _gthis.curY;
		var _this16 = _gthis.bprim;
		_this16.tmpBuf.array[_this16.bufPos++] = _gthis.curZ;
		var _this17 = _gthis.bprim;
		_this17.tmpBuf.array[_this17.bufPos++] = nx;
		var _this18 = _gthis.bprim;
		_this18.tmpBuf.array[_this18.bufPos++] = ny;
		var _this19 = _gthis.bprim;
		_this19.tmpBuf.array[_this19.bufPos++] = nz;
		var _this20 = _gthis.bprim;
		_this20.tmpBuf.array[_this20.bufPos++] = 0;
		var _this21 = _gthis.bprim;
		_this21.tmpBuf.array[_this21.bufPos++] = 1;
		var _this22 = _gthis.bprim;
		_this22.tmpBuf.array[_this22.bufPos++] = _gthis.curR;
		var _this23 = _gthis.bprim;
		_this23.tmpBuf.array[_this23.bufPos++] = _gthis.curG;
		var _this24 = _gthis.bprim;
		_this24.tmpBuf.array[_this24.bufPos++] = _gthis.curB;
		var _this25 = _gthis.bprim;
		_this25.tmpBuf.array[_this25.bufPos++] = _gthis.curA;
		var _this26 = _gthis.bprim;
		_this26.tmpBuf.array[_this26.bufPos++] = _gthis.curX;
		var _this27 = _gthis.bprim;
		_this27.tmpBuf.array[_this27.bufPos++] = _gthis.curY;
		var _this28 = _gthis.bprim;
		_this28.tmpBuf.array[_this28.bufPos++] = _gthis.curZ;
		var _this29 = _gthis.bprim;
		_this29.tmpBuf.array[_this29.bufPos++] = nx;
		var _this30 = _gthis.bprim;
		_this30.tmpBuf.array[_this30.bufPos++] = ny;
		var _this31 = _gthis.bprim;
		_this31.tmpBuf.array[_this31.bufPos++] = nz;
		var _this32 = _gthis.bprim;
		_this32.tmpBuf.array[_this32.bufPos++] = 1;
		var _this33 = _gthis.bprim;
		_this33.tmpBuf.array[_this33.bufPos++] = 0;
		var _this34 = _gthis.bprim;
		_this34.tmpBuf.array[_this34.bufPos++] = _gthis.curR;
		var _this35 = _gthis.bprim;
		_this35.tmpBuf.array[_this35.bufPos++] = _gthis.curG;
		var _this36 = _gthis.bprim;
		_this36.tmpBuf.array[_this36.bufPos++] = _gthis.curB;
		var _this37 = _gthis.bprim;
		_this37.tmpBuf.array[_this37.bufPos++] = _gthis.curA;
		var _this38 = _gthis.bprim;
		_this38.tmpBuf.array[_this38.bufPos++] = _gthis.curX;
		var _this39 = _gthis.bprim;
		_this39.tmpBuf.array[_this39.bufPos++] = _gthis.curY;
		var _this40 = _gthis.bprim;
		_this40.tmpBuf.array[_this40.bufPos++] = _gthis.curZ;
		var _this41 = _gthis.bprim;
		_this41.tmpBuf.array[_this41.bufPos++] = nx;
		var _this42 = _gthis.bprim;
		_this42.tmpBuf.array[_this42.bufPos++] = ny;
		var _this43 = _gthis.bprim;
		_this43.tmpBuf.array[_this43.bufPos++] = nz;
		var _this44 = _gthis.bprim;
		_this44.tmpBuf.array[_this44.bufPos++] = 1;
		var _this45 = _gthis.bprim;
		_this45.tmpBuf.array[_this45.bufPos++] = 1;
		var _this46 = _gthis.bprim;
		_this46.tmpBuf.array[_this46.bufPos++] = _gthis.curR;
		var _this47 = _gthis.bprim;
		_this47.tmpBuf.array[_this47.bufPos++] = _gthis.curG;
		var _this48 = _gthis.bprim;
		_this48.tmpBuf.array[_this48.bufPos++] = _gthis.curB;
		var _this49 = _gthis.bprim;
		_this49.tmpBuf.array[_this49.bufPos++] = _gthis.curA;
		var _this50 = this.bprim;
		_this50.tmpIdx[_this50.idxPos++] = _this50.startIndex;
		var _this51 = this.bprim;
		_this51.tmpIdx[_this51.idxPos++] = 1 + _this51.startIndex;
		var _this52 = this.bprim;
		_this52.tmpIdx[_this52.idxPos++] = 2 + _this52.startIndex;
		var _this53 = this.bprim;
		_this53.tmpIdx[_this53.idxPos++] = 2 + _this53.startIndex;
		var _this54 = this.bprim;
		_this54.tmpIdx[_this54.idxPos++] = 3 + _this54.startIndex;
		var _this55 = this.bprim;
		_this55.tmpIdx[_this55.idxPos++] = 1 + _this55.startIndex;
		this.curX = x;
		this.curY = y;
		this.curZ = z;
	}
	,customUnserialize: function(ctx) {
		h3d_scene_Mesh.prototype.customUnserialize.call(this,ctx);
		this.lineShader = this.material.passes.getShader(h3d_shader_LineShader);
		this.tmpPoints = [];
		this.bprim = this.primitive;
	}
	,getCLID: function() {
		return h3d_scene_Graphics.__clid;
	}
	,unserializeInit: function() {
		h3d_scene_Mesh.prototype.unserializeInit.call(this);
		this.curX = 0.;
		this.curY = 0.;
		this.curZ = 0.;
		this.curR = 0.;
		this.lineSize = 0.;
	}
	,unserialize: function(__ctx) {
		h3d_scene_Mesh.prototype.unserialize.call(this,__ctx);
	}
	,__class__: h3d_scene_Graphics
});
var h3d_scene_Interactive = function(shape,parent) {
	this.hitPoint = new h3d_Vector();
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h3d_scene_Object.call(this,parent);
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h3d.scene.Interactive"] = h3d_scene_Interactive;
h3d_scene_Interactive.__name__ = ["h3d","scene","Interactive"];
h3d_scene_Interactive.__interfaces__ = [hxd_Interactive];
h3d_scene_Interactive.__super__ = h3d_scene_Object;
h3d_scene_Interactive.prototype = $extend(h3d_scene_Object.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h3d_scene_Object.prototype.onAdd.call(this);
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = null;
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,preventClick: function() {
		this.mouseDownButton = -1;
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		var _g = e.kind;
		switch(_g[1]) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			if(!e.cancel && this.cursor != null) {
				hxd_System.setCursor(this.cursor);
			}
			break;
		case 4:
			this.mouseDownButton = -1;
			this.onOut(e);
			if(!e.cancel) {
				hxd_System.setCursor(hxd_Cursor.Default);
			}
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				e.kind = hxd_EventKind.ERelease;
				this.onRelease(e);
				e.kind = hxd_EventKind.EReleaseOutside;
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.isOver() && this.cursor != null) {
			hxd_System.setCursor(this.cursor);
		}
		return c;
	}
	,focus: function() {
		if(this.scene == null || this.scene.events == null) {
			return;
		}
		this.scene.events.focus(this);
	}
	,blur: function() {
		if(this.hasFocus()) {
			this.scene.events.blur();
		}
	}
	,isOver: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentOver == this;
		} else {
			return false;
		}
	}
	,hasFocus: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentFocus == this;
		} else {
			return false;
		}
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,getCLID: function() {
		return h3d_scene_Interactive.__clid;
	}
	,serialize: function(__ctx) {
		h3d_scene_Object.prototype.serialize.call(this,__ctx);
		__ctx.addStruct(this.shape);
		__ctx.addStruct(this.preciseShape);
		var v = this.priority;
		if(v >= 0 && v < 128) {
			__ctx.out.b.push(v);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v);
		}
		__ctx.out.b.push(this.cancelEvents ? 1 : 0);
		__ctx.out.b.push(this.propagateEvents ? 1 : 0);
		__ctx.out.b.push(this.enableRightButton ? 1 : 0);
		__ctx.out.b.push(this.bestMatch ? 1 : 0);
	}
	,getSerializeSchema: function() {
		var schema = h3d_scene_Object.prototype.getSerializeSchema.call(this);
		schema.fieldsNames.push("shape");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PStruct);
		schema.fieldsNames.push("preciseShape");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PStruct);
		schema.fieldsNames.push("priority");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.fieldsNames.push("cancelEvents");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("propagateEvents");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("enableRightButton");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("bestMatch");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.isFinal = hxbit_Serializer.isClassFinal(h3d_scene_Interactive.__clid);
		return schema;
	}
	,unserializeInit: function() {
		h3d_scene_Object.prototype.unserializeInit.call(this);
		this.cancelEvents = false;
		this.propagateEvents = false;
		this.mouseDownButton = -1;
		this.hitPoint = new h3d_Vector();
	}
	,unserialize: function(__ctx) {
		h3d_scene_Object.prototype.unserialize.call(this,__ctx);
		this.shape = __ctx.getStruct();
		this.preciseShape = __ctx.getStruct();
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.priority = v;
		this.cancelEvents = __ctx.input.b[__ctx.inPos++] != 0;
		this.propagateEvents = __ctx.input.b[__ctx.inPos++] != 0;
		this.enableRightButton = __ctx.input.b[__ctx.inPos++] != 0;
		this.bestMatch = __ctx.input.b[__ctx.inPos++] != 0;
	}
	,__class__: h3d_scene_Interactive
});
var h3d_scene_MultiMaterial = function(prim,mats,parent) {
	h3d_scene_Mesh.call(this,prim,mats == null ? null : mats[0],parent);
	this.materials = mats == null ? [this.material] : mats;
};
$hxClasses["h3d.scene.MultiMaterial"] = h3d_scene_MultiMaterial;
h3d_scene_MultiMaterial.__name__ = ["h3d","scene","MultiMaterial"];
h3d_scene_MultiMaterial.__super__ = h3d_scene_Mesh;
h3d_scene_MultiMaterial.prototype = $extend(h3d_scene_Mesh.prototype,{
	getMeshMaterials: function() {
		return this.materials.slice();
	}
	,clone: function(o) {
		var m = o == null ? new h3d_scene_MultiMaterial(null,this.materials) : o;
		m.materials = [];
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var mat = _g1[_g];
			++_g;
			m.materials.push(mat == null ? null : mat.clone());
		}
		h3d_scene_Mesh.prototype.clone.call(this,m);
		m.material = m.materials[0];
		return m;
	}
	,emit: function(ctx) {
		var _g1 = 0;
		var _g = this.materials.length;
		while(_g1 < _g) {
			var i = _g1++;
			var m = this.materials[i];
			if(m != null) {
				var p = m.passes;
				while(p != null) {
					ctx.emitPass(p,this).index = i;
					p = p.nextPass;
				}
			}
		}
	}
	,getMaterialByName: function(name) {
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m != null && m.name == name) {
				return m;
			}
		}
		return h3d_scene_Mesh.prototype.getMaterialByName.call(this,name);
	}
	,getMaterials: function(a) {
		if(a == null) {
			a = [];
		}
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m != null && a.indexOf(m) < 0) {
				a.push(m);
			}
		}
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var o = _g11[_g2];
			++_g2;
			o.getMaterials(a);
		}
		return a;
	}
	,draw: function(ctx) {
		if(this.materials.length > 1) {
			this.primitive.selectMaterial(ctx.drawPass.index);
		}
		h3d_scene_Mesh.prototype.draw.call(this,ctx);
	}
	,customSerialize: function(ctx) {
		h3d_scene_Mesh.prototype.customSerialize.call(this,ctx);
		var v = this.materials.length;
		if(v >= 0 && v < 128) {
			ctx.out.b.push(v);
		} else {
			ctx.out.b.push(128);
			ctx.out.addInt32(v);
		}
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			ctx.addKnownRef(m);
		}
	}
	,customUnserialize: function(ctx) {
		h3d_scene_Mesh.prototype.customUnserialize.call(this,ctx);
		var _g = [];
		var _g2 = 0;
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _g1 = v;
		while(_g2 < _g1) {
			var i = _g2++;
			var c = h3d_mat_Material;
			_g.push(ctx.getRef(c,c.__clid));
		}
		this.materials = _g;
	}
	,getCLID: function() {
		return h3d_scene_MultiMaterial.__clid;
	}
	,__class__: h3d_scene_MultiMaterial
});
var h3d_scene__$Object_ObjectFlags_$Impl_$ = {};
$hxClasses["h3d.scene._Object.ObjectFlags_Impl_"] = h3d_scene__$Object_ObjectFlags_$Impl_$;
h3d_scene__$Object_ObjectFlags_$Impl_$.__name__ = ["h3d","scene","_Object","ObjectFlags_Impl_"];
h3d_scene__$Object_ObjectFlags_$Impl_$._new = function() {
	var this1 = 0;
	return this1;
};
h3d_scene__$Object_ObjectFlags_$Impl_$.toInt = function(this1) {
	return this1;
};
h3d_scene__$Object_ObjectFlags_$Impl_$.has = function(this1,f) {
	return (this1 & f) != 0;
};
h3d_scene__$Object_ObjectFlags_$Impl_$.set = function(this1,f,b) {
	if(b) {
		this1 |= f;
	} else {
		this1 &= ~f;
	}
	return b;
};
var h3d_scene__$RenderContext_SharedGlobal = function(gid,value) {
	this.gid = gid;
	this.value = value;
};
$hxClasses["h3d.scene._RenderContext.SharedGlobal"] = h3d_scene__$RenderContext_SharedGlobal;
h3d_scene__$RenderContext_SharedGlobal.__name__ = ["h3d","scene","_RenderContext","SharedGlobal"];
h3d_scene__$RenderContext_SharedGlobal.prototype = {
	__class__: h3d_scene__$RenderContext_SharedGlobal
};
var h3d_scene_RenderContext = function() {
	h3d_impl_RenderContext.call(this);
	this.cachedShaderList = [];
};
$hxClasses["h3d.scene.RenderContext"] = h3d_scene_RenderContext;
h3d_scene_RenderContext.__name__ = ["h3d","scene","RenderContext"];
h3d_scene_RenderContext.__super__ = h3d_impl_RenderContext;
h3d_scene_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	emit: function(mat,obj,index) {
		if(index == null) {
			index = 0;
		}
		var p = mat.passes;
		while(p != null) {
			this.emitPass(p,obj).index = index;
			p = p.nextPass;
		}
	}
	,start: function() {
		this.sharedGlobals = [];
		this.lights = null;
		this.drawPass = null;
		this.passes = null;
		this.lights = null;
		this.uploadParams = null;
		this.cachedPos = 0;
		this.visibleFlag = true;
		this.time += this.elapsedTime;
		this.frame++;
	}
	,nextPass: function() {
		this.cachedPos = 0;
		this.drawPass = null;
	}
	,getGlobal: function(name) {
		var id = hxsl_Globals.allocID(name);
		var _g = 0;
		var _g1 = this.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.gid == id) {
				return g.value;
			}
		}
		return null;
	}
	,setGlobal: function(name,value) {
		this.setGlobalID(hxsl_Globals.allocID(name),value);
	}
	,setGlobalID: function(gid,value) {
		var _g = 0;
		var _g1 = this.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.gid == gid) {
				g.value = value;
				return;
			}
		}
		this.sharedGlobals.push(new h3d_scene__$RenderContext_SharedGlobal(gid,value));
	}
	,emitPass: function(pass,obj) {
		var o = this.pool;
		if(o == null) {
			o = new h3d_pass_Object();
			o.nextAlloc = this.firstAlloc;
			this.firstAlloc = o;
		} else {
			this.pool = o.nextAlloc;
		}
		o.pass = pass;
		o.obj = obj;
		o.next = this.passes;
		this.passes = o;
		return o;
	}
	,allocShaderList: function(s,next) {
		var sl = this.cachedShaderList[this.cachedPos++];
		if(sl == null) {
			sl = new hxsl_ShaderList(null);
			this.cachedShaderList[this.cachedPos - 1] = sl;
		}
		sl.s = s;
		sl.next = next;
		return sl;
	}
	,emitLight: function(l) {
		l.next = this.lights;
		this.lights = l;
	}
	,done: function() {
		this.drawPass = null;
		this.uploadParams = null;
		var p = this.firstAlloc;
		while(p != null) {
			p.obj = null;
			p.pass = null;
			p.shader = null;
			p.shaders = null;
			p.next = null;
			p.index = 0;
			p = p.nextAlloc;
		}
		this.pool = this.firstAlloc;
		var _g = 0;
		var _g1 = this.cachedShaderList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.s = null;
			c.next = null;
		}
		this.passes = null;
		this.lights = null;
	}
	,__class__: h3d_scene_RenderContext
});
var h3d_scene_PassGroup = function(name,passes) {
	this.name = name;
	this.passes = passes;
};
$hxClasses["h3d.scene.PassGroup"] = h3d_scene_PassGroup;
h3d_scene_PassGroup.__name__ = ["h3d","scene","PassGroup"];
h3d_scene_PassGroup.prototype = {
	__class__: h3d_scene_PassGroup
};
var h3d_scene_Renderer = function() {
	this.hasSetTarget = false;
	this.passes = new haxe_ds_StringMap();
	this.allPasses = [];
	this.tcache = new h3d_impl_TextureCache();
	this.passGroups = new haxe_ds_StringMap();
};
$hxClasses["h3d.scene.Renderer"] = h3d_scene_Renderer;
h3d_scene_Renderer.__name__ = ["h3d","scene","Renderer"];
h3d_scene_Renderer.prototype = {
	dispose: function() {
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.p.dispose();
		}
		this.passes = new haxe_ds_StringMap();
		this.allPasses = [];
		this.passGroups = new haxe_ds_StringMap();
		this.tcache.dispose();
		this.def = this.depth = this.normal = this.shadow = null;
	}
	,compileShader: function(pass) {
		var p = this.getPass(pass.name);
		p.setContext(this.ctx);
		return p.compileShader(pass);
	}
	,hasFeature: function(f) {
		return h3d_Engine.CURRENT.driver.hasFeature(f);
	}
	,createDefaultPass: function(name) {
		switch(name) {
		case "depth":
			if(this.depth != null) {
				return this.depth;
			}
			return this.depth = new h3d_pass_Depth();
		case "normal":
			if(this.normal != null) {
				return this.normal;
			}
			return this.normal = new h3d_pass_Normal();
		case "shadow":
			if(this.shadow != null) {
				return this.shadow;
			}
			return this.shadow = new h3d_pass_ShadowMap(1024);
		default:
			if(this.def != null) {
				return this.def;
			}
			return this.def = new h3d_pass_Default();
		}
	}
	,getPass: function(name,create) {
		if(create == null) {
			create = true;
		}
		var _this = this.passes;
		var p = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(p == null && create) {
			p = this.createDefaultPass(name);
			this.setPass(name,p);
		}
		return p;
	}
	,getPassPriority: function(p) {
		var pr = p.p.priority * 10;
		var _g = p.name;
		switch(_g) {
		case "additive":
			pr -= 2;
			break;
		case "alpha":
			--pr;
			break;
		}
		return pr;
	}
	,setPass: function(name,p) {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p1 = _g1[_g];
			++_g;
			if(p1.name == name) {
				HxOverrides.remove(this.allPasses,p1);
			}
		}
		var _this = this.passes;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,p);
		} else {
			_this.h[name] = p;
		}
		this.allPasses.push({ name : name, p : p});
		this.allPasses.sort(function(p11,p2) {
			return _gthis.getPassPriority(p2) - _gthis.getPassPriority(p11);
		});
	}
	,depthSort: function(passes,frontToBack) {
		if(frontToBack == null) {
			frontToBack = false;
		}
		var p = passes;
		var cam = this.ctx.camera.m;
		while(p != null) {
			var z = p.obj.absPos._41 * cam._13 + p.obj.absPos._42 * cam._23 + p.obj.absPos._43 * cam._33 + cam._43;
			var w = p.obj.absPos._41 * cam._14 + p.obj.absPos._42 * cam._24 + p.obj.absPos._43 * cam._34 + cam._44;
			p.depth = z / w;
			p = p.next;
		}
		if(frontToBack) {
			var list = passes;
			if(list == null) {
				return null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p1;
				var q;
				var e;
				var tail;
				while(true) {
					p1 = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p1 != null) {
						++nmerges;
						q = p1;
						psize = 0;
						var _g1 = 0;
						var _g = insize;
						while(_g1 < _g) {
							var i = _g1++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p1.depth > q.depth ? 1 : -1) <= 0) {
								e = p1;
								p1 = p1.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p1 = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				return list;
			}
		} else {
			var list1 = passes;
			if(list1 == null) {
				return null;
			} else {
				var insize1 = 1;
				var nmerges1;
				var psize1 = 0;
				var qsize1 = 0;
				var p2;
				var q1;
				var e1;
				var tail1;
				while(true) {
					p2 = list1;
					list1 = null;
					tail1 = null;
					nmerges1 = 0;
					while(p2 != null) {
						++nmerges1;
						q1 = p2;
						psize1 = 0;
						var _g11 = 0;
						var _g2 = insize1;
						while(_g11 < _g2) {
							var i1 = _g11++;
							++psize1;
							q1 = q1.next;
							if(q1 == null) {
								break;
							}
						}
						qsize1 = insize1;
						while(psize1 > 0 || qsize1 > 0 && q1 != null) {
							if(psize1 == 0) {
								e1 = q1;
								q1 = q1.next;
								--qsize1;
							} else if(qsize1 == 0 || q1 == null || (p2.depth > q1.depth ? -1 : 1) <= 0) {
								e1 = p2;
								p2 = p2.next;
								--psize1;
							} else {
								e1 = q1;
								q1 = q1.next;
								--qsize1;
							}
							if(tail1 != null) {
								tail1.next = e1;
							} else {
								list1 = e1;
							}
							tail1 = e1;
						}
						p2 = q1;
					}
					tail1.next = null;
					if(nmerges1 <= 1) {
						break;
					}
					insize1 *= 2;
				}
				return list1;
			}
		}
	}
	,front2back: function(passes) {
		return this.depthSort(passes,true);
	}
	,back2front: function(passes) {
		return this.depthSort(passes,false);
	}
	,allocTarget: function(name,size,depth) {
		if(depth == null) {
			depth = true;
		}
		if(size == null) {
			size = 0;
		}
		return this.tcache.allocTarget(name,this.ctx,this.ctx.engine.width >> size,this.ctx.engine.height >> size,depth);
	}
	,clear: function(color,depth,stencil) {
		this.ctx.engine.clear(color,depth,stencil);
	}
	,copy: function(from,to,blend) {
		h3d_pass_Copy.run(from,to,blend);
	}
	,setTarget: function(tex) {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
		}
		this.ctx.engine.pushTarget(tex);
		this.hasSetTarget = true;
	}
	,resetTarget: function() {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
			this.hasSetTarget = false;
		}
	}
	,get: function(name) {
		var _this = this.passGroups;
		var p = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(p == null) {
			return null;
		}
		p.rendered = true;
		return p.passes;
	}
	,draw: function(name) {
		if(this.def == null) {
			this.def = new h3d_pass_Default();
		}
		this.def.draw(this.get(name));
	}
	,renderPass: function(name,p,passes) {
		return p.draw(passes);
	}
	,render: function() {
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var key = p.name;
			var _this = this.passGroups;
			var pdata = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if(pdata != null && pdata.rendered) {
				continue;
			}
			if(pdata != null || p.p.forceProcessing) {
				p.p.setContext(this.ctx);
				var passes = pdata == null ? null : pdata.passes;
				if(p.name == "alpha") {
					passes = this.depthSort(passes);
				}
				if(p.name == "default") {
					passes = this.depthSort(passes,true);
				}
				passes = this.renderPass(p.name,p.p,passes);
				if(pdata != null) {
					pdata.passes = passes;
					pdata.rendered = true;
				}
			}
		}
	}
	,process: function(passes) {
		this.hasSetTarget = false;
		var _g = 0;
		while(_g < passes.length) {
			var p = passes[_g];
			++_g;
			this.getPass(p.name).setContext(this.ctx);
			var key = p.name;
			var _this = this.passGroups;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,p);
			} else {
				_this.h[key] = p;
			}
		}
		this.render();
		this.resetTarget();
		var _g1 = 0;
		while(_g1 < passes.length) {
			var p1 = passes[_g1];
			++_g1;
			var key1 = p1.name;
			var _this1 = this.passGroups;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,null);
			} else {
				_this1.h[key1] = null;
			}
		}
	}
	,__class__: h3d_scene_Renderer
};
var h3d_scene_Scene = function() {
	h3d_scene_Object.call(this,null);
	this.stage = hxd_Stage.getInstance();
	this.eventListeners = [];
	this.hitInteractives = [];
	this.interactives = [];
	this.camera = new h3d_Camera();
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.camera.screenRatio = engine.width / engine.height;
	}
	this.ctx = new h3d_scene_RenderContext();
	this.set_renderer(h3d_mat_MaterialSetup.current.createRenderer());
	this.lightSystem = h3d_mat_MaterialSetup.current.createLightSystem();
};
$hxClasses["h3d.scene.Scene"] = h3d_scene_Scene;
h3d_scene_Scene.__name__ = ["h3d","scene","Scene"];
h3d_scene_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h3d_scene_Scene.__super__ = h3d_scene_Object;
h3d_scene_Scene.prototype = $extend(h3d_scene_Object.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,addEventListener: function(f) {
		this.eventListeners.push(f);
	}
	,removeEventListener: function(f) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(Reflect.compareMethods(e,f)) {
				HxOverrides.remove(this.eventListeners,e);
				return true;
			}
		}
		return false;
	}
	,dispatchListeners: function(event) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,set_renderer: function(r) {
		this.renderer = r;
		if(r != null) {
			r.ctx = this.ctx;
		}
		return r;
	}
	,sortHitPointByCameraDistance: function(i1,i2) {
		var z1 = i1.hitPoint.w;
		var z2 = i2.hitPoint.w;
		if(z1 > z2) {
			return -1;
		}
		return 1;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		i.handleEvent(event);
	}
	,isInteractiveVisible: function(i) {
		var o = i;
		while(o != null) {
			if((o.flags & 2) == 0) {
				return false;
			}
			o = o.parent;
		}
		return true;
	}
	,handleEvent: function(event,last) {
		if(this.interactives.length == 0) {
			return null;
		}
		if(this.hitInteractives.length == 0) {
			var screenX = (event.relX / this.stage.get_width() - 0.5) * 2;
			var screenY = -(event.relY / this.stage.get_height() - 0.5) * 2;
			var p0 = this.camera.unproject(screenX,screenY,0);
			var p1 = this.camera.unproject(screenX,screenY,1);
			var p1_z;
			var p1_y;
			var p1_x = p0.x;
			p1_y = p0.y;
			p1_z = p0.z;
			var p2_z;
			var p2_y;
			var p2_x = p1.x;
			p2_y = p1.y;
			p2_z = p1.z;
			var r = new h3d_col_Ray();
			r.px = p1_x;
			r.py = p1_y;
			r.pz = p1_z;
			r.lx = p2_x - p1_x;
			r.ly = p2_y - p1_y;
			r.lz = p2_z - p1_z;
			r.normalize();
			var r1 = r;
			var r2 = new h3d_col_Ray();
			r2.px = r1.px;
			r2.py = r1.py;
			r2.pz = r1.pz;
			r2.lx = r1.lx;
			r2.ly = r1.ly;
			r2.lz = r1.lz;
			var saveR = r2;
			var priority = -2147483648;
			var _g = 0;
			var _g1 = this.interactives;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.priority < priority) {
					continue;
				}
				var p = i;
				while(p != null && (p.flags & 2) != 0) p = p.parent;
				if(p != null) {
					continue;
				}
				var minv = i.getInvPos();
				var p_z;
				var p_y;
				var p_x;
				var p_w;
				p_x = r1.px;
				p_y = r1.py;
				p_z = r1.pz;
				p_w = 1.;
				var px = p_x * minv._11 + p_y * minv._21 + p_z * minv._31 + p_w * minv._41;
				var py = p_x * minv._12 + p_y * minv._22 + p_z * minv._32 + p_w * minv._42;
				var pz = p_x * minv._13 + p_y * minv._23 + p_z * minv._33 + p_w * minv._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				r1.px = p_x;
				r1.py = p_y;
				r1.pz = p_z;
				var l_z;
				var l_y;
				var l_x;
				var l_w;
				l_x = r1.lx;
				l_y = r1.ly;
				l_z = r1.lz;
				l_w = 1.;
				var px1 = l_x * minv._11 + l_y * minv._21 + l_z * minv._31;
				var py1 = l_x * minv._12 + l_y * minv._22 + l_z * minv._32;
				var pz1 = l_x * minv._13 + l_y * minv._23 + l_z * minv._33;
				l_x = px1;
				l_y = py1;
				l_z = pz1;
				r1.lx = l_x;
				r1.ly = l_y;
				r1.lz = l_z;
				r1.normalize();
				if(r1.lx != r1.lx) {
					r1.px = saveR.px;
					r1.py = saveR.py;
					r1.pz = saveR.pz;
					r1.lx = saveR.lx;
					r1.ly = saveR.ly;
					r1.lz = saveR.lz;
					continue;
				}
				var hit = i.shape.rayIntersection(r1,i.bestMatch);
				if(hit < 0) {
					r1.px = saveR.px;
					r1.py = saveR.py;
					r1.pz = saveR.pz;
					r1.lx = saveR.lx;
					r1.ly = saveR.ly;
					r1.lz = saveR.lz;
					continue;
				}
				var hitPoint_z;
				var hitPoint_y;
				var hitPoint_x = r1.px + hit * r1.lx;
				hitPoint_y = r1.py + hit * r1.ly;
				hitPoint_z = r1.pz + hit * r1.lz;
				r1.px = saveR.px;
				r1.py = saveR.py;
				r1.pz = saveR.pz;
				r1.lx = saveR.lx;
				r1.ly = saveR.ly;
				r1.lz = saveR.lz;
				i.hitPoint.x = hitPoint_x;
				i.hitPoint.y = hitPoint_y;
				i.hitPoint.z = hitPoint_z;
				if(i.priority > priority) {
					while(this.hitInteractives.length > 0) this.hitInteractives.pop();
					priority = i.priority;
				}
				this.hitInteractives.push(i);
			}
			if(this.hitInteractives.length == 0) {
				return null;
			}
			if(this.hitInteractives.length > 1) {
				var _g2 = 0;
				var _g11 = this.hitInteractives;
				while(_g2 < _g11.length) {
					var i1 = _g11[_g2];
					++_g2;
					var m = i1.invPos;
					var wfactor = 0.;
					if(i1.preciseShape != null) {
						var p_z1;
						var p_y1;
						var p_x1;
						var p_w1;
						p_x1 = r1.px;
						p_y1 = r1.py;
						p_z1 = r1.pz;
						p_w1 = 1.;
						var px2 = p_x1 * m._11 + p_y1 * m._21 + p_z1 * m._31 + p_w1 * m._41;
						var py2 = p_x1 * m._12 + p_y1 * m._22 + p_z1 * m._32 + p_w1 * m._42;
						var pz2 = p_x1 * m._13 + p_y1 * m._23 + p_z1 * m._33 + p_w1 * m._43;
						p_x1 = px2;
						p_y1 = py2;
						p_z1 = pz2;
						r1.px = p_x1;
						r1.py = p_y1;
						r1.pz = p_z1;
						var l_z1;
						var l_y1;
						var l_x1;
						var l_w1;
						l_x1 = r1.lx;
						l_y1 = r1.ly;
						l_z1 = r1.lz;
						l_w1 = 1.;
						var px3 = l_x1 * m._11 + l_y1 * m._21 + l_z1 * m._31;
						var py3 = l_x1 * m._12 + l_y1 * m._22 + l_z1 * m._32;
						var pz3 = l_x1 * m._13 + l_y1 * m._23 + l_z1 * m._33;
						l_x1 = px3;
						l_y1 = py3;
						l_z1 = pz3;
						r1.lx = l_x1;
						r1.ly = l_y1;
						r1.lz = l_z1;
						r1.normalize();
						var hit1 = i1.preciseShape.rayIntersection(r1,i1.bestMatch);
						if(hit1 > 0) {
							var hitPoint_z1;
							var hitPoint_y1;
							var hitPoint_x1 = r1.px + hit1 * r1.lx;
							hitPoint_y1 = r1.py + hit1 * r1.ly;
							hitPoint_z1 = r1.pz + hit1 * r1.lz;
							i1.hitPoint.x = hitPoint_x1;
							i1.hitPoint.y = hitPoint_y1;
							i1.hitPoint.z = hitPoint_z1;
						} else {
							wfactor = 1.;
						}
						r1.px = saveR.px;
						r1.py = saveR.py;
						r1.pz = saveR.pz;
						r1.lx = saveR.lx;
						r1.ly = saveR.ly;
						r1.lz = saveR.lz;
					}
					var p_z2;
					var p_y2;
					var p_x2;
					var p_w2;
					var _this = i1.hitPoint;
					p_x2 = _this.x;
					p_y2 = _this.y;
					p_z2 = _this.z;
					p_w2 = _this.w;
					p_w2 = 1;
					var m1 = i1.absPos;
					var px4 = p_x2 * m1._11 + p_y2 * m1._21 + p_z2 * m1._31 + p_w2 * m1._41;
					var py4 = p_x2 * m1._12 + p_y2 * m1._22 + p_z2 * m1._32 + p_w2 * m1._42;
					var pz4 = p_x2 * m1._13 + p_y2 * m1._23 + p_z2 * m1._33 + p_w2 * m1._43;
					p_x2 = px4;
					p_y2 = py4;
					p_z2 = pz4;
					var m2 = this.camera.m;
					var px5 = p_x2 * m2._11 + p_y2 * m2._21 + p_z2 * m2._31 + p_w2 * m2._41;
					var py5 = p_x2 * m2._12 + p_y2 * m2._22 + p_z2 * m2._32 + p_w2 * m2._42;
					var pz5 = p_x2 * m2._13 + p_y2 * m2._23 + p_z2 * m2._33 + p_w2 * m2._43;
					var iw = 1 / (p_x2 * m2._14 + p_y2 * m2._24 + p_z2 * m2._34 + p_w2 * m2._44);
					p_x2 = px5 * iw;
					p_y2 = py5 * iw;
					p_z2 = pz5 * iw;
					p_w2 = 1;
					i1.hitPoint.w = p_z2 + wfactor;
				}
				this.hitInteractives.sort($bind(this,this.sortHitPointByCameraDistance));
			}
			this.hitInteractives.unshift(null);
		}
		while(this.hitInteractives.length > 0) {
			var i2 = this.hitInteractives.pop();
			if(i2 == null) {
				return null;
			}
			event.relX = i2.hitPoint.x;
			event.relY = i2.hitPoint.y;
			event.relZ = i2.hitPoint.z;
			i2.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			if(!event.propagate) {
				this.hitInteractives = [];
			}
			return i2;
		}
		return null;
	}
	,clone: function(o) {
		var s = o == null ? new h3d_scene_Scene() : o;
		s.camera = this.camera.clone();
		h3d_scene_Object.prototype.clone.call(this,s);
		return s;
	}
	,dispose: function() {
		h3d_scene_Object.prototype.dispose.call(this);
		if(this.hardwarePass != null) {
			this.hardwarePass.dispose();
			this.hardwarePass = null;
		}
		this.renderer.dispose();
		this.set_renderer(new h3d_scene_Renderer());
	}
	,addEventTarget: function(i) {
		this.interactives.push(i);
	}
	,removeEventTarget: function(i) {
		if(HxOverrides.remove(this.interactives,i) && this.events != null) {
			this.events.onRemove(i);
		}
	}
	,setElapsedTime: function(elapsedTime) {
		this.ctx.elapsedTime = elapsedTime;
	}
	,hardwarePick: function(pixelX,pixelY) {
		var _gthis = this;
		var engine = h3d_Engine.CURRENT;
		this.camera.screenRatio = engine.width / engine.height;
		this.camera.update();
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		var ray = this.camera.rayFromScreen(pixelX,pixelY);
		var r = new h3d_col_Ray();
		r.px = ray.px;
		r.py = ray.py;
		r.pz = ray.pz;
		r.lx = ray.lx;
		r.ly = ray.ly;
		r.lz = ray.lz;
		var savedRay = r;
		this.iterVisibleMeshes(function(m) {
			if(m.primitive == null) {
				return;
			}
			var m1 = m.getInvPos();
			var p_z;
			var p_y;
			var p_x;
			var p_w;
			p_x = ray.px;
			p_y = ray.py;
			p_z = ray.pz;
			p_w = 1.;
			var px = p_x * m1._11 + p_y * m1._21 + p_z * m1._31 + p_w * m1._41;
			var py = p_x * m1._12 + p_y * m1._22 + p_z * m1._32 + p_w * m1._42;
			var pz = p_x * m1._13 + p_y * m1._23 + p_z * m1._33 + p_w * m1._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			ray.px = p_x;
			ray.py = p_y;
			ray.pz = p_z;
			var l_z;
			var l_y;
			var l_x;
			var l_w;
			l_x = ray.lx;
			l_y = ray.ly;
			l_z = ray.lz;
			l_w = 1.;
			var px1 = l_x * m1._11 + l_y * m1._21 + l_z * m1._31;
			var py1 = l_x * m1._12 + l_y * m1._22 + l_z * m1._32;
			var pz1 = l_x * m1._13 + l_y * m1._23 + l_z * m1._33;
			l_x = px1;
			l_y = py1;
			l_z = pz1;
			ray.lx = l_x;
			ray.ly = l_y;
			ray.lz = l_z;
			ray.normalize();
			if(m.primitive.getBounds().rayIntersection(ray,false) >= 0) {
				_gthis.ctx.emitPass(m.material.passes,m);
			}
			ray.px = savedRay.px;
			ray.py = savedRay.py;
			ray.pz = savedRay.pz;
			ray.lx = savedRay.lx;
			ray.ly = savedRay.ly;
			ray.lz = savedRay.lz;
		});
		this.ctx.lightSystem = null;
		var found = null;
		var passes = this.ctx.passes;
		if(passes != null) {
			var p = this.hardwarePass;
			if(p == null) {
				p = new h3d_pass_HardwarePick();
				this.hardwarePass = p;
			}
			var _this = this.ctx;
			var value = h3d_mat_Texture.fromColor(267386880,0);
			_this.setGlobalID(hxsl_Globals.allocID("depthMap"),value);
			p.pickX = pixelX;
			p.pickY = pixelY;
			p.setContext(this.ctx);
			passes = p.draw(passes);
			this.ctx.passes = passes;
			if(p.pickedIndex >= 0) {
				while(p.pickedIndex > 0) {
					p.pickedIndex--;
					passes = passes.next;
				}
				found = passes.obj;
			}
		}
		this.ctx.done();
		this.ctx.camera = null;
		this.ctx.engine = null;
		this.ctx.scene = null;
		return found;
	}
	,syncOnly: function(et) {
		var engine = h3d_Engine.CURRENT;
		this.setElapsedTime(et);
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.syncRec(this.ctx);
		this.ctx.camera = null;
		this.ctx.engine = null;
		this.ctx.scene = null;
	}
	,render: function(engine) {
		if((this.flags & 32) == 0) {
			this.onAdd();
		}
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.syncRec(this.ctx);
		this.emitRec(this.ctx);
		var list = this.ctx.passes;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g1 = 0;
					var _g = insize;
					while(_g1 < _g) {
						var i = _g1++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || p.pass.passId - q.pass.passId <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.ctx.passes = tmp;
		var curPass = this.ctx.passes;
		var passes = [];
		while(curPass != null) {
			var passId = curPass.pass.passId;
			var p1 = curPass;
			var prev = null;
			while(p1 != null && p1.pass.passId == passId) {
				prev = p1;
				p1 = p1.next;
			}
			prev.next = null;
			passes.push(new h3d_scene_PassGroup(curPass.pass.name,curPass));
			curPass = p1;
		}
		this.ctx.lightSystem = this.lightSystem;
		this.lightSystem.initLights(this.ctx);
		this.renderer.process(passes);
		this.ctx.done();
		this.ctx.scene = null;
		this.ctx.camera = null;
		this.ctx.engine = null;
	}
	,serializeScene: function() {
		var s = new hxd_fmt_hsd_Serializer();
		return s.saveHSD(this,false,this.camera);
	}
	,customSerialize: function(ctx) {
		throw new js__$Boot_HaxeError(Std.string(this) + " should not be serialized");
	}
	,getCLID: function() {
		return h3d_scene_Scene.__clid;
	}
	,__class__: h3d_scene_Scene
});
var h3d_scene_Joint = function(skin,j) {
	h3d_scene_Object.call(this,null);
	this.name = j.name;
	this.skin = skin;
	this.parent = skin;
	this.index = j.index;
};
$hxClasses["h3d.scene.Joint"] = h3d_scene_Joint;
h3d_scene_Joint.__name__ = ["h3d","scene","Joint"];
h3d_scene_Joint.__super__ = h3d_scene_Object;
h3d_scene_Joint.prototype = $extend(h3d_scene_Object.prototype,{
	syncPos: function() {
		var p = this.parent;
		while(p != null) {
			if((p.flags & 1) != 0) {
				if(this.skin.jointsAbsPosInv == null) {
					this.skin.jointsAbsPosInv = new h3d_Matrix();
					this.skin.jointsAbsPosInv.zero();
				}
				if(this.skin.jointsAbsPosInv._44 == 0) {
					this.skin.jointsAbsPosInv.inverse3x4(this.parent.absPos);
				}
				this.parent.syncPos();
				this.lastFrame = -1;
				break;
			}
			p = p.parent;
		}
		if(this.lastFrame != this.skin.lastFrame) {
			this.lastFrame = this.skin.lastFrame;
			this.absPos.loadFrom(this.skin.currentAbsPose[this.index]);
			if(this.skin.jointsAbsPosInv != null && this.skin.jointsAbsPosInv._44 != 0) {
				this.absPos.multiply3x4(this.absPos,this.skin.jointsAbsPosInv);
				this.absPos.multiply3x4(this.absPos,this.parent.absPos);
			}
		}
	}
	,getCLID: function() {
		return h3d_scene_Joint.__clid;
	}
	,serialize: function(__ctx) {
		h3d_scene_Object.prototype.serialize.call(this,__ctx);
		__ctx.addKnownRef(this.skin);
		var v = this.index;
		if(v >= 0 && v < 128) {
			__ctx.out.b.push(v);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v);
		}
	}
	,getSerializeSchema: function() {
		var schema = h3d_scene_Object.prototype.getSerializeSchema.call(this);
		schema.fieldsNames.push("skin");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PSerializable("h3d.scene.Skin"));
		schema.fieldsNames.push("index");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PInt);
		schema.isFinal = hxbit_Serializer.isClassFinal(h3d_scene_Joint.__clid);
		return schema;
	}
	,unserialize: function(__ctx) {
		h3d_scene_Object.prototype.unserialize.call(this,__ctx);
		this.skin = __ctx.getRef(h3d_scene_Skin,h3d_scene_Skin.__clid);
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.index = v;
	}
	,__class__: h3d_scene_Joint
});
var h3d_scene_Skin = function(s,mat,parent) {
	h3d_scene_MultiMaterial.call(this,null,mat,parent);
	if(s != null) {
		this.setSkinData(s);
	}
};
$hxClasses["h3d.scene.Skin"] = h3d_scene_Skin;
h3d_scene_Skin.__name__ = ["h3d","scene","Skin"];
h3d_scene_Skin.__super__ = h3d_scene_MultiMaterial;
h3d_scene_Skin.prototype = $extend(h3d_scene_MultiMaterial.prototype,{
	clone: function(o) {
		var s = o == null ? new h3d_scene_Skin(null,this.materials.slice()) : o;
		h3d_scene_MultiMaterial.prototype.clone.call(this,s);
		s.setSkinData(this.skinData);
		s.currentRelPose = this.currentRelPose.slice();
		return s;
	}
	,getBounds: function(b,rec) {
		if(rec == null) {
			rec = false;
		}
		b = h3d_scene_MultiMaterial.prototype.getBounds.call(this,b,rec);
		var _this = this.primitive.getBounds();
		var b1 = new h3d_col_Bounds();
		b1.xMin = _this.xMin;
		b1.xMax = _this.xMax;
		b1.yMin = _this.yMin;
		b1.yMax = _this.yMax;
		b1.zMin = _this.zMin;
		b1.zMax = _this.zMax;
		var tmp = b1;
		var b0 = this.skinData.allJoints[0];
		if(b0 != null && b0.parent == null) {
			var mtmp = this.absPos.clone();
			var r = this.currentRelPose[b0.index];
			if(r != null) {
				mtmp.multiply3x4(r,mtmp);
			} else {
				mtmp.multiply3x4(b0.defMat,mtmp);
			}
			if(b0.transPos != null) {
				mtmp.multiply3x4(b0.transPos,mtmp);
			}
			tmp.transform(mtmp);
		} else {
			tmp.transform(this.absPos);
		}
		if(tmp.xMin < b.xMin) {
			b.xMin = tmp.xMin;
		}
		if(tmp.xMax > b.xMax) {
			b.xMax = tmp.xMax;
		}
		if(tmp.yMin < b.yMin) {
			b.yMin = tmp.yMin;
		}
		if(tmp.yMax > b.yMax) {
			b.yMax = tmp.yMax;
		}
		if(tmp.zMin < b.zMin) {
			b.zMin = tmp.zMin;
		}
		if(tmp.zMax > b.zMax) {
			b.zMax = tmp.zMax;
		}
		return b;
	}
	,getObjectByName: function(name) {
		if(this.skinData != null && this.skinData.name == name) {
			return this;
		}
		var o = h3d_scene_MultiMaterial.prototype.getObjectByName.call(this,name);
		if(o != null) {
			return o;
		}
		if(this.skinData != null) {
			var _this = this.skinData.namedJoints;
			var j = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
			if(j != null) {
				return new h3d_scene_Joint(this,j);
			}
		}
		return null;
	}
	,getCollider: function() {
		var col = js_Boot.__cast(this.primitive.getCollider() , h3d_col_OptimizedCollider);
		(js_Boot.__cast(this.primitive , h3d_prim_HMDModel)).loadSkin(this.skinData);
		return new h3d_col_SkinCollider(this,js_Boot.__cast(col.b , h3d_col_PolygonBuffer));
	}
	,calcAbsPos: function() {
		h3d_scene_MultiMaterial.prototype.calcAbsPos.call(this);
		this.jointsUpdated = true;
	}
	,getSkinData: function() {
		return this.skinData;
	}
	,setSkinData: function(s,shaderInit) {
		if(shaderInit == null) {
			shaderInit = true;
		}
		this.skinData = s;
		this.jointsUpdated = true;
		this.primitive = s.primitive;
		if(shaderInit) {
			this.skinShader = new h3d_shader_Skin();
			var maxBones = 0;
			if(this.skinData.splitJoints != null) {
				var _g = 0;
				var _g1 = this.skinData.splitJoints;
				while(_g < _g1.length) {
					var s1 = _g1[_g];
					++_g;
					if(s1.joints.length > maxBones) {
						maxBones = s1.joints.length;
					}
				}
			} else {
				maxBones = this.skinData.boundJoints.length;
			}
			if(this.skinShader.MaxBones__ < maxBones) {
				var _this = this.skinShader;
				_this.constModified = true;
				_this.MaxBones__ = maxBones;
			}
			var _g2 = 0;
			var _g11 = this.materials;
			while(_g2 < _g11.length) {
				var m = _g11[_g2];
				++_g2;
				if(m != null) {
					m.passes.addShader(this.skinShader);
					if(this.skinData.splitJoints != null) {
						m.passes.dynamicParameters = true;
					}
				}
			}
		}
		this.currentRelPose = [];
		this.currentAbsPose = [];
		this.currentPalette = [];
		this.paletteChanged = true;
		var _g3 = 0;
		var _g12 = this.skinData.allJoints;
		while(_g3 < _g12.length) {
			var j = _g12[_g3];
			++_g3;
			this.currentAbsPose.push(h3d_Matrix.I());
		}
		var _g13 = 0;
		var _g4 = this.skinData.boundJoints.length;
		while(_g13 < _g4) {
			var i = _g13++;
			this.currentPalette.push(h3d_Matrix.I());
		}
		if(this.skinData.splitJoints != null) {
			this.splitPalette = [];
			var _g5 = 0;
			var _g14 = this.skinData.splitJoints;
			while(_g5 < _g14.length) {
				var a = _g14[_g5];
				++_g5;
				var tmp = this.splitPalette;
				var _g21 = [];
				var _g31 = 0;
				var _g41 = a.joints;
				while(_g31 < _g41.length) {
					var j1 = _g41[_g31];
					++_g31;
					_g21.push(this.currentPalette[j1.bindIndex]);
				}
				tmp.push(_g21);
			}
		} else {
			this.splitPalette = null;
		}
	}
	,sync: function(ctx) {
		if(!ctx.visibleFlag) {
			return;
		}
		this.syncJoints();
	}
	,syncJoints: function() {
		if(!this.jointsUpdated) {
			return;
		}
		var _g = 0;
		var _g1 = this.skinData.allJoints;
		while(_g < _g1.length) {
			var j = _g1[_g];
			++_g;
			var id = j.index;
			var m = this.currentAbsPose[id];
			var r = this.currentRelPose[id];
			var bid = j.bindIndex;
			if(r == null) {
				r = j.defMat;
			} else if(j.retargetAnim) {
				r._41 = j.defMat._41;
				r._42 = j.defMat._42;
				r._43 = j.defMat._43;
			}
			if(j.parent == null) {
				var b = this.absPos;
				var m11 = r._11;
				var m12 = r._12;
				var m13 = r._13;
				var m21 = r._21;
				var m22 = r._22;
				var m23 = r._23;
				var a31 = r._31;
				var a32 = r._32;
				var a33 = r._33;
				var a41 = r._41;
				var a42 = r._42;
				var a43 = r._43;
				var b11 = b._11;
				var b12 = b._12;
				var b13 = b._13;
				var b21 = b._21;
				var b22 = b._22;
				var b23 = b._23;
				var b31 = b._31;
				var b32 = b._32;
				var b33 = b._33;
				var b41 = b._41;
				var b42 = b._42;
				var b43 = b._43;
				m._11 = m11 * b11 + m12 * b21 + m13 * b31;
				m._12 = m11 * b12 + m12 * b22 + m13 * b32;
				m._13 = m11 * b13 + m12 * b23 + m13 * b33;
				m._14 = 0;
				m._21 = m21 * b11 + m22 * b21 + m23 * b31;
				m._22 = m21 * b12 + m22 * b22 + m23 * b32;
				m._23 = m21 * b13 + m22 * b23 + m23 * b33;
				m._24 = 0;
				m._31 = a31 * b11 + a32 * b21 + a33 * b31;
				m._32 = a31 * b12 + a32 * b22 + a33 * b32;
				m._33 = a31 * b13 + a32 * b23 + a33 * b33;
				m._34 = 0;
				m._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				m._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				m._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				m._44 = 1;
			} else {
				var b1 = this.currentAbsPose[j.parent.index];
				var m111 = r._11;
				var m121 = r._12;
				var m131 = r._13;
				var m211 = r._21;
				var m221 = r._22;
				var m231 = r._23;
				var a311 = r._31;
				var a321 = r._32;
				var a331 = r._33;
				var a411 = r._41;
				var a421 = r._42;
				var a431 = r._43;
				var b111 = b1._11;
				var b121 = b1._12;
				var b131 = b1._13;
				var b211 = b1._21;
				var b221 = b1._22;
				var b231 = b1._23;
				var b311 = b1._31;
				var b321 = b1._32;
				var b331 = b1._33;
				var b411 = b1._41;
				var b421 = b1._42;
				var b431 = b1._43;
				m._11 = m111 * b111 + m121 * b211 + m131 * b311;
				m._12 = m111 * b121 + m121 * b221 + m131 * b321;
				m._13 = m111 * b131 + m121 * b231 + m131 * b331;
				m._14 = 0;
				m._21 = m211 * b111 + m221 * b211 + m231 * b311;
				m._22 = m211 * b121 + m221 * b221 + m231 * b321;
				m._23 = m211 * b131 + m221 * b231 + m231 * b331;
				m._24 = 0;
				m._31 = a311 * b111 + a321 * b211 + a331 * b311;
				m._32 = a311 * b121 + a321 * b221 + a331 * b321;
				m._33 = a311 * b131 + a321 * b231 + a331 * b331;
				m._34 = 0;
				m._41 = a411 * b111 + a421 * b211 + a431 * b311 + b411;
				m._42 = a411 * b121 + a421 * b221 + a431 * b321 + b421;
				m._43 = a411 * b131 + a421 * b231 + a431 * b331 + b431;
				m._44 = 1;
			}
			if(bid >= 0) {
				var _this = this.currentPalette[bid];
				var a = j.transPos;
				var m112 = a._11;
				var m122 = a._12;
				var m132 = a._13;
				var m212 = a._21;
				var m222 = a._22;
				var m232 = a._23;
				var a312 = a._31;
				var a322 = a._32;
				var a332 = a._33;
				var a412 = a._41;
				var a422 = a._42;
				var a432 = a._43;
				var b112 = m._11;
				var b122 = m._12;
				var b132 = m._13;
				var b212 = m._21;
				var b222 = m._22;
				var b232 = m._23;
				var b312 = m._31;
				var b322 = m._32;
				var b332 = m._33;
				var b412 = m._41;
				var b422 = m._42;
				var b432 = m._43;
				_this._11 = m112 * b112 + m122 * b212 + m132 * b312;
				_this._12 = m112 * b122 + m122 * b222 + m132 * b322;
				_this._13 = m112 * b132 + m122 * b232 + m132 * b332;
				_this._14 = 0;
				_this._21 = m212 * b112 + m222 * b212 + m232 * b312;
				_this._22 = m212 * b122 + m222 * b222 + m232 * b322;
				_this._23 = m212 * b132 + m222 * b232 + m232 * b332;
				_this._24 = 0;
				_this._31 = a312 * b112 + a322 * b212 + a332 * b312;
				_this._32 = a312 * b122 + a322 * b222 + a332 * b322;
				_this._33 = a312 * b132 + a322 * b232 + a332 * b332;
				_this._34 = 0;
				_this._41 = a412 * b112 + a422 * b212 + a432 * b312 + b412;
				_this._42 = a412 * b122 + a422 * b222 + a432 * b322 + b422;
				_this._43 = a412 * b132 + a422 * b232 + a432 * b332 + b432;
				_this._44 = 1;
			}
		}
		this.skinShader.bonesMatrixes__ = this.currentPalette;
		if(this.jointsAbsPosInv != null) {
			this.jointsAbsPosInv._44 = 0;
		}
		this.jointsUpdated = false;
	}
	,emit: function(ctx) {
		if(this.splitPalette == null) {
			h3d_scene_MultiMaterial.prototype.emit.call(this,ctx);
		} else {
			var _g1 = 0;
			var _g = this.splitPalette.length;
			while(_g1 < _g) {
				var i = _g1++;
				var m = this.materials[this.skinData.splitJoints[i].material];
				if(m != null) {
					var p = m.passes;
					while(p != null) {
						ctx.emitPass(p,this).index = i;
						p = p.nextPass;
					}
				}
			}
		}
		if(this.showJoints) {
			if(this.jointsGraphics == null) {
				this.jointsGraphics = new h3d_scene_Graphics(this);
				this.jointsGraphics.material.passes.depth(false,h3d_mat_Compare.Always);
				this.jointsGraphics.material.passes.setPassName("add");
			}
			var topParent = this;
			while(topParent.parent != null) topParent = topParent.parent;
			this.jointsGraphics.set_follow(topParent);
			var g = this.jointsGraphics;
			g.clear();
			var _g2 = 0;
			var _g11 = this.skinData.allJoints;
			while(_g2 < _g11.length) {
				var j = _g11[_g2];
				++_g2;
				var m1 = this.currentAbsPose[j.index];
				var mp = j.parent == null ? this.absPos : this.currentAbsPose[j.parent.index];
				g.lineStyle(1,j.parent == null ? -16776961 : -256);
				g.moveTo(mp._41,mp._42,mp._43);
				g.lineTo(m1._41,m1._42,m1._43);
			}
		} else if(this.jointsGraphics != null) {
			var _this = this.jointsGraphics;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.jointsGraphics = null;
		}
	}
	,draw: function(ctx) {
		if(this.splitPalette == null) {
			h3d_scene_MultiMaterial.prototype.draw.call(this,ctx);
		} else {
			var i = ctx.drawPass.index;
			this.skinShader.bonesMatrixes__ = this.splitPalette[i];
			this.primitive.selectMaterial(i);
			ctx.uploadParams();
			this.primitive.render(ctx.engine);
		}
	}
	,customUnserialize: function(ctx) {
		h3d_scene_MultiMaterial.prototype.customUnserialize.call(this,ctx);
		var value = this.primitive;
		var prim = (value instanceof h3d_prim_HMDModel) ? value : null;
		if(prim == null) {
			throw new js__$Boot_HaxeError("Cannot load skin primitive " + Std.string(prim));
		}
		this.jointsUpdated = true;
		this.skinShader = this.material.passes.getShader(h3d_shader_Skin);
		var lib = prim.lib;
		var _g = 0;
		var _g1 = lib.header.models;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(lib.header.geometries[m.geometry] == prim.data) {
				var skinData = lib.makeSkin(m.skin);
				skinData.primitive = prim;
				this.setSkinData(skinData,false);
				break;
			}
		}
	}
	,getCLID: function() {
		return h3d_scene_Skin.__clid;
	}
	,__class__: h3d_scene_Skin
});
var h3d_shader_AmbientLight = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.AmbientLight"] = h3d_shader_AmbientLight;
h3d_shader_AmbientLight.__name__ = ["h3d","shader","AmbientLight"];
h3d_shader_AmbientLight.__super__ = hxsl_Shader;
h3d_shader_AmbientLight.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_AmbientLight);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		return s;
	}
	,__class__: h3d_shader_AmbientLight
});
var h3d_shader_Base2d = function() {
	this.viewport__ = new h3d_Vector();
	this.halfPixelInverse__ = new h3d_Vector();
	this.uvPos__ = new h3d_Vector();
	this.filterMatrixB__ = new h3d_Vector();
	this.filterMatrixA__ = new h3d_Vector();
	this.absoluteMatrixB__ = new h3d_Vector();
	this.absoluteMatrixA__ = new h3d_Vector();
	this.color__ = new h3d_Vector();
	this.zValue__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Base2d"] = h3d_shader_Base2d;
h3d_shader_Base2d.__name__ = ["h3d","shader","Base2d"];
h3d_shader_Base2d.__super__ = hxsl_Shader;
h3d_shader_Base2d.prototype = $extend(hxsl_Shader.prototype,{
	get_zValue: function() {
		return this.zValue__;
	}
	,set_zValue: function(_v) {
		return this.zValue__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_isRelative: function() {
		return this.isRelative__;
	}
	,set_isRelative: function(_v) {
		this.constModified = true;
		return this.isRelative__ = _v;
	}
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_absoluteMatrixA: function() {
		return this.absoluteMatrixA__;
	}
	,set_absoluteMatrixA: function(_v) {
		return this.absoluteMatrixA__ = _v;
	}
	,get_absoluteMatrixB: function() {
		return this.absoluteMatrixB__;
	}
	,set_absoluteMatrixB: function(_v) {
		return this.absoluteMatrixB__ = _v;
	}
	,get_filterMatrixA: function() {
		return this.filterMatrixA__;
	}
	,set_filterMatrixA: function(_v) {
		return this.filterMatrixA__ = _v;
	}
	,get_filterMatrixB: function() {
		return this.filterMatrixB__;
	}
	,set_filterMatrixB: function(_v) {
		return this.filterMatrixB__ = _v;
	}
	,get_hasUVPos: function() {
		return this.hasUVPos__;
	}
	,set_hasUVPos: function(_v) {
		this.constModified = true;
		return this.hasUVPos__ = _v;
	}
	,get_uvPos: function() {
		return this.uvPos__;
	}
	,set_uvPos: function(_v) {
		return this.uvPos__ = _v;
	}
	,get_killAlpha: function() {
		return this.killAlpha__;
	}
	,set_killAlpha: function(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	,get_pixelAlign: function() {
		return this.pixelAlign__;
	}
	,set_pixelAlign: function(_v) {
		this.constModified = true;
		return this.pixelAlign__ = _v;
	}
	,get_halfPixelInverse: function() {
		return this.halfPixelInverse__;
	}
	,set_halfPixelInverse: function(_v) {
		return this.halfPixelInverse__ = _v;
	}
	,get_viewport: function() {
		return this.viewport__;
	}
	,set_viewport: function(_v) {
		return this.viewport__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isRelative__) {
			this.constBits |= 1;
		}
		if(this.hasUVPos__) {
			this.constBits |= 2;
		}
		if(this.killAlpha__) {
			this.constBits |= 4;
		}
		if(this.pixelAlign__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.zValue__;
		case 1:
			return this.texture__;
		case 2:
			return this.isRelative__;
		case 3:
			return this.color__;
		case 4:
			return this.absoluteMatrixA__;
		case 5:
			return this.absoluteMatrixB__;
		case 6:
			return this.filterMatrixA__;
		case 7:
			return this.filterMatrixB__;
		case 8:
			return this.hasUVPos__;
		case 9:
			return this.uvPos__;
		case 10:
			return this.killAlpha__;
		case 11:
			return this.pixelAlign__;
		case 12:
			return this.halfPixelInverse__;
		case 13:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.zValue__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_Base2d);
		s.shader = this.shader;
		s.zValue__ = this.zValue__;
		s.texture__ = this.texture__;
		s.isRelative__ = this.isRelative__;
		s.color__ = this.color__;
		s.absoluteMatrixA__ = this.absoluteMatrixA__;
		s.absoluteMatrixB__ = this.absoluteMatrixB__;
		s.filterMatrixA__ = this.filterMatrixA__;
		s.filterMatrixB__ = this.filterMatrixB__;
		s.hasUVPos__ = this.hasUVPos__;
		s.uvPos__ = this.uvPos__;
		s.killAlpha__ = this.killAlpha__;
		s.pixelAlign__ = this.pixelAlign__;
		s.halfPixelInverse__ = this.halfPixelInverse__;
		s.viewport__ = this.viewport__;
		return s;
	}
	,__class__: h3d_shader_Base2d
});
var h3d_shader_BaseMesh = function() {
	this.specularColor__ = new h3d_Vector();
	this.specularAmount__ = 0;
	this.specularPower__ = 0;
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = 1;
	_this.y = 1;
	_this.z = 1;
	_this.w = 1.;
	var _this1 = this.specularColor__;
	_this1.x = 1;
	_this1.y = 1;
	_this1.z = 1;
	_this1.w = 1.;
	this.specularPower__ = 50;
	this.specularAmount__ = 1;
};
$hxClasses["h3d.shader.BaseMesh"] = h3d_shader_BaseMesh;
h3d_shader_BaseMesh.__name__ = ["h3d","shader","BaseMesh"];
h3d_shader_BaseMesh.__super__ = hxsl_Shader;
h3d_shader_BaseMesh.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_specularPower: function() {
		return this.specularPower__;
	}
	,set_specularPower: function(_v) {
		return this.specularPower__ = _v;
	}
	,get_specularAmount: function() {
		return this.specularAmount__;
	}
	,set_specularAmount: function(_v) {
		return this.specularAmount__ = _v;
	}
	,get_specularColor: function() {
		return this.specularColor__;
	}
	,set_specularColor: function(_v) {
		return this.specularColor__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		case 3:
			return this.specularColor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_BaseMesh);
		s.shader = this.shader;
		s.color__ = this.color__;
		s.specularPower__ = this.specularPower__;
		s.specularAmount__ = this.specularAmount__;
		s.specularColor__ = this.specularColor__;
		return s;
	}
	,__class__: h3d_shader_BaseMesh
});
var h3d_shader_Blur = function() {
	this.fixedColor__ = new h3d_Vector();
	this.pixel__ = new h3d_Vector();
	this.values__ = [];
	this.Quality__ = 0;
	this.cameraInverseViewProj__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.Blur"] = h3d_shader_Blur;
h3d_shader_Blur.__name__ = ["h3d","shader","Blur"];
h3d_shader_Blur.__super__ = h3d_shader_ScreenShader;
h3d_shader_Blur.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_cameraInverseViewProj: function() {
		return this.cameraInverseViewProj__;
	}
	,set_cameraInverseViewProj: function(_v) {
		return this.cameraInverseViewProj__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_depthTexture: function() {
		return this.depthTexture__;
	}
	,set_depthTexture: function(_v) {
		return this.depthTexture__ = _v;
	}
	,get_Quality: function() {
		return this.Quality__;
	}
	,set_Quality: function(_v) {
		this.constModified = true;
		return this.Quality__ = _v;
	}
	,get_isDepth: function() {
		return this.isDepth__;
	}
	,set_isDepth: function(_v) {
		this.constModified = true;
		return this.isDepth__ = _v;
	}
	,get_values: function() {
		return this.values__;
	}
	,set_values: function(_v) {
		return this.values__ = _v;
	}
	,get_pixel: function() {
		return this.pixel__;
	}
	,set_pixel: function(_v) {
		return this.pixel__ = _v;
	}
	,get_hasFixedColor: function() {
		return this.hasFixedColor__;
	}
	,set_hasFixedColor: function(_v) {
		this.constModified = true;
		return this.hasFixedColor__ = _v;
	}
	,get_smoothFixedColor: function() {
		return this.smoothFixedColor__;
	}
	,set_smoothFixedColor: function(_v) {
		this.constModified = true;
		return this.smoothFixedColor__ = _v;
	}
	,get_fixedColor: function() {
		return this.fixedColor__;
	}
	,set_fixedColor: function(_v) {
		return this.fixedColor__ = _v;
	}
	,get_isDepthDependant: function() {
		return this.isDepthDependant__;
	}
	,set_isDepthDependant: function(_v) {
		this.constModified = true;
		return this.isDepthDependant__ = _v;
	}
	,get_hasNormal: function() {
		return this.hasNormal__;
	}
	,set_hasNormal: function(_v) {
		this.constModified = true;
		return this.hasNormal__ = _v;
	}
	,get_normalTexture: function() {
		return this.normalTexture__;
	}
	,set_normalTexture: function(_v) {
		return this.normalTexture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Quality__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("Quality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.isDepth__) {
			this.constBits |= 256;
		}
		if(this.hasFixedColor__) {
			this.constBits |= 512;
		}
		if(this.smoothFixedColor__) {
			this.constBits |= 1024;
		}
		if(this.isDepthDependant__) {
			this.constBits |= 2048;
		}
		if(this.hasNormal__) {
			this.constBits |= 4096;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.cameraInverseViewProj__;
		case 1:
			return this.texture__;
		case 2:
			return this.depthTexture__;
		case 3:
			return this.Quality__;
		case 4:
			return this.isDepth__;
		case 5:
			return this.values__;
		case 6:
			return this.pixel__;
		case 7:
			return this.hasFixedColor__;
		case 8:
			return this.smoothFixedColor__;
		case 9:
			return this.fixedColor__;
		case 10:
			return this.isDepthDependant__;
		case 11:
			return this.hasNormal__;
		case 12:
			return this.normalTexture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_Blur);
		s.shader = this.shader;
		s.cameraInverseViewProj__ = this.cameraInverseViewProj__;
		s.texture__ = this.texture__;
		s.depthTexture__ = this.depthTexture__;
		s.Quality__ = this.Quality__;
		s.isDepth__ = this.isDepth__;
		s.values__ = this.values__;
		s.pixel__ = this.pixel__;
		s.hasFixedColor__ = this.hasFixedColor__;
		s.smoothFixedColor__ = this.smoothFixedColor__;
		s.fixedColor__ = this.fixedColor__;
		s.isDepthDependant__ = this.isDepthDependant__;
		s.hasNormal__ = this.hasNormal__;
		s.normalTexture__ = this.normalTexture__;
		return s;
	}
	,__class__: h3d_shader_Blur
});
var h3d_shader_ShaderBuffers = function(s) {
	this.globals = new Float32Array(s.globalsSize << 2);
	this.params = new Float32Array(s.paramsSize << 2);
	var length = s.textures2DCount + s.texturesCubeCount;
	var this1 = new Array(length);
	this.tex = this1;
};
$hxClasses["h3d.shader.ShaderBuffers"] = h3d_shader_ShaderBuffers;
h3d_shader_ShaderBuffers.__name__ = ["h3d","shader","ShaderBuffers"];
h3d_shader_ShaderBuffers.prototype = {
	grow: function(s) {
		var ng = s.globalsSize << 2;
		var np = s.paramsSize << 2;
		var nt = s.textures2DCount + s.texturesCubeCount;
		if(this.globals.length < ng) {
			this.globals = new Float32Array(ng);
		}
		if(this.params.length < np) {
			this.params = new Float32Array(np);
		}
		if(this.tex.length < nt) {
			var this1 = new Array(nt);
			this.tex = this1;
		}
	}
	,__class__: h3d_shader_ShaderBuffers
};
var h3d_shader_Buffers = function(s) {
	this.vertex = new h3d_shader_ShaderBuffers(s.vertex);
	this.fragment = new h3d_shader_ShaderBuffers(s.fragment);
};
$hxClasses["h3d.shader.Buffers"] = h3d_shader_Buffers;
h3d_shader_Buffers.__name__ = ["h3d","shader","Buffers"];
h3d_shader_Buffers.prototype = {
	grow: function(s) {
		this.vertex.grow(s.vertex);
		this.fragment.grow(s.fragment);
	}
	,__class__: h3d_shader_Buffers
};
var h3d_shader_ColorAdd = function(color) {
	if(color == null) {
		color = 0;
	}
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
	_this.w = (color >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorAdd"] = h3d_shader_ColorAdd;
h3d_shader_ColorAdd.__name__ = ["h3d","shader","ColorAdd"];
h3d_shader_ColorAdd.__super__ = hxsl_Shader;
h3d_shader_ColorAdd.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_ColorAdd);
		s.shader = this.shader;
		s.color__ = this.color__;
		return s;
	}
	,__class__: h3d_shader_ColorAdd
});
var h3d_shader_ColorKey = function(v) {
	if(v == null) {
		v = 0;
	}
	this.colorKey__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.colorKey__;
	_this.x = (v >> 16 & 255) / 255;
	_this.y = (v >> 8 & 255) / 255;
	_this.z = (v & 255) / 255;
	_this.w = (v >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorKey"] = h3d_shader_ColorKey;
h3d_shader_ColorKey.__name__ = ["h3d","shader","ColorKey"];
h3d_shader_ColorKey.__super__ = hxsl_Shader;
h3d_shader_ColorKey.prototype = $extend(hxsl_Shader.prototype,{
	get_colorKey: function() {
		return this.colorKey__;
	}
	,set_colorKey: function(_v) {
		return this.colorKey__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.colorKey__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_ColorKey);
		s.shader = this.shader;
		s.colorKey__ = this.colorKey__;
		return s;
	}
	,__class__: h3d_shader_ColorKey
});
var h3d_shader_ColorMatrix = function(m) {
	this.matrix__ = new h3d_Matrix();
	hxsl_Shader.call(this);
	if(m != null) {
		this.matrix__.load(m);
	} else {
		this.matrix__.identity();
	}
};
$hxClasses["h3d.shader.ColorMatrix"] = h3d_shader_ColorMatrix;
h3d_shader_ColorMatrix.__name__ = ["h3d","shader","ColorMatrix"];
h3d_shader_ColorMatrix.__super__ = hxsl_Shader;
h3d_shader_ColorMatrix.prototype = $extend(hxsl_Shader.prototype,{
	get_matrix: function() {
		return this.matrix__;
	}
	,set_matrix: function(_v) {
		return this.matrix__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.matrix__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_ColorMatrix);
		s.shader = this.shader;
		s.matrix__ = this.matrix__;
		return s;
	}
	,__class__: h3d_shader_ColorMatrix
});
var h3d_shader_DirLight = function() {
	this.direction__ = new h3d_Vector();
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = 1;
	_this.y = 1;
	_this.z = 1;
	_this.w = 1.;
};
$hxClasses["h3d.shader.DirLight"] = h3d_shader_DirLight;
h3d_shader_DirLight.__name__ = ["h3d","shader","DirLight"];
h3d_shader_DirLight.__super__ = hxsl_Shader;
h3d_shader_DirLight.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_direction: function() {
		return this.direction__;
	}
	,set_direction: function(_v) {
		return this.direction__ = _v;
	}
	,get_enableSpecular: function() {
		return this.enableSpecular__;
	}
	,set_enableSpecular: function(_v) {
		this.constModified = true;
		return this.enableSpecular__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enableSpecular__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.direction__;
		case 2:
			return this.enableSpecular__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_DirLight);
		s.shader = this.shader;
		s.color__ = this.color__;
		s.direction__ = this.direction__;
		s.enableSpecular__ = this.enableSpecular__;
		return s;
	}
	,__class__: h3d_shader_DirLight
});
var h3d_shader_LineShader = function(width,lengthScale) {
	if(lengthScale == null) {
		lengthScale = 1.;
	}
	if(width == null) {
		width = 1.5;
	}
	this.width__ = 0;
	this.lengthScale__ = 0;
	hxsl_Shader.call(this);
	this.width__ = width;
	this.lengthScale__ = lengthScale;
};
$hxClasses["h3d.shader.LineShader"] = h3d_shader_LineShader;
h3d_shader_LineShader.__name__ = ["h3d","shader","LineShader"];
h3d_shader_LineShader.__super__ = hxsl_Shader;
h3d_shader_LineShader.prototype = $extend(hxsl_Shader.prototype,{
	get_lengthScale: function() {
		return this.lengthScale__;
	}
	,set_lengthScale: function(_v) {
		return this.lengthScale__ = _v;
	}
	,get_width: function() {
		return this.width__;
	}
	,set_width: function(_v) {
		return this.width__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_LineShader);
		s.shader = this.shader;
		s.lengthScale__ = this.lengthScale__;
		s.width__ = this.width__;
		return s;
	}
	,__class__: h3d_shader_LineShader
});
var h3d_shader_Shadow = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Shadow"] = h3d_shader_Shadow;
h3d_shader_Shadow.__name__ = ["h3d","shader","Shadow"];
h3d_shader_Shadow.__super__ = hxsl_Shader;
h3d_shader_Shadow.prototype = $extend(hxsl_Shader.prototype,{
	get_perPixel: function() {
		return this.perPixel__;
	}
	,set_perPixel: function(_v) {
		this.constModified = true;
		return this.perPixel__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.perPixel__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.perPixel__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_Shadow);
		s.shader = this.shader;
		s.perPixel__ = this.perPixel__;
		return s;
	}
	,__class__: h3d_shader_Shadow
});
var h3d_shader_Skin = function() {
	this.bonesMatrixes__ = [];
	this.MaxBones__ = 0;
	hxsl_Shader.call(this);
	this.constModified = true;
	this.MaxBones__ = 34;
};
$hxClasses["h3d.shader.Skin"] = h3d_shader_Skin;
h3d_shader_Skin.__name__ = ["h3d","shader","Skin"];
h3d_shader_Skin.__super__ = hxsl_Shader;
h3d_shader_Skin.prototype = $extend(hxsl_Shader.prototype,{
	get_MaxBones: function() {
		return this.MaxBones__;
	}
	,set_MaxBones: function(_v) {
		this.constModified = true;
		return this.MaxBones__ = _v;
	}
	,get_bonesMatrixes: function() {
		return this.bonesMatrixes__;
	}
	,set_bonesMatrixes: function(_v) {
		return this.bonesMatrixes__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_Skin);
		s.shader = this.shader;
		s.MaxBones__ = this.MaxBones__;
		s.bonesMatrixes__ = this.bonesMatrixes__;
		return s;
	}
	,__class__: h3d_shader_Skin
});
var h3d_shader_SpecularTexture = function(tex) {
	hxsl_Shader.call(this);
	this.texture__ = tex;
};
$hxClasses["h3d.shader.SpecularTexture"] = h3d_shader_SpecularTexture;
h3d_shader_SpecularTexture.__name__ = ["h3d","shader","SpecularTexture"];
h3d_shader_SpecularTexture.__super__ = hxsl_Shader;
h3d_shader_SpecularTexture.prototype = $extend(hxsl_Shader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_SpecularTexture);
		s.shader = this.shader;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_shader_SpecularTexture
});
var h3d_shader_Texture = function(tex) {
	this.killAlphaThreshold__ = 0;
	hxsl_Shader.call(this);
	this.texture__ = tex;
	this.killAlphaThreshold__ = h3d_mat_Defaults.defaultKillAlphaThreshold;
};
$hxClasses["h3d.shader.Texture"] = h3d_shader_Texture;
h3d_shader_Texture.__name__ = ["h3d","shader","Texture"];
h3d_shader_Texture.__super__ = hxsl_Shader;
h3d_shader_Texture.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,get_killAlpha: function() {
		return this.killAlpha__;
	}
	,set_killAlpha: function(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	,get_specularAlpha: function() {
		return this.specularAlpha__;
	}
	,set_specularAlpha: function(_v) {
		this.constModified = true;
		return this.specularAlpha__ = _v;
	}
	,get_killAlphaThreshold: function() {
		return this.killAlphaThreshold__;
	}
	,set_killAlphaThreshold: function(_v) {
		return this.killAlphaThreshold__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		if(this.killAlpha__) {
			this.constBits |= 2;
		}
		if(this.specularAlpha__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.additive__;
		case 1:
			return this.killAlpha__;
		case 2:
			return this.specularAlpha__;
		case 3:
			return this.killAlphaThreshold__;
		case 4:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 3) {
			return this.killAlphaThreshold__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_Texture);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		s.killAlpha__ = this.killAlpha__;
		s.specularAlpha__ = this.specularAlpha__;
		s.killAlphaThreshold__ = this.killAlphaThreshold__;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_shader_Texture
});
var h3d_shader_UVDelta = function(dx,dy,sx,sy) {
	if(sy == null) {
		sy = 1.;
	}
	if(sx == null) {
		sx = 1.;
	}
	if(dy == null) {
		dy = 0.;
	}
	if(dx == null) {
		dx = 0.;
	}
	this.uvScale__ = new h3d_Vector();
	this.uvDelta__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.uvDelta__;
	_this.x = dx;
	_this.y = dy;
	_this.z = 0.;
	_this.w = 1.;
	var _this1 = this.uvScale__;
	_this1.x = sx;
	_this1.y = sy;
	_this1.z = 0.;
	_this1.w = 1.;
};
$hxClasses["h3d.shader.UVDelta"] = h3d_shader_UVDelta;
h3d_shader_UVDelta.__name__ = ["h3d","shader","UVDelta"];
h3d_shader_UVDelta.__super__ = hxsl_Shader;
h3d_shader_UVDelta.prototype = $extend(hxsl_Shader.prototype,{
	get_uvDelta: function() {
		return this.uvDelta__;
	}
	,set_uvDelta: function(_v) {
		return this.uvDelta__ = _v;
	}
	,get_uvScale: function() {
		return this.uvScale__;
	}
	,set_uvScale: function(_v) {
		return this.uvScale__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.uvDelta__;
		case 1:
			return this.uvScale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_UVDelta);
		s.shader = this.shader;
		s.uvDelta__ = this.uvDelta__;
		s.uvScale__ = this.uvScale__;
		return s;
	}
	,__class__: h3d_shader_UVDelta
});
var h3d_shader_VertexColorAlpha = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.VertexColorAlpha"] = h3d_shader_VertexColorAlpha;
h3d_shader_VertexColorAlpha.__name__ = ["h3d","shader","VertexColorAlpha"];
h3d_shader_VertexColorAlpha.__super__ = hxsl_Shader;
h3d_shader_VertexColorAlpha.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_VertexColorAlpha);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		return s;
	}
	,__class__: h3d_shader_VertexColorAlpha
});
var h3d_shader_VolumeDecal = function(objectWidth,objectHeight) {
	this.normal__ = new h3d_Vector();
	this.scale__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.normal__;
	_this.x = 0;
	_this.y = 0;
	_this.z = 1;
	_this.w = 1.;
	var _this1 = this.scale__;
	_this1.x = 1 / objectWidth;
	_this1.y = 1 / objectHeight;
	_this1.z = 0.;
	_this1.w = 1.;
};
$hxClasses["h3d.shader.VolumeDecal"] = h3d_shader_VolumeDecal;
h3d_shader_VolumeDecal.__name__ = ["h3d","shader","VolumeDecal"];
h3d_shader_VolumeDecal.__super__ = hxsl_Shader;
h3d_shader_VolumeDecal.prototype = $extend(hxsl_Shader.prototype,{
	get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,get_normal: function() {
		return this.normal__;
	}
	,set_normal: function(_v) {
		return this.normal__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.normal__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Type.createEmptyInstance(h3d_shader_VolumeDecal);
		s.shader = this.shader;
		s.scale__ = this.scale__;
		s.normal__ = this.normal__;
		return s;
	}
	,__class__: h3d_shader_VolumeDecal
});
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_EntryPoint = function() { };
$hxClasses["haxe.EntryPoint"] = haxe_EntryPoint;
haxe_EntryPoint.__name__ = ["haxe","EntryPoint"];
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	if(haxe_MainLoop.pending == null && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return haxe_MainLoop.tick();
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(haxe_EntryPoint.run);
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_MainEvent = function(f,p) {
	this.f = f;
	this.priority = p;
	this.nextRun = -1;
};
$hxClasses["haxe.MainEvent"] = haxe_MainEvent;
haxe_MainEvent.__name__ = ["haxe","MainEvent"];
haxe_MainEvent.prototype = {
	__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
$hxClasses["haxe.MainLoop"] = haxe_MainLoop;
haxe_MainLoop.__name__ = ["haxe","MainLoop"];
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw new js__$Boot_HaxeError("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g1 = 0;
			var _g = insize;
			while(_g1 < _g) {
				var i = _g1++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = new Date().getTime() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(e.nextRun < 0 || wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = ["haxe","Resource"];
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = ["haxe","crypto","Adler32"];
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.b[pos++] = value & 255;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Crc32 = function() {
	this.crc = -1;
};
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = ["haxe","crypto","Crc32"];
haxe_crypto_Crc32.make = function(data) {
	var init = -1;
	var crc = init;
	var b = data.b.bufferValue;
	var _g1 = 0;
	var _g = data.length;
	while(_g1 < _g) {
		var i = _g1++;
		var tmp = (crc ^ b.bytes[i]) & 255;
		var _g2 = 0;
		while(_g2 < 8) {
			var j = _g2++;
			if((tmp & 1) == 1) {
				tmp = tmp >>> 1 ^ -306674912;
			} else {
				tmp >>>= 1;
			}
		}
		crc = crc >>> 8 ^ tmp;
	}
	return crc ^ init;
};
haxe_crypto_Crc32.prototype = {
	'byte': function(b) {
		var tmp = (this.crc ^ b) & 255;
		var _g = 0;
		while(_g < 8) {
			var j = _g++;
			if((tmp & 1) == 1) {
				tmp = tmp >>> 1 ^ -306674912;
			} else {
				tmp >>>= 1;
			}
		}
		this.crc = this.crc >>> 8 ^ tmp;
	}
	,update: function(b,pos,len) {
		var b1 = b.b.bufferValue;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			var tmp = (this.crc ^ b1.bytes[i]) & 255;
			var _g2 = 0;
			while(_g2 < 8) {
				var j = _g2++;
				if((tmp & 1) == 1) {
					tmp = tmp >>> 1 ^ -306674912;
				} else {
					tmp >>>= 1;
				}
			}
			this.crc = this.crc >>> 8 ^ tmp;
		}
	}
	,get: function() {
		return this.crc ^ -1;
	}
	,__class__: haxe_crypto_Crc32
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = ["haxe","crypto","Md5"];
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g1 = 0;
	var _g = blksSize;
	while(_g1 < _g) {
		var i = _g1++;
		blks[i] = 0;
	}
	var i1 = 0;
	var max = str1.length;
	var l = max * 8;
	while(i1 < max) {
		blks[i1 >> 2] |= str1.b[i1] << (l + i1) % 4 * 8;
		++i1;
	}
	blks[i1 >> 2] |= 128 << (l + i1) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < 4) {
				var j = _g1++;
				str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);
			}
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = ["haxe","ds","ArraySort"];
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g1 = from + 1;
		var _g = to;
		while(_g1 < _g) {
			var i = _g1++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	var new_mid;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	var n;
	if(from == mid || mid == to) {
		return;
	}
	n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				return false;
			} else throw(e);
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw new js__$Boot_HaxeError("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw new js__$Boot_HaxeError("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
haxe_ds__$Vector_Vector_$Impl_$.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var k = _g1++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i1 = srcPos;
			var j1 = destPos;
			var _g11 = 0;
			var _g2 = len;
			while(_g11 < _g2) {
				var k1 = _g11++;
				src[j1] = src[i1];
				++i1;
				++j1;
			}
		}
	} else {
		var _g12 = 0;
		var _g3 = len;
		while(_g12 < _g3) {
			var i2 = _g12++;
			dest[destPos + i2] = src[srcPos + i2];
		}
	}
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe_io_BytesBuffer.prototype = {
	addInt32: function(v) {
		this.b.push(v & 255);
		this.b.push(v >> 8 & 255);
		this.b.push(v >> 16 & 255);
		this.b.push(v >>> 24);
	}
	,addInt64: function(v) {
		this.addInt32(v.low);
		this.addInt32(v.high);
	}
	,getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = ["haxe","io","Input"];
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if (eof instanceof js__$Boot_HaxeError) eof = eof.val;
			if( js_Boot.__instanceof(eof,haxe_io_Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readAll: function(bufsize) {
		if(bufsize == null) {
			bufsize = 16384;
		}
		var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
		var total = new haxe_io_BytesBuffer();
		try {
			while(true) {
				var len = this.readBytes(buf,0,bufsize);
				if(len == 0) {
					throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
				}
				if(len < 0 || len > buf.length) {
					throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
				}
				var b1 = total.b;
				var b2 = buf.b;
				var _g1 = 0;
				var _g = len;
				while(_g1 < _g) {
					var i = _g1++;
					total.b.push(b2[i]);
				}
			}
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,haxe_io_Eof) ) {
			} else throw(e);
		}
		return total.getBytes();
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = ["haxe","io","Output"];
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,flush: function() {
	}
	,close: function() {
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s) {
		var b = haxe_io_Bytes.ofString(s);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = ["haxe","io","BytesOutput"];
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.b.push(c);
	}
	,writeBytes: function(buf,pos,len) {
		var _this = this.b;
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = _this.b;
		var b2 = buf.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			_this.b.push(b2[i]);
		}
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_macro_Binop = $hxClasses["haxe.macro.Binop"] = { __ename__ : true, __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow"] };
haxe_macro_Binop.OpAdd = ["OpAdd",0];
haxe_macro_Binop.OpAdd.toString = $estr;
haxe_macro_Binop.OpAdd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpMult = ["OpMult",1];
haxe_macro_Binop.OpMult.toString = $estr;
haxe_macro_Binop.OpMult.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpDiv = ["OpDiv",2];
haxe_macro_Binop.OpDiv.toString = $estr;
haxe_macro_Binop.OpDiv.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpSub = ["OpSub",3];
haxe_macro_Binop.OpSub.toString = $estr;
haxe_macro_Binop.OpSub.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAssign = ["OpAssign",4];
haxe_macro_Binop.OpAssign.toString = $estr;
haxe_macro_Binop.OpAssign.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpEq = ["OpEq",5];
haxe_macro_Binop.OpEq.toString = $estr;
haxe_macro_Binop.OpEq.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpNotEq = ["OpNotEq",6];
haxe_macro_Binop.OpNotEq.toString = $estr;
haxe_macro_Binop.OpNotEq.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpGt = ["OpGt",7];
haxe_macro_Binop.OpGt.toString = $estr;
haxe_macro_Binop.OpGt.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpGte = ["OpGte",8];
haxe_macro_Binop.OpGte.toString = $estr;
haxe_macro_Binop.OpGte.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpLt = ["OpLt",9];
haxe_macro_Binop.OpLt.toString = $estr;
haxe_macro_Binop.OpLt.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpLte = ["OpLte",10];
haxe_macro_Binop.OpLte.toString = $estr;
haxe_macro_Binop.OpLte.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAnd = ["OpAnd",11];
haxe_macro_Binop.OpAnd.toString = $estr;
haxe_macro_Binop.OpAnd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpOr = ["OpOr",12];
haxe_macro_Binop.OpOr.toString = $estr;
haxe_macro_Binop.OpOr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpXor = ["OpXor",13];
haxe_macro_Binop.OpXor.toString = $estr;
haxe_macro_Binop.OpXor.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpBoolAnd = ["OpBoolAnd",14];
haxe_macro_Binop.OpBoolAnd.toString = $estr;
haxe_macro_Binop.OpBoolAnd.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpBoolOr = ["OpBoolOr",15];
haxe_macro_Binop.OpBoolOr.toString = $estr;
haxe_macro_Binop.OpBoolOr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpShl = ["OpShl",16];
haxe_macro_Binop.OpShl.toString = $estr;
haxe_macro_Binop.OpShl.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpShr = ["OpShr",17];
haxe_macro_Binop.OpShr.toString = $estr;
haxe_macro_Binop.OpShr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpUShr = ["OpUShr",18];
haxe_macro_Binop.OpUShr.toString = $estr;
haxe_macro_Binop.OpUShr.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpMod = ["OpMod",19];
haxe_macro_Binop.OpMod.toString = $estr;
haxe_macro_Binop.OpMod.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpAssignOp = function(op) { var $x = ["OpAssignOp",20,op]; $x.__enum__ = haxe_macro_Binop; $x.toString = $estr; return $x; };
haxe_macro_Binop.OpInterval = ["OpInterval",21];
haxe_macro_Binop.OpInterval.toString = $estr;
haxe_macro_Binop.OpInterval.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.OpArrow = ["OpArrow",22];
haxe_macro_Binop.OpArrow.toString = $estr;
haxe_macro_Binop.OpArrow.__enum__ = haxe_macro_Binop;
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow];
var haxe_macro_Unop = $hxClasses["haxe.macro.Unop"] = { __ename__ : true, __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"] };
haxe_macro_Unop.OpIncrement = ["OpIncrement",0];
haxe_macro_Unop.OpIncrement.toString = $estr;
haxe_macro_Unop.OpIncrement.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpDecrement = ["OpDecrement",1];
haxe_macro_Unop.OpDecrement.toString = $estr;
haxe_macro_Unop.OpDecrement.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNot = ["OpNot",2];
haxe_macro_Unop.OpNot.toString = $estr;
haxe_macro_Unop.OpNot.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNeg = ["OpNeg",3];
haxe_macro_Unop.OpNeg.toString = $estr;
haxe_macro_Unop.OpNeg.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.OpNegBits = ["OpNegBits",4];
haxe_macro_Unop.OpNegBits.toString = $estr;
haxe_macro_Unop.OpNegBits.__enum__ = haxe_macro_Unop;
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits];
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = ["haxe","rtti","Meta"];
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var haxe_xml__$Fast_NodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeAccess"] = haxe_xml__$Fast_NodeAccess;
haxe_xml__$Fast_NodeAccess.__name__ = ["haxe","xml","_Fast","NodeAccess"];
haxe_xml__$Fast_NodeAccess.prototype = {
	resolve: function(name) {
		var x = this.__x.elementsNamed(name).next();
		if(x == null) {
			var xname;
			if(this.__x.nodeType == Xml.Document) {
				xname = "Document";
			} else {
				var _this = this.__x;
				if(_this.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
				}
				xname = _this.nodeName;
			}
			throw new js__$Boot_HaxeError(xname + " is missing element " + name);
		}
		return new haxe_xml_Fast(x);
	}
	,__class__: haxe_xml__$Fast_NodeAccess
};
var haxe_xml__$Fast_AttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.AttribAccess"] = haxe_xml__$Fast_AttribAccess;
haxe_xml__$Fast_AttribAccess.__name__ = ["haxe","xml","_Fast","AttribAccess"];
haxe_xml__$Fast_AttribAccess.prototype = {
	resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) {
			throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		}
		var v = this.__x.get(name);
		if(v == null) {
			var _this = this.__x;
			if(_this.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
			}
			throw new js__$Boot_HaxeError(_this.nodeName + " is missing attribute " + name);
		}
		return v;
	}
	,__class__: haxe_xml__$Fast_AttribAccess
};
var haxe_xml__$Fast_HasAttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasAttribAccess"] = haxe_xml__$Fast_HasAttribAccess;
haxe_xml__$Fast_HasAttribAccess.__name__ = ["haxe","xml","_Fast","HasAttribAccess"];
haxe_xml__$Fast_HasAttribAccess.prototype = {
	resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) {
			throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		}
		return this.__x.exists(name);
	}
	,__class__: haxe_xml__$Fast_HasAttribAccess
};
var haxe_xml__$Fast_HasNodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasNodeAccess"] = haxe_xml__$Fast_HasNodeAccess;
haxe_xml__$Fast_HasNodeAccess.__name__ = ["haxe","xml","_Fast","HasNodeAccess"];
haxe_xml__$Fast_HasNodeAccess.prototype = {
	__class__: haxe_xml__$Fast_HasNodeAccess
};
var haxe_xml__$Fast_NodeListAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeListAccess"] = haxe_xml__$Fast_NodeListAccess;
haxe_xml__$Fast_NodeListAccess.__name__ = ["haxe","xml","_Fast","NodeListAccess"];
haxe_xml__$Fast_NodeListAccess.prototype = {
	resolve: function(name) {
		var l = new List();
		var x = this.__x.elementsNamed(name);
		while(x.hasNext()) {
			var x1 = x.next();
			l.add(new haxe_xml_Fast(x1));
		}
		return l;
	}
	,__class__: haxe_xml__$Fast_NodeListAccess
};
var haxe_xml_Fast = function(x) {
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Invalid nodeType " + x.nodeType);
	}
	this.x = x;
	this.node = new haxe_xml__$Fast_NodeAccess(x);
	this.nodes = new haxe_xml__$Fast_NodeListAccess(x);
	this.att = new haxe_xml__$Fast_AttribAccess(x);
	this.has = new haxe_xml__$Fast_HasAttribAccess(x);
	this.hasNode = new haxe_xml__$Fast_HasNodeAccess(x);
};
$hxClasses["haxe.xml.Fast"] = haxe_xml_Fast;
haxe_xml_Fast.__name__ = ["haxe","xml","Fast"];
haxe_xml_Fast.prototype = {
	get_name: function() {
		if(this.x.nodeType == Xml.Document) {
			return "Document";
		} else {
			var _this = this.x;
			if(_this.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
			}
			return _this.nodeName;
		}
	}
	,get_innerData: function() {
		var _this = this.x;
		if(_this.nodeType != Xml.Document && _this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _this.nodeType);
		}
		var it = HxOverrides.iter(_this.children);
		if(!it.hasNext()) {
			throw new js__$Boot_HaxeError(this.get_name() + " does not have data");
		}
		var v = it.next();
		if(it.hasNext()) {
			var n = it.next();
			var tmp;
			if(v.nodeType == Xml.PCData && n.nodeType == Xml.CData) {
				if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + v.nodeType);
				}
				tmp = StringTools.trim(v.nodeValue) == "";
			} else {
				tmp = false;
			}
			if(tmp) {
				if(!it.hasNext()) {
					if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, unexpected " + n.nodeType);
					}
					return n.nodeValue;
				}
				var n2 = it.next();
				var tmp1;
				var tmp2;
				if(n2.nodeType == Xml.PCData) {
					if(n2.nodeType == Xml.Document || n2.nodeType == Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, unexpected " + n2.nodeType);
					}
					tmp2 = StringTools.trim(n2.nodeValue) == "";
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = !it.hasNext();
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, unexpected " + n.nodeType);
					}
					return n.nodeValue;
				}
			}
			throw new js__$Boot_HaxeError(this.get_name() + " does not only have data");
		}
		if(v.nodeType != Xml.PCData && v.nodeType != Xml.CData) {
			throw new js__$Boot_HaxeError(this.get_name() + " does not have data");
		}
		if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, unexpected " + v.nodeType);
		}
		return v.nodeValue;
	}
	,get_elements: function() {
		var it = this.x.elements();
		return { hasNext : $bind(it,it.hasNext), next : function() {
			var x = it.next();
			if(x == null) {
				return null;
			}
			return new haxe_xml_Fast(x);
		}};
	}
	,__class__: haxe_xml_Fast
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	var _g = position;
	while(_g1 < _g) {
		var i = _g1++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_zip_Compress = function() { };
$hxClasses["haxe.zip.Compress"] = haxe_zip_Compress;
haxe_zip_Compress.__name__ = ["haxe","zip","Compress"];
haxe_zip_Compress.run = function(s,level) {
	throw new js__$Boot_HaxeError("Not implemented for this platform");
};
var haxe_zip_Huffman = $hxClasses["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe_zip_Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.__empty_constructs__ = [];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = ["haxe","zip","HuffTools"];
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			throw new js__$Boot_HaxeError("assert");
			break;
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t[1] == 1) {
				var b = t[3];
				var a = t[2];
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t[1] == 1) {
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g1 = 0;
		var _g = maxbits;
		while(_g1 < _g) {
			var i = _g1++;
			counts.push(0);
			tmp.push(0);
		}
		var _g11 = 0;
		var _g2 = nlengths;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g12 = 1;
		var _g3 = maxbits - 1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g13 = 0;
		var _g4 = nlengths;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = ["haxe","zip","_InflateImpl","Window"];
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxClasses["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe_zip__$InflateImpl_State.Head = ["Head",0];
haxe_zip__$InflateImpl_State.Head.toString = $estr;
haxe_zip__$InflateImpl_State.Head.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Block = ["Block",1];
haxe_zip__$InflateImpl_State.Block.toString = $estr;
haxe_zip__$InflateImpl_State.Block.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.CData = ["CData",2];
haxe_zip__$InflateImpl_State.CData.toString = $estr;
haxe_zip__$InflateImpl_State.CData.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Flat = ["Flat",3];
haxe_zip__$InflateImpl_State.Flat.toString = $estr;
haxe_zip__$InflateImpl_State.Flat.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Crc = ["Crc",4];
haxe_zip__$InflateImpl_State.Crc.toString = $estr;
haxe_zip__$InflateImpl_State.Crc.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Dist = ["Dist",5];
haxe_zip__$InflateImpl_State.Dist.toString = $estr;
haxe_zip__$InflateImpl_State.Dist.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.DistOne = ["DistOne",6];
haxe_zip__$InflateImpl_State.DistOne.toString = $estr;
haxe_zip__$InflateImpl_State.DistOne.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Done = ["Done",7];
haxe_zip__$InflateImpl_State.Done.toString = $estr;
haxe_zip__$InflateImpl_State.Done.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.__empty_constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this["final"] = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = ["haxe","zip","InflateImpl"];
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		if(len < 0 || len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = output.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i1 = _g1++;
			output.b.push(b2[i1]);
		}
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g11 = 0;
				var _g2 = hclen;
				while(_g11 < _g2) {
					var i = _g11++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g3 = hclen;
				while(_g3 < 19) {
					var i1 = _g3++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g12 = 0;
				var _g4 = hlit + hdist;
				while(_g12 < _g4) {
					var i2 = _g12++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = ["haxe","zip","Uncompress"];
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var hxbit_ConvertField = function(from,to) {
	this.from = from;
	this.to = to;
};
$hxClasses["hxbit.ConvertField"] = hxbit_ConvertField;
hxbit_ConvertField.__name__ = ["hxbit","ConvertField"];
hxbit_ConvertField.prototype = {
	__class__: hxbit_ConvertField
};
var hxbit_Convert = function(ourSchema,schema) {
	var ourMap = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g = ourSchema.fieldsNames.length;
	while(_g1 < _g) {
		var i = _g1++;
		var key = ourSchema.fieldsNames[i];
		var value = ourSchema.fieldsTypes[i];
		if(__map_reserved[key] != null) {
			ourMap.setReserved(key,value);
		} else {
			ourMap.h[key] = value;
		}
	}
	this.read = [];
	if(ourSchema.isFinal != schema.isFinal) {
		throw new js__$Boot_HaxeError("TODO : handle final flag change");
	}
	var map = new haxe_ds_StringMap();
	var _g11 = 0;
	var _g2 = schema.fieldsNames.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var oldT = schema.fieldsTypes[i1];
		var key1 = schema.fieldsNames[i1];
		var newT = __map_reserved[key1] != null ? ourMap.getReserved(key1) : ourMap.h[key1];
		var c = new hxbit_ConvertField(oldT,newT);
		if(newT != null) {
			if(hxbit_Convert.sameType(oldT,newT)) {
				c.same = true;
			} else {
				c.defaultValue = hxbit_Convert.getDefault(newT);
			}
		}
		c.index = this.read.length;
		this.read.push(c);
		var key2 = schema.fieldsNames[i1];
		if(__map_reserved[key2] != null) {
			map.setReserved(key2,c);
		} else {
			map.h[key2] = c;
		}
	}
	this.write = [];
	var _g12 = 0;
	var _g3 = ourSchema.fieldsNames.length;
	while(_g12 < _g3) {
		var i2 = _g12++;
		var newT1 = ourSchema.fieldsTypes[i2];
		var key3 = ourSchema.fieldsNames[i2];
		var c1 = __map_reserved[key3] != null ? map.getReserved(key3) : map.h[key3];
		if(c1 == null) {
			c1 = new hxbit_ConvertField(null,newT1);
			c1.defaultValue = hxbit_Convert.getDefault(newT1);
		}
		this.write.push(c1);
	}
};
$hxClasses["hxbit.Convert"] = hxbit_Convert;
hxbit_Convert.__name__ = ["hxbit","Convert"];
hxbit_Convert.sameType = function(a,b) {
	switch(a[1]) {
	case 0:
		switch(b[1]) {
		case 10:
			var b1 = b[2];
			return hxbit_Convert.sameType(a,b1);
		case 16:
			return true;
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 7:
		switch(b[1]) {
		case 7:
			var ak = a[2];
			var av = a[3];
			var bv = b[3];
			var bk = b[2];
			if(hxbit_Convert.sameType(ak,bk)) {
				return hxbit_Convert.sameType(av,bv);
			} else {
				return false;
			}
			break;
		case 10:
			var b2 = b[2];
			return hxbit_Convert.sameType(a,b2);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 8:
		switch(b[1]) {
		case 8:
			var a1 = a[2];
			var b3 = b[2];
			return hxbit_Convert.sameType(a1,b3);
		case 10:
			var b4 = b[2];
			return hxbit_Convert.sameType(a,b4);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 9:
		switch(b[1]) {
		case 9:
			var fa = a[2];
			var fb = b[2];
			if(fa.length != fb.length) {
				return false;
			}
			var _g1 = 0;
			var _g = fa.length;
			while(_g1 < _g) {
				var i = _g1++;
				var a2 = fa[i];
				var b5 = fb[i];
				if(a2.name != b5.name || a2.opt != b5.opt || !hxbit_Convert.sameType(a2.type,b5.type)) {
					return false;
				}
			}
			return true;
		case 10:
			var b6 = b[2];
			return hxbit_Convert.sameType(a,b6);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 10:
		if(b[1] == 10) {
			var a3 = a[2];
			var b7 = b[2];
			return hxbit_Convert.sameType(a3,b7);
		} else {
			var a4 = a[2];
			return hxbit_Convert.sameType(a4,b);
		}
		break;
	case 11:
		switch(b[1]) {
		case 10:
			var b8 = b[2];
			return hxbit_Convert.sameType(a,b8);
		case 11:
			var a5 = a[2];
			var b9 = b[2];
			return hxbit_Convert.sameType(a5,b9);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 12:
		switch(b[1]) {
		case 10:
			var b10 = b[2];
			return hxbit_Convert.sameType(a,b10);
		case 12:
			var a6 = a[2];
			var b11 = b[2];
			return hxbit_Convert.sameType(a6,b11);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 16:
		switch(b[1]) {
		case 0:
			return true;
		case 10:
			var b12 = b[2];
			return hxbit_Convert.sameType(a,b12);
		default:
			return Type.enumEq(a,b);
		}
		break;
	default:
		if(b[1] == 10) {
			var b13 = b[2];
			return hxbit_Convert.sameType(a,b13);
		} else {
			return Type.enumEq(a,b);
		}
	}
};
hxbit_Convert.getDefault = function(t) {
	switch(t[1]) {
	case 1:
		return 0.;
	case 2:
		return false;
	case 7:
		var k = t[2];
		switch(k[1]) {
		case 0:
			return new haxe_ds_IntMap();
		case 3:
			return new haxe_ds_StringMap();
		default:
			return new haxe_ds_ObjectMap();
		}
		break;
	case 8:
		return [];
	case 3:case 4:case 5:case 6:case 9:case 12:case 13:case 14:case 17:
		return null;
	case 10:
		var t1 = t[2];
		return hxbit_Convert.getDefault(t1);
	case 11:
		var this1 = new Array(0);
		return this1;
	case 15:
		var this2 = new haxe__$Int64__$_$_$Int64(0,0);
		return this2;
	case 0:case 16:
		return 0;
	}
};
hxbit_Convert.prototype = {
	toString: function() {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.write.length;
		while(_g2 < _g1) {
			var i = _g2++;
			var w = this.write[i];
			_g.push(w.from == null ? "insert:" + Std.string(w.defaultValue) : w.same ? i == w.index ? "s" : "@" + w.index : "@" + w.index + ":" + Std.string(w.to));
		}
		return _g.toString();
	}
	,__class__: hxbit_Convert
};
var hxbit_RpcMode = $hxClasses["hxbit.RpcMode"] = { __ename__ : true, __constructs__ : ["All","Client","Server","Owner"] };
hxbit_RpcMode.All = ["All",0];
hxbit_RpcMode.All.toString = $estr;
hxbit_RpcMode.All.__enum__ = hxbit_RpcMode;
hxbit_RpcMode.Client = ["Client",1];
hxbit_RpcMode.Client.toString = $estr;
hxbit_RpcMode.Client.__enum__ = hxbit_RpcMode;
hxbit_RpcMode.Server = ["Server",2];
hxbit_RpcMode.Server.toString = $estr;
hxbit_RpcMode.Server.__enum__ = hxbit_RpcMode;
hxbit_RpcMode.Owner = ["Owner",3];
hxbit_RpcMode.Owner.toString = $estr;
hxbit_RpcMode.Owner.__enum__ = hxbit_RpcMode;
hxbit_RpcMode.__empty_constructs__ = [hxbit_RpcMode.All,hxbit_RpcMode.Client,hxbit_RpcMode.Server,hxbit_RpcMode.Owner];
var hxbit_PropTypeDesc = $hxClasses["hxbit.PropTypeDesc"] = { __ename__ : true, __constructs__ : ["PInt","PFloat","PBool","PString","PBytes","PSerializable","PEnum","PMap","PArray","PObj","PAlias","PVector","PNull","PUnknown","PDynamic","PInt64","PFlags","PStruct"] };
hxbit_PropTypeDesc.PInt = ["PInt",0];
hxbit_PropTypeDesc.PInt.toString = $estr;
hxbit_PropTypeDesc.PInt.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PFloat = ["PFloat",1];
hxbit_PropTypeDesc.PFloat.toString = $estr;
hxbit_PropTypeDesc.PFloat.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PBool = ["PBool",2];
hxbit_PropTypeDesc.PBool.toString = $estr;
hxbit_PropTypeDesc.PBool.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PString = ["PString",3];
hxbit_PropTypeDesc.PString.toString = $estr;
hxbit_PropTypeDesc.PString.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PBytes = ["PBytes",4];
hxbit_PropTypeDesc.PBytes.toString = $estr;
hxbit_PropTypeDesc.PBytes.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PSerializable = function(name) { var $x = ["PSerializable",5,name]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PEnum = function(name) { var $x = ["PEnum",6,name]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PMap = function(k,v) { var $x = ["PMap",7,k,v]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PArray = function(k) { var $x = ["PArray",8,k]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PObj = function(fields) { var $x = ["PObj",9,fields]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PAlias = function(k) { var $x = ["PAlias",10,k]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PVector = function(k) { var $x = ["PVector",11,k]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PNull = function(t) { var $x = ["PNull",12,t]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PUnknown = ["PUnknown",13];
hxbit_PropTypeDesc.PUnknown.toString = $estr;
hxbit_PropTypeDesc.PUnknown.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PDynamic = ["PDynamic",14];
hxbit_PropTypeDesc.PDynamic.toString = $estr;
hxbit_PropTypeDesc.PDynamic.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PInt64 = ["PInt64",15];
hxbit_PropTypeDesc.PInt64.toString = $estr;
hxbit_PropTypeDesc.PInt64.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PFlags = function(t) { var $x = ["PFlags",16,t]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PStruct = ["PStruct",17];
hxbit_PropTypeDesc.PStruct.toString = $estr;
hxbit_PropTypeDesc.PStruct.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.__empty_constructs__ = [hxbit_PropTypeDesc.PInt,hxbit_PropTypeDesc.PFloat,hxbit_PropTypeDesc.PBool,hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PBytes,hxbit_PropTypeDesc.PUnknown,hxbit_PropTypeDesc.PDynamic,hxbit_PropTypeDesc.PInt64,hxbit_PropTypeDesc.PStruct];
var hxbit_Macros = function() { };
$hxClasses["hxbit.Macros"] = hxbit_Macros;
hxbit_Macros.__name__ = ["hxbit","Macros"];
var hxbit_Schema = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.fieldsNames = [];
	this.fieldsTypes = [];
};
$hxClasses["hxbit.Schema"] = hxbit_Schema;
hxbit_Schema.__name__ = ["hxbit","Schema"];
hxbit_Schema.__interfaces__ = [hxbit_Serializable];
hxbit_Schema.prototype = {
	get_checkSum: function() {
		var s = new hxbit_Serializer();
		s.begin();
		var old = this.__uid;
		this.__uid = 0;
		s.addKnownRef(this);
		this.__uid = old;
		var bytes = s.end();
		return haxe_crypto_Crc32.make(bytes);
	}
	,getCLID: function() {
		return hxbit_Schema.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.out.b.push(this.isFinal ? 1 : 0);
		var a = this.fieldsNames;
		if(a == null) {
			__ctx.out.b.push(0);
		} else {
			var v = a.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.b.push(v);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < a.length) {
				var v1 = a[_g];
				++_g;
				if(v1 == null) {
					__ctx.out.b.push(0);
				} else {
					var b = haxe_io_Bytes.ofString(v1);
					var v2 = b.length + 1;
					if(v2 >= 0 && v2 < 128) {
						__ctx.out.b.push(v2);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v2);
					}
					var _this = __ctx.out;
					var b1 = _this.b;
					var b2 = b.b;
					var _g1 = 0;
					var _g2 = b.length;
					while(_g1 < _g2) {
						var i = _g1++;
						_this.b.push(b2[i]);
					}
				}
			}
		}
		var a1 = this.fieldsTypes;
		if(a1 == null) {
			__ctx.out.b.push(0);
		} else {
			var v3 = a1.length + 1;
			if(v3 >= 0 && v3 < 128) {
				__ctx.out.b.push(v3);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v3);
			}
			var _g3 = 0;
			while(_g3 < a1.length) {
				var v4 = a1[_g3];
				++_g3;
				hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(__ctx,v4);
			}
		}
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("isFinal");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("fieldsNames");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PString));
		schema.fieldsNames.push("fieldsTypes");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")));
		schema.isFinal = hxbit_Serializer.isClassFinal(hxbit_Schema.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		this.isFinal = __ctx.input.b[__ctx.inPos++] != 0;
		var e0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var a = [];
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				var v1 = __ctx.input.b[__ctx.inPos++];
				if(v1 == 128) {
					v1 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v1;
				if(len1 == 0) {
					e0 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					e0 = s;
				}
				a[i] = e0;
			}
			tmp = a;
		}
		this.fieldsNames = tmp;
		var e01;
		var v2 = __ctx.input.b[__ctx.inPos++];
		if(v2 == 128) {
			v2 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len2 = v2;
		var tmp1;
		if(len2 == 0) {
			tmp1 = null;
		} else {
			--len2;
			var a1 = [];
			var _g11 = 0;
			var _g2 = len2;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var __e = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(__ctx);
				e01 = __e;
				a1[i1] = e01;
			}
			tmp1 = a1;
		}
		this.fieldsTypes = tmp1;
	}
	,__class__: hxbit_Schema
};
var hxbit_SerializableEnum = function() { };
$hxClasses["hxbit.SerializableEnum"] = hxbit_SerializableEnum;
hxbit_SerializableEnum.__name__ = ["hxbit","SerializableEnum"];
var hxbit_enumSer_hxbit_$PropTypeDesc = function() { };
$hxClasses["hxbit.enumSer.hxbit_PropTypeDesc"] = hxbit_enumSer_hxbit_$PropTypeDesc;
hxbit_enumSer_hxbit_$PropTypeDesc.__name__ = ["hxbit","enumSer","hxbit_PropTypeDesc"];
hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize = function(ctx,v) {
	if(v == null) {
		ctx.out.b.push(0);
	} else {
		switch(v[1]) {
		case 0:
			ctx.out.b.push(1);
			break;
		case 1:
			ctx.out.b.push(2);
			break;
		case 2:
			ctx.out.b.push(3);
			break;
		case 3:
			ctx.out.b.push(4);
			break;
		case 4:
			ctx.out.b.push(5);
			break;
		case 5:
			var name = v[2];
			ctx.out.b.push(6);
			if(name == null) {
				ctx.out.b.push(0);
			} else {
				var b = haxe_io_Bytes.ofString(name);
				var v1 = b.length + 1;
				if(v1 >= 0 && v1 < 128) {
					ctx.out.b.push(v1);
				} else {
					ctx.out.b.push(128);
					ctx.out.addInt32(v1);
				}
				var _this = ctx.out;
				var b1 = _this.b;
				var b2 = b.b;
				var _g1 = 0;
				var _g = b.length;
				while(_g1 < _g) {
					var i = _g1++;
					_this.b.push(b2[i]);
				}
			}
			break;
		case 6:
			var name1 = v[2];
			ctx.out.b.push(7);
			if(name1 == null) {
				ctx.out.b.push(0);
			} else {
				var b3 = haxe_io_Bytes.ofString(name1);
				var v2 = b3.length + 1;
				if(v2 >= 0 && v2 < 128) {
					ctx.out.b.push(v2);
				} else {
					ctx.out.b.push(128);
					ctx.out.addInt32(v2);
				}
				var _this1 = ctx.out;
				var b11 = _this1.b;
				var b21 = b3.b;
				var _g11 = 0;
				var _g2 = b3.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					_this1.b.push(b21[i1]);
				}
			}
			break;
		case 7:
			var v3 = v[3];
			var k = v[2];
			ctx.out.b.push(8);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,k);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,v3);
			break;
		case 8:
			var k1 = v[2];
			ctx.out.b.push(9);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,k1);
			break;
		case 9:
			var fields = v[2];
			ctx.out.b.push(10);
			if(fields == null) {
				ctx.out.b.push(0);
			} else {
				var v4 = fields.length + 1;
				if(v4 >= 0 && v4 < 128) {
					ctx.out.b.push(v4);
				} else {
					ctx.out.b.push(128);
					ctx.out.addInt32(v4);
				}
				var _g3 = 0;
				while(_g3 < fields.length) {
					var v5 = fields[_g3];
					++_g3;
					var v6 = v5;
					if(v6 == null) {
						ctx.out.b.push(0);
					} else {
						var fbits = 0;
						if(v6.name != null) {
							fbits |= 1;
						}
						if(v6.type != null) {
							fbits |= 2;
						}
						var v7 = fbits + 1;
						if(v7 >= 0 && v7 < 128) {
							ctx.out.b.push(v7);
						} else {
							ctx.out.b.push(128);
							ctx.out.addInt32(v7);
						}
						if((fbits & 1) != 0) {
							var s = v6.name;
							if(s == null) {
								ctx.out.b.push(0);
							} else {
								var b4 = haxe_io_Bytes.ofString(s);
								var v8 = b4.length + 1;
								if(v8 >= 0 && v8 < 128) {
									ctx.out.b.push(v8);
								} else {
									ctx.out.b.push(128);
									ctx.out.addInt32(v8);
								}
								var _this2 = ctx.out;
								var b12 = _this2.b;
								var b22 = b4.b;
								var _g12 = 0;
								var _g4 = b4.length;
								while(_g12 < _g4) {
									var i2 = _g12++;
									_this2.b.push(b22[i2]);
								}
							}
						}
						ctx.out.b.push(v6.opt ? 1 : 0);
						if((fbits & 2) != 0) {
							hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,v6.type);
						}
					}
				}
			}
			break;
		case 10:
			var k2 = v[2];
			ctx.out.b.push(11);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,k2);
			break;
		case 11:
			var k3 = v[2];
			ctx.out.b.push(12);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,k3);
			break;
		case 12:
			var t = v[2];
			ctx.out.b.push(13);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,t);
			break;
		case 13:
			ctx.out.b.push(14);
			break;
		case 14:
			ctx.out.b.push(15);
			break;
		case 15:
			ctx.out.b.push(16);
			break;
		case 16:
			var t1 = v[2];
			ctx.out.b.push(17);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,t1);
			break;
		case 17:
			ctx.out.b.push(18);
			break;
		}
	}
};
hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize = function(ctx) {
	var b = ctx.input.b[ctx.inPos++];
	if(b == 0) {
		return null;
	}
	switch(b) {
	case 1:
		return hxbit_PropTypeDesc.PInt;
	case 2:
		return hxbit_PropTypeDesc.PFloat;
	case 3:
		return hxbit_PropTypeDesc.PBool;
	case 4:
		return hxbit_PropTypeDesc.PString;
	case 5:
		return hxbit_PropTypeDesc.PBytes;
	case 6:
		var _name;
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			_name = null;
		} else {
			--len;
			var s = ctx.input.getString(ctx.inPos,len);
			ctx.inPos += len;
			_name = s;
		}
		return hxbit_PropTypeDesc.PSerializable(_name);
	case 7:
		var _name1;
		var v1 = ctx.input.b[ctx.inPos++];
		if(v1 == 128) {
			v1 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len1 = v1;
		if(len1 == 0) {
			_name1 = null;
		} else {
			--len1;
			var s1 = ctx.input.getString(ctx.inPos,len1);
			ctx.inPos += len1;
			_name1 = s1;
		}
		return hxbit_PropTypeDesc.PEnum(_name1);
	case 8:
		var _k;
		var __e = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		var _v;
		var __e1 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
		_v = __e1;
		return hxbit_PropTypeDesc.PMap(_k,_v);
	case 9:
		var _k1;
		var __e2 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k1 = __e2;
		return hxbit_PropTypeDesc.PArray(_k1);
	case 10:
		var _fields;
		var e0;
		var v2 = ctx.input.b[ctx.inPos++];
		if(v2 == 128) {
			v2 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len2 = v2;
		if(len2 == 0) {
			_fields = null;
		} else {
			--len2;
			var a = [];
			var _g1 = 0;
			var _g = len2;
			while(_g1 < _g) {
				var i = _g1++;
				var v3 = ctx.input.b[ctx.inPos++];
				if(v3 == 128) {
					v3 = ctx.input.getInt32(ctx.inPos);
					ctx.inPos += 4;
				}
				var fbits = v3;
				if(fbits == 0) {
					e0 = null;
				} else {
					--fbits;
					var type = null;
					var opt;
					var name = null;
					if((fbits & 1) != 0) {
						var v4 = ctx.input.b[ctx.inPos++];
						if(v4 == 128) {
							v4 = ctx.input.getInt32(ctx.inPos);
							ctx.inPos += 4;
						}
						var len3 = v4;
						if(len3 == 0) {
							name = null;
						} else {
							--len3;
							var s2 = ctx.input.getString(ctx.inPos,len3);
							ctx.inPos += len3;
							name = s2;
						}
					}
					opt = ctx.input.b[ctx.inPos++] != 0;
					if((fbits & 2) != 0) {
						var __e3 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
						type = __e3;
					}
					e0 = { name : name, opt : opt, type : type};
				}
				a[i] = e0;
			}
			_fields = a;
		}
		return hxbit_PropTypeDesc.PObj(_fields);
	case 11:
		var _k2;
		var __e4 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k2 = __e4;
		return hxbit_PropTypeDesc.PAlias(_k2);
	case 12:
		var _k3;
		var __e5 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k3 = __e5;
		return hxbit_PropTypeDesc.PVector(_k3);
	case 13:
		var _t;
		var __e6 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
		_t = __e6;
		return hxbit_PropTypeDesc.PNull(_t);
	case 14:
		return hxbit_PropTypeDesc.PUnknown;
	case 15:
		return hxbit_PropTypeDesc.PDynamic;
	case 16:
		return hxbit_PropTypeDesc.PInt64;
	case 17:
		var _t1;
		var __e7 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
		_t1 = __e7;
		return hxbit_PropTypeDesc.PFlags(_t1);
	case 18:
		return hxbit_PropTypeDesc.PStruct;
	default:
		throw new js__$Boot_HaxeError("Invalid enum index " + b);
	}
};
hxbit_enumSer_hxbit_$PropTypeDesc.getSchema = function() {
	var s = new hxbit_Schema();
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PInt");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PFloat");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PBool");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PString");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PBytes");
	var s1 = s.fieldsTypes;
	var _g = [];
	var _g1 = 0;
	var v;
	var _g2 = [hxbit_PropTypeDesc.PString];
	while(_g1 < _g2.length) {
		var t = _g2[_g1];
		++_g1;
		_g.push({ name : "", type : t, opt : false});
	}
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("PSerializable");
	var s2 = s.fieldsTypes;
	var _g11 = [];
	var _g21 = 0;
	var v1;
	var _g3 = [hxbit_PropTypeDesc.PString];
	while(_g21 < _g3.length) {
		var t1 = _g3[_g21];
		++_g21;
		_g11.push({ name : "", type : t1, opt : false});
	}
	s2.push(hxbit_PropTypeDesc.PObj(_g11));
	s.fieldsNames.push("PEnum");
	var s3 = s.fieldsTypes;
	var _g22 = [];
	var _g31 = 0;
	var v2;
	var v3;
	var _g4 = [hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")];
	while(_g31 < _g4.length) {
		var t2 = _g4[_g31];
		++_g31;
		_g22.push({ name : "", type : t2, opt : false});
	}
	s3.push(hxbit_PropTypeDesc.PObj(_g22));
	s.fieldsNames.push("PMap");
	var s4 = s.fieldsTypes;
	var _g32 = [];
	var _g41 = 0;
	var v4;
	var _g5 = [hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")];
	while(_g41 < _g5.length) {
		var t3 = _g5[_g41];
		++_g41;
		_g32.push({ name : "", type : t3, opt : false});
	}
	s4.push(hxbit_PropTypeDesc.PObj(_g32));
	s.fieldsNames.push("PArray");
	var s5 = s.fieldsTypes;
	var _g42 = [];
	var _g51 = 0;
	var v5;
	var _g6 = [hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PObj([{ opt : false, type : hxbit_PropTypeDesc.PString, name : "name"},{ opt : false, type : hxbit_PropTypeDesc.PBool, name : "opt"},{ opt : false, type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), name : "type"}]))];
	while(_g51 < _g6.length) {
		var t4 = _g6[_g51];
		++_g51;
		_g42.push({ name : "", type : t4, opt : false});
	}
	s5.push(hxbit_PropTypeDesc.PObj(_g42));
	s.fieldsNames.push("PObj");
	var s6 = s.fieldsTypes;
	var _g52 = [];
	var _g61 = 0;
	var v6;
	var _g7 = [hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")];
	while(_g61 < _g7.length) {
		var t5 = _g7[_g61];
		++_g61;
		_g52.push({ name : "", type : t5, opt : false});
	}
	s6.push(hxbit_PropTypeDesc.PObj(_g52));
	s.fieldsNames.push("PAlias");
	var s7 = s.fieldsTypes;
	var _g62 = [];
	var _g71 = 0;
	var v7;
	var _g8 = [hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")];
	while(_g71 < _g8.length) {
		var t6 = _g8[_g71];
		++_g71;
		_g62.push({ name : "", type : t6, opt : false});
	}
	s7.push(hxbit_PropTypeDesc.PObj(_g62));
	s.fieldsNames.push("PVector");
	var s8 = s.fieldsTypes;
	var _g72 = [];
	var _g81 = 0;
	var v8;
	var _g9 = [hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")];
	while(_g81 < _g9.length) {
		var t7 = _g9[_g81];
		++_g81;
		_g72.push({ name : "", type : t7, opt : false});
	}
	s8.push(hxbit_PropTypeDesc.PObj(_g72));
	s.fieldsNames.push("PNull");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PUnknown");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PDynamic");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PInt64");
	var s9 = s.fieldsTypes;
	var _g82 = [];
	var _g91 = 0;
	var v9;
	var _g10 = [hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")];
	while(_g91 < _g10.length) {
		var t8 = _g10[_g91];
		++_g91;
		_g82.push({ name : "", type : t8, opt : false});
	}
	s9.push(hxbit_PropTypeDesc.PObj(_g82));
	s.fieldsNames.push("PFlags");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PStruct");
	return s;
};
var hxd_BitmapData = function(width,height) {
	if(!(width == -101 && height == -102)) {
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		this.ctx = canvas.getContext("2d",null);
	}
};
$hxClasses["hxd.BitmapData"] = hxd_BitmapData;
hxd_BitmapData.__name__ = ["hxd","BitmapData"];
hxd_BitmapData.notImplemented = function() {
	throw new js__$Boot_HaxeError("Not implemented");
};
hxd_BitmapData.fromNative = function(data) {
	var b = new hxd_BitmapData(-101,-102);
	b.ctx = data;
	return b;
};
hxd_BitmapData.prototype = {
	clear: function(color) {
		this.fill(0,0,this.ctx.canvas.width,this.ctx.canvas.height,color);
	}
	,fill: function(x,y,width,height,color) {
		this.ctx.fillStyle = "rgba(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ", " + (color >>> 24) / 255 + ")";
		this.ctx.fillRect(x,y,width,height);
	}
	,draw: function(x,y,src,srcX,srcY,width,height,blendMode) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,drawScaled: function(x,y,width,height,src,srcX,srcY,srcWidth,srcHeight,blendMode,smooth) {
		if(smooth == null) {
			smooth = true;
		}
		if(blendMode == null) {
			blendMode = h2d_BlendMode.Alpha;
		}
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,line: function(x0,y0,x1,y1,color) {
		var dx = x1 - x0;
		var dy = y1 - y0;
		if(dx == 0) {
			if(y1 < y0) {
				var tmp = y0;
				y0 = y1;
				y1 = tmp;
			}
			var _g1 = y0;
			var _g = y1 + 1;
			while(_g1 < _g) {
				var y = _g1++;
				this.setPixel(x0,y,color);
			}
		} else if(dy == 0) {
			if(x1 < x0) {
				var tmp1 = x0;
				x0 = x1;
				x1 = tmp1;
			}
			var _g11 = x0;
			var _g2 = x1 + 1;
			while(_g11 < _g2) {
				var x = _g11++;
				this.setPixel(x,y0,color);
			}
		} else {
			throw new js__$Boot_HaxeError("TODO : brensenham line");
		}
	}
	,dispose: function() {
		this.ctx = null;
		this.pixel = null;
	}
	,clone: function() {
		return this.sub(0,0,this.ctx.canvas.width,this.ctx.canvas.height);
	}
	,sub: function(x,y,w,h) {
		var canvas = window.document.createElement("canvas");
		canvas.width = w;
		canvas.height = h;
		var ctx = canvas.getContext("2d",null);
		ctx.drawImage(this.ctx.canvas,x,y);
		return hxd_BitmapData.fromNative(ctx);
	}
	,lock: function() {
		if(this.lockImage == null) {
			this.lockImage = this.ctx.getImageData(0,0,this.ctx.canvas.width,this.ctx.canvas.height);
		}
	}
	,unlock: function() {
		if(this.lockImage != null) {
			this.ctx.putImageData(this.lockImage,0,0);
			this.lockImage = null;
		}
	}
	,getPixel: function(x,y) {
		var i = this.lockImage;
		var a;
		if(i != null) {
			a = x + y * i.width << 2;
		} else {
			a = 0;
			i = this.ctx.getImageData(x,y,1,1);
		}
		return i.data[a] << 16 | i.data[a | 1] << 8 | i.data[a | 2] | i.data[a | 3] << 24;
	}
	,setPixel: function(x,y,c) {
		var i = this.lockImage;
		if(i != null) {
			var a = x + y * i.width << 2;
			i.data[a] = c >> 16 & 255;
			i.data[a | 1] = c >> 8 & 255;
			i.data[a | 2] = c & 255;
			i.data[a | 3] = c >>> 24 & 255;
			return;
		}
		var i1 = this.pixel;
		if(i1 == null) {
			i1 = this.ctx.createImageData(1,1);
			this.pixel = i1;
		}
		i1.data[0] = c >> 16 & 255;
		i1.data[1] = c >> 8 & 255;
		i1.data[2] = c & 255;
		i1.data[3] = c >>> 24 & 255;
		this.ctx.putImageData(i1,x,y);
	}
	,get_width: function() {
		return this.ctx.canvas.width;
	}
	,get_height: function() {
		return this.ctx.canvas.height;
	}
	,getPixels: function() {
		var w = this.ctx.canvas.width;
		var h = this.ctx.canvas.height;
		var data = this.ctx.getImageData(0,0,w,h).data;
		var pixels = data.buffer;
		return new hxd_Pixels(w,h,haxe_io_Bytes.ofData(pixels),hxd_PixelFormat.RGBA);
	}
	,setPixels: function(pixels) {
		if(pixels.width != this.ctx.canvas.width || pixels.height != this.ctx.canvas.height) {
			throw new js__$Boot_HaxeError("Invalid pixels size");
		}
		pixels.setFlip(false);
		var img = this.ctx.createImageData(pixels.width,pixels.height);
		pixels.convert(hxd_PixelFormat.RGBA);
		var _g1 = 0;
		var _g = pixels.width * pixels.height * 4;
		while(_g1 < _g) {
			var i = _g1++;
			img.data[i] = pixels.bytes.b[i];
		}
		this.ctx.putImageData(img,0,0);
	}
	,toNative: function() {
		return this.ctx;
	}
	,toPNG: function() {
		var pixels = this.getPixels();
		var png = pixels.toPNG();
		pixels.dispose();
		return png;
	}
	,__class__: hxd_BitmapData
};
var hxd_Charset = function() {
	var _gthis = this;
	this.map = new haxe_ds_IntMap();
	var _g = 1;
	while(_g < 94) {
		var i = _g++;
		_gthis.map.set(65281 + i,33 + i);
	}
	var _g1 = 192;
	var _g2 = 199;
	while(_g1 < _g2) {
		var i1 = _g1++;
		_gthis.map.set(i1,65);
	}
	var _g11 = 224;
	var _g3 = 231;
	while(_g11 < _g3) {
		var i2 = _g11++;
		_gthis.map.set(i2,97);
	}
	var _g12 = 200;
	var _g4 = 204;
	while(_g12 < _g4) {
		var i3 = _g12++;
		_gthis.map.set(i3,69);
	}
	var _g13 = 232;
	var _g5 = 236;
	while(_g13 < _g5) {
		var i4 = _g13++;
		_gthis.map.set(i4,101);
	}
	var _g14 = 204;
	var _g6 = 208;
	while(_g14 < _g6) {
		var i5 = _g14++;
		_gthis.map.set(i5,73);
	}
	var _g15 = 236;
	var _g7 = 240;
	while(_g15 < _g7) {
		var i6 = _g15++;
		_gthis.map.set(i6,105);
	}
	var _g16 = 210;
	var _g8 = 215;
	while(_g16 < _g8) {
		var i7 = _g16++;
		_gthis.map.set(i7,79);
	}
	var _g17 = 242;
	var _g9 = 247;
	while(_g17 < _g9) {
		var i8 = _g17++;
		_gthis.map.set(i8,111);
	}
	var _g18 = 217;
	var _g10 = 221;
	while(_g18 < _g10) {
		var i9 = _g18++;
		_gthis.map.set(i9,85);
	}
	var _g19 = 249;
	var _g20 = 253;
	while(_g19 < _g20) {
		var i10 = _g19++;
		_gthis.map.set(i10,117);
	}
	_gthis.map.set(199,67);
	_gthis.map.set(231,67);
	_gthis.map.set(208,68);
	_gthis.map.set(222,100);
	_gthis.map.set(209,78);
	_gthis.map.set(241,110);
	_gthis.map.set(221,89);
	_gthis.map.set(253,121);
	_gthis.map.set(255,121);
	_gthis.map.set(8364,69);
	_gthis.map.set(12288,32);
	_gthis.map.set(160,32);
	_gthis.map.set(171,34);
	_gthis.map.set(187,34);
	_gthis.map.set(8220,34);
	_gthis.map.set(8221,34);
	_gthis.map.set(8216,39);
	_gthis.map.set(8217,39);
	_gthis.map.set(180,39);
	_gthis.map.set(8216,39);
	_gthis.map.set(8249,60);
	_gthis.map.set(8250,62);
};
$hxClasses["hxd.Charset"] = hxd_Charset;
hxd_Charset.__name__ = ["hxd","Charset"];
hxd_Charset.getDefault = function() {
	if(hxd_Charset.inst == null) {
		hxd_Charset.inst = new hxd_Charset();
	}
	return hxd_Charset.inst;
};
hxd_Charset.prototype = {
	resolveChar: function(code,glyphs) {
		var c = code;
		while(c != null) {
			var g = glyphs.h[c];
			if(g != null) {
				return g;
			}
			c = this.map.h[c];
		}
		return null;
	}
	,isCJK: function(code) {
		if(code >= 19968) {
			return code <= 40959;
		} else {
			return false;
		}
	}
	,isSpace: function(code) {
		if(code != 32) {
			return code == 12288;
		} else {
			return true;
		}
	}
	,isBreakChar: function(code) {
		if(!this.isSpace(code)) {
			return this.isCJK(code);
		} else {
			return true;
		}
	}
	,__class__: hxd_Charset
};
var hxd_Cursor = $hxClasses["hxd.Cursor"] = { __ename__ : true, __constructs__ : ["Default","Button","Move","TextInput","Hide","Custom"] };
hxd_Cursor.Default = ["Default",0];
hxd_Cursor.Default.toString = $estr;
hxd_Cursor.Default.__enum__ = hxd_Cursor;
hxd_Cursor.Button = ["Button",1];
hxd_Cursor.Button.toString = $estr;
hxd_Cursor.Button.__enum__ = hxd_Cursor;
hxd_Cursor.Move = ["Move",2];
hxd_Cursor.Move.toString = $estr;
hxd_Cursor.Move.__enum__ = hxd_Cursor;
hxd_Cursor.TextInput = ["TextInput",3];
hxd_Cursor.TextInput.toString = $estr;
hxd_Cursor.TextInput.__enum__ = hxd_Cursor;
hxd_Cursor.Hide = ["Hide",4];
hxd_Cursor.Hide.toString = $estr;
hxd_Cursor.Hide.__enum__ = hxd_Cursor;
hxd_Cursor.Custom = function(custom) { var $x = ["Custom",5,custom]; $x.__enum__ = hxd_Cursor; $x.toString = $estr; return $x; };
hxd_Cursor.__empty_constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide];
var hxd_CustomCursor = function(frames,speed,offsetX,offsetY) {
	this.frames = frames;
	this.speed = speed;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
};
$hxClasses["hxd.CustomCursor"] = hxd_CustomCursor;
hxd_CustomCursor.__name__ = ["hxd","CustomCursor"];
hxd_CustomCursor.prototype = {
	dispose: function() {
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.ctx = null;
			f.pixel = null;
		}
		this.frames = [];
		if(this.alloc != null) {
			throw new js__$Boot_HaxeError("TODO");
		}
	}
	,__class__: hxd_CustomCursor
};
var hxd_EventKind = $hxClasses["hxd.EventKind"] = { __ename__ : true, __constructs__ : ["EPush","ERelease","EMove","EOver","EOut","EWheel","EFocus","EFocusLost","EKeyDown","EKeyUp","EReleaseOutside","ETextInput","ECheck"] };
hxd_EventKind.EPush = ["EPush",0];
hxd_EventKind.EPush.toString = $estr;
hxd_EventKind.EPush.__enum__ = hxd_EventKind;
hxd_EventKind.ERelease = ["ERelease",1];
hxd_EventKind.ERelease.toString = $estr;
hxd_EventKind.ERelease.__enum__ = hxd_EventKind;
hxd_EventKind.EMove = ["EMove",2];
hxd_EventKind.EMove.toString = $estr;
hxd_EventKind.EMove.__enum__ = hxd_EventKind;
hxd_EventKind.EOver = ["EOver",3];
hxd_EventKind.EOver.toString = $estr;
hxd_EventKind.EOver.__enum__ = hxd_EventKind;
hxd_EventKind.EOut = ["EOut",4];
hxd_EventKind.EOut.toString = $estr;
hxd_EventKind.EOut.__enum__ = hxd_EventKind;
hxd_EventKind.EWheel = ["EWheel",5];
hxd_EventKind.EWheel.toString = $estr;
hxd_EventKind.EWheel.__enum__ = hxd_EventKind;
hxd_EventKind.EFocus = ["EFocus",6];
hxd_EventKind.EFocus.toString = $estr;
hxd_EventKind.EFocus.__enum__ = hxd_EventKind;
hxd_EventKind.EFocusLost = ["EFocusLost",7];
hxd_EventKind.EFocusLost.toString = $estr;
hxd_EventKind.EFocusLost.__enum__ = hxd_EventKind;
hxd_EventKind.EKeyDown = ["EKeyDown",8];
hxd_EventKind.EKeyDown.toString = $estr;
hxd_EventKind.EKeyDown.__enum__ = hxd_EventKind;
hxd_EventKind.EKeyUp = ["EKeyUp",9];
hxd_EventKind.EKeyUp.toString = $estr;
hxd_EventKind.EKeyUp.__enum__ = hxd_EventKind;
hxd_EventKind.EReleaseOutside = ["EReleaseOutside",10];
hxd_EventKind.EReleaseOutside.toString = $estr;
hxd_EventKind.EReleaseOutside.__enum__ = hxd_EventKind;
hxd_EventKind.ETextInput = ["ETextInput",11];
hxd_EventKind.ETextInput.toString = $estr;
hxd_EventKind.ETextInput.__enum__ = hxd_EventKind;
hxd_EventKind.ECheck = ["ECheck",12];
hxd_EventKind.ECheck.toString = $estr;
hxd_EventKind.ECheck.__enum__ = hxd_EventKind;
hxd_EventKind.__empty_constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
var hxd_Event = function(k,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.button = 0;
	this.kind = k;
	this.relX = x;
	this.relY = y;
};
$hxClasses["hxd.Event"] = hxd_Event;
hxd_Event.__name__ = ["hxd","Event"];
hxd_Event.prototype = {
	toString: function() {
		var tmp = Std.string(this.kind) + "[" + (this.relX | 0) + "," + (this.relY | 0) + "]";
		var _g = this.kind;
		var tmp1;
		switch(_g[1]) {
		case 0:case 1:case 10:
			tmp1 = ",button=" + this.button;
			break;
		case 2:case 3:case 4:case 6:case 7:case 12:
			tmp1 = "";
			break;
		case 5:
			tmp1 = ",wheelDelta=" + this.wheelDelta;
			break;
		case 8:case 9:
			tmp1 = ",keyCode=" + this.keyCode;
			break;
		case 11:
			tmp1 = ",charCode=" + this.charCode;
			break;
		}
		return tmp + tmp1;
	}
	,__class__: hxd_Event
};
var hxd__$FloatBuffer_Float32Expand_$Impl_$ = {};
$hxClasses["hxd._FloatBuffer.Float32Expand_Impl_"] = hxd__$FloatBuffer_Float32Expand_$Impl_$;
hxd__$FloatBuffer_Float32Expand_$Impl_$.__name__ = ["hxd","_FloatBuffer","Float32Expand_Impl_"];
hxd__$FloatBuffer_Float32Expand_$Impl_$._new = function(length) {
	var this1 = { pos : 0, array : new Float32Array(new ArrayBuffer(length << 2))};
	return this1;
};
hxd__$FloatBuffer_Float32Expand_$Impl_$.get_length = function(this1) {
	return this1.pos;
};
hxd__$FloatBuffer_Float32Expand_$Impl_$.set_length = function(this1,v) {
	if(this1.pos != v) {
		var newArray = new Float32Array(v);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.pos = v;
	return v;
};
hxd__$FloatBuffer_Float32Expand_$Impl_$.push = function(this1,v) {
	if(this1.pos == this1.array.length) {
		var newSize = this1.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.array[this1.pos++] = v;
};
hxd__$FloatBuffer_Float32Expand_$Impl_$.get = function(this1,index) {
	return this1.array[index];
};
hxd__$FloatBuffer_Float32Expand_$Impl_$.set = function(this1,index,v) {
	return this1.array[index] = v;
};
hxd__$FloatBuffer_Float32Expand_$Impl_$.toF32Array = function(this1) {
	return this1.array;
};
hxd__$FloatBuffer_Float32Expand_$Impl_$.toArray = function(this1) {
	var _g = [];
	var _g2 = 0;
	var _g1 = this1.pos;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(this1.array[i]);
	}
	return _g;
};
var hxd__$FloatBuffer_InnerIterator = function(b) {
	this.b = b;
	this.len = this.b.pos;
	this.pos = 0;
};
$hxClasses["hxd._FloatBuffer.InnerIterator"] = hxd__$FloatBuffer_InnerIterator;
hxd__$FloatBuffer_InnerIterator.__name__ = ["hxd","_FloatBuffer","InnerIterator"];
hxd__$FloatBuffer_InnerIterator.prototype = {
	hasNext: function() {
		return this.pos < this.len;
	}
	,next: function() {
		return this.b.array[this.pos++];
	}
	,__class__: hxd__$FloatBuffer_InnerIterator
};
var hxd__$FloatBuffer_FloatBuffer_$Impl_$ = {};
$hxClasses["hxd._FloatBuffer.FloatBuffer_Impl_"] = hxd__$FloatBuffer_FloatBuffer_$Impl_$;
hxd__$FloatBuffer_FloatBuffer_$Impl_$.__name__ = ["hxd","_FloatBuffer","FloatBuffer_Impl_"];
hxd__$FloatBuffer_FloatBuffer_$Impl_$._new = function(length) {
	if(length == null) {
		length = 0;
	}
	var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(length);
	return this1;
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.push = function(this1,v) {
	if(this1.pos == this1.array.length) {
		var newSize = this1.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.array[this1.pos++] = v;
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.grow = function(this1,v) {
	var _g1 = this1.pos;
	var _g = v;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 0.;
	}
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.resize = function(this1,v) {
	if(this1.pos != v) {
		var newArray = new Float32Array(v);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.pos = v;
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.arrayRead = function(this1,key) {
	return this1.array[key];
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.arrayWrite = function(this1,key,value) {
	return this1.array[key] = value;
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.getNative = function(this1) {
	return this1;
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.iterator = function(this1) {
	return new hxd__$FloatBuffer_InnerIterator(this1);
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.get_length = function(this1) {
	return this1.pos;
};
var hxd__$IndexBuffer_InnerIterator = function(b) {
	this.b = b;
	this.len = this.b.length;
	this.pos = 0;
};
$hxClasses["hxd._IndexBuffer.InnerIterator"] = hxd__$IndexBuffer_InnerIterator;
hxd__$IndexBuffer_InnerIterator.__name__ = ["hxd","_IndexBuffer","InnerIterator"];
hxd__$IndexBuffer_InnerIterator.prototype = {
	hasNext: function() {
		return this.pos < this.len;
	}
	,next: function() {
		return this.b[this.pos++];
	}
	,__class__: hxd__$IndexBuffer_InnerIterator
};
var hxd__$IndexBuffer_IndexBuffer_$Impl_$ = {};
$hxClasses["hxd._IndexBuffer.IndexBuffer_Impl_"] = hxd__$IndexBuffer_IndexBuffer_$Impl_$;
hxd__$IndexBuffer_IndexBuffer_$Impl_$.__name__ = ["hxd","_IndexBuffer","IndexBuffer_Impl_"];
hxd__$IndexBuffer_IndexBuffer_$Impl_$._new = function(length) {
	if(length == null) {
		length = 0;
	}
	var this1 = new Array(length);
	return this1;
};
hxd__$IndexBuffer_IndexBuffer_$Impl_$.push = function(this1,v) {
	this1.push(v);
};
hxd__$IndexBuffer_IndexBuffer_$Impl_$.grow = function(this1,v) {
	while(this1.length < v) this1.push(0);
};
hxd__$IndexBuffer_IndexBuffer_$Impl_$.arrayRead = function(this1,key) {
	return this1[key];
};
hxd__$IndexBuffer_IndexBuffer_$Impl_$.arrayWrite = function(this1,key,value) {
	return this1[key] = value;
};
hxd__$IndexBuffer_IndexBuffer_$Impl_$.getNative = function(this1) {
	return this1;
};
hxd__$IndexBuffer_IndexBuffer_$Impl_$.iterator = function(this1) {
	return new hxd__$IndexBuffer_InnerIterator(this1);
};
hxd__$IndexBuffer_IndexBuffer_$Impl_$.get_length = function(this1) {
	return this1.length;
};
var hxd_Key = function() { };
$hxClasses["hxd.Key"] = hxd_Key;
hxd_Key.__name__ = ["hxd","Key"];
hxd_Key.isDown = function(code) {
	return hxd_Key.keyPressed[code] > 0;
};
hxd_Key.getFrame = function() {
	return h3d_Engine.CURRENT.frameCount + 1;
};
hxd_Key.isPressed = function(code) {
	return hxd_Key.keyPressed[code] == h3d_Engine.CURRENT.frameCount + 1;
};
hxd_Key.isReleased = function(code) {
	return hxd_Key.keyPressed[code] == -(h3d_Engine.CURRENT.frameCount + 1);
};
hxd_Key.initialize = function() {
	if(hxd_Key.initDone) {
		hxd_Key.dispose();
	}
	hxd_Key.initDone = true;
	hxd_Key.keyPressed = [];
	hxd_Stage.getInstance().addEventTarget(hxd_Key.onEvent);
};
hxd_Key.dispose = function() {
	if(hxd_Key.initDone) {
		hxd_Stage.getInstance().removeEventTarget(hxd_Key.onEvent);
		hxd_Key.initDone = false;
		hxd_Key.keyPressed = [];
	}
};
hxd_Key.onEvent = function(e) {
	var _g = e.kind;
	switch(_g[1]) {
	case 0:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = h3d_Engine.CURRENT.frameCount + 1;
		}
		break;
	case 1:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = -(h3d_Engine.CURRENT.frameCount + 1);
		}
		break;
	case 5:
		hxd_Key.keyPressed[e.wheelDelta > 0 ? 6 : 5] = h3d_Engine.CURRENT.frameCount + 1;
		break;
	case 8:
		if(!hxd_Key.ALLOW_KEY_REPEAT && hxd_Key.keyPressed[e.keyCode] > 0) {
			return;
		}
		hxd_Key.keyPressed[e.keyCode] = h3d_Engine.CURRENT.frameCount + 1;
		break;
	case 9:
		hxd_Key.keyPressed[e.keyCode] = -(h3d_Engine.CURRENT.frameCount + 1);
		break;
	default:
	}
};
var hxd_Math = function() { };
$hxClasses["hxd.Math"] = hxd_Math;
hxd_Math.__name__ = ["hxd","Math"];
hxd_Math.get_POSITIVE_INFINITY = function() {
	return Infinity;
};
hxd_Math.get_NEGATIVE_INFINITY = function() {
	return -Infinity;
};
hxd_Math.get_NaN = function() {
	return NaN;
};
hxd_Math.isNaN = function(v) {
	return isNaN(v);
};
hxd_Math.fmt = function(v) {
	var neg;
	if(v < 0) {
		neg = -1.0;
		v = -v;
	} else {
		neg = 1.0;
	}
	if(isNaN(v) || !isFinite(v)) {
		return v;
	}
	var digits = 4 - Math.log(v) / Math.log(10) | 0;
	if(digits < 1) {
		digits = 1;
	} else if(digits >= 10) {
		return 0.;
	}
	var exp = Math.pow(10,digits);
	return Math.floor(v * exp + .49999) * neg / exp;
};
hxd_Math.floor = function(f) {
	return Math.floor(f);
};
hxd_Math.ceil = function(f) {
	return Math.ceil(f);
};
hxd_Math.round = function(f) {
	return Math.round(f);
};
hxd_Math.clamp = function(f,min,max) {
	if(max == null) {
		max = 1.;
	}
	if(min == null) {
		min = 0.;
	}
	if(f < min) {
		return min;
	} else if(f > max) {
		return max;
	} else {
		return f;
	}
};
hxd_Math.pow = function(v,p) {
	return Math.pow(v,p);
};
hxd_Math.cos = function(f) {
	return Math.cos(f);
};
hxd_Math.sin = function(f) {
	return Math.sin(f);
};
hxd_Math.tan = function(f) {
	return Math.tan(f);
};
hxd_Math.acos = function(f) {
	return Math.acos(f);
};
hxd_Math.asin = function(f) {
	return Math.asin(f);
};
hxd_Math.atan = function(f) {
	return Math.atan(f);
};
hxd_Math.sqrt = function(f) {
	return Math.sqrt(f);
};
hxd_Math.invSqrt = function(f) {
	return 1. / Math.sqrt(f);
};
hxd_Math.atan2 = function(dy,dx) {
	return Math.atan2(dy,dx);
};
hxd_Math.abs = function(f) {
	if(f < 0) {
		return -f;
	} else {
		return f;
	}
};
hxd_Math.max = function(a,b) {
	if(a < b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.min = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.iabs = function(i) {
	if(i < 0) {
		return -i;
	} else {
		return i;
	}
};
hxd_Math.imax = function(a,b) {
	if(a < b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.imin = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.iclamp = function(v,min,max) {
	if(v < min) {
		return min;
	} else if(v > max) {
		return max;
	} else {
		return v;
	}
};
hxd_Math.lerp = function(a,b,k) {
	return a + k * (b - a);
};
hxd_Math.bitCount = function(v) {
	v -= v >> 1 & 1431655765;
	v = (v & 858993459) + (v >> 2 & 858993459);
	return (v + (v >> 4) & 252645135) * 16843009 >> 24;
};
hxd_Math.distanceSq = function(dx,dy,dz) {
	if(dz == null) {
		dz = 0.;
	}
	return dx * dx + dy * dy + dz * dz;
};
hxd_Math.distance = function(dx,dy,dz) {
	if(dz == null) {
		dz = 0.;
	}
	return Math.sqrt(dx * dx + dy * dy + dz * dz);
};
hxd_Math.colorLerp = function(c1,c2,k) {
	var a1 = c1 >>> 24;
	var r1 = c1 >> 16 & 255;
	var g1 = c1 >> 8 & 255;
	var b1 = c1 & 255;
	var a2 = c2 >>> 24;
	var r2 = c2 >> 16 & 255;
	var g2 = c2 >> 8 & 255;
	var b2 = c2 & 255;
	var a = a1 * (1 - k) + a2 * k | 0;
	var r = r1 * (1 - k) + r2 * k | 0;
	var g = g1 * (1 - k) + g2 * k | 0;
	var b = b1 * (1 - k) + b2 * k | 0;
	return a << 24 | r << 16 | g << 8 | b;
};
hxd_Math.angle = function(da) {
	da %= 6.28318530717958623;
	if(da > 3.14159265358979323) {
		da -= 6.28318530717958623;
	} else if(da <= -3.14159265358979312) {
		da += 6.28318530717958623;
	}
	return da;
};
hxd_Math.angleLerp = function(a,b,k) {
	var da = b - a;
	da %= 6.28318530717958623;
	if(da > 3.14159265358979323) {
		da -= 6.28318530717958623;
	} else if(da <= -3.14159265358979312) {
		da += 6.28318530717958623;
	}
	return a + da * k;
};
hxd_Math.angleMove = function(a,b,max) {
	var da = b - a;
	da %= 6.28318530717958623;
	if(da > 3.14159265358979323) {
		da -= 6.28318530717958623;
	} else if(da <= -3.14159265358979312) {
		da += 6.28318530717958623;
	}
	var da1 = da;
	if(da1 > -max && da1 < max) {
		return b;
	} else {
		return a + (da1 < 0 ? -max : max);
	}
};
hxd_Math.shuffle = function(a) {
	var len = a.length;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		var x = Std.random(len);
		var y = Std.random(len);
		var tmp = a[x];
		a[x] = a[y];
		a[y] = tmp;
	}
};
hxd_Math.random = function(max) {
	if(max == null) {
		max = 1.0;
	}
	return Math.random() * max;
};
hxd_Math.srand = function(max) {
	if(max == null) {
		max = 1.0;
	}
	return (Math.random() - 0.5) * (max * 2);
};
hxd_Math.b2f = function(v) {
	return (v & 255) * 0.0039215686274509803921568627451;
};
hxd_Math.f2b = function(v) {
	return (v < 0. ? 0. : v > 1. ? 1. : v) * 255.0 | 0;
};
hxd_Math.umod = function(value,modulo) {
	var r = value % modulo;
	if(r >= 0) {
		return r;
	} else {
		return r + modulo;
	}
};
hxd_Math.ufmod = function(value,modulo) {
	var r = value % modulo;
	if(r >= 0) {
		return r;
	} else {
		return r + modulo;
	}
};
var hxd_Flags = $hxClasses["hxd.Flags"] = { __ename__ : true, __constructs__ : ["ReadOnly","AlphaPremultiplied","FlipY"] };
hxd_Flags.ReadOnly = ["ReadOnly",0];
hxd_Flags.ReadOnly.toString = $estr;
hxd_Flags.ReadOnly.__enum__ = hxd_Flags;
hxd_Flags.AlphaPremultiplied = ["AlphaPremultiplied",1];
hxd_Flags.AlphaPremultiplied.toString = $estr;
hxd_Flags.AlphaPremultiplied.__enum__ = hxd_Flags;
hxd_Flags.FlipY = ["FlipY",2];
hxd_Flags.FlipY.toString = $estr;
hxd_Flags.FlipY.__enum__ = hxd_Flags;
hxd_Flags.__empty_constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied,hxd_Flags.FlipY];
var hxd__$Pixels_PixelsARGB_$Impl_$ = {};
$hxClasses["hxd._Pixels.PixelsARGB_Impl_"] = hxd__$Pixels_PixelsARGB_$Impl_$;
hxd__$Pixels_PixelsARGB_$Impl_$.__name__ = ["hxd","_Pixels","PixelsARGB_Impl_"];
hxd__$Pixels_PixelsARGB_$Impl_$.getPixel = function(this1,x,y) {
	var v = this1.bytes.getInt32((x + y * this1.width << 2) + this1.offset);
	return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
};
hxd__$Pixels_PixelsARGB_$Impl_$.setPixel = function(this1,x,y,v) {
	this1.bytes.setInt32((x + y * this1.width << 2) + this1.offset,v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24);
};
hxd__$Pixels_PixelsARGB_$Impl_$.fromPixels = function(p) {
	p.convert(hxd_PixelFormat.ARGB);
	p.setFlip(false);
	return p;
};
var hxd__$Pixels_Channel_$Impl_$ = {};
$hxClasses["hxd._Pixels.Channel_Impl_"] = hxd__$Pixels_Channel_$Impl_$;
hxd__$Pixels_Channel_$Impl_$.__name__ = ["hxd","_Pixels","Channel_Impl_"];
hxd__$Pixels_Channel_$Impl_$.toInt = function(this1) {
	return this1;
};
hxd__$Pixels_Channel_$Impl_$.fromInt = function(v) {
	return v;
};
var hxd_Pixels = function(width,height,bytes,format,offset) {
	if(offset == null) {
		offset = 0;
	}
	this.width = width;
	this.height = height;
	this.bytes = bytes;
	this.set_innerFormat(format);
	this.offset = offset;
};
$hxClasses["hxd.Pixels"] = hxd_Pixels;
hxd_Pixels.__name__ = ["hxd","Pixels"];
hxd_Pixels.switchEndian = function(v) {
	return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
};
hxd_Pixels.switchBR = function(v) {
	return v & -16711936 | v << 16 & 16711680 | v >> 16 & 255;
};
hxd_Pixels.bytesPerPixel = function(format) {
	switch(format[1]) {
	case 0:case 1:case 2:
		return 4;
	case 3:
		return 8;
	case 4:
		return 16;
	case 5:
		return 1;
	case 6:
		return 2;
	case 7:
		return 4;
	}
};
hxd_Pixels.getChannelOffset = function(format,channel) {
	switch(format[1]) {
	case 0:
		return [1,2,3,0][channel];
	case 1:
		return [2,1,0,3][channel];
	case 2:
		return channel;
	case 3:
		return channel * 2;
	case 4:
		return channel * 4;
	case 5:case 6:case 7:
		if(channel == 3) {
			return 0;
		} else {
			return -1;
		}
		break;
	}
};
hxd_Pixels.alloc = function(width,height,format) {
	return new hxd_Pixels(width,height,hxd_impl_Tmp.getBytes(width * height * hxd_Pixels.bytesPerPixel(format)),format);
};
hxd_Pixels.prototype = {
	get_format: function() {
		return this.innerFormat;
	}
	,set_innerFormat: function(fmt) {
		this.innerFormat = fmt;
		this.bpp = hxd_Pixels.bytesPerPixel(fmt);
		return fmt;
	}
	,invalidFormat: function() {
		throw new js__$Boot_HaxeError("Unsupported format for this operation : " + Std.string(this.innerFormat));
	}
	,sub: function(x,y,width,height) {
		if(x < 0 || y < 0 || x + width > this.width || y + height > this.height) {
			throw new js__$Boot_HaxeError("Pixels.sub() outside bounds");
		}
		var out = hxd_impl_Tmp.getBytes(width * height * this.bpp);
		var stride = width * this.bpp;
		var outP = 0;
		var _g1 = 0;
		var _g = height;
		while(_g1 < _g) {
			var dy = _g1++;
			var y1 = y + dy;
			var p = (x + ((this.flags & 1 << hxd_Flags.FlipY[1]) != 0 ? this.height - 1 - y1 : y1) * this.width) * this.bpp + this.offset;
			out.blit(outP,this.bytes,p,stride);
			outP += stride;
		}
		return new hxd_Pixels(width,height,out,this.innerFormat);
	}
	,yflip: function(y) {
		if((this.flags & 1 << hxd_Flags.FlipY[1]) != 0) {
			return this.height - 1 - y;
		} else {
			return y;
		}
	}
	,blit: function(x,y,src,srcX,srcY,width,height) {
		if(x < 0 || y < 0 || x + width > this.width || y + height > this.height) {
			throw new js__$Boot_HaxeError("Pixels.blit() outside bounds");
		}
		if(srcX < 0 || srcX < 0 || srcX + width > src.width || srcY + height > src.height) {
			throw new js__$Boot_HaxeError("Pixels.blit() outside src bounds");
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly[1]) != 0) {
			this.copyInner();
		}
		src.convert(this.innerFormat);
		var stride = width * this.bpp;
		var _g1 = 0;
		var _g = height;
		while(_g1 < _g) {
			var dy = _g1++;
			var y1 = dy + srcY;
			var srcP = (srcX + ((src.flags & 1 << hxd_Flags.FlipY[1]) != 0 ? src.height - 1 - y1 : y1) * src.width) * this.bpp + src.offset;
			var y2 = dy + y;
			var dstP = (x + ((this.flags & 1 << hxd_Flags.FlipY[1]) != 0 ? this.height - 1 - y2 : y2) * this.width) * this.bpp + this.offset;
			this.bytes.blit(dstP,src.bytes,srcP,stride);
		}
	}
	,clear: function(color,preserveMask) {
		if(preserveMask == null) {
			preserveMask = 0;
		}
		var mask = preserveMask;
		if((this.flags & 1 << hxd_Flags.ReadOnly[1]) != 0) {
			this.copyInner();
		}
		if(color == 0 && mask == 0) {
			this.bytes.fill(this.offset,this.width * this.height * this.bpp,0);
			return;
		}
		var _g = this.innerFormat;
		switch(_g[1]) {
		case 0:
			color = color >>> 24 | color >> 8 & 65280 | color << 8 & 16711680 | color << 24;
			mask = mask >>> 24 | mask >> 8 & 65280 | mask << 8 & 16711680 | mask << 24;
			break;
		case 1:
			break;
		case 2:
			color = color & -16711936 | color << 16 & 16711680 | color >> 16 & 255;
			mask = mask & -16711936 | mask << 16 & 16711680 | mask >> 16 & 255;
			break;
		default:
			this.invalidFormat();
		}
		var p = this.offset;
		if(mask == 0) {
			var _g2 = 0;
			var _g1 = this.width * this.height;
			while(_g2 < _g1) {
				var i = _g2++;
				this.bytes.setInt32(p,color);
				p += 4;
			}
		} else {
			var _g21 = 0;
			var _g11 = this.width * this.height;
			while(_g21 < _g11) {
				var i1 = _g21++;
				this.bytes.setInt32(p,color | this.bytes.getInt32(p) & mask);
				p += 4;
			}
		}
	}
	,toVector: function() {
		var length = this.width * this.height;
		var this1 = new Array(length);
		var vec = this1;
		var idx = 0;
		var p = this.offset;
		var dl = 0;
		if((this.flags & 1 << hxd_Flags.FlipY[1]) != 0) {
			p += (this.height - 1) * this.width * this.bpp;
			dl = -this.width * 2 * this.bpp;
		}
		var _g = this.innerFormat;
		switch(_g[1]) {
		case 0:
			var _g1 = 0;
			var _g2 = this.height;
			while(_g1 < _g2) {
				var y = _g1++;
				var _g3 = 0;
				var _g21 = this.width;
				while(_g3 < _g21) {
					var x = _g3++;
					var v = this.bytes.getInt32(p);
					vec[idx++] = v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
					p += 4;
				}
				p += dl;
			}
			break;
		case 1:
			var _g11 = 0;
			var _g4 = this.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				var _g31 = 0;
				var _g22 = this.width;
				while(_g31 < _g22) {
					var x1 = _g31++;
					vec[idx++] = this.bytes.getInt32(p);
					p += 4;
				}
				p += dl;
			}
			break;
		case 2:
			var _g12 = 0;
			var _g5 = this.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				var _g32 = 0;
				var _g23 = this.width;
				while(_g32 < _g23) {
					var x2 = _g32++;
					var v1 = this.bytes.getInt32(p);
					vec[idx++] = v1 & -16711936 | v1 << 16 & 16711680 | v1 >> 16 & 255;
					p += 4;
				}
				p += dl;
			}
			break;
		default:
			this.invalidFormat();
		}
		return vec;
	}
	,makeSquare: function(copy) {
		var w = this.width;
		var h = this.height;
		var tw = w == 0 ? 0 : 1;
		var th = h == 0 ? 0 : 1;
		while(tw < w) tw <<= 1;
		while(th < h) th <<= 1;
		if(w == tw && h == th) {
			return this;
		}
		var out = hxd_impl_Tmp.getBytes(tw * th * 4);
		var p = 0;
		var b = this.offset;
		var _g1 = 0;
		var _g = h;
		while(_g1 < _g) {
			var y = _g1++;
			out.blit(p,this.bytes,b,w * 4);
			p += w * 4;
			b += w * 4;
			var _g3 = 0;
			var _g2 = tw - w;
			while(_g3 < _g2) {
				var i = _g3++;
				out.setInt32(p,0);
				p += 4;
			}
		}
		var _g11 = 0;
		var _g4 = (th - h) * tw;
		while(_g11 < _g4) {
			var i1 = _g11++;
			out.setInt32(p,0);
			p += 4;
		}
		if(copy) {
			return new hxd_Pixels(tw,th,out,this.innerFormat);
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly[1]) == 0) {
			hxd_impl_Tmp.saveBytes(this.bytes);
		}
		this.bytes = out;
		this.width = tw;
		this.height = th;
		return this;
	}
	,copyInner: function() {
		var old = this.bytes;
		this.bytes = hxd_impl_Tmp.getBytes(this.width * this.height * 4);
		this.bytes.blit(0,old,this.offset,this.width * this.height * 4);
		this.offset = 0;
		this.flags &= -1 - (1 << hxd_Flags.ReadOnly[1]);
	}
	,willChange: function() {
		if((this.flags & 1 << hxd_Flags.ReadOnly[1]) != 0) {
			this.copyInner();
		}
	}
	,setFlip: function(b) {
		if(b == null) {
			b = false;
		}
		if((this.flags & 1 << hxd_Flags.FlipY[1]) != 0 == b) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly[1]) != 0) {
			this.copyInner();
		}
		if(b) {
			this.flags |= 1 << hxd_Flags.FlipY[1];
		} else {
			this.flags &= -1 - (1 << hxd_Flags.FlipY[1]);
		}
		var stride = this.width * this.bpp;
		var _g1 = 0;
		var _g = this.height >> 1;
		while(_g1 < _g) {
			var y = _g1++;
			var p1 = y * stride;
			var p2 = (this.height - 1 - y) * stride;
			var _g3 = 0;
			var _g2 = stride >> 2;
			while(_g3 < _g2) {
				var x = _g3++;
				var a = this.bytes.getInt32(p1);
				var b1 = this.bytes.getInt32(p2);
				this.bytes.setInt32(p1,b1);
				this.bytes.setInt32(p2,a);
				p1 += 4;
				p2 += 4;
			}
		}
	}
	,convert: function(target) {
		if(this.innerFormat == target) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly[1]) != 0) {
			this.copyInner();
		}
		var _g = this.innerFormat;
		switch(_g[1]) {
		case 0:
			switch(target[1]) {
			case 1:
				var mem = hxd_impl_Memory.select(this.bytes);
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = hxd_impl_Memory.current.b[p];
					var r = hxd_impl_Memory.current.b[p + 1];
					var g = hxd_impl_Memory.current.b[p + 2];
					var b = hxd_impl_Memory.current.b[p + 3];
					hxd_impl_Memory.current.b[p] = b & 255;
					hxd_impl_Memory.current.b[p + 1] = g & 255;
					hxd_impl_Memory.current.b[p + 2] = r & 255;
					hxd_impl_Memory.current.b[p + 3] = a & 255;
				}
				hxd_impl_Memory.end();
				break;
			case 2:
				var mem1 = hxd_impl_Memory.select(this.bytes);
				var _g11 = 0;
				var _g3 = this.width * this.height;
				while(_g11 < _g3) {
					var i1 = _g11++;
					var p1 = (i1 << 2) + this.offset;
					var a1 = hxd_impl_Memory.current.b[p1];
					hxd_impl_Memory.current.b[p1] = hxd_impl_Memory.current.b[p1 + 1] & 255;
					hxd_impl_Memory.current.b[p1 + 1] = hxd_impl_Memory.current.b[p1 + 2] & 255;
					hxd_impl_Memory.current.b[p1 + 2] = hxd_impl_Memory.current.b[p1 + 3] & 255;
					hxd_impl_Memory.current.b[p1 + 3] = a1 & 255;
				}
				hxd_impl_Memory.end();
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 1:
			switch(target[1]) {
			case 0:
				var mem2 = hxd_impl_Memory.select(this.bytes);
				var _g12 = 0;
				var _g4 = this.width * this.height;
				while(_g12 < _g4) {
					var i2 = _g12++;
					var p2 = (i2 << 2) + this.offset;
					var a2 = hxd_impl_Memory.current.b[p2];
					var r1 = hxd_impl_Memory.current.b[p2 + 1];
					var g1 = hxd_impl_Memory.current.b[p2 + 2];
					var b1 = hxd_impl_Memory.current.b[p2 + 3];
					hxd_impl_Memory.current.b[p2] = b1 & 255;
					hxd_impl_Memory.current.b[p2 + 1] = g1 & 255;
					hxd_impl_Memory.current.b[p2 + 2] = r1 & 255;
					hxd_impl_Memory.current.b[p2 + 3] = a2 & 255;
				}
				hxd_impl_Memory.end();
				break;
			case 2:
				var mem3 = hxd_impl_Memory.select(this.bytes);
				var _g13 = 0;
				var _g5 = this.width * this.height;
				while(_g13 < _g5) {
					var i3 = _g13++;
					var p3 = (i3 << 2) + this.offset;
					var b2 = hxd_impl_Memory.current.b[p3];
					var r2 = hxd_impl_Memory.current.b[p3 + 2];
					hxd_impl_Memory.current.b[p3] = r2 & 255;
					hxd_impl_Memory.current.b[p3 + 2] = b2 & 255;
				}
				hxd_impl_Memory.end();
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 2:
			switch(target[1]) {
			case 0:
				var mem4 = hxd_impl_Memory.select(this.bytes);
				var _g14 = 0;
				var _g6 = this.width * this.height;
				while(_g14 < _g6) {
					var i4 = _g14++;
					var p4 = (i4 << 2) + this.offset;
					var a3 = hxd_impl_Memory.current.b[p4 + 3];
					hxd_impl_Memory.current.b[p4 + 3] = hxd_impl_Memory.current.b[p4 + 2] & 255;
					hxd_impl_Memory.current.b[p4 + 2] = hxd_impl_Memory.current.b[p4 + 1] & 255;
					hxd_impl_Memory.current.b[p4 + 1] = hxd_impl_Memory.current.b[p4] & 255;
					hxd_impl_Memory.current.b[p4] = a3 & 255;
				}
				hxd_impl_Memory.end();
				break;
			case 1:
				var mem5 = hxd_impl_Memory.select(this.bytes);
				var _g15 = 0;
				var _g7 = this.width * this.height;
				while(_g15 < _g7) {
					var i5 = _g15++;
					var p5 = (i5 << 2) + this.offset;
					var b3 = hxd_impl_Memory.current.b[p5];
					var r3 = hxd_impl_Memory.current.b[p5 + 2];
					hxd_impl_Memory.current.b[p5] = r3 & 255;
					hxd_impl_Memory.current.b[p5 + 2] = b3 & 255;
				}
				hxd_impl_Memory.end();
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
		}
		this.set_innerFormat(target);
	}
	,getPixel: function(x,y) {
		var p = (x + ((this.flags & 1 << hxd_Flags.FlipY[1]) != 0 ? this.height - 1 - y : y) * this.width) * this.bpp + this.offset;
		var _g = this.innerFormat;
		switch(_g[1]) {
		case 0:
			var v = this.bytes.getInt32(p);
			return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
		case 1:
			return this.bytes.getInt32(p);
		case 2:
			var v1 = this.bytes.getInt32(p);
			return v1 & -16711936 | v1 << 16 & 16711680 | v1 >> 16 & 255;
		default:
			this.invalidFormat();
			return 0;
		}
	}
	,setPixel: function(x,y,color) {
		var p = (x + ((this.flags & 1 << hxd_Flags.FlipY[1]) != 0 ? this.height - 1 - y : y) * this.width) * this.bpp + this.offset;
		if((this.flags & 1 << hxd_Flags.ReadOnly[1]) != 0) {
			this.copyInner();
		}
		var _g = this.innerFormat;
		switch(_g[1]) {
		case 0:
			this.bytes.setInt32(p,color >>> 24 | color >> 8 & 65280 | color << 8 & 16711680 | color << 24);
			break;
		case 1:
			this.bytes.setInt32(p,color);
			break;
		case 2:
			this.bytes.setInt32(p,color & -16711936 | color << 16 & 16711680 | color >> 16 & 255);
			break;
		default:
			this.invalidFormat();
		}
	}
	,dispose: function() {
		if(this.bytes != null) {
			if((this.flags & 1 << hxd_Flags.ReadOnly[1]) == 0) {
				hxd_impl_Tmp.saveBytes(this.bytes);
			}
			this.bytes = null;
		}
	}
	,toPNG: function(level) {
		if(level == null) {
			level = 9;
		}
		var png;
		this.setFlip(false);
		var _g = this.innerFormat;
		if(_g[1] == 0) {
			png = format_png_Tools.build32ARGB(this.width,this.height,this.bytes,level);
		} else {
			this.convert(hxd_PixelFormat.BGRA);
			png = format_png_Tools.build32BGRA(this.width,this.height,this.bytes,level);
		}
		var o = new haxe_io_BytesOutput();
		new format_png_Writer(o).write(png);
		return o.getBytes();
	}
	,clone: function() {
		var p = new hxd_Pixels(this.width,this.height,null,this.innerFormat);
		p.flags = this.flags;
		p.flags &= -1 - (1 << hxd_Flags.ReadOnly[1]);
		if(this.bytes != null) {
			var size = this.width * this.height * this.bpp;
			p.bytes = hxd_impl_Tmp.getBytes(size);
			p.bytes.blit(0,this.bytes,this.offset,size);
		}
		return p;
	}
	,__class__: hxd_Pixels
};
var hxd_Res = function() { };
$hxClasses["hxd.Res"] = hxd_Res;
hxd_Res.__name__ = ["hxd","Res"];
hxd_Res.load = function(name) {
	return hxd_Res.get_loader().load(name);
};
hxd_Res.get_loader = function() {
	return hxd_res_Loader.currentInstance;
};
hxd_Res.set_loader = function(l) {
	return hxd_res_Loader.currentInstance = l;
};
var hxd_SceneEvents = function(stage) {
	this.onOut = new hxd_Event(hxd_EventKind.EOut);
	this.checkPos = new hxd_Event(hxd_EventKind.ECheck);
	this.focusLost = new hxd_Event(hxd_EventKind.EFocusLost);
	this.lastTouch = 0;
	this.mouseY = -1.;
	this.mouseX = -1.;
	this.scenes = [];
	this.pendingEvents = [];
	this.pushList = [];
	if(stage == null) {
		stage = hxd_Stage.getInstance();
	}
	this.stage = stage;
	stage.addEventTarget($bind(this,this.onEvent));
};
$hxClasses["hxd.SceneEvents"] = hxd_SceneEvents;
hxd_SceneEvents.__name__ = ["hxd","SceneEvents"];
hxd_SceneEvents.prototype = {
	onRemove: function(i) {
		if(i == this.currentFocus) {
			this.currentFocus = null;
		}
		if(i == this.currentOver) {
			this.currentOver = null;
			hxd_System.setCursor(hxd_Cursor.Default);
		}
		HxOverrides.remove(this.pushList,i);
	}
	,addScene: function(s,index) {
		s.setEvents(this);
		if(index == null) {
			this.scenes.push(s);
		} else {
			this.scenes.splice(index,0,s);
		}
	}
	,removeScene: function(s) {
		if(HxOverrides.remove(this.scenes,s)) {
			s.setEvents(null);
		}
	}
	,dispose: function() {
		this.stage.removeEventTarget($bind(this,this.onEvent));
	}
	,focus: function(i) {
		if(this.currentFocus == i) {
			return;
		}
		if(i == null) {
			this.blur();
			return;
		}
		if(this.currentFocus != null) {
			this.blur();
			if(this.currentFocus != null) {
				return;
			}
		}
		var e = new hxd_Event(hxd_EventKind.EFocus);
		i.handleEvent(e);
		if(!e.cancel) {
			this.currentFocus = i;
		}
	}
	,blur: function() {
		if(this.currentFocus == null) {
			return;
		}
		this.focusLost.cancel = false;
		this.currentFocus.handleEvent(this.focusLost);
		if(!this.focusLost.cancel) {
			this.currentFocus = null;
		}
	}
	,checkFocus: function() {
		if(this.currentFocus == null) {
			return;
		}
		var s = this.currentFocus.getInteractiveScene();
		if(s == null) {
			this.currentFocus = null;
			return;
		}
		if(!s.isInteractiveVisible(this.currentFocus)) {
			this.blur();
		}
	}
	,emitEvent: function(event) {
		var oldX = event.relX;
		var oldY = event.relY;
		var handled = false;
		var checkOver = false;
		var checkPush = false;
		var cancelFocus = false;
		var _g = event.kind;
		switch(_g[1]) {
		case 0:
			cancelFocus = true;
			checkPush = true;
			break;
		case 1:
			checkPush = true;
			break;
		case 2:case 12:
			checkOver = true;
			break;
		case 5:case 8:case 9:case 11:
			if(this.currentFocus != null) {
				event.relX = event.relY = 0;
				this.currentFocus.handleEvent(event);
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					return;
				}
			}
			break;
		default:
		}
		var _g1 = 0;
		var _g2 = this.scenes;
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			var last = null;
			while(true) {
				var i = s.handleEvent(event,last);
				if(i == null) {
					event.relX = oldX;
					event.relY = oldY;
					break;
				}
				if(checkOver) {
					if(this.currentOver != i) {
						this.onOut.cancel = false;
						if(this.currentOver != null) {
							this.currentOver.handleEvent(this.onOut);
						}
						if(!this.onOut.cancel) {
							var old = event.propagate;
							var oldKind = event.kind;
							event.kind = hxd_EventKind.EOver;
							event.cancel = false;
							i.handleEvent(event);
							if(event.cancel) {
								this.currentOver = null;
							} else {
								this.currentOver = i;
								checkOver = false;
							}
							event.kind = oldKind;
							event.cancel = false;
							event.propagate = old;
						}
					} else {
						checkOver = false;
					}
				} else {
					if(checkPush) {
						if(event.kind == hxd_EventKind.EPush) {
							this.pushList.push(i);
						} else {
							HxOverrides.remove(this.pushList,i);
						}
					}
					if(cancelFocus && i == this.currentFocus) {
						cancelFocus = false;
					}
				}
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					handled = true;
					break;
				}
				last = i;
				event.propagate = false;
			}
			if(handled) {
				break;
			}
		}
		if(cancelFocus && this.currentFocus != null) {
			this.blur();
		}
		if(checkOver && this.currentOver != null) {
			this.onOut.cancel = false;
			this.currentOver.handleEvent(this.onOut);
			if(!this.onOut.cancel) {
				this.currentOver = null;
			}
		}
		if(!handled && event != this.checkPos) {
			if(event.kind == hxd_EventKind.EPush) {
				this.pushList.push(null);
			} else if(event.kind == hxd_EventKind.ERelease) {
				HxOverrides.remove(this.pushList,null);
			}
			this.dispatchListeners(event);
		}
		if(event.kind == hxd_EventKind.ERelease && this.pushList.length > 0) {
			var _g11 = 0;
			var _g21 = this.pushList;
			while(_g11 < _g21.length) {
				var i1 = _g21[_g11];
				++_g11;
				if(i1 == null) {
					this.dispatchListeners(event);
				} else {
					var s1 = i1.getInteractiveScene();
					if(s1 == null) {
						continue;
					}
					event.kind = hxd_EventKind.EReleaseOutside;
					s1.dispatchEvent(event,i1);
					event.kind = hxd_EventKind.ERelease;
					event.relX = oldX;
					event.relY = oldY;
				}
			}
			this.pushList = [];
		}
	}
	,checkEvents: function() {
		var old = this.pendingEvents;
		var checkMoved = false;
		var checkFocused = this.currentFocus == null;
		if(old.length > 0) {
			this.pendingEvents = [];
			var _g = 0;
			while(_g < old.length) {
				var e = old[_g];
				++_g;
				var ox = e.relX;
				var oy = e.relY;
				var _g1 = e.kind;
				switch(_g1[1]) {
				case 0:case 1:
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 2:
					checkMoved = true;
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 5:case 8:case 9:case 11:
					if(!checkFocused) {
						checkFocused = true;
						this.checkFocus();
					}
					break;
				default:
				}
				if(this.currentDrag != null && (this.currentDrag.ref == null || this.currentDrag.ref == e.touchId)) {
					e.propagate = false;
					e.cancel = false;
					this.currentDrag.f(e);
					e.relX = ox;
					e.relY = oy;
					if(e.cancel || e.propagate) {
						e.cancel = false;
						e.propagate = false;
						continue;
					}
				}
				this.emitEvent(e);
			}
		}
		if(!checkFocused) {
			this.checkFocus();
		}
		if(!checkMoved && this.currentDrag == null) {
			this.checkPos.relX = this.mouseX;
			this.checkPos.relY = this.mouseY;
			this.checkPos.touchId = this.lastTouch;
			this.checkPos.cancel = false;
			this.checkPos.propagate = false;
			this.emitEvent(this.checkPos);
		}
	}
	,startDrag: function(f,onCancel,refEvent) {
		if(this.currentDrag != null && this.currentDrag.onCancel != null) {
			this.currentDrag.onCancel();
		}
		this.currentDrag = { f : f, ref : refEvent == null ? null : refEvent.touchId, onCancel : onCancel};
	}
	,stopDrag: function() {
		this.currentDrag = null;
	}
	,getFocus: function() {
		return this.currentFocus;
	}
	,onEvent: function(e) {
		this.pendingEvents.push(e);
	}
	,dispatchListeners: function(event) {
		var ox = event.relX;
		var oy = event.relY;
		event.propagate = true;
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			event.cancel = false;
			s.dispatchListeners(event);
			event.relX = ox;
			event.relY = oy;
			if(!event.propagate) {
				break;
			}
		}
	}
	,__class__: hxd_SceneEvents
};
var hxd_Stage = function(canvas) {
	this.curMouseY = 0.;
	this.curMouseX = 0.;
	var _gthis = this;
	this.eventTargets = new List();
	this.resizeEvents = new List();
	this.element = canvas == null ? window : canvas;
	if(canvas == null) {
		canvas = window.document.getElementById("webgl");
		if(canvas == null) {
			throw new js__$Boot_HaxeError("Missing canvas #webgl");
		}
	}
	this.canvas = canvas;
	this.canvasPos = canvas.getBoundingClientRect();
	this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
	this.element.addEventListener("mousemove",$bind(this,this.onMouseMove));
	this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
	this.element.addEventListener("mousewheel",$bind(this,this.onMouseWheel));
	this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
	this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
	this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
	this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
	if(this.element == canvas) {
		canvas.setAttribute("tabindex","1");
		canvas.style.outline = "none";
	} else {
		canvas.addEventListener("mousedown",function(e) {
			_gthis.onMouseDown(e);
			e.stopPropagation();
			e.preventDefault();
		});
		canvas.oncontextmenu = function(e1) {
			e1.stopPropagation();
			e1.preventDefault();
			return false;
		};
	}
	this.curW = this.get_width();
	this.curH = this.get_height();
	this.timer = new haxe_Timer(100);
	this.timer.run = $bind(this,this.checkResize);
};
$hxClasses["hxd.Stage"] = hxd_Stage;
hxd_Stage.__name__ = ["hxd","Stage"];
hxd_Stage.getInstance = function() {
	if(hxd_Stage.inst == null) {
		hxd_Stage.inst = new hxd_Stage();
	}
	return hxd_Stage.inst;
};
hxd_Stage.prototype = {
	checkResize: function() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	,dispose: function() {
		this.timer.stop();
	}
	,onClose: function() {
		return true;
	}
	,event: function(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	,addEventTarget: function(et) {
		this.eventTargets.add(et);
	}
	,removeEventTarget: function(et) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,et)) {
				this.eventTargets.remove(e);
				break;
			}
		}
	}
	,addResizeEvent: function(f) {
		this.resizeEvents.push(f);
	}
	,removeResizeEvent: function(f) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,f)) {
				this.resizeEvents.remove(f);
				break;
			}
		}
	}
	,onResize: function(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	,resize: function(width,height) {
	}
	,setFullScreen: function(v) {
	}
	,setCurrent: function() {
		hxd_Stage.inst = this;
	}
	,get_width: function() {
		return Math.round(this.canvasPos.width * window.devicePixelRatio);
	}
	,get_height: function() {
		return Math.round(this.canvasPos.height * window.devicePixelRatio);
	}
	,get_mouseX: function() {
		return Math.round((this.curMouseX - this.canvasPos.left) * window.devicePixelRatio);
	}
	,get_mouseY: function() {
		return Math.round((this.curMouseY - this.canvasPos.top) * window.devicePixelRatio);
	}
	,get_mouseLock: function() {
		return false;
	}
	,set_mouseLock: function(v) {
		if(v) {
			throw new js__$Boot_HaxeError("Not implemented");
		}
		return false;
	}
	,get_vsync: function() {
		return true;
	}
	,set_vsync: function(b) {
		if(!b) {
			throw new js__$Boot_HaxeError("Can't disable vsync on this platform");
		}
		return true;
	}
	,onMouseDown: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseUp: function(e) {
		var ev = new hxd_Event(hxd_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseMove: function(e) {
		this.curMouseX = e.clientX;
		this.curMouseY = e.clientY;
		this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
	}
	,onMouseWheel: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = -e.wheelDelta / 30.0;
		this.event(ev);
	}
	,onTouchStart: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new hxd_Event(hxd_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchMove: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new hxd_Event(hxd_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchEnd: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new hxd_Event(hxd_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onKeyUp: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
	}
	,onKeyDown: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
	}
	,onKeyPress: function(e) {
		var ev = new hxd_Event(hxd_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
	}
	,__class__: hxd_Stage
};
var hxd_Platform = $hxClasses["hxd.Platform"] = { __ename__ : true, __constructs__ : ["IOS","Android","WebGL","PC","Console","FlashPlayer"] };
hxd_Platform.IOS = ["IOS",0];
hxd_Platform.IOS.toString = $estr;
hxd_Platform.IOS.__enum__ = hxd_Platform;
hxd_Platform.Android = ["Android",1];
hxd_Platform.Android.toString = $estr;
hxd_Platform.Android.__enum__ = hxd_Platform;
hxd_Platform.WebGL = ["WebGL",2];
hxd_Platform.WebGL.toString = $estr;
hxd_Platform.WebGL.__enum__ = hxd_Platform;
hxd_Platform.PC = ["PC",3];
hxd_Platform.PC.toString = $estr;
hxd_Platform.PC.__enum__ = hxd_Platform;
hxd_Platform.Console = ["Console",4];
hxd_Platform.Console.toString = $estr;
hxd_Platform.Console.__enum__ = hxd_Platform;
hxd_Platform.FlashPlayer = ["FlashPlayer",5];
hxd_Platform.FlashPlayer.toString = $estr;
hxd_Platform.FlashPlayer.__enum__ = hxd_Platform;
hxd_Platform.__empty_constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
var hxd_SystemValue = $hxClasses["hxd.SystemValue"] = { __ename__ : true, __constructs__ : ["IsTouch","IsWindowed","IsMobile"] };
hxd_SystemValue.IsTouch = ["IsTouch",0];
hxd_SystemValue.IsTouch.toString = $estr;
hxd_SystemValue.IsTouch.__enum__ = hxd_SystemValue;
hxd_SystemValue.IsWindowed = ["IsWindowed",1];
hxd_SystemValue.IsWindowed.toString = $estr;
hxd_SystemValue.IsWindowed.__enum__ = hxd_SystemValue;
hxd_SystemValue.IsMobile = ["IsMobile",2];
hxd_SystemValue.IsMobile.toString = $estr;
hxd_SystemValue.IsMobile.__enum__ = hxd_SystemValue;
hxd_SystemValue.__empty_constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
var hxd_System = function() { };
$hxClasses["hxd.System"] = hxd_System;
hxd_System.__name__ = ["hxd","System"];
hxd_System.timeoutTick = function() {
};
hxd_System.getCurrentLoop = function() {
	return hxd_System.loopFunc;
};
hxd_System.setLoop = function(f) {
	if(!hxd_System.loopInit) {
		hxd_System.loopInit = true;
		hxd_System.browserLoop();
	}
	hxd_System.loopFunc = f;
};
hxd_System.browserLoop = function() {
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(hxd_System.browserLoop);
	if(hxd_System.loopFunc != null) {
		hxd_System.loopFunc();
	}
};
hxd_System.start = function(callb) {
	callb();
};
hxd_System.setNativeCursor = function(c) {
	var canvas = hxd_Stage.getInstance().canvas;
	if(canvas != null) {
		var tmp;
		switch(c[1]) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "move";
			break;
		case 3:
			tmp = "text";
			break;
		case 4:
			tmp = "none";
			break;
		case 5:
			throw new js__$Boot_HaxeError("Custom cursor not supported");
			break;
		}
		canvas.style.cursor = tmp;
	}
};
hxd_System.getDeviceName = function() {
	return "Unknown";
};
hxd_System.getDefaultFrameRate = function() {
	return 60.;
};
hxd_System.getValue = function(s) {
	return false;
};
hxd_System.exit = function() {
};
hxd_System.get_width = function() {
	return Math.round(window.document.body.clientWidth * window.devicePixelRatio);
};
hxd_System.get_height = function() {
	return Math.round(window.document.body.clientHeight * window.devicePixelRatio);
};
hxd_System.get_lang = function() {
	return "en";
};
hxd_System.get_platform = function() {
	return hxd_Platform.PC;
};
hxd_System.get_screenDPI = function() {
	return 72;
};
hxd_System.get_allowTimeout = function() {
	return false;
};
hxd_System.set_allowTimeout = function(b) {
	return false;
};
var hxd_Timer = function() { };
$hxClasses["hxd.Timer"] = hxd_Timer;
hxd_Timer.__name__ = ["hxd","Timer"];
hxd_Timer.update = function() {
	hxd_Timer.frameCount++;
	var newTime = new Date().getTime() / 1000;
	hxd_Timer.deltaT = newTime - hxd_Timer.oldTime;
	hxd_Timer.oldTime = newTime;
	if(hxd_Timer.deltaT < hxd_Timer.maxDeltaTime) {
		hxd_Timer.calc_tmod = hxd_Timer.calc_tmod * hxd_Timer.tmod_factor + (1 - hxd_Timer.tmod_factor) * hxd_Timer.deltaT * hxd_Timer.wantedFPS;
	} else {
		hxd_Timer.deltaT = 1 / hxd_Timer.wantedFPS;
	}
	hxd_Timer.tmod = hxd_Timer.calc_tmod;
};
hxd_Timer.fps = function() {
	return hxd_Timer.wantedFPS / hxd_Timer.calc_tmod;
};
hxd_Timer.skip = function() {
	hxd_Timer.oldTime = new Date().getTime() / 1000;
};
hxd_Timer.reset = function() {
	hxd_Timer.oldTime = new Date().getTime() / 1000;
	hxd_Timer.calc_tmod = 1.;
};
var hxd_res_Embed = function() { };
$hxClasses["hxd.res.Embed"] = hxd_res_Embed;
hxd_res_Embed.__name__ = ["hxd","res","Embed"];
var hxd__$res_R_$trueTypeFont_$ttf = function() { };
$hxClasses["hxd._res.R_trueTypeFont_ttf"] = hxd__$res_R_$trueTypeFont_$ttf;
hxd__$res_R_$trueTypeFont_$ttf.__name__ = ["hxd","_res","R_trueTypeFont_ttf"];
hxd__$res_R_$trueTypeFont_$ttf.__super__ = hxd_res_Embed;
hxd__$res_R_$trueTypeFont_$ttf.prototype = $extend(hxd_res_Embed.prototype,{
	__class__: hxd__$res_R_$trueTypeFont_$ttf
});
var hxd_earcut_EarNode = function() {
};
$hxClasses["hxd.earcut.EarNode"] = hxd_earcut_EarNode;
hxd_earcut_EarNode.__name__ = ["hxd","earcut","EarNode"];
hxd_earcut_EarNode.prototype = {
	__class__: hxd_earcut_EarNode
};
var hxd_earcut_Earcut = function() {
};
$hxClasses["hxd.earcut.Earcut"] = hxd_earcut_Earcut;
hxd_earcut_Earcut.__name__ = ["hxd","earcut","Earcut"];
hxd_earcut_Earcut.prototype = {
	triangulate_h2d__Graphics_GPoint: function(points,holes) {
		var hasHoles = holes != null && holes.length > 0;
		var outerLen = hasHoles ? holes[0] : points.length;
		if(outerLen < 3) {
			return [];
		}
		var root = this.setLinkedList_triangulate_T(points,0,outerLen,true);
		if(holes != null) {
			root = this.eliminateHoles_triangulate_T(points,holes,root);
		}
		return this.triangulateNode(root,points.length > 80);
	}
	,eliminateHoles_triangulate_T: function(points,holes,root) {
		var queue = [];
		var _g1 = 0;
		var _g = holes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var s = holes[i];
			var e = i == holes.length - 1 ? points.length : holes[i + 1];
			var node = this.setLinkedList_eliminateHoles_T(points,s,e,false);
			if(node == node.next) {
				node.steiner = true;
			}
			queue.push(this.getLeftmost(node));
		}
		queue.sort($bind(this,this.compareX));
		var _g2 = 0;
		while(_g2 < queue.length) {
			var q = queue[_g2];
			++_g2;
			this.eliminateHole(q,root);
			root = this.filterPoints(root,root.next);
		}
		return root;
	}
	,setLinkedList_eliminateHoles_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g1 = start;
		var _g = end;
		while(_g1 < _g) {
			var i = _g1++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = null;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g11 = start;
			var _g2 = end;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var p = points[i1];
				var x = p.x;
				var y = p.y;
				var n1 = this.cache;
				if(n1 == null) {
					n1 = new hxd_earcut_EarNode();
					n1.allocNext = this.allocated;
					this.allocated = n1;
				} else {
					this.cache = n1.next;
				}
				n1.i = i1;
				n1.z = -1;
				n1.x = x;
				n1.y = y;
				n1.next = null;
				n1.prev = node;
				n1.steiner = false;
				n1.prevZ = null;
				n1.nextZ = null;
				if(node != null) {
					node.next = n1;
				}
				node = n1;
			}
		} else {
			var i2 = end - 1;
			while(i2 >= start) {
				var p1 = points[i2];
				var x1 = p1.x;
				var y1 = p1.y;
				var n2 = this.cache;
				if(n2 == null) {
					n2 = new hxd_earcut_EarNode();
					n2.allocNext = this.allocated;
					this.allocated = n2;
				} else {
					this.cache = n2.next;
				}
				n2.i = i2;
				n2.z = -1;
				n2.x = x1;
				n2.y = y1;
				n2.next = null;
				n2.prev = node;
				n2.steiner = false;
				n2.prevZ = null;
				n2.nextZ = null;
				if(node != null) {
					node.next = n2;
				}
				node = n2;
				--i2;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,setLinkedList_triangulate_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g1 = start;
		var _g = end;
		while(_g1 < _g) {
			var i = _g1++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = null;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g11 = start;
			var _g2 = end;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var p = points[i1];
				var x = p.x;
				var y = p.y;
				var n1 = this.cache;
				if(n1 == null) {
					n1 = new hxd_earcut_EarNode();
					n1.allocNext = this.allocated;
					this.allocated = n1;
				} else {
					this.cache = n1.next;
				}
				n1.i = i1;
				n1.z = -1;
				n1.x = x;
				n1.y = y;
				n1.next = null;
				n1.prev = node;
				n1.steiner = false;
				n1.prevZ = null;
				n1.nextZ = null;
				if(node != null) {
					node.next = n1;
				}
				node = n1;
			}
		} else {
			var i2 = end - 1;
			while(i2 >= start) {
				var p1 = points[i2];
				var x1 = p1.x;
				var y1 = p1.y;
				var n2 = this.cache;
				if(n2 == null) {
					n2 = new hxd_earcut_EarNode();
					n2.allocNext = this.allocated;
					this.allocated = n2;
				} else {
					this.cache = n2.next;
				}
				n2.i = i2;
				n2.z = -1;
				n2.x = x1;
				n2.y = y1;
				n2.next = null;
				n2.prev = node;
				n2.steiner = false;
				n2.prevZ = null;
				n2.nextZ = null;
				if(node != null) {
					node.next = n2;
				}
				node = n2;
				--i2;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,triangulateNode: function(root,useZOrder) {
		this.triangles = [];
		root = this.filterPoints(root);
		if(useZOrder && root != null) {
			var maxX;
			var maxY;
			maxX = root.x;
			this.minX = maxX;
			maxY = root.y;
			this.minY = maxY;
			var p = root.next;
			while(p != root) {
				var x = p.x;
				var y = p.y;
				if(x < this.minX) {
					this.minX = x;
				}
				if(y < this.minY) {
					this.minY = y;
				}
				if(x > maxX) {
					maxX = x;
				}
				if(y > maxY) {
					maxY = y;
				}
				p = p.next;
			}
			var a = maxX - this.minX;
			var b = maxY - this.minY;
			this.size = a < b ? b : a;
			this.hasSize = true;
		} else {
			this.hasSize = false;
		}
		this.earcutLinked(root);
		var result = this.triangles;
		this.triangles = null;
		var n = this.allocated;
		if(this.cache != null) {
			while(n != this.cache) n = n.allocNext;
			n = n.allocNext;
		}
		while(n != null) {
			n.next = this.cache;
			this.cache = n;
			n = n.allocNext;
		}
		return result;
	}
	,eliminateHole: function(hole,root) {
		root = this.findHoleBridge(hole,root);
		if(root != null) {
			var b = this.splitPolygon(root,hole);
			this.filterPoints(b,b.next);
		}
	}
	,findHoleBridge: function(hole,root) {
		var p = root;
		var hx = hole.x;
		var hy = hole.y;
		var qx = -Infinity;
		var m = null;
		while(true) {
			if(hy <= p.y && hy >= p.next.y) {
				var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
				if(x <= hx && x > qx) {
					qx = x;
					if(p.x < p.next.x) {
						m = p;
					} else {
						m = p.next;
					}
				}
			}
			p = p.next;
			if(!(p != root)) {
				break;
			}
		}
		if(m == null) {
			return null;
		}
		var stop = m;
		var tanMin = Infinity;
		var tan;
		p = m.next;
		while(p != stop) {
			var tmp;
			if(hx >= p.x && p.x >= m.x) {
				var ax = hy < m.y ? hx : qx;
				var bx = m.x;
				var by = m.y;
				var cx = hy < m.y ? qx : hx;
				var px = p.x;
				var py = p.y;
				if((cx - px) * (hy - py) - (ax - px) * (hy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (hy - py) >= 0) {
					tmp = (bx - px) * (hy - py) - (cx - px) * (by - py) >= 0;
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var f = hy - p.y;
				tan = (f < 0 ? -f : f) / (hx - p.x);
				var tmp1;
				if(tan < tanMin || tan == tanMin && p.x > m.x) {
					var p1 = p.prev;
					var r = p.next;
					if((p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) < 0) {
						var r1 = p.next;
						if((hole.y - p.y) * (r1.x - hole.x) - (hole.x - p.x) * (r1.y - hole.y) >= 0) {
							var q = p.prev;
							tmp1 = (q.y - p.y) * (hole.x - q.x) - (q.x - p.x) * (hole.y - q.y) >= 0;
						} else {
							tmp1 = false;
						}
					} else {
						var r2 = p.prev;
						if(!((hole.y - p.y) * (r2.x - hole.x) - (hole.x - p.x) * (r2.y - hole.y) < 0)) {
							var q1 = p.next;
							tmp1 = (q1.y - p.y) * (hole.x - q1.x) - (q1.x - p.x) * (hole.y - q1.y) < 0;
						} else {
							tmp1 = true;
						}
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					m = p;
					tanMin = tan;
				}
			}
			p = p.next;
		}
		return m;
	}
	,getLeftmost: function(node) {
		var p = node;
		var leftmost = node;
		while(true) {
			if(p.x < leftmost.x) {
				leftmost = p;
			}
			p = p.next;
			if(!(p != node)) {
				break;
			}
		}
		return leftmost;
	}
	,compareX: function(a,b) {
		if(a.x - b.x > 0) {
			return 1;
		} else {
			return -1;
		}
	}
	,equals: function(p1,p2) {
		if(p1.x == p2.x) {
			return p1.y == p2.y;
		} else {
			return false;
		}
	}
	,area: function(p,q,r) {
		return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
	}
	,intersects: function(p1,q1,p2,q2) {
		if((q1.y - p1.y) * (p2.x - q1.x) - (q1.x - p1.x) * (p2.y - q1.y) > 0 != (q1.y - p1.y) * (q2.x - q1.x) - (q1.x - p1.x) * (q2.y - q1.y) > 0) {
			return (q2.y - p2.y) * (p1.x - q2.x) - (q2.x - p2.x) * (p1.y - q2.y) > 0 != (q2.y - p2.y) * (q1.x - q2.x) - (q2.x - p2.x) * (q1.y - q2.y) > 0;
		} else {
			return false;
		}
	}
	,locallyInside: function(a,b) {
		var p = a.prev;
		var r = a.next;
		if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
			var r1 = a.next;
			if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
				var q = a.prev;
				return (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
			} else {
				return false;
			}
		} else {
			var r2 = a.prev;
			if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
				var q1 = a.next;
				return (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
			} else {
				return true;
			}
		}
	}
	,filterPoints: function(start,end) {
		if(start == null) {
			return start;
		}
		if(end == null) {
			end = start;
		}
		var p = start;
		var again;
		while(true) {
			again = false;
			var tmp;
			if(!p.steiner) {
				var p2 = p.next;
				if(!(p.x == p2.x && p.y == p2.y)) {
					var p1 = p.prev;
					var r = p.next;
					tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) == 0;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				end = p.prev;
				p = end;
				if(p == p.next) {
					return null;
				}
				again = true;
			} else {
				p = p.next;
			}
			if(!(again || p != end)) {
				break;
			}
		}
		return end;
	}
	,removeNode: function(p) {
		p.next.prev = p.prev;
		p.prev.next = p.next;
		if(p.prevZ != null) {
			p.prevZ.nextZ = p.nextZ;
		}
		if(p.nextZ != null) {
			p.nextZ.prevZ = p.prevZ;
		}
	}
	,allocNode: function(i,x,y,last) {
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		return n;
	}
	,earcutLinked: function(ear,pass) {
		if(pass == null) {
			pass = 0;
		}
		if(ear == null) {
			return;
		}
		if(pass == 0 && this.hasSize) {
			this.indexCurve(ear);
		}
		var stop = ear;
		var prev;
		var next;
		while(ear.prev != ear.next) {
			prev = ear.prev;
			next = ear.next;
			if(this.hasSize ? this.isEarHashed(ear) : this.isEar(ear)) {
				this.triangles.push(prev.i);
				this.triangles.push(ear.i);
				this.triangles.push(next.i);
				ear.next.prev = ear.prev;
				ear.prev.next = ear.next;
				if(ear.prevZ != null) {
					ear.prevZ.nextZ = ear.nextZ;
				}
				if(ear.nextZ != null) {
					ear.nextZ.prevZ = ear.prevZ;
				}
				ear = next.next;
				stop = next.next;
				continue;
			}
			ear = next;
			if(ear == stop) {
				switch(pass) {
				case 0:
					this.earcutLinked(this.filterPoints(ear),1);
					break;
				case 1:
					ear = this.cureLocalIntersections(ear);
					this.earcutLinked(ear,2);
					break;
				case 2:
					this.splitEarcut(ear);
					break;
				}
				break;
			}
		}
	}
	,isEar: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var p = ear.next.next;
		while(p != ear.prev) {
			var tmp;
			var ax = a.x;
			var ay = a.y;
			var bx = b.x;
			var by = b.y;
			var cx = c.x;
			var cy = c.y;
			var px = p.x;
			var py = p.y;
			if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.next;
		}
		return true;
	}
	,isEarHashed: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x;
		var minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y;
		var maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x;
		var maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
		var x = 32767 * (minTX - this.minX) / this.size | 0;
		var y = 32767 * (minTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		var minZ = x | y << 1;
		var x1 = 32767 * (maxTX - this.minX) / this.size | 0;
		var y1 = 32767 * (maxTY - this.minY) / this.size | 0;
		x1 = (x1 | x1 << 8) & 16711935;
		x1 = (x1 | x1 << 4) & 252645135;
		x1 = (x1 | x1 << 2) & 858993459;
		x1 = (x1 | x1 << 1) & 1431655765;
		y1 = (y1 | y1 << 8) & 16711935;
		y1 = (y1 | y1 << 4) & 252645135;
		y1 = (y1 | y1 << 2) & 858993459;
		y1 = (y1 | y1 << 1) & 1431655765;
		var maxZ = x1 | y1 << 1;
		var p = ear.nextZ;
		while(p != null && p.z <= maxZ) {
			var tmp;
			var tmp1;
			if(p != ear.prev && p != ear.next) {
				var ax = a.x;
				var ay = a.y;
				var bx = b.x;
				var by = b.y;
				var cx = c.x;
				var cy = c.y;
				var px = p.x;
				var py = p.y;
				if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0) {
					tmp1 = (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
				} else {
					tmp1 = false;
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.nextZ;
		}
		p = ear.prevZ;
		while(p != null && p.z >= minZ) {
			var tmp2;
			var tmp3;
			if(p != ear.prev && p != ear.next) {
				var ax1 = a.x;
				var ay1 = a.y;
				var bx1 = b.x;
				var by1 = b.y;
				var cx1 = c.x;
				var cy1 = c.y;
				var px1 = p.x;
				var py1 = p.y;
				if((cx1 - px1) * (ay1 - py1) - (ax1 - px1) * (cy1 - py1) >= 0 && (ax1 - px1) * (by1 - py1) - (bx1 - px1) * (ay1 - py1) >= 0) {
					tmp3 = (bx1 - px1) * (cy1 - py1) - (cx1 - px1) * (by1 - py1) >= 0;
				} else {
					tmp3 = false;
				}
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				var p2 = p.prev;
				var r1 = p.next;
				tmp2 = (p.y - p2.y) * (r1.x - p.x) - (p.x - p2.x) * (r1.y - p.y) >= 0;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				return false;
			}
			p = p.prevZ;
		}
		return true;
	}
	,cureLocalIntersections: function(start) {
		var p = start;
		while(true) {
			var a = p.prev;
			var b = p.next.next;
			var tmp;
			var tmp1;
			var p2 = p.next;
			if((p.y - a.y) * (p2.x - p.x) - (p.x - a.x) * (p2.y - p.y) > 0 != (p.y - a.y) * (b.x - p.x) - (p.x - a.x) * (b.y - p.y) > 0 && (b.y - p2.y) * (a.x - b.x) - (b.x - p2.x) * (a.y - b.y) > 0 != (b.y - p2.y) * (p.x - b.x) - (b.x - p2.x) * (p.y - b.y) > 0) {
				var p1 = a.prev;
				var r = a.next;
				if((a.y - p1.y) * (r.x - a.x) - (a.x - p1.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p3 = b.prev;
				var r3 = b.next;
				if((b.y - p3.y) * (r3.x - b.x) - (b.x - p3.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				this.triangles.push(a.i);
				this.triangles.push(p.i);
				this.triangles.push(b.i);
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				var p4 = p.next;
				p4.next.prev = p4.prev;
				p4.prev.next = p4.next;
				if(p4.prevZ != null) {
					p4.prevZ.nextZ = p4.nextZ;
				}
				if(p4.nextZ != null) {
					p4.nextZ.prevZ = p4.prevZ;
				}
				start = b;
				p = start;
			}
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		return p;
	}
	,splitEarcut: function(start) {
		var a = start;
		while(true) {
			var b = a.next.next;
			while(b != a.prev) {
				if(a.i != b.i && this.isValidDiagonal(a,b)) {
					var c = this.splitPolygon(a,b);
					a = this.filterPoints(a,a.next);
					c = this.filterPoints(c,c.next);
					this.earcutLinked(a);
					this.earcutLinked(c);
					return;
				}
				b = b.next;
			}
			a = a.next;
			if(!(a != start)) {
				break;
			}
		}
	}
	,splitPolygon: function(a,b) {
		var i = a.i;
		var x = a.x;
		var y = a.y;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = null;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		var a2 = n;
		var i1 = b.i;
		var x1 = b.x;
		var y1 = b.y;
		var n1 = this.cache;
		if(n1 == null) {
			n1 = new hxd_earcut_EarNode();
			n1.allocNext = this.allocated;
			this.allocated = n1;
		} else {
			this.cache = n1.next;
		}
		n1.i = i1;
		n1.z = -1;
		n1.x = x1;
		n1.y = y1;
		n1.next = null;
		n1.prev = null;
		n1.steiner = false;
		n1.prevZ = null;
		n1.nextZ = null;
		var b2 = n1;
		var an = a.next;
		var bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	}
	,pointInTriangle: function(ax,ay,bx,by,cx,cy,px,py) {
		if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0) {
			return (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
		} else {
			return false;
		}
	}
	,isValidDiagonal: function(a,b) {
		if(!(a.x == b.x && a.y == b.y)) {
			var tmp;
			var tmp1;
			if(a.next.i != b.i && a.prev.i != b.i && !this.intersectsPolygon(a,b)) {
				var p = a.prev;
				var r = a.next;
				if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = b.prev;
				var r3 = b.next;
				if((b.y - p1.y) * (r3.x - b.x) - (b.x - p1.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return this.middleInside(a,b);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,middleInside: function(a,b) {
		var p = a;
		var inside = false;
		var px = (a.x + b.x) / 2;
		var py = (a.y + b.y) / 2;
		while(true) {
			if(p.y > py != p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
				inside = !inside;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return inside;
	}
	,intersectsPolygon: function(a,b) {
		var p = a;
		while(true) {
			var tmp;
			if(p.i != a.i && p.next.i != a.i && p.i != b.i && p.next.i != b.i) {
				var q1 = p.next;
				if((q1.y - p.y) * (a.x - q1.x) - (q1.x - p.x) * (a.y - q1.y) > 0 != (q1.y - p.y) * (b.x - q1.x) - (q1.x - p.x) * (b.y - q1.y) > 0) {
					tmp = (b.y - a.y) * (p.x - b.x) - (b.x - a.x) * (p.y - b.y) > 0 != (b.y - a.y) * (q1.x - b.x) - (b.x - a.x) * (q1.y - b.y) > 0;
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return false;
	}
	,zOrder: function(px,py) {
		var x = 32767 * (px - this.minX) / this.size | 0;
		var y = 32767 * (py - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		return x | y << 1;
	}
	,indexCurve: function(start) {
		var p = start;
		while(true) {
			if(p.z < 0) {
				var x = 32767 * (p.x - this.minX) / this.size | 0;
				var y = 32767 * (p.y - this.minY) / this.size | 0;
				x = (x | x << 8) & 16711935;
				x = (x | x << 4) & 252645135;
				x = (x | x << 2) & 858993459;
				x = (x | x << 1) & 1431655765;
				y = (y | y << 8) & 16711935;
				y = (y | y << 4) & 252645135;
				y = (y | y << 2) & 858993459;
				y = (y | y << 1) & 1431655765;
				p.z = x | y << 1;
			}
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		p.prevZ.nextZ = null;
		p.prevZ = null;
		this.sortLinked(p);
	}
	,sortLinked: function(list) {
		var p;
		var q;
		var e;
		var tail;
		var numMerges;
		var pSize;
		var qSize;
		var inSize = 1;
		while(true) {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;
			while(p != null) {
				++numMerges;
				q = p;
				pSize = 0;
				var _g1 = 0;
				var _g = inSize;
				while(_g1 < _g) {
					var i = _g1++;
					++pSize;
					q = q.nextZ;
					if(q == null) {
						break;
					}
				}
				qSize = inSize;
				while(pSize > 0 || qSize > 0 && q != null) {
					if(pSize == 0) {
						e = q;
						q = q.nextZ;
						--qSize;
					} else if(qSize == 0 || q == null) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else if(p.z <= q.z) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else {
						e = q;
						q = q.nextZ;
						--qSize;
					}
					if(tail != null) {
						tail.nextZ = e;
					} else {
						list = e;
					}
					e.prevZ = tail;
					tail = e;
				}
				p = q;
			}
			tail.nextZ = null;
			inSize *= 2;
			if(!(numMerges > 1)) {
				break;
			}
		}
		return list;
	}
	,__class__: hxd_earcut_Earcut
};
var hxd_fmt_grd_Gradient = function() {
	this.colorStops = [];
	this.transparencyStops = [];
	this.gradientStops = [];
};
$hxClasses["hxd.fmt.grd.Gradient"] = hxd_fmt_grd_Gradient;
hxd_fmt_grd_Gradient.__name__ = ["hxd","fmt","grd","Gradient"];
hxd_fmt_grd_Gradient.prototype = {
	__class__: hxd_fmt_grd_Gradient
};
var hxd_fmt_grd_ColorStop = function() {
};
$hxClasses["hxd.fmt.grd.ColorStop"] = hxd_fmt_grd_ColorStop;
hxd_fmt_grd_ColorStop.__name__ = ["hxd","fmt","grd","ColorStop"];
hxd_fmt_grd_ColorStop.prototype = {
	__class__: hxd_fmt_grd_ColorStop
};
var hxd_fmt_grd_ColorStopType = $hxClasses["hxd.fmt.grd.ColorStopType"] = { __ename__ : true, __constructs__ : ["User","Background","Foreground"] };
hxd_fmt_grd_ColorStopType.User = ["User",0];
hxd_fmt_grd_ColorStopType.User.toString = $estr;
hxd_fmt_grd_ColorStopType.User.__enum__ = hxd_fmt_grd_ColorStopType;
hxd_fmt_grd_ColorStopType.Background = ["Background",1];
hxd_fmt_grd_ColorStopType.Background.toString = $estr;
hxd_fmt_grd_ColorStopType.Background.__enum__ = hxd_fmt_grd_ColorStopType;
hxd_fmt_grd_ColorStopType.Foreground = ["Foreground",2];
hxd_fmt_grd_ColorStopType.Foreground.toString = $estr;
hxd_fmt_grd_ColorStopType.Foreground.__enum__ = hxd_fmt_grd_ColorStopType;
hxd_fmt_grd_ColorStopType.__empty_constructs__ = [hxd_fmt_grd_ColorStopType.User,hxd_fmt_grd_ColorStopType.Background,hxd_fmt_grd_ColorStopType.Foreground];
var hxd_fmt_grd_TransparencyStop = function() {
};
$hxClasses["hxd.fmt.grd.TransparencyStop"] = hxd_fmt_grd_TransparencyStop;
hxd_fmt_grd_TransparencyStop.__name__ = ["hxd","fmt","grd","TransparencyStop"];
hxd_fmt_grd_TransparencyStop.prototype = {
	__class__: hxd_fmt_grd_TransparencyStop
};
var hxd_fmt_grd_Color = $hxClasses["hxd.fmt.grd.Color"] = { __ename__ : true, __constructs__ : ["RGB","HSB"] };
hxd_fmt_grd_Color.RGB = function(r,g,b) { var $x = ["RGB",0,r,g,b]; $x.__enum__ = hxd_fmt_grd_Color; $x.toString = $estr; return $x; };
hxd_fmt_grd_Color.HSB = function(h,s,b) { var $x = ["HSB",1,h,s,b]; $x.__enum__ = hxd_fmt_grd_Color; $x.toString = $estr; return $x; };
hxd_fmt_grd_Color.__empty_constructs__ = [];
var hxd_fmt_grd_GradientStop = function() {
};
$hxClasses["hxd.fmt.grd.GradientStop"] = hxd_fmt_grd_GradientStop;
hxd_fmt_grd_GradientStop.__name__ = ["hxd","fmt","grd","GradientStop"];
hxd_fmt_grd_GradientStop.prototype = {
	__class__: hxd_fmt_grd_GradientStop
};
var hxd_fmt_grd_Data = function() {
	haxe_ds_StringMap.call(this);
};
$hxClasses["hxd.fmt.grd.Data"] = hxd_fmt_grd_Data;
hxd_fmt_grd_Data.__name__ = ["hxd","fmt","grd","Data"];
hxd_fmt_grd_Data.__super__ = haxe_ds_StringMap;
hxd_fmt_grd_Data.prototype = $extend(haxe_ds_StringMap.prototype,{
	__class__: hxd_fmt_grd_Data
});
var hxd_fmt_grd_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
};
$hxClasses["hxd.fmt.grd.Reader"] = hxd_fmt_grd_Reader;
hxd_fmt_grd_Reader.__name__ = ["hxd","fmt","grd","Reader"];
hxd_fmt_grd_Reader.prototype = {
	readUnicode: function(input,len) {
		var res = "";
		var _g1 = 0;
		var _g = len - 1;
		while(_g1 < _g) {
			var i = _g1++;
			res += String.fromCharCode(input.readInt16());
		}
		input.readInt16();
		return res;
	}
	,parseValue: function(i) {
		var type = i.readString(4);
		var value;
		switch(type) {
		case "Objc":
			value = this.parseObj(i);
			break;
		case "TEXT":
			value = this.readUnicode(i,i.readInt32());
			break;
		case "UntF":
			i.readString(4);
			value = i.readDouble();
			break;
		case "VlLs":
			value = this.parseList(i);
			break;
		case "bool":
			value = i.readByte();
			break;
		case "doub":
			value = i.readDouble();
			break;
		case "enum":
			value = this.parseEnum(i);
			break;
		case "long":
			value = i.readInt32();
			break;
		case "tdtd":
			var len = i.readInt32();
			value = { length : len, value : i.read(len)};
			break;
		default:
			throw new js__$Boot_HaxeError("Unhandled type \"" + type + "\"");
		}
		return value;
	}
	,parseObj: function(i) {
		var len = i.readInt32();
		if(len == 0) {
			len = 4;
		}
		var name = this.readUnicode(i,len);
		len = i.readInt32();
		if(len == 0) {
			len = 4;
		}
		var type = i.readString(len);
		var obj = { name : name, type : type};
		var numProperties = i.readInt32();
		var _g1 = 0;
		var _g = numProperties;
		while(_g1 < _g) {
			var pi = _g1++;
			len = i.readInt32();
			if(len == 0) {
				len = 4;
			}
			var key = i.readString(len);
			var si = key.indexOf(" ");
			if(si > 0) {
				key = key.substring(0,si);
			}
			obj[key] = this.parseValue(i);
		}
		return obj;
	}
	,parseList: function(i) {
		var res = [];
		var len = i.readInt32();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var li = _g1++;
			res.push(this.parseValue(i));
		}
		return res;
	}
	,parseEnum: function(i) {
		var len = i.readInt32();
		if(len == 0) {
			len = 4;
		}
		var type = i.readString(len);
		len = i.readInt32();
		if(len == 0) {
			len = 4;
		}
		var value = i.readString(len);
		return { type : type, value : value};
	}
	,read: function() {
		var d = new hxd_fmt_grd_Data();
		this.i.read(32);
		this.i.readString(4);
		var list = js_Boot.__cast(this.parseValue(this.i) , Array);
		var _g = 0;
		while(_g < list.length) {
			var obj = list[_g];
			++_g;
			var obj1 = obj.Grad;
			var grd = new hxd_fmt_grd_Gradient();
			var nm = obj1.Nm;
			grd.name = nm.substring(nm.indexOf("=") + 1);
			grd.interpolation = obj1.Intr;
			this.createColorStops(obj1.Clrs,grd.colorStops);
			this.createTransparencyStops(obj1.Trns,grd.transparencyStops);
			this.createGradientStops(grd.colorStops,grd.transparencyStops,grd.gradientStops);
			var key = grd.name;
			if(__map_reserved[key] != null) {
				d.setReserved(key,grd);
			} else {
				d.h[key] = grd;
			}
		}
		return d;
	}
	,createColorStops: function(list,out) {
		var _g = 0;
		while(_g < list.length) {
			var e = list[_g];
			++_g;
			var color = hxd_fmt_grd_Color.RGB(0,0,0);
			var type;
			var _g1 = e.Type.value;
			switch(_g1) {
			case "BckC":
				type = hxd_fmt_grd_ColorStopType.Background;
				break;
			case "FrgC":
				type = hxd_fmt_grd_ColorStopType.Foreground;
				break;
			case "UsrS":
				type = hxd_fmt_grd_ColorStopType.User;
				break;
			default:
				throw new js__$Boot_HaxeError("unhalndled color stop type : " + Std.string(e.Type.value));
			}
			if(type == hxd_fmt_grd_ColorStopType.User) {
				var _g2 = e.Clr.type;
				switch(_g2) {
				case "HSBC":
					color = hxd_fmt_grd_Color.HSB(e.Clr.H,e.Clr.Strt,e.Clr.Brgh);
					break;
				case "RGBC":
					color = hxd_fmt_grd_Color.RGB(e.Clr.Rd,e.Clr.Grn,e.Clr.Bl);
					break;
				default:
				}
			}
			var stop = new hxd_fmt_grd_ColorStop();
			stop.color = color;
			stop.location = e.Lctn;
			stop.midpoint = e.Mdpn;
			stop.type = type;
			out.push(stop);
		}
	}
	,createTransparencyStops: function(list,out) {
		var _g = 0;
		while(_g < list.length) {
			var e = list[_g];
			++_g;
			var stop = new hxd_fmt_grd_TransparencyStop();
			stop.opacity = e.Opct;
			stop.location = e.Lctn;
			stop.midpoint = e.Mdpn;
			out.push(stop);
		}
	}
	,createGradientStops: function(clrs,trns,out) {
		var _g = 0;
		while(_g < clrs.length) {
			var clr = clrs[_g];
			++_g;
			var stop = new hxd_fmt_grd_GradientStop();
			stop.opacity = this.getOpacity(clr,trns);
			stop.colorStop = clr;
			out.push(stop);
		}
	}
	,getOpacity: function(clr,trns) {
		var index = -1;
		var _g1 = 0;
		var _g = trns.length;
		while(_g1 < _g) {
			var i = _g1++;
			var t = trns[i];
			if(t.location >= clr.location) {
				index = i;
				break;
			}
		}
		if(index == 0) {
			return trns[0].opacity;
		}
		if(index < 0) {
			return trns[trns.length - 1].opacity;
		}
		var prev = trns[index - 1];
		var next = trns[index];
		var w = next.location - prev.location;
		var h = next.opacity - prev.opacity;
		if(w == 0) {
			return prev.opacity;
		}
		var m = h / w;
		var b = prev.opacity - m * prev.location;
		return m * clr.location + b;
	}
	,__class__: hxd_fmt_grd_Reader
};
var hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$ = {};
$hxClasses["hxd.fmt.hmd._Data.GeometryDataFormat_Impl_"] = hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$;
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.__name__ = ["hxd","fmt","hmd","_Data","GeometryDataFormat_Impl_"];
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$._new = function(v) {
	var this1 = v;
	return this1;
};
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.getSize = function(this1) {
	return this1 & 7;
};
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.toInt = function(this1) {
	return this1;
};
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.toString = function(this1) {
	var this2 = this1;
	var _g = this2;
	switch(_g) {
	case 1:
		return "DFloat";
	case 2:
		return "DVec2";
	case 3:
		return "DVec3";
	case 4:
		return "DVec4";
	case 9:
		return "DBytes4";
	}
};
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.fromInt = function(v) {
	var this1 = v;
	return this1;
};
var hxd_fmt_hmd_Property = $hxClasses["hxd.fmt.hmd.Property"] = { __ename__ : true, __constructs__ : ["CameraFOVY","HasMaterialFlags"] };
hxd_fmt_hmd_Property.CameraFOVY = function(v) { var $x = ["CameraFOVY",0,v]; $x.__enum__ = hxd_fmt_hmd_Property; $x.toString = $estr; return $x; };
hxd_fmt_hmd_Property.HasMaterialFlags = ["HasMaterialFlags",1];
hxd_fmt_hmd_Property.HasMaterialFlags.toString = $estr;
hxd_fmt_hmd_Property.HasMaterialFlags.__enum__ = hxd_fmt_hmd_Property;
hxd_fmt_hmd_Property.__empty_constructs__ = [hxd_fmt_hmd_Property.HasMaterialFlags];
var hxd_fmt_hmd_Position = function() {
};
$hxClasses["hxd.fmt.hmd.Position"] = hxd_fmt_hmd_Position;
hxd_fmt_hmd_Position.__name__ = ["hxd","fmt","hmd","Position"];
hxd_fmt_hmd_Position.prototype = {
	loadQuaternion: function(q) {
		q.x = this.qx;
		q.y = this.qy;
		q.z = this.qz;
		q.w = this.get_qw();
	}
	,get_qw: function() {
		var qw = 1 - (this.qx * this.qx + this.qy * this.qy + this.qz * this.qz);
		if(qw < 0) {
			return -Math.sqrt(-qw);
		} else {
			return Math.sqrt(qw);
		}
	}
	,toMatrix: function(postScale) {
		if(postScale == null) {
			postScale = false;
		}
		var m = new h3d_Matrix();
		var q = hxd_fmt_hmd_Position.QTMP;
		q.x = this.qx;
		q.y = this.qy;
		q.z = this.qz;
		q.w = this.get_qw();
		q.saveToMatrix(m);
		if(postScale) {
			m.translate(this.x,this.y,this.z);
			m.scale(this.sx,this.sy,this.sz);
		} else {
			m._11 *= this.sx;
			m._12 *= this.sx;
			m._13 *= this.sx;
			m._21 *= this.sy;
			m._22 *= this.sy;
			m._23 *= this.sy;
			m._31 *= this.sz;
			m._32 *= this.sz;
			m._33 *= this.sz;
			m.translate(this.x,this.y,this.z);
		}
		return m;
	}
	,__class__: hxd_fmt_hmd_Position
};
var hxd_fmt_hmd_GeometryFormat = function(name,format) {
	this.name = name;
	this.format = format;
};
$hxClasses["hxd.fmt.hmd.GeometryFormat"] = hxd_fmt_hmd_GeometryFormat;
hxd_fmt_hmd_GeometryFormat.__name__ = ["hxd","fmt","hmd","GeometryFormat"];
hxd_fmt_hmd_GeometryFormat.prototype = {
	__class__: hxd_fmt_hmd_GeometryFormat
};
var hxd_fmt_hmd_Geometry = function() {
};
$hxClasses["hxd.fmt.hmd.Geometry"] = hxd_fmt_hmd_Geometry;
hxd_fmt_hmd_Geometry.__name__ = ["hxd","fmt","hmd","Geometry"];
hxd_fmt_hmd_Geometry.prototype = {
	get_indexCount: function() {
		var k = 0;
		var _g = 0;
		var _g1 = this.indexCounts;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			k += i;
		}
		return k;
	}
	,__class__: hxd_fmt_hmd_Geometry
};
var hxd_fmt_hmd_MaterialFlag = $hxClasses["hxd.fmt.hmd.MaterialFlag"] = { __ename__ : true, __constructs__ : ["HasLighting","CastShadows","ReceiveShadows","TextureWrap","IsVolumeDecal"] };
hxd_fmt_hmd_MaterialFlag.HasLighting = ["HasLighting",0];
hxd_fmt_hmd_MaterialFlag.HasLighting.toString = $estr;
hxd_fmt_hmd_MaterialFlag.HasLighting.__enum__ = hxd_fmt_hmd_MaterialFlag;
hxd_fmt_hmd_MaterialFlag.CastShadows = ["CastShadows",1];
hxd_fmt_hmd_MaterialFlag.CastShadows.toString = $estr;
hxd_fmt_hmd_MaterialFlag.CastShadows.__enum__ = hxd_fmt_hmd_MaterialFlag;
hxd_fmt_hmd_MaterialFlag.ReceiveShadows = ["ReceiveShadows",2];
hxd_fmt_hmd_MaterialFlag.ReceiveShadows.toString = $estr;
hxd_fmt_hmd_MaterialFlag.ReceiveShadows.__enum__ = hxd_fmt_hmd_MaterialFlag;
hxd_fmt_hmd_MaterialFlag.TextureWrap = ["TextureWrap",3];
hxd_fmt_hmd_MaterialFlag.TextureWrap.toString = $estr;
hxd_fmt_hmd_MaterialFlag.TextureWrap.__enum__ = hxd_fmt_hmd_MaterialFlag;
hxd_fmt_hmd_MaterialFlag.IsVolumeDecal = ["IsVolumeDecal",4];
hxd_fmt_hmd_MaterialFlag.IsVolumeDecal.toString = $estr;
hxd_fmt_hmd_MaterialFlag.IsVolumeDecal.__enum__ = hxd_fmt_hmd_MaterialFlag;
hxd_fmt_hmd_MaterialFlag.__empty_constructs__ = [hxd_fmt_hmd_MaterialFlag.HasLighting,hxd_fmt_hmd_MaterialFlag.CastShadows,hxd_fmt_hmd_MaterialFlag.ReceiveShadows,hxd_fmt_hmd_MaterialFlag.TextureWrap,hxd_fmt_hmd_MaterialFlag.IsVolumeDecal];
var hxd_fmt_hmd_Material = function() {
};
$hxClasses["hxd.fmt.hmd.Material"] = hxd_fmt_hmd_Material;
hxd_fmt_hmd_Material.__name__ = ["hxd","fmt","hmd","Material"];
hxd_fmt_hmd_Material.prototype = {
	__class__: hxd_fmt_hmd_Material
};
var hxd_fmt_hmd_SkinJoint = function() {
};
$hxClasses["hxd.fmt.hmd.SkinJoint"] = hxd_fmt_hmd_SkinJoint;
hxd_fmt_hmd_SkinJoint.__name__ = ["hxd","fmt","hmd","SkinJoint"];
hxd_fmt_hmd_SkinJoint.prototype = {
	__class__: hxd_fmt_hmd_SkinJoint
};
var hxd_fmt_hmd_SkinSplit = function() {
};
$hxClasses["hxd.fmt.hmd.SkinSplit"] = hxd_fmt_hmd_SkinSplit;
hxd_fmt_hmd_SkinSplit.__name__ = ["hxd","fmt","hmd","SkinSplit"];
hxd_fmt_hmd_SkinSplit.prototype = {
	__class__: hxd_fmt_hmd_SkinSplit
};
var hxd_fmt_hmd_Skin = function() {
};
$hxClasses["hxd.fmt.hmd.Skin"] = hxd_fmt_hmd_Skin;
hxd_fmt_hmd_Skin.__name__ = ["hxd","fmt","hmd","Skin"];
hxd_fmt_hmd_Skin.prototype = {
	__class__: hxd_fmt_hmd_Skin
};
var hxd_fmt_hmd_Model = function() {
};
$hxClasses["hxd.fmt.hmd.Model"] = hxd_fmt_hmd_Model;
hxd_fmt_hmd_Model.__name__ = ["hxd","fmt","hmd","Model"];
hxd_fmt_hmd_Model.prototype = {
	__class__: hxd_fmt_hmd_Model
};
var hxd_fmt_hmd_AnimationFlag = $hxClasses["hxd.fmt.hmd.AnimationFlag"] = { __ename__ : true, __constructs__ : ["HasPosition","HasRotation","HasScale","HasUV","HasAlpha","SinglePosition","HasProps","Reserved"] };
hxd_fmt_hmd_AnimationFlag.HasPosition = ["HasPosition",0];
hxd_fmt_hmd_AnimationFlag.HasPosition.toString = $estr;
hxd_fmt_hmd_AnimationFlag.HasPosition.__enum__ = hxd_fmt_hmd_AnimationFlag;
hxd_fmt_hmd_AnimationFlag.HasRotation = ["HasRotation",1];
hxd_fmt_hmd_AnimationFlag.HasRotation.toString = $estr;
hxd_fmt_hmd_AnimationFlag.HasRotation.__enum__ = hxd_fmt_hmd_AnimationFlag;
hxd_fmt_hmd_AnimationFlag.HasScale = ["HasScale",2];
hxd_fmt_hmd_AnimationFlag.HasScale.toString = $estr;
hxd_fmt_hmd_AnimationFlag.HasScale.__enum__ = hxd_fmt_hmd_AnimationFlag;
hxd_fmt_hmd_AnimationFlag.HasUV = ["HasUV",3];
hxd_fmt_hmd_AnimationFlag.HasUV.toString = $estr;
hxd_fmt_hmd_AnimationFlag.HasUV.__enum__ = hxd_fmt_hmd_AnimationFlag;
hxd_fmt_hmd_AnimationFlag.HasAlpha = ["HasAlpha",4];
hxd_fmt_hmd_AnimationFlag.HasAlpha.toString = $estr;
hxd_fmt_hmd_AnimationFlag.HasAlpha.__enum__ = hxd_fmt_hmd_AnimationFlag;
hxd_fmt_hmd_AnimationFlag.SinglePosition = ["SinglePosition",5];
hxd_fmt_hmd_AnimationFlag.SinglePosition.toString = $estr;
hxd_fmt_hmd_AnimationFlag.SinglePosition.__enum__ = hxd_fmt_hmd_AnimationFlag;
hxd_fmt_hmd_AnimationFlag.HasProps = ["HasProps",6];
hxd_fmt_hmd_AnimationFlag.HasProps.toString = $estr;
hxd_fmt_hmd_AnimationFlag.HasProps.__enum__ = hxd_fmt_hmd_AnimationFlag;
hxd_fmt_hmd_AnimationFlag.Reserved = ["Reserved",7];
hxd_fmt_hmd_AnimationFlag.Reserved.toString = $estr;
hxd_fmt_hmd_AnimationFlag.Reserved.__enum__ = hxd_fmt_hmd_AnimationFlag;
hxd_fmt_hmd_AnimationFlag.__empty_constructs__ = [hxd_fmt_hmd_AnimationFlag.HasPosition,hxd_fmt_hmd_AnimationFlag.HasRotation,hxd_fmt_hmd_AnimationFlag.HasScale,hxd_fmt_hmd_AnimationFlag.HasUV,hxd_fmt_hmd_AnimationFlag.HasAlpha,hxd_fmt_hmd_AnimationFlag.SinglePosition,hxd_fmt_hmd_AnimationFlag.HasProps,hxd_fmt_hmd_AnimationFlag.Reserved];
var hxd_fmt_hmd_AnimationObject = function() {
};
$hxClasses["hxd.fmt.hmd.AnimationObject"] = hxd_fmt_hmd_AnimationObject;
hxd_fmt_hmd_AnimationObject.__name__ = ["hxd","fmt","hmd","AnimationObject"];
hxd_fmt_hmd_AnimationObject.prototype = {
	__class__: hxd_fmt_hmd_AnimationObject
};
var hxd_fmt_hmd_AnimationEvent = function() {
};
$hxClasses["hxd.fmt.hmd.AnimationEvent"] = hxd_fmt_hmd_AnimationEvent;
hxd_fmt_hmd_AnimationEvent.__name__ = ["hxd","fmt","hmd","AnimationEvent"];
hxd_fmt_hmd_AnimationEvent.prototype = {
	__class__: hxd_fmt_hmd_AnimationEvent
};
var hxd_fmt_hmd_Animation = function() {
};
$hxClasses["hxd.fmt.hmd.Animation"] = hxd_fmt_hmd_Animation;
hxd_fmt_hmd_Animation.__name__ = ["hxd","fmt","hmd","Animation"];
hxd_fmt_hmd_Animation.prototype = {
	__class__: hxd_fmt_hmd_Animation
};
var hxd_fmt_hmd_Data = function() {
};
$hxClasses["hxd.fmt.hmd.Data"] = hxd_fmt_hmd_Data;
hxd_fmt_hmd_Data.__name__ = ["hxd","fmt","hmd","Data"];
hxd_fmt_hmd_Data.prototype = {
	__class__: hxd_fmt_hmd_Data
};
var hxd_fmt_hmd__$Library_FormatMap = function(size,offset,def,next) {
	this.size = size;
	this.offset = offset;
	this.def = def;
	this.next = next;
};
$hxClasses["hxd.fmt.hmd._Library.FormatMap"] = hxd_fmt_hmd__$Library_FormatMap;
hxd_fmt_hmd__$Library_FormatMap.__name__ = ["hxd","fmt","hmd","_Library","FormatMap"];
hxd_fmt_hmd__$Library_FormatMap.prototype = {
	__class__: hxd_fmt_hmd__$Library_FormatMap
};
var hxd_fmt_hmd_GeometryBuffer = function() {
};
$hxClasses["hxd.fmt.hmd.GeometryBuffer"] = hxd_fmt_hmd_GeometryBuffer;
hxd_fmt_hmd_GeometryBuffer.__name__ = ["hxd","fmt","hmd","GeometryBuffer"];
hxd_fmt_hmd_GeometryBuffer.prototype = {
	__class__: hxd_fmt_hmd_GeometryBuffer
};
var hxd_fmt_hmd_Library = function(entry,header) {
	this.tmp = new haxe_io_Bytes(new ArrayBuffer(4));
	this.entry = entry;
	this.header = header;
	this.cachedPrimitives = [];
	this.cachedAnimations = new haxe_ds_StringMap();
	this.cachedSkin = new haxe_ds_StringMap();
};
$hxClasses["hxd.fmt.hmd.Library"] = hxd_fmt_hmd_Library;
hxd_fmt_hmd_Library.__name__ = ["hxd","fmt","hmd","Library"];
hxd_fmt_hmd_Library.prototype = {
	getData: function() {
		var b = new haxe_io_Bytes(new ArrayBuffer(this.entry.get_size() - this.header.dataPosition));
		this.entry.open();
		this.entry.skip(this.header.dataPosition);
		this.entry.read(b,0,b.length);
		this.entry.close();
		return b;
	}
	,getDefaultFormat: function(stride) {
		var format = [new hxd_fmt_hmd_GeometryFormat("position",3)];
		var defs = [null];
		if(stride > 3) {
			format.push(new hxd_fmt_hmd_GeometryFormat("normal",3));
			defs.push(null);
		}
		if(stride > 6) {
			format.push(new hxd_fmt_hmd_GeometryFormat("uv",2));
			defs.push(null);
		}
		if(stride > 8) {
			format.push(new hxd_fmt_hmd_GeometryFormat("color",3));
			defs.push(new h3d_Vector(1,1,1));
		}
		if(stride > 11) {
			throw new js__$Boot_HaxeError("Unsupported stride");
		}
		return { format : format, defs : defs};
	}
	,load: function(format,defaults,modelIndex) {
		if(modelIndex == null) {
			modelIndex = -1;
		}
		var vtmp_z;
		var vtmp_y;
		var vtmp_x;
		var vtmp_w;
		vtmp_x = 0.;
		vtmp_y = 0.;
		vtmp_z = 0.;
		vtmp_w = 1.;
		var models = modelIndex < 0 ? this.header.models : [this.header.models[modelIndex]];
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		var outVertex = this1;
		var this2 = new Array(0);
		var outIndex = this2;
		var stride = 0;
		var mid = -1;
		var _g = 0;
		while(_g < format.length) {
			var f = format[_g];
			++_g;
			stride += f.format & 7;
		}
		var _g1 = 0;
		while(_g1 < models.length) {
			var m = models[_g1];
			++_g1;
			var geom = this.header.geometries[m.geometry];
			if(geom == null) {
				continue;
			}
			var _g11 = 0;
			var _g2 = m.materials;
			while(_g11 < _g2.length) {
				var mat = _g2[_g11];
				++_g11;
				if(mid < 0) {
					mid = mat;
				}
				if(mid != mat) {
					throw new js__$Boot_HaxeError("Models have several materials");
				}
			}
			var pos = m.position.toMatrix();
			var data = this.getBuffers(geom,format,defaults);
			var start = outVertex.pos / stride | 0;
			var _g21 = 0;
			var _g12 = data.vertexes.length / stride | 0;
			while(_g21 < _g12) {
				var i = _g21++;
				var p = i * stride;
				vtmp_x = data.vertexes[p++];
				vtmp_y = data.vertexes[p++];
				vtmp_z = data.vertexes[p++];
				var px = vtmp_x * pos._11 + vtmp_y * pos._21 + vtmp_z * pos._31 + vtmp_w * pos._41;
				var py = vtmp_x * pos._12 + vtmp_y * pos._22 + vtmp_z * pos._32 + vtmp_w * pos._42;
				var pz = vtmp_x * pos._13 + vtmp_y * pos._23 + vtmp_z * pos._33 + vtmp_w * pos._43;
				vtmp_x = px;
				vtmp_y = py;
				vtmp_z = pz;
				if(outVertex.pos == outVertex.array.length) {
					var newSize = outVertex.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(outVertex.array);
					outVertex.array = newArray;
				}
				outVertex.array[outVertex.pos++] = vtmp_x;
				if(outVertex.pos == outVertex.array.length) {
					var newSize1 = outVertex.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(outVertex.array);
					outVertex.array = newArray1;
				}
				outVertex.array[outVertex.pos++] = vtmp_y;
				if(outVertex.pos == outVertex.array.length) {
					var newSize2 = outVertex.array.length << 1;
					if(newSize2 < 128) {
						newSize2 = 128;
					}
					var newArray2 = new Float32Array(newSize2);
					newArray2.set(outVertex.array);
					outVertex.array = newArray2;
				}
				outVertex.array[outVertex.pos++] = vtmp_z;
				var _g4 = 0;
				var _g3 = stride - 3;
				while(_g4 < _g3) {
					var j = _g4++;
					var v = data.vertexes[p++];
					if(outVertex.pos == outVertex.array.length) {
						var newSize3 = outVertex.array.length << 1;
						if(newSize3 < 128) {
							newSize3 = 128;
						}
						var newArray3 = new Float32Array(newSize3);
						newArray3.set(outVertex.array);
						outVertex.array = newArray3;
					}
					outVertex.array[outVertex.pos++] = v;
				}
			}
			var _g13 = 0;
			var _g22 = data.indexes;
			while(_g13 < _g22.length) {
				var idx = _g22[_g13];
				++_g13;
				outIndex.push(idx + start);
			}
		}
		return { vertex : outVertex, index : outIndex};
	}
	,getBuffers: function(geom,format,defaults,material) {
		if(material == 0 && geom.indexCounts.length == 1) {
			material = null;
		}
		var map = null;
		var stride = 0;
		var _g1 = 0;
		var _g = format.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = format.length - 1 - i;
			var f = format[i1];
			var size = f.format & 7;
			var offset = 0;
			var found = false;
			var _g2 = 0;
			var _g3 = geom.vertexFormat;
			while(_g2 < _g3.length) {
				var f2 = _g3[_g2];
				++_g2;
				if(f2.name == f.name) {
					if((f2.format & 7) < size) {
						throw new js__$Boot_HaxeError("Requested " + f.name + " data has only " + (f2.format & 7) + " regs instead of " + size);
					}
					found = true;
					break;
				}
				offset += f2.format & 7;
			}
			if(found) {
				map = new hxd_fmt_hmd__$Library_FormatMap(size,offset,null,map);
			} else {
				var def = defaults == null ? null : defaults[i1];
				if(def == null) {
					throw new js__$Boot_HaxeError("Missing required " + f.name);
				}
				map = new hxd_fmt_hmd__$Library_FormatMap(size,0,def,map);
			}
			stride += size;
		}
		var vsize = geom.vertexCount * geom.vertexStride * 4;
		var vbuf = hxd_impl_Tmp.getBytes(vsize);
		this.entry.open();
		this.entry.skip(this.header.dataPosition + geom.vertexPosition);
		this.entry.read(vbuf,0,vsize);
		this.entry.skip(geom.indexPosition - (geom.vertexPosition + vsize));
		var isize;
		if(material == null) {
			isize = geom.get_indexCount() * 2;
		} else {
			var ipos = 0;
			var _g11 = 0;
			var _g4 = material;
			while(_g11 < _g4) {
				var i2 = _g11++;
				ipos += geom.indexCounts[i2];
			}
			this.entry.skip(ipos * 2);
			isize = geom.indexCounts[material] * 2;
		}
		var ibuf = hxd_impl_Tmp.getBytes(isize);
		this.entry.read(ibuf,0,isize);
		var buf = new hxd_fmt_hmd_GeometryBuffer();
		if(material == null) {
			var length = stride * geom.vertexCount;
			var this1 = new Array(length);
			buf.vertexes = this1;
			var length1 = geom.get_indexCount();
			var this2 = new Array(length1);
			buf.indexes = this2;
			var w = 0;
			var _g12 = 0;
			var _g5 = geom.vertexCount;
			while(_g12 < _g5) {
				var vid = _g12++;
				var m = map;
				while(m != null) {
					if(m.def == null) {
						var r = vid * geom.vertexStride;
						var _g31 = 0;
						var _g21 = m.size;
						while(_g31 < _g21) {
							var i3 = _g31++;
							buf.vertexes[w++] = vbuf.getFloat(r + m.offset + i3 << 2);
						}
					} else {
						var _g22 = m.size;
						switch(_g22) {
						case 1:
							buf.vertexes[w++] = m.def.x;
							break;
						case 2:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							break;
						case 3:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							buf.vertexes[w++] = m.def.z;
							break;
						default:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							buf.vertexes[w++] = m.def.z;
							buf.vertexes[w++] = m.def.w;
						}
					}
					m = m.next;
				}
			}
			var r1 = 0;
			var _g13 = 0;
			var _g6 = buf.indexes.length;
			while(_g13 < _g6) {
				var i4 = _g13++;
				buf.indexes[i4] = ibuf.b[r1++] | ibuf.b[r1++] << 8;
			}
		} else {
			var icount = geom.indexCounts[material];
			var length2 = geom.vertexCount;
			var this3 = new Array(length2);
			var vmap = this3;
			var this4 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
			var vertexes = this4;
			var this5 = new Array(icount);
			buf.indexes = this5;
			var r2 = 0;
			var vcount = 0;
			var _g14 = 0;
			var _g7 = buf.indexes.length;
			while(_g14 < _g7) {
				var i5 = _g14++;
				var vid1 = ibuf.b[r2++] | ibuf.b[r2++] << 8;
				var rid = vmap[vid1];
				if(rid == 0) {
					rid = ++vcount;
					vmap[vid1] = rid;
					var m1 = map;
					while(m1 != null) {
						if(m1.def == null) {
							var r3 = vid1 * geom.vertexStride;
							var _g32 = 0;
							var _g23 = m1.size;
							while(_g32 < _g23) {
								var i6 = _g32++;
								var v = vbuf.getFloat(r3 + m1.offset + i6 << 2);
								if(vertexes.pos == vertexes.array.length) {
									var newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									var newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v;
							}
						} else {
							var _g24 = m1.size;
							switch(_g24) {
							case 1:
								var v1 = m1.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize1 = vertexes.array.length << 1;
									if(newSize1 < 128) {
										newSize1 = 128;
									}
									var newArray1 = new Float32Array(newSize1);
									newArray1.set(vertexes.array);
									vertexes.array = newArray1;
								}
								vertexes.array[vertexes.pos++] = v1;
								break;
							case 2:
								var v2 = m1.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize2 = vertexes.array.length << 1;
									if(newSize2 < 128) {
										newSize2 = 128;
									}
									var newArray2 = new Float32Array(newSize2);
									newArray2.set(vertexes.array);
									vertexes.array = newArray2;
								}
								vertexes.array[vertexes.pos++] = v2;
								var v3 = m1.def.y;
								if(vertexes.pos == vertexes.array.length) {
									var newSize3 = vertexes.array.length << 1;
									if(newSize3 < 128) {
										newSize3 = 128;
									}
									var newArray3 = new Float32Array(newSize3);
									newArray3.set(vertexes.array);
									vertexes.array = newArray3;
								}
								vertexes.array[vertexes.pos++] = v3;
								break;
							case 3:
								var v4 = m1.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize4 = vertexes.array.length << 1;
									if(newSize4 < 128) {
										newSize4 = 128;
									}
									var newArray4 = new Float32Array(newSize4);
									newArray4.set(vertexes.array);
									vertexes.array = newArray4;
								}
								vertexes.array[vertexes.pos++] = v4;
								var v5 = m1.def.y;
								if(vertexes.pos == vertexes.array.length) {
									var newSize5 = vertexes.array.length << 1;
									if(newSize5 < 128) {
										newSize5 = 128;
									}
									var newArray5 = new Float32Array(newSize5);
									newArray5.set(vertexes.array);
									vertexes.array = newArray5;
								}
								vertexes.array[vertexes.pos++] = v5;
								var v6 = m1.def.z;
								if(vertexes.pos == vertexes.array.length) {
									var newSize6 = vertexes.array.length << 1;
									if(newSize6 < 128) {
										newSize6 = 128;
									}
									var newArray6 = new Float32Array(newSize6);
									newArray6.set(vertexes.array);
									vertexes.array = newArray6;
								}
								vertexes.array[vertexes.pos++] = v6;
								break;
							default:
								var v7 = m1.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize7 = vertexes.array.length << 1;
									if(newSize7 < 128) {
										newSize7 = 128;
									}
									var newArray7 = new Float32Array(newSize7);
									newArray7.set(vertexes.array);
									vertexes.array = newArray7;
								}
								vertexes.array[vertexes.pos++] = v7;
								var v8 = m1.def.y;
								if(vertexes.pos == vertexes.array.length) {
									var newSize8 = vertexes.array.length << 1;
									if(newSize8 < 128) {
										newSize8 = 128;
									}
									var newArray8 = new Float32Array(newSize8);
									newArray8.set(vertexes.array);
									vertexes.array = newArray8;
								}
								vertexes.array[vertexes.pos++] = v8;
								var v9 = m1.def.z;
								if(vertexes.pos == vertexes.array.length) {
									var newSize9 = vertexes.array.length << 1;
									if(newSize9 < 128) {
										newSize9 = 128;
									}
									var newArray9 = new Float32Array(newSize9);
									newArray9.set(vertexes.array);
									vertexes.array = newArray9;
								}
								vertexes.array[vertexes.pos++] = v9;
								var v10 = m1.def.w;
								if(vertexes.pos == vertexes.array.length) {
									var newSize10 = vertexes.array.length << 1;
									if(newSize10 < 128) {
										newSize10 = 128;
									}
									var newArray10 = new Float32Array(newSize10);
									newArray10.set(vertexes.array);
									vertexes.array = newArray10;
								}
								vertexes.array[vertexes.pos++] = v10;
							}
						}
						m1 = m1.next;
					}
				}
				buf.indexes[i5] = rid - 1;
			}
			var this6 = vertexes;
			var _g8 = [];
			var _g25 = 0;
			var _g15 = this6.pos;
			while(_g25 < _g15) {
				var i7 = _g25++;
				_g8.push(this6.array[i7]);
			}
			buf.vertexes = _g8;
		}
		this.entry.close();
		hxd_impl_Tmp.saveBytes(ibuf);
		hxd_impl_Tmp.saveBytes(vbuf);
		return buf;
	}
	,makePrimitive: function(id) {
		var p = this.cachedPrimitives[id];
		if(p != null) {
			return p;
		}
		p = new h3d_prim_HMDModel(this.header.geometries[id],this.header.dataPosition,this);
		this.cachedPrimitives[id] = p;
		return p;
	}
	,makeMaterial: function(model,mid,loadTexture) {
		var m = this.header.materials[mid];
		var mat = new h3d_mat_Material();
		mat.name = m.name;
		if(m.diffuseTexture != null) {
			mat.set_texture(loadTexture(m.diffuseTexture));
			if(mat.get_texture() == null) {
				mat.set_texture(h3d_mat_Texture.fromColor(16711935));
			}
		}
		mat.set_blendMode(m.blendMode);
		mat.passes.set_culling(m.culling);
		if(m.killAlpha != null) {
			var t = mat.passes.getShader(h3d_shader_Texture);
			t.constModified = true;
			t.killAlpha__ = true;
			t.killAlphaThreshold__ = m.killAlpha;
		}
		if(m.props != null && m.props.indexOf(hxd_fmt_hmd_Property.HasMaterialFlags) >= 0) {
			if((m.flags & 1 << hxd_fmt_hmd_MaterialFlag.HasLighting[1]) != 0) {
				mat.passes.enableLights = true;
			}
			if((m.flags & 1 << hxd_fmt_hmd_MaterialFlag.CastShadows[1]) != 0) {
				mat.set_castShadows(true);
			}
			if((m.flags & 1 << hxd_fmt_hmd_MaterialFlag.ReceiveShadows[1]) != 0) {
				mat.set_receiveShadows(true);
			}
			if((m.flags & 1 << hxd_fmt_hmd_MaterialFlag.IsVolumeDecal[1]) != 0) {
				var s = h3d_mat_Defaults.makeVolumeDecal(this.header.geometries[model.geometry].bounds);
				mat.passes.addShader(s);
			}
			if((m.flags & 1 << hxd_fmt_hmd_MaterialFlag.TextureWrap[1]) != 0) {
				mat.get_texture().set_wrap(h3d_mat_Wrap.Repeat);
			}
		}
		return mat;
	}
	,makeSkin: function(skin) {
		var key = skin.name;
		var _this = this.cachedSkin;
		var s = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(s != null) {
			return s;
		}
		s = new h3d_anim_Skin(skin.name,0,3);
		s.namedJoints = new haxe_ds_StringMap();
		s.allJoints = [];
		s.boundJoints = [];
		s.rootJoints = [];
		var _g = 0;
		var _g1 = skin.joints;
		while(_g < _g1.length) {
			var joint = _g1[_g];
			++_g;
			var j = new h3d_anim_Joint();
			j.name = joint.name;
			j.index = s.allJoints.length;
			j.defMat = joint.position.toMatrix();
			if(joint.bind >= 0) {
				j.bindIndex = joint.bind;
				j.transPos = joint.transpos.toMatrix(true);
				s.boundJoints[j.bindIndex] = j;
			}
			if(joint.parent >= 0) {
				var p = s.allJoints[joint.parent];
				p.subs.push(j);
				j.parent = p;
			} else {
				s.rootJoints.push(j);
			}
			s.allJoints.push(j);
			var key1 = j.name;
			var _this1 = s.namedJoints;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,j);
			} else {
				_this1.h[key1] = j;
			}
		}
		if(skin.split != null) {
			s.splitJoints = [];
			var _g2 = 0;
			var _g11 = skin.split;
			while(_g2 < _g11.length) {
				var ss = _g11[_g2];
				++_g2;
				var s1 = s.splitJoints;
				var ss1 = ss.materialIndex;
				var _g21 = [];
				var _g3 = 0;
				var _g4 = ss.joints;
				while(_g3 < _g4.length) {
					var j1 = _g4[_g3];
					++_g3;
					_g21.push(s.allJoints[j1]);
				}
				s1.push({ material : ss1, joints : _g21});
			}
		}
		var key2 = skin.name;
		var _this2 = this.cachedSkin;
		if(__map_reserved[key2] != null) {
			_this2.setReserved(key2,s);
		} else {
			_this2.h[key2] = s;
		}
		return s;
	}
	,getModelProperty: function(objName,p,def) {
		var _g = 0;
		var _g1 = this.header.models;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.name == objName) {
				if(m.props != null) {
					var _g2 = 0;
					var _g3 = m.props;
					while(_g2 < _g3.length) {
						var pr = _g3[_g2];
						++_g2;
						if(pr[1] == p[1]) {
							return pr.slice(2)[0];
						}
					}
				}
				return def;
			}
		}
		if(def == null) {
			throw new js__$Boot_HaxeError("Model " + objName + " not found");
		}
		return def;
	}
	,makeObject: function(loadTexture) {
		if(loadTexture == null) {
			loadTexture = function(_) {
				return h3d_mat_Texture.fromColor(16711935);
			};
		}
		if(this.header.models.length == 0) {
			throw new js__$Boot_HaxeError("This file does not contain any model");
		}
		var objs = [];
		var _g = 0;
		var _g1 = this.header.models;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var obj;
			if(m.geometry < 0) {
				obj = new h3d_scene_Object();
			} else {
				var prim = this.makePrimitive(m.geometry);
				if(m.skin != null) {
					var skinData = this.makeSkin(m.skin);
					skinData.primitive = prim;
					var _g2 = [];
					var _g3 = 0;
					var _g4 = m.materials;
					while(_g3 < _g4.length) {
						var mat = _g4[_g3];
						++_g3;
						_g2.push(this.makeMaterial(m,mat,loadTexture));
					}
					obj = new h3d_scene_Skin(skinData,_g2);
				} else if(m.materials.length == 1) {
					obj = new h3d_scene_Mesh(prim,this.makeMaterial(m,m.materials[0],loadTexture));
				} else {
					var _g21 = [];
					var _g31 = 0;
					var _g41 = m.materials;
					while(_g31 < _g41.length) {
						var mat1 = _g41[_g31];
						++_g31;
						_g21.push(this.makeMaterial(m,mat1,loadTexture));
					}
					obj = new h3d_scene_MultiMaterial(prim,_g21);
				}
			}
			obj.name = m.name;
			var v = m.position.toMatrix();
			obj.defaultTransform = v;
			var f = 1;
			var b = true;
			if(b) {
				obj.flags |= f;
			} else {
				obj.flags &= ~f;
			}
			objs.push(obj);
			var p = objs[m.parent];
			if(p != null) {
				p.addChild(obj);
			}
		}
		return objs[0];
	}
	,loadAnimation: function(name) {
		var _this = this.cachedAnimations;
		var key = name == null ? "" : name;
		var a = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(a != null) {
			return a;
		}
		var a1 = null;
		if(name == null) {
			if(this.header.animations.length == 0) {
				return null;
			}
			a1 = this.header.animations[0];
		} else {
			var _g = 0;
			var _g1 = this.header.animations;
			while(_g < _g1.length) {
				var a2 = _g1[_g];
				++_g;
				if(a2.name == name) {
					a1 = a2;
					break;
				}
			}
			if(a1 == null) {
				throw new js__$Boot_HaxeError("Animation " + name + " not found !");
			}
		}
		var l = this.makeAnimation(a1);
		var key1 = a1.name;
		var _this1 = this.cachedAnimations;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,l);
		} else {
			_this1.h[key1] = l;
		}
		if(name == null) {
			var _this2 = this.cachedAnimations;
			if(__map_reserved[""] != null) {
				_this2.setReserved("",l);
			} else {
				_this2.h[""] = l;
			}
		}
		return l;
	}
	,makeAnimation: function(a) {
		var l = new h3d_anim_LinearAnimation(a.name,a.frames,a.sampling);
		l.speed = a.speed;
		l.loop = a.loop;
		if(a.events != null) {
			l.setEvents(a.events);
		}
		this.entry.open();
		this.entry.skip(this.header.dataPosition + a.dataPosition);
		var _g = 0;
		var _g1 = a.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var pos = (o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasPosition[1]) != 0;
			var rot = (o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasRotation[1]) != 0;
			var scale = (o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasScale[1]) != 0;
			if(pos || rot || scale) {
				var frameCount = a.frames;
				if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.SinglePosition[1]) != 0) {
					frameCount = 1;
				}
				var this1 = new Array(frameCount);
				var fl = this1;
				var size = ((pos ? 3 : 0) + (rot ? 3 : 0) + (scale ? 3 : 0)) * 4 * frameCount;
				var data = hxd_impl_Tmp.getBytes(size);
				this.entry.read(data,0,size);
				var p = 0;
				var _g3 = 0;
				var _g2 = frameCount;
				while(_g3 < _g2) {
					var i = _g3++;
					var f = new h3d_anim_LinearFrame();
					if(pos) {
						f.tx = data.getFloat(p);
						p += 4;
						f.ty = data.getFloat(p);
						p += 4;
						f.tz = data.getFloat(p);
						p += 4;
					} else {
						f.tx = 0;
						f.ty = 0;
						f.tz = 0;
					}
					if(rot) {
						f.qx = data.getFloat(p);
						p += 4;
						f.qy = data.getFloat(p);
						p += 4;
						f.qz = data.getFloat(p);
						p += 4;
						var qw = 1 - (f.qx * f.qx + f.qy * f.qy + f.qz * f.qz);
						f.qw = qw < 0 ? -Math.sqrt(-qw) : Math.sqrt(qw);
					} else {
						f.qx = 0;
						f.qy = 0;
						f.qz = 0;
						f.qw = 1;
					}
					if(scale) {
						f.sx = data.getFloat(p);
						p += 4;
						f.sy = data.getFloat(p);
						p += 4;
						f.sz = data.getFloat(p);
						p += 4;
					} else {
						f.sx = 1;
						f.sy = 1;
						f.sz = 1;
					}
					fl[i] = f;
				}
				l.addCurve(o.name,fl,rot,scale);
				hxd_impl_Tmp.saveBytes(data);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasUV[1]) != 0) {
				var length = a.frames * 2;
				var this2 = new Array(length);
				var fl1 = this2;
				var size1 = 8 * a.frames;
				var data1 = hxd_impl_Tmp.getBytes(size1);
				this.entry.read(data1,0,size1);
				var _g31 = 0;
				var _g21 = fl1.length;
				while(_g31 < _g21) {
					var i1 = _g31++;
					fl1[i1] = data1.getFloat(i1 * 4);
				}
				l.addUVCurve(o.name,fl1);
				hxd_impl_Tmp.saveBytes(data1);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasAlpha[1]) != 0) {
				var length1 = a.frames;
				var this3 = new Array(length1);
				var fl2 = this3;
				var size2 = 4 * a.frames;
				var data2 = hxd_impl_Tmp.getBytes(size2);
				this.entry.read(data2,0,size2);
				var _g32 = 0;
				var _g22 = fl2.length;
				while(_g32 < _g22) {
					var i2 = _g32++;
					fl2[i2] = data2.getFloat(i2 * 4);
				}
				l.addAlphaCurve(o.name,fl2);
				hxd_impl_Tmp.saveBytes(data2);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasProps[1]) != 0) {
				var _g23 = 0;
				var _g33 = o.props;
				while(_g23 < _g33.length) {
					var p1 = _g33[_g23];
					++_g23;
					var length2 = a.frames;
					var this4 = new Array(length2);
					var fl3 = this4;
					var size3 = 4 * a.frames;
					var data3 = hxd_impl_Tmp.getBytes(size3);
					this.entry.read(data3,0,size3);
					var _g5 = 0;
					var _g4 = fl3.length;
					while(_g5 < _g4) {
						var i3 = _g5++;
						fl3[i3] = data3.getFloat(i3 * 4);
					}
					l.addPropCurve(o.name,p1,fl3);
					hxd_impl_Tmp.saveBytes(data3);
				}
			}
		}
		this.entry.close();
		return l;
	}
	,loadSkin: function(geom,skin) {
		if(skin.vertexWeights != null) {
			return;
		}
		skin.vertexCount = geom.vertexCount;
		var w = this.getBuffers(geom,[new hxd_fmt_hmd_GeometryFormat("weights",3)]).vertexes;
		var length = skin.vertexCount * skin.bonesPerVertex;
		var this1 = new Array(length);
		skin.vertexWeights = this1;
		var length1 = skin.vertexCount * skin.bonesPerVertex;
		var this2 = new Array(length1);
		skin.vertexJoints = this2;
		var _g1 = 0;
		var _g = skin.vertexWeights.length;
		while(_g1 < _g) {
			var i = _g1++;
			skin.vertexWeights[i] = w[i];
		}
		var vidx = this.getBuffers(geom,[new hxd_fmt_hmd_GeometryFormat("indexes",9)]).vertexes;
		var j = 0;
		var _g11 = 0;
		var _g2 = skin.vertexCount;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var v = this.ftoint32(vidx[i1]);
			skin.vertexJoints[j++] = v & 255;
			skin.vertexJoints[j++] = v >> 8 & 255;
			skin.vertexJoints[j++] = v >> 16 & 255;
		}
	}
	,ftoint32: function(v) {
		this.tmp.setFloat(0,v);
		return this.tmp.getInt32(0);
	}
	,__class__: hxd_fmt_hmd_Library
};
var hxd_fmt_hmd_Reader = function(i) {
	this.i = i;
};
$hxClasses["hxd.fmt.hmd.Reader"] = hxd_fmt_hmd_Reader;
hxd_fmt_hmd_Reader.__name__ = ["hxd","fmt","hmd","Reader"];
hxd_fmt_hmd_Reader.prototype = {
	readProperty: function() {
		var _g = this.i.readByte();
		switch(_g) {
		case 0:
			return hxd_fmt_hmd_Property.CameraFOVY(this.i.readFloat());
		case 1:
			return hxd_fmt_hmd_Property.HasMaterialFlags;
		default:
			var unk = _g;
			throw new js__$Boot_HaxeError("Unknown property #" + unk);
		}
	}
	,readProps: function() {
		if(this.version == 1) {
			return null;
		}
		var n = this.i.readByte();
		if(n == 0) {
			return null;
		}
		var _g = [];
		var _g2 = 0;
		var _g1 = n;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(this.readProperty());
		}
		return _g;
	}
	,readName: function() {
		var b = this.i.readByte();
		if(b == 255) {
			return null;
		}
		return this.i.readString(b);
	}
	,readPosition: function(hasScale) {
		if(hasScale == null) {
			hasScale = true;
		}
		var p = new hxd_fmt_hmd_Position();
		p.x = this.i.readFloat();
		p.y = this.i.readFloat();
		p.z = this.i.readFloat();
		p.qx = this.i.readFloat();
		p.qy = this.i.readFloat();
		p.qz = this.i.readFloat();
		if(hasScale) {
			p.sx = this.i.readFloat();
			p.sy = this.i.readFloat();
			p.sz = this.i.readFloat();
		} else {
			p.sx = 1;
			p.sy = 1;
			p.sz = 1;
		}
		return p;
	}
	,readBounds: function() {
		var b = new h3d_col_Bounds();
		b.xMin = this.i.readFloat();
		b.yMin = this.i.readFloat();
		b.zMin = this.i.readFloat();
		b.xMax = this.i.readFloat();
		b.yMax = this.i.readFloat();
		b.zMax = this.i.readFloat();
		return b;
	}
	,readSkin: function() {
		var name = this.readName();
		if(name == null) {
			return null;
		}
		var s = new hxd_fmt_hmd_Skin();
		s.props = this.readProps();
		s.name = name;
		s.joints = [];
		var _g1 = 0;
		var _g = this.i.readUInt16();
		while(_g1 < _g) {
			var k = _g1++;
			var j = new hxd_fmt_hmd_SkinJoint();
			j.props = this.readProps();
			j.name = this.readName();
			var pid = this.i.readUInt16();
			var hasScale = (pid & 32768) != 0;
			if(hasScale) {
				pid &= 32767;
			}
			j.parent = pid - 1;
			j.position = this.readPosition(hasScale);
			j.bind = this.i.readUInt16() - 1;
			if(j.bind >= 0) {
				j.transpos = this.readPosition(hasScale);
			}
			s.joints.push(j);
		}
		var count = this.i.readByte();
		if(count > 0) {
			s.split = [];
			var _g11 = 0;
			var _g2 = count;
			while(_g11 < _g2) {
				var k1 = _g11++;
				var ss = new hxd_fmt_hmd_SkinSplit();
				ss.materialIndex = this.i.readByte();
				var _g21 = [];
				var _g4 = 0;
				var _g3 = this.i.readByte();
				while(_g4 < _g3) {
					var k2 = _g4++;
					_g21.push(this.i.readUInt16());
				}
				ss.joints = _g21;
				s.split.push(ss);
			}
		}
		return s;
	}
	,readHeader: function() {
		var d = new hxd_fmt_hmd_Data();
		var h = this.i.readString(3);
		if(h != "HMD") {
			if(HxOverrides.cca(h,0) == 59) {
				throw new js__$Boot_HaxeError("FBX was not converted to HMD");
			}
			throw new js__$Boot_HaxeError("Invalid HMD header " + encodeURIComponent(h));
		}
		this.version = this.i.readByte();
		if(this.version > 2) {
			throw new js__$Boot_HaxeError("Can't read HMD v" + this.version);
		}
		d.version = this.version;
		d.geometries = [];
		d.dataPosition = this.i.readInt32();
		d.props = this.readProps();
		var _g1 = 0;
		var _g = this.i.readInt32();
		while(_g1 < _g) {
			var k = _g1++;
			var g = new hxd_fmt_hmd_Geometry();
			g.props = this.readProps();
			g.vertexCount = this.i.readInt32();
			g.vertexStride = this.i.readByte();
			var _g2 = [];
			var _g4 = 0;
			var _g3 = this.i.readByte();
			while(_g4 < _g3) {
				var k1 = _g4++;
				var tmp = this.readName();
				var this1 = this.i.readByte();
				_g2.push(new hxd_fmt_hmd_GeometryFormat(tmp,this1));
			}
			g.vertexFormat = _g2;
			g.vertexPosition = this.i.readInt32();
			var _g31 = [];
			var _g5 = 0;
			var _g41 = this.i.readByte();
			while(_g5 < _g41) {
				var k2 = _g5++;
				_g31.push(this.i.readInt32());
			}
			g.indexCounts = _g31;
			g.indexPosition = this.i.readInt32();
			g.bounds = this.readBounds();
			d.geometries.push(g);
		}
		d.materials = [];
		var _g11 = 0;
		var _g6 = this.i.readInt32();
		while(_g11 < _g6) {
			var k3 = _g11++;
			var m = new hxd_fmt_hmd_Material();
			m.props = this.readProps();
			m.name = this.readName();
			m.diffuseTexture = this.readName();
			m.blendMode = hxd_fmt_hmd_Reader.BLEND[this.i.readByte()];
			m.culling = hxd_fmt_hmd_Reader.CULLING[this.i.readByte()];
			m.killAlpha = this.i.readFloat();
			if(m.killAlpha == 1) {
				m.killAlpha = null;
			}
			if(m.props != null && m.props.indexOf(hxd_fmt_hmd_Property.HasMaterialFlags) >= 0) {
				var this2 = this.i.readInt32();
				m.flags = this2;
			}
			d.materials.push(m);
		}
		d.models = [];
		var _g12 = 0;
		var _g7 = this.i.readInt32();
		while(_g12 < _g7) {
			var k4 = _g12++;
			var m1 = new hxd_fmt_hmd_Model();
			m1.props = this.readProps();
			m1.name = this.readName();
			m1.parent = this.i.readInt32() - 1;
			m1.follow = this.readName();
			m1.position = this.readPosition();
			m1.geometry = this.i.readInt32() - 1;
			d.models.push(m1);
			if(m1.geometry < 0) {
				continue;
			}
			m1.materials = [];
			var _g32 = 0;
			var _g21 = this.i.readByte();
			while(_g32 < _g21) {
				var k5 = _g32++;
				m1.materials.push(this.i.readInt32());
			}
			m1.skin = this.readSkin();
		}
		d.animations = [];
		var _g13 = 0;
		var _g8 = this.i.readInt32();
		while(_g13 < _g8) {
			var k6 = _g13++;
			var a = new hxd_fmt_hmd_Animation();
			a.props = this.readProps();
			a.name = this.readName();
			a.frames = this.i.readInt32();
			a.sampling = this.i.readFloat();
			a.speed = this.i.readFloat();
			var flags = this.i.readByte();
			a.loop = (flags & 1) != 0;
			a.dataPosition = this.i.readInt32();
			a.objects = [];
			var _g33 = 0;
			var _g22 = this.i.readInt32();
			while(_g33 < _g22) {
				var k7 = _g33++;
				var o = new hxd_fmt_hmd_AnimationObject();
				o.name = this.readName();
				var this3 = this.i.readByte();
				o.flags = this3;
				a.objects.push(o);
				if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasProps[1]) != 0) {
					var _g42 = [];
					var _g61 = 0;
					var _g51 = this.i.readByte();
					while(_g61 < _g51) {
						var i = _g61++;
						_g42.push(this.readName());
					}
					o.props = _g42;
				}
			}
			if((flags & 2) != 0) {
				a.events = [];
				var _g34 = 0;
				var _g23 = this.i.readInt32();
				while(_g34 < _g23) {
					var k8 = _g34++;
					var e = new hxd_fmt_hmd_AnimationEvent();
					e.frame = this.i.readInt32();
					e.data = this.readName();
					a.events.push(e);
				}
			}
			d.animations.push(a);
		}
		return d;
	}
	,read: function() {
		var h = this.readHeader();
		h.data = this.i.read(this.i.readInt32());
		return h;
	}
	,__class__: hxd_fmt_hmd_Reader
};
var hxd_fmt_hsd_Serializer = function() {
	this.texOutputFormat = hxd_PixelFormat.RGBA;
	this.cachedTextures = new haxe_ds_IntMap();
	this.cachedShaders = [];
	this.shaderIndexes = new haxe_ds_ObjectMap();
	this.shaderUID = 0;
	this.resPath = "../../res";
	this.version = 0;
	hxbit_Serializer.call(this);
};
$hxClasses["hxd.fmt.hsd.Serializer"] = hxd_fmt_hsd_Serializer;
hxd_fmt_hsd_Serializer.__name__ = ["hxd","fmt","hsd","Serializer"];
hxd_fmt_hsd_Serializer.__super__ = hxbit_Serializer;
hxd_fmt_hsd_Serializer.prototype = $extend(hxbit_Serializer.prototype,{
	addTexture: function(t) {
		if(t == null) {
			this.out.b.push(0);
			return true;
		}
		var v = t.id;
		if(v >= 0 && v < 128) {
			this.out.b.push(v);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v);
		}
		if(this.cachedTextures.h.hasOwnProperty(t.id)) {
			return true;
		}
		var v1 = t.filter[1];
		if(v1 >= 0 && v1 < 128) {
			this.out.b.push(v1);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v1);
		}
		var v2 = t.mipMap[1];
		if(v2 >= 0 && v2 < 128) {
			this.out.b.push(v2);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v2);
		}
		var v3 = t.wrap[1];
		if(v3 >= 0 && v3 < 128) {
			this.out.b.push(v3);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v3);
		}
		this.cachedTextures.h[t.id] = t;
		if(t.name != null && hxd_res_Loader.currentInstance.exists(t.name)) {
			this.out.b.push(1);
			var s = t.name;
			if(s == null) {
				this.out.b.push(0);
			} else {
				var b = haxe_io_Bytes.ofString(s);
				var v4 = b.length + 1;
				if(v4 >= 0 && v4 < 128) {
					this.out.b.push(v4);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v4);
				}
				var _this = this.out;
				var b1 = _this.b;
				var b2 = b.b;
				var _g1 = 0;
				var _g = b.length;
				while(_g1 < _g) {
					var i = _g1++;
					_this.b.push(b2[i]);
				}
			}
			return true;
		}
		if((t.flags & 1 << h3d_mat_TextureFlags.Serialize[1]) != 0) {
			this.out.b.push(2);
			var v5 = t.width;
			if(v5 >= 0 && v5 < 128) {
				this.out.b.push(v5);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v5);
			}
			var v6 = t.height;
			if(v6 >= 0 && v6 < 128) {
				this.out.b.push(v6);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v6);
			}
			var v7 = t.flags;
			if(v7 >= 0 && v7 < 128) {
				this.out.b.push(v7);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v7);
			}
			var v8 = t.format[1];
			if(v8 >= 0 && v8 < 128) {
				this.out.b.push(v8);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v8);
			}
			var fmt = this.texOutputFormat;
			var v9 = fmt[1];
			if(v9 >= 0 && v9 < 128) {
				this.out.b.push(v9);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v9);
			}
			var _g11 = 0;
			var _g2 = (t.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0 ? 6 : 1;
			while(_g11 < _g2) {
				var face = _g11++;
				var pix = t.capturePixels(face);
				pix.convert(fmt);
				var b3 = pix.bytes;
				var len = t.width * t.height * hxd_Pixels.bytesPerPixel(pix.innerFormat);
				if(b3 == null) {
					this.out.b.push(0);
				} else {
					var v10 = len + 1;
					if(v10 >= 0 && v10 < 128) {
						this.out.b.push(v10);
					} else {
						this.out.b.push(128);
						this.out.addInt32(v10);
					}
					var _this1 = this.out;
					if(len < 0 || len > b3.length) {
						throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
					}
					var b11 = _this1.b;
					var b21 = b3.b;
					var _g12 = 0;
					var _g3 = len;
					while(_g12 < _g3) {
						var i1 = _g12++;
						_this1.b.push(b21[i1]);
					}
				}
			}
			return true;
		}
		var tch = (t instanceof h3d_mat_TextureChannels) ? t : null;
		if(tch != null) {
			this.out.b.push(3);
			var channels = tch.channels;
			var v11 = t.width;
			if(v11 >= 0 && v11 < 128) {
				this.out.b.push(v11);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v11);
			}
			var v12 = t.height;
			if(v12 >= 0 && v12 < 128) {
				this.out.b.push(v12);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v12);
			}
			var v13 = t.flags;
			if(v13 >= 0 && v13 < 128) {
				this.out.b.push(v13);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v13);
			}
			var v14 = t.format[1];
			if(v14 >= 0 && v14 < 128) {
				this.out.b.push(v14);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v14);
			}
			var _g4 = 0;
			while(_g4 < 4) {
				var i2 = _g4++;
				var c = channels[i2];
				if(c == null) {
					this.out.b.push(0);
					continue;
				}
				if(c.r == null) {
					return false;
				}
				var s1 = c.r.entry.get_path();
				if(s1 == null) {
					this.out.b.push(0);
				} else {
					var b4 = haxe_io_Bytes.ofString(s1);
					var v15 = b4.length + 1;
					if(v15 >= 0 && v15 < 128) {
						this.out.b.push(v15);
					} else {
						this.out.b.push(128);
						this.out.addInt32(v15);
					}
					var _this2 = this.out;
					var b12 = _this2.b;
					var b22 = b4.b;
					var _g13 = 0;
					var _g5 = b4.length;
					while(_g13 < _g5) {
						var i3 = _g13++;
						_this2.b.push(b22[i3]);
					}
				}
				var v16 = c.c;
				if(v16 >= 0 && v16 < 128) {
					this.out.b.push(v16);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v16);
				}
			}
			return true;
		}
		return false;
	}
	,getTexture: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var tid = v;
		if(tid == 0) {
			return null;
		}
		var t = this.cachedTextures.h[tid];
		if(t != null) {
			return t;
		}
		var v1 = this.input.b[this.inPos++];
		if(v1 == 128) {
			v1 = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var filter = Type.createEnumIndex(h3d_mat_Filter,v1,null);
		var v2 = this.input.b[this.inPos++];
		if(v2 == 128) {
			v2 = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var mipmap = Type.createEnumIndex(h3d_mat_MipMap,v2,null);
		var v3 = this.input.b[this.inPos++];
		if(v3 == 128) {
			v3 = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var wrap = Type.createEnumIndex(h3d_mat_Wrap,v3,null);
		var v4 = this.input.b[this.inPos++];
		if(v4 == 128) {
			v4 = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var kind = v4;
		switch(kind) {
		case 1:
			var v5 = this.input.b[this.inPos++];
			if(v5 == 128) {
				v5 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v5;
			var t1;
			if(len == 0) {
				t1 = null;
			} else {
				--len;
				var s = this.input.getString(this.inPos,len);
				this.inPos += len;
				t1 = s;
			}
			t = this.resolveTexture(t1);
			break;
		case 2:case 3:
			var v6 = this.input.b[this.inPos++];
			if(v6 == 128) {
				v6 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var width = v6;
			var v7 = this.input.b[this.inPos++];
			if(v7 == 128) {
				v7 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var height = v7;
			var v8 = this.input.b[this.inPos++];
			if(v8 == 128) {
				v8 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var this1 = v8;
			var flags = this1;
			var v9 = this.input.b[this.inPos++];
			if(v9 == 128) {
				v9 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var format = Type.createEnumIndex(hxd_PixelFormat,v9,null);
			var _g = [];
			var _g1 = 0;
			var _g2 = h3d_mat_TextureFlags.__empty_constructs__;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				if((flags & 1 << f[1]) != 0) {
					_g.push(f);
				}
			}
			var flags1 = _g;
			if(kind == 2) {
				var v10 = this.input.b[this.inPos++];
				if(v10 == 128) {
					v10 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var pixFormat = Type.createEnumIndex(hxd_PixelFormat,v10,null);
				t = new h3d_mat_Texture(width,height,flags1,format);
				var _g21 = 0;
				var _g11 = (t.flags & 1 << h3d_mat_TextureFlags.Cube[1]) != 0 ? 6 : 1;
				while(_g21 < _g11) {
					var face = _g21++;
					var v11 = this.input.b[this.inPos++];
					if(v11 == 128) {
						v11 = this.input.getInt32(this.inPos);
						this.inPos += 4;
					}
					var len1 = v11;
					var tmp;
					if(len1 == 0) {
						tmp = null;
					} else {
						--len1;
						var s1 = this.input.sub(this.inPos,len1);
						this.inPos += len1;
						tmp = s1;
					}
					t.uploadPixels(new hxd_Pixels(width,height,tmp,pixFormat),0,face);
				}
			} else {
				var ct = new h3d_mat_TextureChannels(width,height,flags1,format);
				ct.allowAsync = false;
				var _g12 = 0;
				while(_g12 < 4) {
					var i = _g12++;
					var v12 = this.input.b[this.inPos++];
					if(v12 == 128) {
						v12 = this.input.getInt32(this.inPos);
						this.inPos += 4;
					}
					var len2 = v12;
					var resPath;
					if(len2 == 0) {
						resPath = null;
					} else {
						--len2;
						var s2 = this.input.getString(this.inPos,len2);
						this.inPos += len2;
						resPath = s2;
					}
					if(resPath == null) {
						continue;
					}
					var v13 = this.input.b[this.inPos++];
					if(v13 == 128) {
						v13 = this.input.getInt32(this.inPos);
						this.inPos += 4;
					}
					var c = v13;
					ct.setResource(i,hxd_res_Loader.currentInstance.load(resPath).toImage(),c);
				}
				t = ct;
			}
			break;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
		t.set_filter(filter);
		t.set_mipMap(mipmap);
		t.set_wrap(wrap);
		this.cachedTextures.h[tid] = t;
		return t;
	}
	,resolveTexture: function(path) {
		return hxd_res_Loader.currentInstance.load(path).toTexture();
	}
	,loadHMD: function(path) {
		return hxd_res_Loader.currentInstance.load(path).toHmd();
	}
	,addShader: function(s) {
		if(s == null) {
			this.out.b.push(0);
			return;
		}
		var id = this.shaderIndexes.h[s.__id__];
		if(id != null) {
			if(id >= 0 && id < 128) {
				this.out.b.push(id);
			} else {
				this.out.b.push(128);
				this.out.addInt32(id);
			}
			return;
		}
		id = ++this.shaderUID;
		this.shaderIndexes.set(s,id);
		if(id >= 0 && id < 128) {
			this.out.b.push(id);
		} else {
			this.out.b.push(128);
			this.out.addInt32(id);
		}
		var s1 = Type.getClassName(s == null ? null : js_Boot.getClass(s));
		if(s1 == null) {
			this.out.b.push(0);
		} else {
			var b = haxe_io_Bytes.ofString(s1);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				this.out.b.push(v);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v);
			}
			var _this = this.out;
			var b1 = _this.b;
			var b2 = b.b;
			var _g1 = 0;
			var _g = b.length;
			while(_g1 < _g) {
				var i = _g1++;
				_this.b.push(b2[i]);
			}
		}
		this.shaderVarIndex = 0;
		var _g2 = 0;
		var _g11 = s.shader.data.vars;
		while(_g2 < _g11.length) {
			var v1 = _g11[_g2];
			++_g2;
			this.addShaderVar(v1,s);
		}
	}
	,loadShader: function(name) {
		return null;
	}
	,getShader: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var id = v;
		if(id == 0) {
			return null;
		}
		var s = this.cachedShaders[id];
		if(s != null) {
			return s;
		}
		var v1 = this.input.b[this.inPos++];
		if(v1 == 128) {
			v1 = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v1;
		var sname;
		if(len == 0) {
			sname = null;
		} else {
			--len;
			var s1 = this.input.getString(this.inPos,len);
			this.inPos += len;
			sname = s1;
		}
		var cl = Type.resolveClass(sname);
		if(cl == null) {
			s = this.loadShader(sname);
			if(s == null) {
				throw new js__$Boot_HaxeError("Missing shader " + sname);
			}
		} else {
			s = Type.createEmptyInstance(cl);
		}
		s.initialize();
		var sdyn = (s instanceof hxsl_DynamicShader) ? s : null;
		var _g = 0;
		var _g1 = s.shader.data.vars;
		while(_g < _g1.length) {
			var v2 = _g1[_g];
			++_g;
			if(!this.canSerializeVar(v2)) {
				continue;
			}
			var val = this.getShaderVar(v2,s);
			if(sdyn != null) {
				sdyn.setParamValue(v2,val);
			} else {
				s[v2.name + "__"] = val;
			}
		}
		this.cachedShaders[id] = s;
		return s;
	}
	,canSerializeVar: function(v) {
		if(v.kind == hxsl_VarKind.Param) {
			if(v.qualifiers != null) {
				return v.qualifiers.indexOf(hxsl_VarQualifier.Ignore) < 0;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,addShaderVar: function(v,s) {
		if(v.kind != hxsl_VarKind.Param) {
			return;
		}
		var _g = v.type;
		if(_g[1] == 12) {
			var vl = _g[2];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.addShaderVar(v1,s);
			}
			return;
		}
		if(!this.canSerializeVar(v)) {
			this.shaderVarIndex++;
			return;
		}
		var val = s.getParamValue(this.shaderVarIndex++);
		var _g11 = v.type;
		switch(_g11[1]) {
		case 1:
			var v2 = val;
			if(v2 >= 0 && v2 < 128) {
				this.out.b.push(v2);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v2);
			}
			break;
		case 2:
			this.out.b.push(val ? 1 : 0);
			break;
		case 3:
			this.out.addInt32(haxe_io_FPHelper.floatToI32(val));
			break;
		case 5:
			if(_g11[3][1] == 1) {
				var n = _g11[2];
				var v3 = val;
				this.out.addInt32(haxe_io_FPHelper.floatToI32(v3.x));
				this.out.addInt32(haxe_io_FPHelper.floatToI32(v3.y));
				if(n >= 3) {
					this.out.addInt32(haxe_io_FPHelper.floatToI32(v3.z));
				}
				if(n >= 4) {
					this.out.addInt32(haxe_io_FPHelper.floatToI32(v3.w));
				}
			} else {
				throw new js__$Boot_HaxeError("Cannot serialize macro var " + v.name + ":" + hxsl_Tools.toString(v.type) + " in " + Std.string(s));
			}
			break;
		case 10:case 11:
			if(!this.addTexture(val)) {
				throw new js__$Boot_HaxeError("Cannot serialize unnamed texture " + Std.string(s) + "." + v.name + " = " + Std.string(val));
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize macro var " + v.name + ":" + hxsl_Tools.toString(v.type) + " in " + Std.string(s));
		}
	}
	,getShaderVar: function(v,s) {
		var _g = v.type;
		if(_g[1] == 12) {
			var vl = _g[2];
			var obj = { };
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				if(!this.canSerializeVar(v1)) {
					continue;
				}
				obj[v1.name] = this.getShaderVar(v1,s);
			}
			return obj;
		}
		var _g11 = v.type;
		switch(_g11[1]) {
		case 1:
			var v2 = this.input.b[this.inPos++];
			if(v2 == 128) {
				v2 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v2;
		case 2:
			return this.input.b[this.inPos++] != 0;
		case 3:
			var v3 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			return v3;
		case 5:
			if(_g11[3][1] == 1) {
				var n = _g11[2];
				var v4 = this.input.getFloat(this.inPos);
				this.inPos += 4;
				var v5 = this.input.getFloat(this.inPos);
				this.inPos += 4;
				var v6 = new h3d_Vector(v4,v5);
				if(n >= 3) {
					var v7 = this.input.getFloat(this.inPos);
					this.inPos += 4;
					v6.z = v7;
				}
				if(n >= 4) {
					var v8 = this.input.getFloat(this.inPos);
					this.inPos += 4;
					v6.w = v8;
				}
				return v6;
			} else {
				throw new js__$Boot_HaxeError("Cannot unserialize macro var " + v.name + ":" + hxsl_Tools.toString(v.type));
			}
			break;
		case 10:case 11:
			return this.getTexture();
		default:
			throw new js__$Boot_HaxeError("Cannot unserialize macro var " + v.name + ":" + hxsl_Tools.toString(v.type));
		}
	}
	,initHSDPaths: function(resPath,projectPath) {
		this.resPath = resPath;
	}
	,loadHSD: function(bytes) {
		this.setInput(bytes,0);
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = this.input.getString(this.inPos,len);
			this.inPos += len;
			tmp = s;
		}
		if(tmp != "HSD") {
			throw new js__$Boot_HaxeError("Invalid HSD file");
		}
		var v1 = this.input.b[this.inPos++];
		if(v1 == 128) {
			v1 = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		this.version = v1;
		this.beginLoad(bytes,this.inPos);
		var v2 = this.input.b[this.inPos++];
		if(v2 == 128) {
			v2 = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len1 = v2;
		var tmp1;
		if(len1 == 0) {
			tmp1 = null;
		} else {
			--len1;
			var s1 = this.input.getString(this.inPos,len1);
			this.inPos += len1;
			tmp1 = s1;
		}
		var v3 = this.input.b[this.inPos++];
		if(v3 == 128) {
			v3 = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len2 = v3;
		var tmp2;
		if(len2 == 0) {
			tmp2 = null;
		} else {
			--len2;
			var s2 = this.input.getString(this.inPos,len2);
			this.inPos += len2;
			tmp2 = s2;
		}
		this.initHSDPaths(tmp1,tmp2);
		var objs = [];
		var _g1 = 0;
		var v4 = this.input.b[this.inPos++];
		if(v4 == 128) {
			v4 = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var _g = v4;
		while(_g1 < _g) {
			var i = _g1++;
			var obj = this.getAnyRef();
			objs.push(obj);
		}
		var _g2 = 0;
		while(_g2 < objs.length) {
			var o = objs[_g2];
			++_g2;
			var _g11 = 0;
			var _g21 = o.getMeshes();
			while(_g11 < _g21.length) {
				var m = _g21[_g11];
				++_g11;
				h3d_mat_MaterialSetup.current.initMeshAfterLoad(m);
			}
		}
		var camera = null;
		if(this.input.b[this.inPos++] != 0) {
			camera = new h3d_Camera();
			var _this = camera.pos;
			var v5 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			var v6 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			var v7 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			_this.x = v5;
			_this.y = v6;
			_this.z = v7;
			_this.w = 1.;
			var _this1 = camera.target;
			var v8 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			var v9 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			var v10 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			_this1.x = v8;
			_this1.y = v9;
			_this1.z = v10;
			_this1.w = 1.;
			var _this2 = camera.up;
			var v11 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			var v12 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			var v13 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			_this2.x = v11;
			_this2.y = v12;
			_this2.z = v13;
			_this2.w = 1.;
			var v14 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			camera.fovY = v14;
			var v15 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			camera.zNear = v15;
			var v16 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			camera.zFar = v16;
			var v17 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			camera.zoom = v17;
			camera.update();
		}
		this.endLoad();
		return { content : objs, camera : camera};
	}
	,saveHSD: function(obj,includeRoot,camera) {
		this.begin();
		var b = haxe_io_Bytes.ofString("HSD");
		var v = b.length + 1;
		if(v >= 0 && v < 128) {
			this.out.b.push(v);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v);
		}
		var _this = this.out;
		var b1 = _this.b;
		var b2 = b.b;
		var _g1 = 0;
		var _g = b.length;
		while(_g1 < _g) {
			var i = _g1++;
			_this.b.push(b2[i]);
		}
		var v1 = this.version;
		if(v1 >= 0 && v1 < 128) {
			this.out.b.push(v1);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v1);
		}
		var pos = this.out.b.length;
		this.usedClasses = [];
		var s = this.resPath;
		if(s == null) {
			this.out.b.push(0);
		} else {
			var b3 = haxe_io_Bytes.ofString(s);
			var v2 = b3.length + 1;
			if(v2 >= 0 && v2 < 128) {
				this.out.b.push(v2);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v2);
			}
			var _this1 = this.out;
			var b11 = _this1.b;
			var b21 = b3.b;
			var _g11 = 0;
			var _g2 = b3.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				_this1.b.push(b21[i1]);
			}
		}
		this.out.b.push(0);
		var objs;
		if(includeRoot) {
			objs = [obj];
		} else {
			var _g3 = [];
			var _g1_l;
			var _g1_i;
			var _g1_a;
			_g1_i = 0;
			_g1_a = obj.children;
			_g1_l = _g1_a.length;
			while(_g1_i < _g1_l) {
				var o = _g1_a[_g1_i++];
				if((o.flags & 256) == 0) {
					_g3.push(o);
				}
			}
			objs = _g3;
		}
		var v3 = objs.length;
		if(v3 >= 0 && v3 < 128) {
			this.out.b.push(v3);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v3);
		}
		var _g4 = 0;
		while(_g4 < objs.length) {
			var o1 = objs[_g4];
			++_g4;
			this.addAnyRef(o1);
		}
		this.out.b.push(camera != null ? 1 : 0);
		if(camera != null) {
			this.out.addInt32(haxe_io_FPHelper.floatToI32(camera.pos.x));
			this.out.addInt32(haxe_io_FPHelper.floatToI32(camera.pos.y));
			this.out.addInt32(haxe_io_FPHelper.floatToI32(camera.pos.z));
			this.out.addInt32(haxe_io_FPHelper.floatToI32(camera.target.x));
			this.out.addInt32(haxe_io_FPHelper.floatToI32(camera.target.y));
			this.out.addInt32(haxe_io_FPHelper.floatToI32(camera.target.z));
			this.out.addInt32(haxe_io_FPHelper.floatToI32(camera.up.x));
			this.out.addInt32(haxe_io_FPHelper.floatToI32(camera.up.y));
			this.out.addInt32(haxe_io_FPHelper.floatToI32(camera.up.z));
			this.out.addInt32(haxe_io_FPHelper.floatToI32(camera.fovY));
			this.out.addInt32(haxe_io_FPHelper.floatToI32(camera.zNear));
			this.out.addInt32(haxe_io_FPHelper.floatToI32(camera.zFar));
			this.out.addInt32(haxe_io_FPHelper.floatToI32(camera.zoom));
		}
		return this.endSave(pos);
	}
	,__class__: hxd_fmt_hsd_Serializer
});
var hxd_fs_FileEntry = function() { };
$hxClasses["hxd.fs.FileEntry"] = hxd_fs_FileEntry;
hxd_fs_FileEntry.__name__ = ["hxd","fs","FileEntry"];
hxd_fs_FileEntry.prototype = {
	getSign: function() {
		return 0;
	}
	,getBytes: function() {
		return null;
	}
	,getText: function() {
		return this.getBytes().toString();
	}
	,getTmpBytes: function() {
		return this.getBytes();
	}
	,open: function() {
	}
	,skip: function(nbytes) {
	}
	,readByte: function() {
		return 0;
	}
	,read: function(out,pos,size) {
	}
	,close: function() {
	}
	,load: function(onReady) {
		if(!this.get_isAvailable()) {
			throw new js__$Boot_HaxeError("load() not implemented");
		} else if(onReady != null) {
			onReady();
		}
	}
	,loadBitmap: function(onLoaded) {
		throw new js__$Boot_HaxeError("loadBitmap() not implemented");
	}
	,watch: function(onChanged) {
	}
	,exists: function(name) {
		return false;
	}
	,get: function(name) {
		return null;
	}
	,iterator: function() {
		return null;
	}
	,get_isAvailable: function() {
		return true;
	}
	,get_isDirectory: function() {
		return false;
	}
	,get_size: function() {
		return 0;
	}
	,get_path: function() {
		throw new js__$Boot_HaxeError("path() not implemented");
	}
	,get_directory: function() {
		var p = this.get_path().split("/");
		p.pop();
		return p.join("/");
	}
	,get_extension: function() {
		var np = this.name.split(".");
		if(np.length == 1) {
			return "";
		} else {
			return np.pop().toLowerCase();
		}
	}
	,__class__: hxd_fs_FileEntry
};
var hxd_fs_BytesFileEntry = function(path,bytes) {
	this.fullPath = path;
	this.name = path.split("/").pop();
	this.bytes = bytes;
};
$hxClasses["hxd.fs.BytesFileEntry"] = hxd_fs_BytesFileEntry;
hxd_fs_BytesFileEntry.__name__ = ["hxd","fs","BytesFileEntry"];
hxd_fs_BytesFileEntry.__super__ = hxd_fs_FileEntry;
hxd_fs_BytesFileEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	get_path: function() {
		return this.fullPath;
	}
	,getSign: function() {
		return this.bytes.b[0] | this.bytes.b[1] << 8 | this.bytes.b[2] << 16 | this.bytes.b[3] << 24;
	}
	,getBytes: function() {
		return this.bytes;
	}
	,open: function() {
		this.pos = 0;
	}
	,skip: function(nbytes) {
		this.pos += nbytes;
	}
	,readByte: function() {
		return this.bytes.b[this.pos++];
	}
	,read: function(out,pos,size) {
		out.blit(pos,this.bytes,this.pos,size);
		this.pos += size;
	}
	,close: function() {
	}
	,load: function(onReady) {
		haxe_Timer.delay(onReady,1);
	}
	,loadBitmap: function(onLoaded) {
		throw new js__$Boot_HaxeError("TODO");
	}
	,exists: function(name) {
		return false;
	}
	,get: function(name) {
		return null;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry([]);
	}
	,get_size: function() {
		return this.bytes.length;
	}
	,__class__: hxd_fs_BytesFileEntry
});
var hxd_fs_FileSystem = function() { };
$hxClasses["hxd.fs.FileSystem"] = hxd_fs_FileSystem;
hxd_fs_FileSystem.__name__ = ["hxd","fs","FileSystem"];
hxd_fs_FileSystem.prototype = {
	__class__: hxd_fs_FileSystem
};
var hxd_fs_BytesFileSystem = function() {
};
$hxClasses["hxd.fs.BytesFileSystem"] = hxd_fs_BytesFileSystem;
hxd_fs_BytesFileSystem.__name__ = ["hxd","fs","BytesFileSystem"];
hxd_fs_BytesFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_BytesFileSystem.prototype = {
	getRoot: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,getBytes: function(path) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,exists: function(path) {
		return this.getBytes(path) != null;
	}
	,get: function(path) {
		var bytes = this.getBytes(path);
		if(bytes == null) {
			throw new js__$Boot_HaxeError("Resource not found '" + path + "'");
		}
		return new hxd_fs_BytesFileEntry(path,bytes);
	}
	,dispose: function() {
	}
	,__class__: hxd_fs_BytesFileSystem
};
var hxd_fs__$EmbedFileSystem_EmbedEntry = function(fs,name,relPath,data) {
	this.fs = fs;
	this.name = name;
	this.relPath = relPath;
	this.data = data;
};
$hxClasses["hxd.fs._EmbedFileSystem.EmbedEntry"] = hxd_fs__$EmbedFileSystem_EmbedEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.__name__ = ["hxd","fs","_EmbedFileSystem","EmbedEntry"];
hxd_fs__$EmbedFileSystem_EmbedEntry.__super__ = hxd_fs_FileEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	getSign: function() {
		var old = this.readPos;
		this.open();
		this.readPos = old;
		return this.bytes.b[0] | this.bytes.b[1] << 8 | this.bytes.b[2] << 16 | this.bytes.b[3] << 24;
	}
	,getBytes: function() {
		if(this.bytes == null) {
			this.open();
		}
		return this.bytes;
	}
	,open: function() {
		if(this.bytes == null) {
			this.bytes = haxe_Resource.getBytes(this.data);
			if(this.bytes == null) {
				throw new js__$Boot_HaxeError("Missing resource " + this.data);
			}
		}
		this.readPos = 0;
	}
	,skip: function(nbytes) {
		this.readPos += nbytes;
	}
	,readByte: function() {
		return this.bytes.b[this.readPos++];
	}
	,read: function(out,pos,size) {
		out.blit(pos,this.bytes,this.readPos,size);
		this.readPos += size;
	}
	,close: function() {
		this.bytes = null;
		this.readPos = 0;
	}
	,load: function(onReady) {
		if(onReady != null) {
			haxe_Timer.delay(onReady,1);
		}
	}
	,loadBitmap: function(onLoaded) {
		var rawData = null;
		var _g = 0;
		var _g1 = haxe_Resource.content;
		while(_g < _g1.length) {
			var res = _g1[_g];
			++_g;
			if(res.name == this.data) {
				rawData = res.data;
				break;
			}
		}
		if(rawData == null) {
			throw new js__$Boot_HaxeError("Missing resource " + this.data);
		}
		var image = new Image();
		image.onload = function(_) {
			var this1 = image;
			onLoaded(this1);
		};
		var extra = "";
		var bytes = rawData.length * 6 >> 3;
		var _g11 = 0;
		var _g2 = (3 - bytes * 4 % 3) % 3;
		while(_g11 < _g2) {
			var i = _g11++;
			extra += "=";
		}
		var tmp = "data:image/" + this.get_extension() + ";base64," + rawData;
		image.src = tmp + extra;
	}
	,get_isDirectory: function() {
		return this.fs.isDirectory(this.relPath);
	}
	,get_path: function() {
		if(this.relPath == ".") {
			return "<root>";
		} else {
			return this.relPath;
		}
	}
	,exists: function(name) {
		return this.fs.exists(this.relPath == "." ? name : this.relPath + "/" + name);
	}
	,get: function(name) {
		return this.fs.get(this.relPath == "." ? name : this.relPath + "/" + name);
	}
	,get_size: function() {
		this.open();
		return this.bytes.length;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry(this.fs.subFiles(this.relPath));
	}
	,__class__: hxd_fs__$EmbedFileSystem_EmbedEntry
});
var hxd_fs_EmbedFileSystem = function(root) {
	this.root = root;
};
$hxClasses["hxd.fs.EmbedFileSystem"] = hxd_fs_EmbedFileSystem;
hxd_fs_EmbedFileSystem.__name__ = ["hxd","fs","EmbedFileSystem"];
hxd_fs_EmbedFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_EmbedFileSystem.resolve = function(path) {
	return "R_" + path.replace(hxd_fs_EmbedFileSystem.invalidChars.r,"_");
};
hxd_fs_EmbedFileSystem.prototype = {
	getRoot: function() {
		return new hxd_fs__$EmbedFileSystem_EmbedEntry(this,"root",".",null);
	}
	,splitPath: function(path) {
		if(path == ".") {
			return [];
		} else {
			return path.split("/");
		}
	}
	,subFiles: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
		}
		if(r == null) {
			throw new js__$Boot_HaxeError(path + " is not a directory");
		}
		var fields = Reflect.fields(r);
		fields.sort(Reflect.compare);
		var _g2 = [];
		var _g11 = 0;
		while(_g11 < fields.length) {
			var name = fields[_g11];
			++_g11;
			_g2.push(this.get(path == "." ? name : path + "/" + name));
		}
		return _g2;
	}
	,isDirectory: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
		}
		if(r != null) {
			return r != true;
		} else {
			return false;
		}
	}
	,exists: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
			if(r == null) {
				return false;
			}
		}
		return true;
	}
	,get: function(path) {
		if(!this.exists(path)) {
			throw new js__$Boot_HaxeError(new hxd_fs_NotFound(path));
		}
		var id = hxd_fs_EmbedFileSystem.resolve(path);
		return new hxd_fs__$EmbedFileSystem_EmbedEntry(this,path.split("/").pop(),path,id);
	}
	,dispose: function() {
	}
	,__class__: hxd_fs_EmbedFileSystem
};
var hxd_fs_FileInput = function(f) {
	this.f = f;
	f.open();
};
$hxClasses["hxd.fs.FileInput"] = hxd_fs_FileInput;
hxd_fs_FileInput.__name__ = ["hxd","fs","FileInput"];
hxd_fs_FileInput.__super__ = haxe_io_Input;
hxd_fs_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	skip: function(nbytes) {
		this.f.skip(nbytes);
	}
	,readByte: function() {
		return this.f.readByte();
	}
	,readBytes: function(b,pos,len) {
		this.f.read(b,pos,len);
		return len;
	}
	,close: function() {
		this.f.close();
	}
	,__class__: hxd_fs_FileInput
});
var hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$ = {};
$hxClasses["hxd.fs._LoadedBitmap.LoadedBitmap_Impl_"] = hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$;
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.__name__ = ["hxd","fs","_LoadedBitmap","LoadedBitmap_Impl_"];
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$._new = function(data) {
	var this1 = data;
	return this1;
};
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toBitmap = function(this1) {
	var bmp = new hxd_BitmapData(this1.width,this1.height);
	bmp.ctx.drawImage(this1,0,0);
	return bmp;
};
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toNative = function(this1) {
	return this1;
};
var hxd_fs_NotFound = function(path) {
	this.path = path;
};
$hxClasses["hxd.fs.NotFound"] = hxd_fs_NotFound;
hxd_fs_NotFound.__name__ = ["hxd","fs","NotFound"];
hxd_fs_NotFound.prototype = {
	toString: function() {
		return "Resource file not found '" + this.path + "'";
	}
	,__class__: hxd_fs_NotFound
};
var hxd_impl_ArrayIterator = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator"] = hxd_impl_ArrayIterator;
hxd_impl_ArrayIterator.__name__ = ["hxd","impl","ArrayIterator"];
hxd_impl_ArrayIterator.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator
};
var hxd_impl_ArrayIterator_$h2d_$Sprite = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_h2d_Sprite"] = hxd_impl_ArrayIterator_$h2d_$Sprite;
hxd_impl_ArrayIterator_$h2d_$Sprite.__name__ = ["hxd","impl","ArrayIterator_h2d_Sprite"];
hxd_impl_ArrayIterator_$h2d_$Sprite.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$h2d_$Sprite
};
var hxd_impl_ArrayIterator_$h3d_$scene_$Object = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_h3d_scene_Object"] = hxd_impl_ArrayIterator_$h3d_$scene_$Object;
hxd_impl_ArrayIterator_$h3d_$scene_$Object.__name__ = ["hxd","impl","ArrayIterator_h3d_scene_Object"];
hxd_impl_ArrayIterator_$h3d_$scene_$Object.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$h3d_$scene_$Object
};
var hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_hxd_fs_FileEntry"] = hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry;
hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry.__name__ = ["hxd","impl","ArrayIterator_hxd_fs_FileEntry"];
hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry
};
var hxd_impl_ArrayIterator_$hxd_$res_$Any = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_hxd_res_Any"] = hxd_impl_ArrayIterator_$hxd_$res_$Any;
hxd_impl_ArrayIterator_$hxd_$res_$Any.__name__ = ["hxd","impl","ArrayIterator_hxd_res_Any"];
hxd_impl_ArrayIterator_$hxd_$res_$Any.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$res_$Any
};
var hxd_impl_MemoryReader = function() {
};
$hxClasses["hxd.impl.MemoryReader"] = hxd_impl_MemoryReader;
hxd_impl_MemoryReader.__name__ = ["hxd","impl","MemoryReader"];
hxd_impl_MemoryReader.prototype = {
	b: function(addr) {
		return hxd_impl_Memory.current.b[addr];
	}
	,wb: function(addr,v) {
		hxd_impl_Memory.current.b[addr] = v & 255;
	}
	,'double': function(addr) {
		throw new js__$Boot_HaxeError("TODO");
	}
	,'float': function(addr) {
		throw new js__$Boot_HaxeError("TODO");
	}
	,wfloat: function(addr,v) {
		throw new js__$Boot_HaxeError("TODO");
	}
	,wdouble: function(addr,v) {
		throw new js__$Boot_HaxeError("TODO");
	}
	,i32: function(addr) {
		throw new js__$Boot_HaxeError("TODO");
	}
	,end: function() {
		hxd_impl_Memory.end();
	}
	,__class__: hxd_impl_MemoryReader
};
var hxd_impl_Memory = function() { };
$hxClasses["hxd.impl.Memory"] = hxd_impl_Memory;
hxd_impl_Memory.__name__ = ["hxd","impl","Memory"];
hxd_impl_Memory.select = function(b) {
	if(hxd_impl_Memory.current != null) {
		hxd_impl_Memory.stack.push(hxd_impl_Memory.current);
	}
	hxd_impl_Memory.current = b;
	return hxd_impl_Memory.inst;
};
hxd_impl_Memory.end = function() {
	hxd_impl_Memory.current = hxd_impl_Memory.stack.pop();
};
var hxd_impl_Tmp = function() { };
$hxClasses["hxd.impl.Tmp"] = hxd_impl_Tmp;
hxd_impl_Tmp.__name__ = ["hxd","impl","Tmp"];
hxd_impl_Tmp.outOfMemory = function() {
};
hxd_impl_Tmp.getBytes = function(size) {
	var found = -1;
	var _g1 = 0;
	var _g = hxd_impl_Tmp.bytes.length;
	while(_g1 < _g) {
		var i = _g1++;
		var b = hxd_impl_Tmp.bytes[i];
		if(b.length >= size) {
			found = i;
		}
	}
	if(found >= 0) {
		var b1 = hxd_impl_Tmp.bytes[found];
		hxd_impl_Tmp.bytes.splice(found,1);
		return b1;
	}
	var sz = 1024;
	while(sz < size) sz = sz * 3 >> 1;
	return hxd_impl_Tmp.allocBytes(sz);
};
hxd_impl_Tmp.freeMemory = function() {
	hxd_impl_Tmp.bytes = [];
	hxd_impl_Tmp.outOfMemory();
};
hxd_impl_Tmp.allocBytes = function(size) {
	try {
		return new haxe_io_Bytes(new ArrayBuffer(size));
	} catch( e ) {
		hxd_impl_Tmp.freeMemory();
		return new haxe_io_Bytes(new ArrayBuffer(size));
	}
};
hxd_impl_Tmp.saveBytes = function(b) {
	var _g1 = 0;
	var _g = hxd_impl_Tmp.bytes.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(hxd_impl_Tmp.bytes[i].length <= b.length) {
			hxd_impl_Tmp.bytes.splice(i,0,b);
			if(hxd_impl_Tmp.bytes.length > 8) {
				hxd_impl_Tmp.bytes.pop();
			}
			return;
		}
	}
	hxd_impl_Tmp.bytes.push(b);
};
var hxd_poly2tri_Edge = function(p1,p2) {
	if(p1 == null || p2 == null) {
		throw new js__$Boot_HaxeError("Edge::new p1 or p2 is null");
	}
	var swap = false;
	if(p1.y > p2.y) {
		swap = true;
	} else if(p1.y == p2.y) {
		if(p1.x == p2.x) {
			throw new js__$Boot_HaxeError("Edge::repeat points " + Std.string(p1));
		}
		swap = p1.x > p2.x;
	}
	if(swap) {
		this.q = p1;
		this.p = p2;
	} else {
		this.p = p1;
		this.q = p2;
	}
	this.q.get_edge_list().push(this);
};
$hxClasses["hxd.poly2tri.Edge"] = hxd_poly2tri_Edge;
hxd_poly2tri_Edge.__name__ = ["hxd","poly2tri","Edge"];
hxd_poly2tri_Edge.prototype = {
	toString: function() {
		return "Edge(" + Std.string(this.p) + ", " + Std.string(this.q) + ")";
	}
	,__class__: hxd_poly2tri_Edge
};
var hxd_poly2tri_Point = function(x,y) {
	this.x = x;
	this.y = y;
	this.id = hxd_poly2tri_Point.C_ID;
	hxd_poly2tri_Point.C_ID++;
};
$hxClasses["hxd.poly2tri.Point"] = hxd_poly2tri_Point;
hxd_poly2tri_Point.__name__ = ["hxd","poly2tri","Point"];
hxd_poly2tri_Point.sortPoints = function(points) {
	points.sort(hxd_poly2tri_Point.cmpPoints);
};
hxd_poly2tri_Point.cmpPoints = function(l,r) {
	var ret = l.y - r.y;
	if(ret == 0) {
		ret = l.x - r.x;
	}
	if(ret < 0) {
		return -1;
	}
	if(ret > 0) {
		return 1;
	}
	return 0;
};
hxd_poly2tri_Point.prototype = {
	get_edge_list: function() {
		if(this.edge_list == null) {
			this.edge_list = [];
		}
		return this.edge_list;
	}
	,equals: function(that) {
		if(this.x == that.x) {
			return this.y == that.y;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "Point(" + this.x + ", " + this.y + ")";
	}
	,__class__: hxd_poly2tri_Point
};
var hxd_res__$Any_SingleFileSystem = function(path,bytes) {
	hxd_fs_BytesFileSystem.call(this);
	this.path = path;
	this.bytes = bytes;
};
$hxClasses["hxd.res._Any.SingleFileSystem"] = hxd_res__$Any_SingleFileSystem;
hxd_res__$Any_SingleFileSystem.__name__ = ["hxd","res","_Any","SingleFileSystem"];
hxd_res__$Any_SingleFileSystem.__super__ = hxd_fs_BytesFileSystem;
hxd_res__$Any_SingleFileSystem.prototype = $extend(hxd_fs_BytesFileSystem.prototype,{
	getBytes: function(p) {
		if(p == this.path) {
			return this.bytes;
		} else {
			return null;
		}
	}
	,__class__: hxd_res__$Any_SingleFileSystem
});
var hxd_res_Resource = function(entry) {
	this.entry = entry;
};
$hxClasses["hxd.res.Resource"] = hxd_res_Resource;
hxd_res_Resource.__name__ = ["hxd","res","Resource"];
hxd_res_Resource.prototype = {
	get_name: function() {
		return this.entry.name;
	}
	,toString: function() {
		return this.entry.get_path();
	}
	,watch: function(onChanged) {
		if(hxd_res_Resource.LIVE_UPDATE) {
			this.entry.watch(onChanged);
		}
	}
	,__class__: hxd_res_Resource
};
var hxd_res_Any = function(loader,entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = loader;
};
$hxClasses["hxd.res.Any"] = hxd_res_Any;
hxd_res_Any.__name__ = ["hxd","res","Any"];
hxd_res_Any.fromBytes = function(path,bytes) {
	var fs = new hxd_res__$Any_SingleFileSystem(path,bytes);
	return new hxd_res_Loader(fs).load(path);
};
hxd_res_Any.__super__ = hxd_res_Resource;
hxd_res_Any.prototype = $extend(hxd_res_Resource.prototype,{
	toModel: function() {
		return this.loader.loadModel(this.entry.get_path());
	}
	,toHmd: function() {
		return this.loader.loadModel(this.entry.get_path()).toHmd();
	}
	,toTexture: function() {
		return this.loader.loadImage(this.entry.get_path()).toTexture();
	}
	,toTile: function() {
		return this.loader.loadImage(this.entry.get_path()).toTile();
	}
	,toText: function() {
		return this.entry.getBytes().toString();
	}
	,toImage: function() {
		return this.loader.loadImage(this.entry.get_path());
	}
	,toSound: function() {
		return this.loader.loadSound(this.entry.get_path());
	}
	,toFont: function() {
		return this.loader.loadFont(this.entry.get_path());
	}
	,toBitmap: function() {
		return this.loader.loadImage(this.entry.get_path()).toBitmap();
	}
	,toBitmapFont: function() {
		return this.loader.loadBitmapFont(this.entry.get_path());
	}
	,toTiledMap: function() {
		return this.loader.loadTiledMap(this.entry.get_path());
	}
	,toAtlas: function() {
		return this.loader.loadAtlas(this.entry.get_path());
	}
	,iterator: function() {
		var _g1 = [];
		var _g2 = this.entry.iterator();
		while(_g2.i < _g2.l) {
			var f = _g2.a[_g2.i++];
			_g1.push(new hxd_res_Any(this.loader,f));
		}
		return new hxd_impl_ArrayIterator_$hxd_$res_$Any(_g1);
	}
	,__class__: hxd_res_Any
});
var hxd_res_Atlas = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Atlas"] = hxd_res_Atlas;
hxd_res_Atlas.__name__ = ["hxd","res","Atlas"];
hxd_res_Atlas.__super__ = hxd_res_Resource;
hxd_res_Atlas.prototype = $extend(hxd_res_Resource.prototype,{
	tileAlign: function(t,halign,valign,width,height) {
		if(halign == null) {
			halign = h2d_FlowAlign.Left;
		}
		if(valign == null) {
			valign = h2d_FlowAlign.Top;
		}
		var dx = 0;
		var dy = 0;
		switch(halign[1]) {
		case 2:
			dx = width;
			break;
		case 3:
			dx = width >> 1;
			break;
		default:
		}
		switch(valign[1]) {
		case 3:
			dy = height >> 1;
			break;
		case 4:
			dy = height;
			break;
		default:
		}
		return t.sub(0,0,t.width,t.height,t.dx - dx,t.dy - dy);
	}
	,get: function(name,horizontalAlign,verticalAlign) {
		var _this = this.getContents();
		var c = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(c == null) {
			return null;
		}
		var t = c[0];
		if(t == null) {
			return null;
		}
		return this.tileAlign(t.t,horizontalAlign,verticalAlign,t.width,t.height);
	}
	,getAnim: function(name,horizontalAlign,verticalAlign) {
		if(name == null) {
			var cont = this.getContents().keys();
			name = cont.next();
			if(cont.hasNext()) {
				throw new js__$Boot_HaxeError("Altas has several items in it " + Std.string(Lambda.array(this.contents)));
			}
		}
		var _this = this.getContents();
		var c = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(c == null) {
			return null;
		}
		var _g = [];
		var _g1 = 0;
		while(_g1 < c.length) {
			var t = c[_g1];
			++_g1;
			_g.push(t == null ? null : this.tileAlign(t.t,horizontalAlign,verticalAlign,t.width,t.height));
		}
		return _g;
	}
	,getContents: function() {
		if(this.contents != null) {
			return this.contents;
		}
		this.contents = new haxe_ds_StringMap();
		var lines = this.entry.getBytes().toString().split("\n");
		var basePath = this.entry.get_path().split("/");
		basePath.pop();
		var basePath1 = basePath.join("/");
		if(basePath1.length > 0) {
			basePath1 += "/";
		}
		while(lines.length > 0) {
			var line = StringTools.trim(lines.shift());
			if(line == "") {
				continue;
			}
			var file = hxd_res_Loader.currentInstance.load(basePath1 + line).toTile();
			while(lines.length > 0) {
				var line1 = StringTools.trim(lines.shift());
				if(line1 == "") {
					break;
				}
				var prop = line1.split(": ");
				if(prop.length > 1) {
					continue;
				}
				var key = line1;
				var tileX = 0;
				var tileY = 0;
				var tileW = 0;
				var tileH = 0;
				var tileDX = 0;
				var tileDY = 0;
				var origW = 0;
				var origH = 0;
				var index = 0;
				while(lines.length > 0) {
					var line2 = StringTools.trim(lines.shift());
					var prop1 = line2.split(": ");
					if(prop1.length == 1) {
						lines.unshift(line2);
						break;
					}
					var v = prop1[1];
					var _g = prop1[0];
					switch(_g) {
					case "index":
						index = Std.parseInt(v);
						if(index < 0) {
							index = 0;
						}
						break;
					case "offset":
						var vals = v.split(", ");
						tileDX = Std.parseInt(vals[0]);
						tileDY = Std.parseInt(vals[1]);
						break;
					case "orig":
						var vals1 = v.split(", ");
						origW = Std.parseInt(vals1[0]);
						origH = Std.parseInt(vals1[1]);
						break;
					case "rotate":
						if(v == "true") {
							throw new js__$Boot_HaxeError("Rotation not supported in atlas");
						}
						break;
					case "size":
						var vals2 = v.split(", ");
						tileW = Std.parseInt(vals2[0]);
						tileH = Std.parseInt(vals2[1]);
						break;
					case "xy":
						var vals3 = v.split(", ");
						tileX = Std.parseInt(vals3[0]);
						tileY = Std.parseInt(vals3[1]);
						break;
					default:
						haxe_Log.trace("Unknown prop " + prop1[0],{ fileName : "Atlas.hx", lineNumber : 104, className : "hxd.res.Atlas", methodName : "getContents"});
					}
				}
				tileDY = origH - (tileH + tileDY);
				var t = file.sub(tileX,tileY,tileW,tileH,tileDX,tileDY);
				var _this = this.contents;
				var tl = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				if(tl == null) {
					tl = [];
					var _this1 = this.contents;
					if(__map_reserved[key] != null) {
						_this1.setReserved(key,tl);
					} else {
						_this1.h[key] = tl;
					}
				}
				tl[index] = { t : t, width : origW, height : origH};
			}
		}
		return this.contents;
	}
	,__class__: hxd_res_Atlas
});
var hxd_res_BitmapFont = function(loader,entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = loader;
};
$hxClasses["hxd.res.BitmapFont"] = hxd_res_BitmapFont;
hxd_res_BitmapFont.__name__ = ["hxd","res","BitmapFont"];
hxd_res_BitmapFont.__super__ = hxd_res_Resource;
hxd_res_BitmapFont.prototype = $extend(hxd_res_Resource.prototype,{
	toFont: function() {
		if(this.font != null) {
			return this.font;
		}
		var tile = this.loader.load(HxOverrides.substr(this.entry.get_path(),0,-3) + "png").toTile();
		var name = this.entry.get_path();
		var size = 0;
		var lineHeight = 0;
		var glyphs = new haxe_ds_IntMap();
		var _g = this.entry.getSign();
		switch(_g) {
		case 1836597052:
			var xml = Xml.parse(this.entry.getBytes().toString());
			var xml1 = new haxe_xml_Fast(xml.firstElement());
			size = Std.parseInt(xml1.att.resolve("size"));
			lineHeight = Std.parseInt(xml1.att.resolve("height"));
			name = xml1.att.resolve("family");
			var c = xml1.get_elements();
			while(c.hasNext()) {
				var c1 = c.next();
				var r = c1.att.resolve("rect").split(" ");
				var o = c1.att.resolve("offset").split(" ");
				var t = tile.sub(Std.parseInt(r[0]),Std.parseInt(r[1]),Std.parseInt(r[2]),Std.parseInt(r[3]),Std.parseInt(o[0]),Std.parseInt(o[1]));
				var fc = new h2d_FontChar(t,Std.parseInt(c1.att.resolve("width")) - 1);
				var k = c1.get_elements();
				while(k.hasNext()) {
					var k1 = k.next();
					fc.addKerning(HxOverrides.cca(k1.att.resolve("id"),0),Std.parseInt(k1.att.resolve("advance")));
				}
				var code = c1.att.resolve("code");
				if(StringTools.startsWith(code,"&#")) {
					var key = Std.parseInt(HxOverrides.substr(code,2,code.length - 3));
					glyphs.h[key] = fc;
				} else {
					var key1 = HxOverrides.cca(c1.att.resolve("code"),0);
					glyphs.h[key1] = fc;
				}
			}
			break;
		case 1852794428:
			var xml2 = Xml.parse(this.entry.getBytes().toString());
			var xml3 = new haxe_xml_Fast(xml2.firstElement());
			size = Std.parseInt(xml3.node.resolve("info").att.resolve("size"));
			lineHeight = Std.parseInt(xml3.node.resolve("common").att.resolve("lineHeight"));
			name = xml3.node.resolve("info").att.resolve("face");
			var chars = xml3.node.resolve("chars").get_elements();
			var c2 = chars;
			while(c2.hasNext()) {
				var c3 = c2.next();
				var t1 = tile.sub(Std.parseInt(c3.att.resolve("x")),Std.parseInt(c3.att.resolve("y")),Std.parseInt(c3.att.resolve("width")),Std.parseInt(c3.att.resolve("height")),Std.parseInt(c3.att.resolve("xoffset")),Std.parseInt(c3.att.resolve("yoffset")));
				var fc1 = new h2d_FontChar(t1,Std.parseInt(c3.att.resolve("width")) - 1);
				var kerns = xml3.node.resolve("kernings").get_elements();
				var k2 = kerns;
				while(k2.hasNext()) {
					var k3 = k2.next();
					if(k3.att.resolve("second") == c3.att.resolve("id")) {
						fc1.addKerning(Std.parseInt(k3.att.resolve("first")),Std.parseInt(k3.att.resolve("amount")));
					}
				}
				var key2 = Std.parseInt(c3.att.resolve("id"));
				glyphs.h[key2] = fc1;
			}
			break;
		default:
			var sign = _g;
			throw new js__$Boot_HaxeError("Unknown font signature " + StringTools.hex(sign,8));
		}
		if(glyphs.h[32] == null) {
			var value = new h2d_FontChar(tile.sub(0,0,0,0),size >> 1);
			glyphs.h[32] = value;
		}
		this.font = new h2d_Font(name,size);
		this.font.glyphs = glyphs;
		this.font.lineHeight = lineHeight;
		this.font.tile = tile;
		var padding = 0;
		var space = glyphs.h[32];
		if(space != null) {
			padding = space.t.height >> 1;
		}
		var a = glyphs.h[65];
		if(a == null) {
			a = glyphs.h[97];
		}
		if(a == null) {
			a = glyphs.h[48];
		}
		if(a == null) {
			this.font.baseLine = this.font.lineHeight - 2 - padding;
		} else {
			this.font.baseLine = a.t.dy + a.t.height - padding;
		}
		return this.font;
	}
	,__class__: hxd_res_BitmapFont
});
var hxd_res_Font = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Font"] = hxd_res_Font;
hxd_res_Font.__name__ = ["hxd","res","Font"];
hxd_res_Font.__super__ = hxd_res_Resource;
hxd_res_Font.prototype = $extend(hxd_res_Resource.prototype,{
	build: function(size,options) {
		var _this_r = new RegExp("[^A-Za-z0-9_]","g".split("u").join(""));
		var name = "R_" + this.entry.get_path().replace(_this_r,"_");
		return hxd_res_FontBuilder.getFont(name,size,options);
	}
	,__class__: hxd_res_Font
});
var hxd_res_FontBuilder = function(name,size,opt) {
	this.font = new h2d_Font(name,size);
	this.options = opt == null ? { } : opt;
	if(this.options.antiAliasing == null) {
		this.options.antiAliasing = true;
	}
	if(this.options.chars == null) {
		this.options.chars = hxd_Charset.DEFAULT_CHARS;
	}
};
$hxClasses["hxd.res.FontBuilder"] = hxd_res_FontBuilder;
hxd_res_FontBuilder.__name__ = ["hxd","res","FontBuilder"];
hxd_res_FontBuilder.getFont = function(name,size,options) {
	var key = name + "#" + size;
	var _this = hxd_res_FontBuilder.FONTS;
	var f = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(f != null && f.tile.innerTex != null) {
		return f;
	}
	f = new hxd_res_FontBuilder(name,size,options).build();
	var _this1 = hxd_res_FontBuilder.FONTS;
	if(__map_reserved[key] != null) {
		_this1.setReserved(key,f);
	} else {
		_this1.h[key] = f;
	}
	return f;
};
hxd_res_FontBuilder.dispose = function() {
	var _this = hxd_res_FontBuilder.FONTS;
	var f = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(f.hasNext()) {
		var f1 = f.next();
		f1.dispose();
	}
	hxd_res_FontBuilder.FONTS = new haxe_ds_StringMap();
};
hxd_res_FontBuilder.prototype = {
	build: function() {
		var bmp = window.document.createElement("canvas");
		var ctx = bmp.getContext("2d",null);
		ctx.font = "" + this.font.size + "px " + this.font.name;
		ctx.textAlign = "left";
		ctx.textBaseline = "top";
		this.font.lineHeight = 0;
		var surf = 0;
		var sizes = [];
		var _g1 = 0;
		var _g = this.options.chars.length;
		while(_g1 < _g) {
			var i = _g1++;
			var textChar = this.options.chars.charAt(i);
			var w = Math.ceil(ctx.measureText(textChar).width) + 1;
			if(w == 1) {
				continue;
			}
			var h = this.font.size + 5;
			surf += (w + 1) * (h + 1);
			if(h > this.font.lineHeight) {
				this.font.lineHeight = h;
			}
			sizes[i] = { w : w, h : h};
		}
		var side = Math.ceil(Math.sqrt(surf));
		var width = 1;
		while(side > width) width <<= 1;
		var height = width;
		while(width * height >> 1 > surf) height >>= 1;
		var all;
		var done;
		while(true) {
			done = true;
			bmp.width = width;
			bmp.height = height;
			ctx.font = "" + this.font.size + "px " + this.font.name;
			ctx.textAlign = "left";
			ctx.textBaseline = "top";
			ctx.fillStyle = "red";
			this.font.glyphs = new haxe_ds_IntMap();
			all = [];
			var x = 0;
			var y = 0;
			var lineH = 0;
			var _g11 = 0;
			var _g2 = this.options.chars.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var size = sizes[i1];
				if(size == null) {
					continue;
				}
				var w1 = size.w;
				var h1 = size.h;
				if(x + w1 > width) {
					x = 0;
					y += lineH + 1;
				}
				if(y + h1 > height) {
					done = false;
					height <<= 1;
					break;
				}
				ctx.fillStyle = "black";
				ctx.globalAlpha = 0.0;
				ctx.fillRect(x,y,w1,h1);
				ctx.globalAlpha = 1.0;
				ctx.fillStyle = "white";
				ctx.fillText(this.options.chars.charAt(i1),x,y);
				var t = new h2d_Tile(this.innerTex,x,y,w1 - 1,h1 - 1);
				all.push(t);
				var this1 = this.font.glyphs;
				var key = HxOverrides.cca(this.options.chars,i1);
				var value = new h2d_FontChar(t,w1 - 1);
				this1.h[key] = value;
				if(h1 > lineH) {
					lineH = h1;
				}
				x += w1 + 1;
			}
			if(!(!done)) {
				break;
			}
		}
		var rbmp = hxd_BitmapData.fromNative(ctx);
		if(this.innerTex == null) {
			this.innerTex = h3d_mat_Texture.fromBitmap(rbmp);
			this.font.tile = h2d_Tile.fromTexture(this.innerTex);
			var _g3 = 0;
			while(_g3 < all.length) {
				var t1 = all[_g3];
				++_g3;
				t1.setTexture(this.innerTex);
			}
			this.innerTex.realloc = $bind(this,this.build);
		} else {
			this.innerTex.uploadBitmap(rbmp);
		}
		return this.font;
	}
	,__class__: hxd_res_FontBuilder
};
var hxd_res_Gradients = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Gradients"] = hxd_res_Gradients;
hxd_res_Gradients.__name__ = ["hxd","res","Gradients"];
hxd_res_Gradients.createTexture = function(grads,twid) {
	if((twid & twid - 1) != 0) {
		throw new js__$Boot_HaxeError("gradient resolution should be a power of two");
	}
	var ghei = grads.length > 1 ? 3 : 1;
	var v = ghei * grads.length;
	--v;
	v |= v >> 1;
	v |= v >> 2;
	v |= v >> 4;
	v |= v >> 8;
	v |= v >> 16;
	var thei = ++v;
	var tex = new h3d_mat_Texture(twid,thei);
	var uploadPixels = function() {
		var pixels = hxd_Pixels.alloc(twid,thei,hxd_PixelFormat.ARGB);
		var yoff = 0;
		var _g = 0;
		while(_g < grads.length) {
			var g = grads[_g];
			++_g;
			hxd_res_Gradients.appendPixels(pixels,g,tex.width,ghei,yoff);
			yoff += ghei;
		}
		tex.uploadPixels(pixels);
		pixels.dispose();
	};
	uploadPixels();
	tex.realloc = uploadPixels;
	return tex;
};
hxd_res_Gradients.isPOT = function(v) {
	return (v & v - 1) == 0;
};
hxd_res_Gradients.nextPOT = function(v) {
	--v;
	v |= v >> 1;
	v |= v >> 2;
	v |= v >> 4;
	v |= v >> 8;
	v |= v >> 16;
	return ++v;
};
hxd_res_Gradients.appendPixels = function(pixels,dat,wid,hei,yoff) {
	var colors = [];
	var _g = 0;
	var _g1 = dat.gradientStops;
	while(_g < _g1.length) {
		var cs = _g1[_g];
		++_g;
		var color;
		var _g2 = cs.colorStop.color;
		switch(_g2[1]) {
		case 0:
			var b = _g2[4];
			var g = _g2[3];
			var r = _g2[2];
			color = new h3d_Vector(r / 255,g / 255,b / 255);
			break;
		case 1:
			var b1 = _g2[4];
			var s = _g2[3];
			var h = _g2[2];
			color = hxd_res_Gradients.HSVtoRGB(h,s / 100,b1 / 100);
			break;
		}
		color.w = cs.opacity / 100;
		colors.push({ value : color, loc : (wid - 1) * cs.colorStop.location / dat.interpolation | 0});
	}
	colors.sort(function(a,b2) {
		return a.loc - b2.loc;
	});
	if(colors[0].loc > 0) {
		colors.unshift({ value : colors[0].value, loc : 0});
	}
	if(colors[colors.length - 1].loc < wid - 1) {
		colors.push({ value : colors[colors.length - 1].value, loc : wid - 1});
	}
	var px = 0;
	var ci = 0;
	var tmpCol_z;
	var tmpCol_y;
	var tmpCol_x;
	var tmpCol_w;
	tmpCol_x = 0.;
	tmpCol_y = 0.;
	tmpCol_z = 0.;
	tmpCol_w = 1.;
	while(px < wid) {
		var prevLoc = colors[ci].loc;
		var nextLoc = colors[ci + 1].loc;
		var prevCol = colors[ci].value;
		var nextCol = colors[ci + 1].value;
		while(px <= nextLoc) {
			var k = (px - prevLoc) / (nextLoc - prevLoc);
			var a1 = prevCol.x;
			var x = a1 + k * (nextCol.x - a1);
			var a2 = prevCol.y;
			var y = a2 + k * (nextCol.y - a2);
			var a3 = prevCol.z;
			var z = a3 + k * (nextCol.z - a3);
			var a4 = prevCol.w;
			var w = a4 + k * (nextCol.w - a4);
			tmpCol_x = x;
			tmpCol_y = y;
			tmpCol_z = z;
			tmpCol_w = w;
			var _g11 = 0;
			var _g3 = hei;
			while(_g11 < _g3) {
				var py = _g11++;
				var f = tmpCol_w;
				var f1 = tmpCol_x;
				var f2 = tmpCol_y;
				var f3 = tmpCol_z;
				pixels.setPixel(px,yoff + py,((f < 0. ? 0. : f > 1. ? 1. : f) * 255 + 0.499 | 0) << 24 | ((f1 < 0. ? 0. : f1 > 1. ? 1. : f1) * 255 + 0.499 | 0) << 16 | ((f2 < 0. ? 0. : f2 > 1. ? 1. : f2) * 255 + 0.499 | 0) << 8 | ((f3 < 0. ? 0. : f3 > 1. ? 1. : f3) * 255 + 0.499 | 0));
			}
			++px;
		}
		++ci;
	}
};
hxd_res_Gradients.HSVtoRGB = function(h,s,v) {
	var i;
	var f;
	var p;
	var q;
	var t;
	if(s == 0) {
		return new h3d_Vector(v,v,v);
	}
	h /= 60;
	i = Math.floor(h);
	f = h - i;
	p = v * (1 - s);
	q = v * (1 - s * f);
	t = v * (1 - s * (1 - f));
	switch(i) {
	case 0:
		return new h3d_Vector(v,t,p);
	case 1:
		return new h3d_Vector(q,v,p);
	case 2:
		return new h3d_Vector(p,v,t);
	case 3:
		return new h3d_Vector(p,q,v);
	case 4:
		return new h3d_Vector(t,p,v);
	default:
		return new h3d_Vector(v,p,q);
	}
};
hxd_res_Gradients.__super__ = hxd_res_Resource;
hxd_res_Gradients.prototype = $extend(hxd_res_Resource.prototype,{
	toTexture: function(name,resolution) {
		if(resolution == null) {
			resolution = 256;
		}
		var data = this.getData();
		return hxd_res_Gradients.createTexture([__map_reserved[name] != null ? data.getReserved(name) : data.h[name]],resolution);
	}
	,toTextureMap: function(resolution) {
		if(resolution == null) {
			resolution = 256;
		}
		var map = new haxe_ds_StringMap();
		var data = this.getData();
		var d = new haxe_ds__$StringMap_StringMapIterator(data,data.arrayKeys());
		while(d.hasNext()) {
			var d1 = d.next();
			var key = d1.name;
			var value = hxd_res_Gradients.createTexture([d1],resolution);
			if(__map_reserved[key] != null) {
				map.setReserved(key,value);
			} else {
				map.h[key] = value;
			}
		}
		return map;
	}
	,toTileMap: function(resolution) {
		if(resolution == null) {
			resolution = 256;
		}
		var data = this.getData();
		var _g = [];
		var d = new haxe_ds__$StringMap_StringMapIterator(data,data.arrayKeys());
		while(d.hasNext()) {
			var d1 = d.next();
			_g.push(d1);
		}
		var grads = _g;
		var tex = hxd_res_Gradients.createTexture(grads,resolution);
		var tile = h2d_Tile.fromTexture(tex);
		var map = new haxe_ds_StringMap();
		var y = 1;
		var _g1 = 0;
		while(_g1 < grads.length) {
			var d2 = grads[_g1];
			++_g1;
			var key = d2.name;
			var value = tile.sub(0,y,resolution,1);
			if(__map_reserved[key] != null) {
				map.setReserved(key,value);
			} else {
				map.h[key] = value;
			}
			y += 3;
		}
		return map;
	}
	,getData: function() {
		if(this.data != null) {
			return this.data;
		}
		this.data = new hxd_fmt_grd_Reader(new hxd_fs_FileInput(this.entry)).read();
		return this.data;
	}
	,__class__: hxd_res_Gradients
});
var hxd_res__$Image_ImageFormat_$Impl_$ = {};
$hxClasses["hxd.res._Image.ImageFormat_Impl_"] = hxd_res__$Image_ImageFormat_$Impl_$;
hxd_res__$Image_ImageFormat_$Impl_$.__name__ = ["hxd","res","_Image","ImageFormat_Impl_"];
hxd_res__$Image_ImageFormat_$Impl_$.get_useAsyncDecode = function(this1) {
	return this1 == 0;
};
hxd_res__$Image_ImageFormat_$Impl_$.toInt = function(this1) {
	return this1;
};
var hxd_res_Image = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Image"] = hxd_res_Image;
hxd_res_Image.__name__ = ["hxd","res","Image"];
hxd_res_Image.__super__ = hxd_res_Resource;
hxd_res_Image.prototype = $extend(hxd_res_Resource.prototype,{
	getFormat: function() {
		this.getSize();
		return this.inf.format;
	}
	,getSize: function() {
		if(this.inf != null) {
			return this.inf;
		}
		var f = new hxd_fs_FileInput(this.entry);
		var width = 0;
		var height = 0;
		var format;
		var head;
		try {
			head = f.readUInt16();
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,haxe_io_Eof) ) {
				head = 0;
			} else throw(e);
		}
		switch(head) {
		case 18759:
			format = 2;
			f.readInt32();
			width = f.readUInt16();
			height = f.readUInt16();
			break;
		case 20617:
			format = 1;
			f.set_bigEndian(true);
			f.skip(6);
			while(true) {
				var dataLen = f.readInt32();
				if(f.readInt32() == 1229472850) {
					width = f.readInt32();
					height = f.readInt32();
					break;
				}
				f.skip(dataLen + 4);
			}
			break;
		case 55551:
			format = 0;
			f.set_bigEndian(true);
			try {
				while(true) {
					var _g = f.readUInt16();
					switch(_g) {
					case 65472:case 65474:
						var len = f.readUInt16();
						var prec = f.readByte();
						height = f.readUInt16();
						width = f.readUInt16();
						throw "__break__";
						break;
					default:
						f.skip(f.readUInt16() - 2);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported texture format " + this.entry.get_path());
		}
		f.close();
		this.inf = { width : width, height : height, format : format};
		return this.inf;
	}
	,getPixels: function(fmt,flipY) {
		this.getSize();
		var pixels;
		var _g = this.inf.format;
		switch(_g) {
		case 0:
			var bytes = this.entry.getBytes();
			var p;
			try {
				p = hxd_res_NanoJpeg.decode(bytes);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				throw new js__$Boot_HaxeError("Failed to decode JPG " + this.entry.get_path() + " (" + Std.string(e) + ")");
			}
			pixels = new hxd_Pixels(p.width,p.height,p.pixels,hxd_PixelFormat.BGRA);
			break;
		case 1:
			var bytes1 = this.entry.getBytes();
			var png = new format_png_Reader(new haxe_io_BytesInput(bytes1));
			png.checkCRC = false;
			pixels = hxd_Pixels.alloc(this.inf.width,this.inf.height,hxd_PixelFormat.BGRA);
			var pdata = png.read();
			try {
				format_png_Tools.extract32(pdata,pixels.bytes,flipY);
			} catch( e1 ) {
				hxd_impl_Tmp.freeMemory();
				format_png_Tools.extract32(pdata,pixels.bytes,flipY);
			}
			if(flipY) {
				pixels.flags |= 1 << hxd_Flags.FlipY[1];
			}
			break;
		case 2:
			var bytes2 = this.entry.getBytes();
			var gif = new format_gif_Reader(new haxe_io_BytesInput(bytes2)).read();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullBGRA(gif,0),hxd_PixelFormat.BGRA);
			break;
		}
		if(fmt != null) {
			pixels.convert(fmt);
		}
		if(flipY != null) {
			pixels.setFlip(flipY);
		}
		return pixels;
	}
	,toBitmap: function() {
		this.getSize();
		var bmp = new hxd_BitmapData(this.inf.width,this.inf.height);
		var pixels = this.getPixels();
		bmp.setPixels(pixels);
		pixels.dispose();
		return bmp;
	}
	,watchCallb: function() {
		var w = this.inf.width;
		var h = this.inf.height;
		this.inf = null;
		var s = this.getSize();
		if(w != s.width || h != s.height) {
			this.tex.resize(w,h);
		}
		this.tex.realloc = null;
		this.loadTexture();
	}
	,loadTexture: function() {
		var _gthis = this;
		if(this.getFormat() != 0 && !hxd_res_Image.DEFAULT_ASYNC) {
			var load = function() {
				_gthis.tex.alloc();
				var pixels = _gthis.getPixels(h3d_mat_Texture.nativeFormat,false);
				if(pixels.width != _gthis.tex.width || pixels.height != _gthis.tex.height) {
					pixels.makeSquare();
				}
				_gthis.tex.uploadPixels(pixels);
				pixels.dispose();
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				_gthis.watch($bind(_gthis,_gthis.watchCallb));
			};
			if(this.entry.get_isAvailable()) {
				load();
			} else {
				this.entry.load(load);
			}
		} else {
			this.tex.flags |= 1 << h3d_mat_TextureFlags.Loading[1];
			this.entry.loadBitmap(function(bmp) {
				var bmp1 = hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toBitmap(bmp);
				_gthis.tex.alloc();
				if(bmp1.ctx.canvas.width != _gthis.tex.width || bmp1.ctx.canvas.height != _gthis.tex.height) {
					var pixels1 = bmp1.getPixels();
					pixels1.makeSquare();
					_gthis.tex.uploadPixels(pixels1);
					pixels1.dispose();
				} else {
					_gthis.tex.uploadBitmap(bmp1);
				}
				bmp1.ctx = null;
				bmp1.pixel = null;
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				_gthis.tex.flags &= -1 - (1 << h3d_mat_TextureFlags.Loading[1]);
				if(_gthis.tex.waitLoads != null) {
					var arr = _gthis.tex.waitLoads;
					_gthis.tex.waitLoads = null;
					var _g = 0;
					while(_g < arr.length) {
						var f = arr[_g];
						++_g;
						f();
					}
				}
				_gthis.watch($bind(_gthis,_gthis.watchCallb));
			});
		}
	}
	,toTexture: function() {
		if(this.tex != null) {
			return this.tex;
		}
		this.getSize();
		var width = this.inf.width;
		var height = this.inf.height;
		if(!hxd_res_Image.ALLOW_NPOT) {
			var tw = 1;
			var th = 1;
			while(tw < width) tw <<= 1;
			while(th < height) th <<= 1;
			width = tw;
			height = th;
		}
		this.tex = new h3d_mat_Texture(width,height,[h3d_mat_TextureFlags.NoAlloc]);
		if(hxd_res_Image.DEFAULT_FILTER != h3d_mat_Filter.Linear) {
			this.tex.set_filter(hxd_res_Image.DEFAULT_FILTER);
		}
		this.tex.setName(this.entry.get_path());
		this.loadTexture();
		return this.tex;
	}
	,toTile: function() {
		var size = this.getSize();
		return h2d_Tile.fromTexture(this.toTexture()).sub(0,0,size.width,size.height);
	}
	,__class__: hxd_res_Image
});
var hxd_res_Loader = function(fs) {
	this.fs = fs;
	this.cache = new haxe_ds_StringMap();
};
$hxClasses["hxd.res.Loader"] = hxd_res_Loader;
hxd_res_Loader.__name__ = ["hxd","res","Loader"];
hxd_res_Loader.prototype = {
	cleanCache: function() {
		this.cache = new haxe_ds_StringMap();
	}
	,exists: function(path) {
		return this.fs.exists(path);
	}
	,load: function(path) {
		return new hxd_res_Any(this,this.fs.get(path));
	}
	,loadModel: function(path) {
		var _this = this.cache;
		var m = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
		if(m == null) {
			m = new hxd_res_Model(this.fs.get(path));
			var _this1 = this.cache;
			if(__map_reserved[path] != null) {
				_this1.setReserved(path,m);
			} else {
				_this1.h[path] = m;
			}
		}
		return m;
	}
	,loadImage: function(path) {
		var _this = this.cache;
		var i = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
		if(i == null) {
			i = new hxd_res_Image(this.fs.get(path));
			var _this1 = this.cache;
			if(__map_reserved[path] != null) {
				_this1.setReserved(path,i);
			} else {
				_this1.h[path] = i;
			}
		}
		return i;
	}
	,loadSound: function(path) {
		var _this = this.cache;
		var s = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
		if(s == null) {
			s = new hxd_res_Sound(this.fs.get(path));
			var _this1 = this.cache;
			if(__map_reserved[path] != null) {
				_this1.setReserved(path,s);
			} else {
				_this1.h[path] = s;
			}
		}
		return s;
	}
	,loadFont: function(path) {
		return new hxd_res_Font(this.fs.get(path));
	}
	,loadBitmapFont: function(path) {
		var _this = this.cache;
		var f = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
		if(f == null) {
			f = new hxd_res_BitmapFont(this,this.fs.get(path));
			var _this1 = this.cache;
			if(__map_reserved[path] != null) {
				_this1.setReserved(path,f);
			} else {
				_this1.h[path] = f;
			}
		}
		return f;
	}
	,loadData: function(path) {
		return new hxd_res_Resource(this.fs.get(path));
	}
	,loadTiledMap: function(path) {
		return new hxd_res_TiledMap(this.fs.get(path));
	}
	,loadAtlas: function(path) {
		return new hxd_res_Atlas(this.fs.get(path));
	}
	,loadGradients: function(path) {
		var _this = this.cache;
		var g = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
		if(g == null) {
			g = new hxd_res_Gradients(this.fs.get(path));
			var _this1 = this.cache;
			if(__map_reserved[path] != null) {
				_this1.setReserved(path,g);
			} else {
				_this1.h[path] = g;
			}
		}
		return g;
	}
	,dispose: function() {
		this.cleanCache();
		this.fs.dispose();
	}
	,__class__: hxd_res_Loader
};
var hxd_res_Model = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Model"] = hxd_res_Model;
hxd_res_Model.__name__ = ["hxd","res","Model"];
hxd_res_Model.__super__ = hxd_res_Resource;
hxd_res_Model.prototype = $extend(hxd_res_Resource.prototype,{
	toHmd: function() {
		var hmd = new hxd_fmt_hmd_Reader(new hxd_fs_FileInput(this.entry)).readHeader();
		return new hxd_fmt_hmd_Library(this.entry,hmd);
	}
	,__class__: hxd_res_Model
});
var hxd_res_Filter = $hxClasses["hxd.res.Filter"] = { __ename__ : true, __constructs__ : ["Fast","Chromatic"] };
hxd_res_Filter.Fast = ["Fast",0];
hxd_res_Filter.Fast.toString = $estr;
hxd_res_Filter.Fast.__enum__ = hxd_res_Filter;
hxd_res_Filter.Chromatic = ["Chromatic",1];
hxd_res_Filter.Chromatic.toString = $estr;
hxd_res_Filter.Chromatic.__enum__ = hxd_res_Filter;
hxd_res_Filter.__empty_constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
var hxd_res__$NanoJpeg_FastBytes_$Impl_$ = {};
$hxClasses["hxd.res._NanoJpeg.FastBytes_Impl_"] = hxd_res__$NanoJpeg_FastBytes_$Impl_$;
hxd_res__$NanoJpeg_FastBytes_$Impl_$.__name__ = ["hxd","res","_NanoJpeg","FastBytes_Impl_"];
hxd_res__$NanoJpeg_FastBytes_$Impl_$._new = function(b) {
	var this1 = b;
	return this1;
};
hxd_res__$NanoJpeg_FastBytes_$Impl_$.get = function(this1,i) {
	return this1.b[i];
};
hxd_res__$NanoJpeg_FastBytes_$Impl_$.set = function(this1,i,v) {
	this1.b[i] = v & 255;
};
var hxd_res__$NanoJpeg_Component = function() {
};
$hxClasses["hxd.res._NanoJpeg.Component"] = hxd_res__$NanoJpeg_Component;
hxd_res__$NanoJpeg_Component.__name__ = ["hxd","res","_NanoJpeg","Component"];
hxd_res__$NanoJpeg_Component.prototype = {
	__class__: hxd_res__$NanoJpeg_Component
};
var hxd_res_NanoJpeg = function() {
	this.comps = [new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component()].slice(0);
	var this1 = new Array(64);
	var this2 = new Array(64);
	var this3 = new Array(64);
	var this4 = new Array(64);
	this.qtab = [this1,this2,this3,this4].slice(0);
	var this5 = new Array(16);
	this.counts = this5;
	var this6 = new Array(64);
	this.block = this6;
	this.njZZ = [0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63].slice(0);
	this.vlctab = [null,null,null,null,null,null,null,null].slice(0);
};
$hxClasses["hxd.res.NanoJpeg"] = hxd_res_NanoJpeg;
hxd_res_NanoJpeg.__name__ = ["hxd","res","NanoJpeg"];
hxd_res_NanoJpeg.CF = function(x) {
	var x1 = x + 64 >> 7;
	if(x1 < 0) {
		return 0;
	} else if(x1 > 255) {
		return 255;
	} else {
		return x1;
	}
};
hxd_res_NanoJpeg.njClip = function(x) {
	if(x < 0) {
		return 0;
	} else if(x > 255) {
		return 255;
	} else {
		return x;
	}
};
hxd_res_NanoJpeg.decode = function(bytes,filter,position,size) {
	if(size == null) {
		size = -1;
	}
	if(position == null) {
		position = 0;
	}
	if(hxd_res_NanoJpeg.inst == null) {
		hxd_res_NanoJpeg.inst = new hxd_res_NanoJpeg();
	}
	hxd_res_NanoJpeg.inst.njInit(bytes,position,size,filter);
	return hxd_res_NanoJpeg.inst.njDecode();
};
hxd_res_NanoJpeg.prototype = {
	alloc: function(nbytes) {
		return hxd_impl_Tmp.getBytes(nbytes);
	}
	,free: function(bytes) {
		hxd_impl_Tmp.saveBytes(bytes);
	}
	,njInit: function(bytes,pos,size,filter) {
		this.bytes = bytes;
		this.pos = pos;
		this.filter = filter == null ? hxd_res_Filter.Chromatic : filter;
		if(size < 0) {
			size = bytes.length - pos;
		}
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			if(this.vlctab[i] == null) {
				this.vlctab[i] = hxd_impl_Tmp.getBytes(131072);
			}
		}
		this.size = size;
		this.qtused = 0;
		this.qtavail = 0;
		this.rstinterval = 0;
		this.length = 0;
		this.buf = 0;
		this.bufbits = 0;
		this.progressive = false;
		var _g1 = 0;
		while(_g1 < 3) {
			var i1 = _g1++;
			this.comps[i1].dcpred = 0;
		}
	}
	,cleanup: function() {
		this.bytes = null;
		var _g = 0;
		var _g1 = this.comps;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.pixels != null) {
				hxd_impl_Tmp.saveBytes(c.pixels);
				c.pixels = null;
			}
		}
		var _g2 = 0;
		while(_g2 < 8) {
			var i = _g2++;
			if(this.vlctab[i] != null) {
				hxd_impl_Tmp.saveBytes(this.vlctab[i]);
				this.vlctab[i] = null;
			}
		}
	}
	,njSkip: function(count) {
		this.pos += count;
		this.size -= count;
		this.length -= count;
		var flag = this.size < 0;
	}
	,syntax: function(flag) {
	}
	,get: function(p) {
		return this.bytes.b[this.pos + p];
	}
	,njDecode16: function(p) {
		return this.bytes.b[this.pos + p] << 8 | this.bytes.b[this.pos + (p + 1)];
	}
	,njByteAlign: function() {
		this.bufbits &= 248;
	}
	,njShowBits: function(bits) {
		if(bits == 0) {
			return 0;
		}
		while(this.bufbits < bits) {
			if(this.size <= 0) {
				this.buf = this.buf << 8 | 255;
				this.bufbits += 8;
				continue;
			}
			var newbyte = this.bytes.b[this.pos];
			this.pos++;
			this.size--;
			this.bufbits += 8;
			this.buf = this.buf << 8 | newbyte;
			if(newbyte == 255) {
				var flag = this.size == 0;
				var marker = this.bytes.b[this.pos];
				this.pos++;
				this.size--;
				switch(marker) {
				case 217:
					this.size = 0;
					break;
				case 0:case 255:
					break;
				default:
					this.buf = this.buf << 8 | marker;
					this.bufbits += 8;
				}
			}
		}
		return this.buf >> this.bufbits - bits & (1 << bits) - 1;
	}
	,njSkipBits: function(bits) {
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
	}
	,njGetBits: function(bits) {
		var r = this.njShowBits(bits);
		this.bufbits -= bits;
		return r;
	}
	,njDecodeLength: function() {
		var flag = this.size < 2;
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var flag1 = this.length > this.size;
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		var flag2 = this.size < 0;
	}
	,njSkipMarker: function() {
		var flag = this.size < 2;
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var flag1 = this.length > this.size;
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		var flag2 = this.size < 0;
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		var flag3 = this.size < 0;
	}
	,njDecodeSOF: function() {
		var flag = this.size < 2;
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var flag1 = this.length > this.size;
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		var flag2 = this.size < 0;
		var flag3 = this.length < 9;
		if(this.bytes.b[this.pos] != 8) {
			this.notSupported();
		}
		this.height = this.bytes.b[this.pos + 1] << 8 | this.bytes.b[this.pos + 2];
		this.width = this.bytes.b[this.pos + 3] << 8 | this.bytes.b[this.pos + 4];
		this.ncomp = this.bytes.b[this.pos + 5];
		this.pos += 6;
		this.size -= 6;
		this.length -= 6;
		var flag4 = this.size < 0;
		var _g = this.ncomp;
		switch(_g) {
		case 1:case 3:
			break;
		default:
			this.notSupported();
		}
		var flag5 = this.length < this.ncomp * 3;
		var ssxmax = 0;
		var ssymax = 0;
		var _g2 = 0;
		var _g1 = this.ncomp;
		while(_g2 < _g1) {
			var i = _g2++;
			var c = this.comps[i];
			c.cid = this.bytes.b[this.pos];
			c.ssx = this.bytes.b[this.pos + 1] >> 4;
			var flag6 = c.ssx == 0;
			if((c.ssx & c.ssx - 1) != 0) {
				this.notSupported();
			}
			c.ssy = this.bytes.b[this.pos + 1] & 15;
			var flag7 = c.ssy == 0;
			if((c.ssy & c.ssy - 1) != 0) {
				this.notSupported();
			}
			c.qtsel = this.bytes.b[this.pos + 2];
			var flag8 = (c.qtsel & 252) != 0;
			this.pos += 3;
			this.size -= 3;
			this.length -= 3;
			var flag9 = this.size < 0;
			this.qtused |= 1 << c.qtsel;
			if(c.ssx > ssxmax) {
				ssxmax = c.ssx;
			}
			if(c.ssy > ssymax) {
				ssymax = c.ssy;
			}
		}
		if(this.ncomp == 1) {
			var c1 = this.comps[0];
			ssymax = 1;
			ssxmax = ssymax;
			c1.ssx = c1.ssy = ssxmax;
		}
		this.mbsizex = ssxmax << 3;
		this.mbsizey = ssymax << 3;
		this.mbwidth = (this.width + this.mbsizex - 1) / this.mbsizex | 0;
		this.mbheight = (this.height + this.mbsizey - 1) / this.mbsizey | 0;
		var _g21 = 0;
		var _g11 = this.ncomp;
		while(_g21 < _g11) {
			var i1 = _g21++;
			var c2 = this.comps[i1];
			c2.width = (this.width * c2.ssx + ssxmax - 1) / ssxmax | 0;
			c2.stride = c2.width + 7 & 2147483640;
			c2.height = (this.height * c2.ssy + ssymax - 1) / ssymax | 0;
			c2.stride = this.mbwidth * this.mbsizex * c2.ssx / ssxmax | 0;
			if(c2.width < 3 && c2.ssx != ssxmax || c2.height < 3 && c2.ssy != ssymax) {
				this.notSupported();
			}
			c2.pixels = hxd_impl_Tmp.getBytes(c2.stride * (this.mbheight * this.mbsizey * c2.ssy / ssymax | 0));
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		var flag10 = this.size < 0;
	}
	,njDecodeDQT: function() {
		var flag = this.size < 2;
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var flag1 = this.length > this.size;
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		var flag2 = this.size < 0;
		while(this.length >= 65) {
			var i = this.bytes.b[this.pos];
			this.qtavail |= 1 << i;
			var t = this.qtab[i];
			var _g = 0;
			while(_g < 64) {
				var k = _g++;
				t[k] = this.bytes.b[this.pos + (k + 1)];
			}
			this.pos += 65;
			this.size -= 65;
			this.length -= 65;
			var flag3 = this.size < 0;
		}
		var flag4 = this.length != 0;
	}
	,njDecodeDHT: function() {
		var flag = this.size < 2;
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var flag1 = this.length > this.size;
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		var flag2 = this.size < 0;
		while(this.length >= 17) {
			var i = this.bytes.b[this.pos];
			i = i >> 4 & 1 | (i & 3) << 1;
			var _g = 0;
			while(_g < 16) {
				var codelen = _g++;
				this.counts[codelen] = this.bytes.b[this.pos + (codelen + 1)];
			}
			this.pos += 17;
			this.size -= 17;
			this.length -= 17;
			var flag3 = this.size < 0;
			var vlc = this.vlctab[i];
			var vpos = 0;
			var remain = 65536;
			var spread = 65536;
			var _g1 = 1;
			while(_g1 < 17) {
				var codelen1 = _g1++;
				spread >>= 1;
				var currcnt = this.counts[codelen1 - 1];
				if(currcnt == 0) {
					continue;
				}
				var flag4 = this.length < currcnt;
				remain -= currcnt << 16 - codelen1;
				var _g2 = 0;
				var _g11 = currcnt;
				while(_g2 < _g11) {
					var i1 = _g2++;
					var code = this.bytes.b[this.pos + i1];
					var _g4 = 0;
					var _g3 = spread;
					while(_g4 < _g3) {
						var j = _g4++;
						vlc.b[vpos++] = codelen1 & 255;
						vlc.b[vpos++] = code & 255;
					}
				}
				this.pos += currcnt;
				this.size -= currcnt;
				this.length -= currcnt;
				var flag5 = this.size < 0;
			}
			while(remain-- != 0) {
				vlc.b[vpos] = 0;
				vpos += 2;
			}
		}
		var flag6 = this.length != 0;
	}
	,njDecodeDRI: function() {
		var flag = this.size < 2;
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var flag1 = this.length > this.size;
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		var flag2 = this.size < 0;
		var flag3 = this.length < 2;
		this.rstinterval = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		var flag4 = this.size < 0;
	}
	,njGetVLC: function(vlc) {
		var value = this.njShowBits(16);
		var bits = vlc.b[value << 1];
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value = vlc.b[value << 1 | 1];
		this.vlcCode = value;
		bits = value & 15;
		if(bits == 0) {
			return 0;
		}
		var r = this.njShowBits(bits);
		this.bufbits -= bits;
		value = r;
		if(value < 1 << bits - 1) {
			value += (-1 << bits) + 1;
		}
		return value;
	}
	,njRowIDCT: function(bp) {
		var x0;
		var x1;
		var x2;
		var x3;
		var x4;
		var x5;
		var x6;
		var x7;
		var x8;
		x1 = this.block[bp + 4] << 11;
		x2 = this.block[bp + 6];
		x3 = this.block[bp + 2];
		x4 = this.block[bp + 1];
		x5 = this.block[bp + 7];
		x6 = this.block[bp + 5];
		x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val2 = this.block[bp + 5] = val1;
			var val3 = this.block[bp + 4] = val2;
			var val4 = this.block[bp + 3] = val3;
			var val5 = this.block[bp + 2] = val4;
			var val6 = this.block[bp + 1] = val5;
			this.block[bp] = val6;
			return;
		}
		x0 = (this.block[bp] << 11) + 128;
		x8 = 565 * (x4 + x5);
		x4 = x8 + 2276 * x4;
		x5 = x8 - 3406 * x5;
		x8 = 2408 * (x6 + x7);
		x6 = x8 - 799 * x6;
		x7 = x8 - 4017 * x7;
		x8 = x0 + x1;
		x0 -= x1;
		x1 = 1108 * (x3 + x2);
		x2 = x1 - 3784 * x2;
		x3 = x1 + 1568 * x3;
		x1 = x4 + x6;
		x4 -= x6;
		x6 = x5 + x7;
		x5 -= x7;
		x7 = x8 + x3;
		x8 -= x3;
		x3 = x0 + x2;
		x0 -= x2;
		x2 = 181 * (x4 + x5) + 128 >> 8;
		x4 = 181 * (x4 - x5) + 128 >> 8;
		this.block[bp] = x7 + x1 >> 8;
		this.block[bp + 1] = x3 + x2 >> 8;
		this.block[bp + 2] = x0 + x4 >> 8;
		this.block[bp + 3] = x8 + x6 >> 8;
		this.block[bp + 4] = x8 - x6 >> 8;
		this.block[bp + 5] = x0 - x4 >> 8;
		this.block[bp + 6] = x3 - x2 >> 8;
		this.block[bp + 7] = x7 - x1 >> 8;
	}
	,njColIDCT: function(bp,out,po,stride) {
		var x0;
		var x1;
		var x2;
		var x3;
		var x4;
		var x5;
		var x6;
		var x7;
		var x8;
		x1 = this.block[bp + 32] << 8;
		x2 = this.block[bp + 48];
		x3 = this.block[bp + 16];
		x4 = this.block[bp + 8];
		x5 = this.block[bp + 56];
		x6 = this.block[bp + 40];
		x7 = this.block[bp + 24];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[bp] + 32 >> 6) + 128;
			if(x < 0) {
				x1 = 0;
			} else if(x > 255) {
				x1 = 255;
			} else {
				x1 = x;
			}
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				out.b[po] = x1 & 255;
				po += stride;
			}
			return;
		}
		x0 = (this.block[bp] << 8) + 8192;
		x8 = 565 * (x4 + x5) + 4;
		x4 = x8 + 2276 * x4 >> 3;
		x5 = x8 - 3406 * x5 >> 3;
		x8 = 2408 * (x6 + x7) + 4;
		x6 = x8 - 799 * x6 >> 3;
		x7 = x8 - 4017 * x7 >> 3;
		x8 = x0 + x1;
		x0 -= x1;
		x1 = 1108 * (x3 + x2) + 4;
		x2 = x1 - 3784 * x2 >> 3;
		x3 = x1 + 1568 * x3 >> 3;
		x1 = x4 + x6;
		x4 -= x6;
		x6 = x5 + x7;
		x5 -= x7;
		x7 = x8 + x3;
		x8 -= x3;
		x3 = x0 + x2;
		x0 -= x2;
		x2 = 181 * (x4 + x5) + 128 >> 8;
		x4 = 181 * (x4 - x5) + 128 >> 8;
		var x9 = (x7 + x1 >> 14) + 128;
		out.b[po] = (x9 < 0 ? 0 : x9 > 255 ? 255 : x9) & 255;
		po += stride;
		var x10 = (x3 + x2 >> 14) + 128;
		out.b[po] = (x10 < 0 ? 0 : x10 > 255 ? 255 : x10) & 255;
		po += stride;
		var x11 = (x0 + x4 >> 14) + 128;
		out.b[po] = (x11 < 0 ? 0 : x11 > 255 ? 255 : x11) & 255;
		po += stride;
		var x12 = (x8 + x6 >> 14) + 128;
		out.b[po] = (x12 < 0 ? 0 : x12 > 255 ? 255 : x12) & 255;
		po += stride;
		var x13 = (x8 - x6 >> 14) + 128;
		out.b[po] = (x13 < 0 ? 0 : x13 > 255 ? 255 : x13) & 255;
		po += stride;
		var x14 = (x0 - x4 >> 14) + 128;
		out.b[po] = (x14 < 0 ? 0 : x14 > 255 ? 255 : x14) & 255;
		po += stride;
		var x15 = (x3 - x2 >> 14) + 128;
		out.b[po] = (x15 < 0 ? 0 : x15 > 255 ? 255 : x15) & 255;
		po += stride;
		var x16 = (x7 - x1 >> 14) + 128;
		out.b[po] = (x16 < 0 ? 0 : x16 > 255 ? 255 : x16) & 255;
	}
	,njDecodeBlock: function(c,po) {
		var this1 = c.pixels;
		var out = this1;
		var value;
		var coef = 0;
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			this.block[i] = 0;
		}
		var c1 = c;
		var c2 = c1.dcpred;
		var vlc = this.vlctab[c.dctabsel];
		var value1 = this.njShowBits(16);
		var bits = vlc.b[value1 << 1];
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value1 = vlc.b[value1 << 1 | 1];
		this.vlcCode = value1;
		bits = value1 & 15;
		var tmp;
		if(bits == 0) {
			tmp = 0;
		} else {
			var r = this.njShowBits(bits);
			this.bufbits -= bits;
			value1 = r;
			if(value1 < 1 << bits - 1) {
				value1 += (-1 << bits) + 1;
			}
			tmp = value1;
		}
		c1.dcpred = c2 + tmp;
		var qt = this.qtab[c.qtsel];
		var at = this.vlctab[c.actabsel];
		this.block[0] = c.dcpred * qt[0];
		while(true) {
			var value2 = this.njShowBits(16);
			var bits1 = at.b[value2 << 1];
			if(this.bufbits < bits1) {
				this.njShowBits(bits1);
			}
			this.bufbits -= bits1;
			value2 = at.b[value2 << 1 | 1];
			this.vlcCode = value2;
			bits1 = value2 & 15;
			if(bits1 == 0) {
				value = 0;
			} else {
				var r1 = this.njShowBits(bits1);
				this.bufbits -= bits1;
				value2 = r1;
				if(value2 < 1 << bits1 - 1) {
					value2 += (-1 << bits1) + 1;
				}
				value = value2;
			}
			if(this.vlcCode == 0) {
				break;
			}
			var flag = (this.vlcCode & 15) == 0 && this.vlcCode != 240;
			coef += (this.vlcCode >> 4) + 1;
			this.block[this.njZZ[coef]] = value * qt[coef];
			if(!(coef < 63)) {
				break;
			}
		}
		var _g1 = 0;
		while(_g1 < 8) {
			var coef1 = _g1++;
			var bp = coef1 * 8;
			var x0;
			var x1;
			var x2;
			var x3;
			var x4;
			var x5;
			var x6;
			var x7;
			var x8;
			x1 = this.block[bp + 4] << 11;
			x2 = this.block[bp + 6];
			x3 = this.block[bp + 2];
			x4 = this.block[bp + 1];
			x5 = this.block[bp + 7];
			x6 = this.block[bp + 5];
			x7 = this.block[bp + 3];
			if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
				var val = this.block[bp + 7] = this.block[bp] << 3;
				var val1 = this.block[bp + 6] = val;
				var val2 = this.block[bp + 5] = val1;
				var val3 = this.block[bp + 4] = val2;
				var val4 = this.block[bp + 3] = val3;
				var val5 = this.block[bp + 2] = val4;
				var val6 = this.block[bp + 1] = val5;
				this.block[bp] = val6;
			} else {
				x0 = (this.block[bp] << 11) + 128;
				x8 = 565 * (x4 + x5);
				x4 = x8 + 2276 * x4;
				x5 = x8 - 3406 * x5;
				x8 = 2408 * (x6 + x7);
				x6 = x8 - 799 * x6;
				x7 = x8 - 4017 * x7;
				x8 = x0 + x1;
				x0 -= x1;
				x1 = 1108 * (x3 + x2);
				x2 = x1 - 3784 * x2;
				x3 = x1 + 1568 * x3;
				x1 = x4 + x6;
				x4 -= x6;
				x6 = x5 + x7;
				x5 -= x7;
				x7 = x8 + x3;
				x8 -= x3;
				x3 = x0 + x2;
				x0 -= x2;
				x2 = 181 * (x4 + x5) + 128 >> 8;
				x4 = 181 * (x4 - x5) + 128 >> 8;
				this.block[bp] = x7 + x1 >> 8;
				this.block[bp + 1] = x3 + x2 >> 8;
				this.block[bp + 2] = x0 + x4 >> 8;
				this.block[bp + 3] = x8 + x6 >> 8;
				this.block[bp + 4] = x8 - x6 >> 8;
				this.block[bp + 5] = x0 - x4 >> 8;
				this.block[bp + 6] = x3 - x2 >> 8;
				this.block[bp + 7] = x7 - x1 >> 8;
			}
		}
		var _g2 = 0;
		while(_g2 < 8) {
			var coef2 = _g2++;
			var po1 = coef2 + po;
			var stride = c.stride;
			var x01;
			var x11;
			var x21;
			var x31;
			var x41;
			var x51;
			var x61;
			var x71;
			var x81;
			x11 = this.block[coef2 + 32] << 8;
			x21 = this.block[coef2 + 48];
			x31 = this.block[coef2 + 16];
			x41 = this.block[coef2 + 8];
			x51 = this.block[coef2 + 56];
			x61 = this.block[coef2 + 40];
			x71 = this.block[coef2 + 24];
			if((x11 | x21 | x31 | x41 | x51 | x61 | x71) == 0) {
				var x = (this.block[coef2] + 32 >> 6) + 128;
				if(x < 0) {
					x11 = 0;
				} else if(x > 255) {
					x11 = 255;
				} else {
					x11 = x;
				}
				var _g3 = 0;
				while(_g3 < 8) {
					var i1 = _g3++;
					out.b[po1] = x11 & 255;
					po1 += stride;
				}
			} else {
				x01 = (this.block[coef2] << 8) + 8192;
				x81 = 565 * (x41 + x51) + 4;
				x41 = x81 + 2276 * x41 >> 3;
				x51 = x81 - 3406 * x51 >> 3;
				x81 = 2408 * (x61 + x71) + 4;
				x61 = x81 - 799 * x61 >> 3;
				x71 = x81 - 4017 * x71 >> 3;
				x81 = x01 + x11;
				x01 -= x11;
				x11 = 1108 * (x31 + x21) + 4;
				x21 = x11 - 3784 * x21 >> 3;
				x31 = x11 + 1568 * x31 >> 3;
				x11 = x41 + x61;
				x41 -= x61;
				x61 = x51 + x71;
				x51 -= x71;
				x71 = x81 + x31;
				x81 -= x31;
				x31 = x01 + x21;
				x01 -= x21;
				x21 = 181 * (x41 + x51) + 128 >> 8;
				x41 = 181 * (x41 - x51) + 128 >> 8;
				var x9 = (x71 + x11 >> 14) + 128;
				out.b[po1] = (x9 < 0 ? 0 : x9 > 255 ? 255 : x9) & 255;
				po1 += stride;
				var x10 = (x31 + x21 >> 14) + 128;
				out.b[po1] = (x10 < 0 ? 0 : x10 > 255 ? 255 : x10) & 255;
				po1 += stride;
				var x12 = (x01 + x41 >> 14) + 128;
				out.b[po1] = (x12 < 0 ? 0 : x12 > 255 ? 255 : x12) & 255;
				po1 += stride;
				var x13 = (x81 + x61 >> 14) + 128;
				out.b[po1] = (x13 < 0 ? 0 : x13 > 255 ? 255 : x13) & 255;
				po1 += stride;
				var x14 = (x81 - x61 >> 14) + 128;
				out.b[po1] = (x14 < 0 ? 0 : x14 > 255 ? 255 : x14) & 255;
				po1 += stride;
				var x15 = (x01 - x41 >> 14) + 128;
				out.b[po1] = (x15 < 0 ? 0 : x15 > 255 ? 255 : x15) & 255;
				po1 += stride;
				var x16 = (x31 - x21 >> 14) + 128;
				out.b[po1] = (x16 < 0 ? 0 : x16 > 255 ? 255 : x16) & 255;
				po1 += stride;
				var x17 = (x71 - x11 >> 14) + 128;
				out.b[po1] = (x17 < 0 ? 0 : x17 > 255 ? 255 : x17) & 255;
			}
		}
	}
	,notSupported: function() {
		throw new js__$Boot_HaxeError("This JPG file is not supported");
	}
	,njDecodeScan: function() {
		var flag = this.size < 2;
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var flag1 = this.length > this.size;
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		var flag2 = this.size < 0;
		var flag3 = this.length < 4 + 2 * this.ncomp;
		if(this.bytes.b[this.pos] != this.ncomp) {
			this.notSupported();
		}
		this.pos += 1;
		this.size -= 1;
		this.length -= 1;
		var flag4 = this.size < 0;
		var _g1 = 0;
		var _g = this.ncomp;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.comps[i];
			var flag5 = this.bytes.b[this.pos] != c.cid;
			var flag6 = (this.bytes.b[this.pos + 1] & 236) != 0;
			c.dctabsel = this.bytes.b[this.pos + 1] >> 4 << 1;
			c.actabsel = (this.bytes.b[this.pos + 1] & 3) << 1 | 1;
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			var flag7 = this.size < 0;
		}
		var start = this.bytes.b[this.pos];
		var count = this.bytes.b[this.pos + 1];
		var other = this.bytes.b[this.pos + 2];
		if(!this.progressive && start != 0 || count != 63 - start || other != 0) {
			this.notSupported();
		}
		var count1 = this.length;
		this.pos += count1;
		this.size -= count1;
		this.length -= count1;
		var flag8 = this.size < 0;
		var mbx = 0;
		var mby = 0;
		var rstcount = this.rstinterval;
		var nextrst = 0;
		while(true) {
			var _g11 = 0;
			var _g2 = this.ncomp;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var c1 = this.comps[i1];
				var _g3 = 0;
				var _g21 = c1.ssy;
				while(_g3 < _g21) {
					var sby = _g3++;
					var _g5 = 0;
					var _g4 = c1.ssx;
					while(_g5 < _g4) {
						var sbx = _g5++;
						this.njDecodeBlock(c1,(mby * c1.ssy + sby) * c1.stride + mbx * c1.ssx + sbx << 3);
					}
				}
			}
			if(++mbx >= this.mbwidth) {
				mbx = 0;
				if(++mby >= this.mbheight) {
					break;
				}
			}
			if(this.rstinterval != 0 && --rstcount == 0) {
				this.bufbits &= 248;
				var r = this.njShowBits(16);
				this.bufbits -= 16;
				var i2 = r;
				nextrst = nextrst + 1 & 7;
				rstcount = this.rstinterval;
				var _g6 = 0;
				while(_g6 < 3) {
					var i3 = _g6++;
					this.comps[i3].dcpred = 0;
				}
			}
		}
	}
	,njUpsampleH: function(c) {
		var xmax = c.width - 3;
		var cout = hxd_impl_Tmp.getBytes(c.width * c.height << 1);
		var this1 = cout;
		var lout = this1;
		var this2 = c.pixels;
		var lin = this2;
		var pi = 0;
		var po = 0;
		var _g1 = 0;
		var _g = c.height;
		while(_g1 < _g) {
			var y = _g1++;
			var x = 139 * lin.b[pi] + -11 * lin.b[pi + 1] + 64 >> 7;
			lout.b[po] = (x < 0 ? 0 : x > 255 ? 255 : x) & 255;
			var x1 = 104 * lin.b[pi] + 27 * lin.b[pi + 1] + -3 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 1] = (x1 < 0 ? 0 : x1 > 255 ? 255 : x1) & 255;
			var x2 = 28 * lin.b[pi] + 109 * lin.b[pi + 1] + -9 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 2] = (x2 < 0 ? 0 : x2 > 255 ? 255 : x2) & 255;
			var _g3 = 0;
			var _g2 = xmax;
			while(_g3 < _g2) {
				var x3 = _g3++;
				var x4 = -9 * lin.b[pi + x3] + 111 * lin.b[pi + x3 + 1] + 29 * lin.b[pi + x3 + 2] + -3 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 3] = (x4 < 0 ? 0 : x4 > 255 ? 255 : x4) & 255;
				var x5 = -3 * lin.b[pi + x3] + 29 * lin.b[pi + x3 + 1] + 111 * lin.b[pi + x3 + 2] + -9 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 4] = (x5 < 0 ? 0 : x5 > 255 ? 255 : x5) & 255;
			}
			pi += c.stride;
			po += c.width << 1;
			var x6 = 28 * lin.b[pi - 1] + 109 * lin.b[pi - 2] + -9 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 3] = (x6 < 0 ? 0 : x6 > 255 ? 255 : x6) & 255;
			var x7 = 104 * lin.b[pi - 1] + 27 * lin.b[pi - 2] + -3 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 2] = (x7 < 0 ? 0 : x7 > 255 ? 255 : x7) & 255;
			var x8 = 139 * lin.b[pi - 1] + -11 * lin.b[pi - 2] + 64 >> 7;
			lout.b[po - 1] = (x8 < 0 ? 0 : x8 > 255 ? 255 : x8) & 255;
		}
		c.width <<= 1;
		c.stride = c.width;
		hxd_impl_Tmp.saveBytes(c.pixels);
		c.pixels = cout;
	}
	,njUpsampleV: function(c) {
		var w = c.width;
		var s1 = c.stride;
		var s2 = s1 + s1;
		var out = hxd_impl_Tmp.getBytes(c.width * c.height << 1);
		var pi = 0;
		var po = 0;
		var this1 = out;
		var cout = this1;
		var this2 = c.pixels;
		var cin = this2;
		var _g1 = 0;
		var _g = w;
		while(_g1 < _g) {
			var x = _g1++;
			po = x;
			pi = po;
			var x1 = 139 * cin.b[pi] + -11 * cin.b[pi + s1] + 64 >> 7;
			cout.b[po] = (x1 < 0 ? 0 : x1 > 255 ? 255 : x1) & 255;
			po += w;
			var x2 = 104 * cin.b[pi] + 27 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = (x2 < 0 ? 0 : x2 > 255 ? 255 : x2) & 255;
			po += w;
			var x3 = 28 * cin.b[pi] + 109 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = (x3 < 0 ? 0 : x3 > 255 ? 255 : x3) & 255;
			po += w;
			pi += s1;
			var _g3 = 0;
			var _g2 = c.height - 2;
			while(_g3 < _g2) {
				var y = _g3++;
				var x4 = -9 * cin.b[pi - s1] + 111 * cin.b[pi] + 29 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = (x4 < 0 ? 0 : x4 > 255 ? 255 : x4) & 255;
				po += w;
				var x5 = -3 * cin.b[pi - s1] + 29 * cin.b[pi] + 111 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = (x5 < 0 ? 0 : x5 > 255 ? 255 : x5) & 255;
				po += w;
				pi += s1;
			}
			pi += s1;
			var x6 = 28 * cin.b[pi] + 109 * cin.b[pi - s1] + -9 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = (x6 < 0 ? 0 : x6 > 255 ? 255 : x6) & 255;
			po += w;
			var x7 = 104 * cin.b[pi] + 27 * cin.b[pi - s1] + -3 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = (x7 < 0 ? 0 : x7 > 255 ? 255 : x7) & 255;
			po += w;
			var x8 = 139 * cin.b[pi] + -11 * cin.b[pi - s1] + 64 >> 7;
			cout.b[po] = (x8 < 0 ? 0 : x8 > 255 ? 255 : x8) & 255;
		}
		c.height <<= 1;
		c.stride = c.width;
		hxd_impl_Tmp.saveBytes(c.pixels);
		c.pixels = out;
	}
	,njUpsample: function(c) {
		var xshift = 0;
		var yshift = 0;
		while(c.width < this.width) {
			c.width <<= 1;
			++xshift;
		}
		while(c.height < this.height) {
			c.height <<= 1;
			++yshift;
		}
		var out = hxd_impl_Tmp.getBytes(c.width * c.height);
		var this1 = c.pixels;
		var lin = this1;
		var pout = 0;
		var this2 = out;
		var lout = this2;
		var _g1 = 0;
		var _g = c.height;
		while(_g1 < _g) {
			var y = _g1++;
			var pin = (y >> yshift) * c.stride;
			var _g3 = 0;
			var _g2 = c.width;
			while(_g3 < _g2) {
				var x = _g3++;
				lout.b[pout++] = lin.b[(x >> xshift) + pin] & 255;
			}
		}
		c.stride = c.width;
		hxd_impl_Tmp.saveBytes(c.pixels);
		c.pixels = out;
	}
	,njConvert: function() {
		var _g1 = 0;
		var _g = this.ncomp;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.comps[i];
			var _g2 = this.filter;
			switch(_g2[1]) {
			case 0:
				if(c.width < this.width || c.height < this.height) {
					this.njUpsample(c);
				}
				break;
			case 1:
				while(c.width < this.width || c.height < this.height) {
					if(c.width < this.width) {
						this.njUpsampleH(c);
					}
					if(c.height < this.height) {
						this.njUpsampleV(c);
					}
				}
				break;
			}
			if(c.width < this.width || c.height < this.height) {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var pixels = hxd_impl_Tmp.getBytes(this.width * this.height * 4);
		if(this.ncomp == 3) {
			var this1 = this.comps[0].pixels;
			var py = this1;
			var this2 = this.comps[1].pixels;
			var pcb = this2;
			var this3 = this.comps[2].pixels;
			var pcr = this3;
			var this4 = pixels;
			var pix = this4;
			var k1 = 0;
			var k2 = 0;
			var k3 = 0;
			var out = 0;
			var _g11 = 0;
			var _g3 = this.height;
			while(_g11 < _g3) {
				var yy = _g11++;
				var _g31 = 0;
				var _g21 = this.width;
				while(_g31 < _g21) {
					var x = _g31++;
					var y = py.b[k1++] << 8;
					var cb = pcb.b[k2++] - 128;
					var cr = pcr.b[k3++] - 128;
					var x1 = y + 359 * cr + 128 >> 8;
					var r = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
					var x2 = y - 88 * cb - 183 * cr + 128 >> 8;
					var g = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
					var x3 = y + 454 * cb + 128 >> 8;
					var b = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
					pix.b[out++] = b & 255;
					pix.b[out++] = g & 255;
					pix.b[out++] = r & 255;
					pix.b[out++] = 255;
				}
				k1 += this.comps[0].stride - this.width;
				k2 += this.comps[1].stride - this.width;
				k3 += this.comps[2].stride - this.width;
			}
		} else {
			throw new js__$Boot_HaxeError("TODO");
		}
		return pixels;
	}
	,njDecode: function() {
		if(this.size < 2 || this.bytes.b[this.pos] != 255 || this.bytes.b[this.pos + 1] != 216) {
			throw new js__$Boot_HaxeError("This file is not a JPEG");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		var flag = this.size < 0;
		try {
			while(true) {
				var flag1 = this.size < 2 || this.bytes.b[this.pos] != 255;
				this.pos += 2;
				this.size -= 2;
				this.length -= 2;
				var flag2 = this.size < 0;
				var _g = this.bytes.b[this.pos + -1];
				switch(_g) {
				case 192:
					this.njDecodeSOF();
					break;
				case 194:
					this.progressive = true;
					if(this.progressive) {
						throw new js__$Boot_HaxeError("Unsupported progressive JPG");
					}
					var _g1 = 4;
					while(_g1 < 8) {
						var i = _g1++;
						if(this.vlctab[i] == null) {
							this.vlctab[i] = hxd_impl_Tmp.getBytes(131072);
						}
					}
					this.njDecodeSOF();
					break;
				case 195:
					throw new js__$Boot_HaxeError("Unsupported lossless JPG");
					break;
				case 196:
					this.njDecodeDHT();
					break;
				case 218:
					this.njDecodeScan();
					throw "__break__";
					break;
				case 219:
					this.njDecodeDQT();
					break;
				case 221:
					this.njDecodeDRI();
					break;
				case 254:
					var flag3 = this.size < 2;
					this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
					var flag4 = this.length > this.size;
					this.pos += 2;
					this.size -= 2;
					this.length -= 2;
					var flag5 = this.size < 0;
					var count = this.length;
					this.pos += count;
					this.size -= count;
					this.length -= count;
					var flag6 = this.size < 0;
					break;
				default:
					var _g2 = this.bytes.b[this.pos + -1] & 240;
					switch(_g2) {
					case 192:
						throw new js__$Boot_HaxeError("Unsupported jpeg type " + (this.bytes.b[this.pos + -1] & 15));
						break;
					case 224:
						var flag7 = this.size < 2;
						this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
						var flag8 = this.length > this.size;
						this.pos += 2;
						this.size -= 2;
						this.length -= 2;
						var flag9 = this.size < 0;
						var count1 = this.length;
						this.pos += count1;
						this.size -= count1;
						this.length -= count1;
						var flag10 = this.size < 0;
						break;
					default:
						throw new js__$Boot_HaxeError("Unsupported jpeg tag 0x" + StringTools.hex(this.bytes.b[this.pos + -1],2));
					}
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		var pixels = this.njConvert();
		this.cleanup();
		return { pixels : pixels, width : this.width, height : this.height};
	}
	,__class__: hxd_res_NanoJpeg
};
var hxd_res_SoundFormat = $hxClasses["hxd.res.SoundFormat"] = { __ename__ : true, __constructs__ : ["Wav","Mp3","OggVorbis"] };
hxd_res_SoundFormat.Wav = ["Wav",0];
hxd_res_SoundFormat.Wav.toString = $estr;
hxd_res_SoundFormat.Wav.__enum__ = hxd_res_SoundFormat;
hxd_res_SoundFormat.Mp3 = ["Mp3",1];
hxd_res_SoundFormat.Mp3.toString = $estr;
hxd_res_SoundFormat.Mp3.__enum__ = hxd_res_SoundFormat;
hxd_res_SoundFormat.OggVorbis = ["OggVorbis",2];
hxd_res_SoundFormat.OggVorbis.toString = $estr;
hxd_res_SoundFormat.OggVorbis.__enum__ = hxd_res_SoundFormat;
hxd_res_SoundFormat.__empty_constructs__ = [hxd_res_SoundFormat.Wav,hxd_res_SoundFormat.Mp3,hxd_res_SoundFormat.OggVorbis];
var hxd_res_Sound = function(entry) {
	this.lastPlay = 0.;
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Sound"] = hxd_res_Sound;
hxd_res_Sound.__name__ = ["hxd","res","Sound"];
hxd_res_Sound.supportedFormat = function(fmt) {
	switch(fmt[1]) {
	case 0:
		return true;
	case 1:
		return true;
	case 2:
		return false;
	}
};
hxd_res_Sound.startWorker = function() {
	return false;
};
hxd_res_Sound.__super__ = hxd_res_Resource;
hxd_res_Sound.prototype = $extend(hxd_res_Resource.prototype,{
	getData: function() {
		if(this.data != null) {
			return this.data;
		}
		var bytes = this.entry.getBytes();
		var _g = bytes.b[0];
		switch(_g) {
		case 73:case 255:
			this.data = new hxd_snd_Mp3Data(bytes);
			break;
		case 79:
			throw new js__$Boot_HaxeError("OGG format requires -lib stb_ogg_sound (for " + this.entry.get_path() + ")");
			break;
		case 82:
			this.data = new hxd_snd_WavData(bytes);
			break;
		default:
		}
		if(this.data == null) {
			throw new js__$Boot_HaxeError("Unsupported sound format " + this.entry.get_path());
		}
		return this.data;
	}
	,dispose: function() {
		this.stop();
		this.data = null;
	}
	,stop: function() {
		if(this.channel != null) {
			this.channel.stop();
			this.channel = null;
		}
	}
	,play: function(loop,volume,channelGroup,soundGroup) {
		if(volume == null) {
			volume = 1.;
		}
		if(loop == null) {
			loop = false;
		}
		this.lastPlay = new Date().getTime() / 1000;
		this.channel = hxd_snd_Driver.get().play(this,channelGroup,soundGroup);
		this.channel.loop = loop;
		this.channel.set_volume(volume);
		return this.channel;
	}
	,__class__: hxd_res_Sound
});
var hxd_res_TiledMap = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.TiledMap"] = hxd_res_TiledMap;
hxd_res_TiledMap.__name__ = ["hxd","res","TiledMap"];
hxd_res_TiledMap.__super__ = hxd_res_Resource;
hxd_res_TiledMap.prototype = $extend(hxd_res_Resource.prototype,{
	toMap: function() {
		var data = this.entry.getBytes().toString();
		var base = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"));
		var x = new haxe_xml_Fast(Xml.parse(data).firstElement());
		var layers = [];
		var _g_head = x.nodes.resolve("layer").h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var l = val;
			var data1 = StringTools.trim(l.node.resolve("data").get_innerData());
			while(HxOverrides.cca(data1,data1.length - 1) == 61) data1 = HxOverrides.substr(data1,0,data1.length - 1);
			var bytes = haxe_io_Bytes.ofString(data1);
			var bytes1 = base.decodeBytes(bytes);
			bytes1 = format_tools_Inflate.run(bytes1);
			var input = new haxe_io_BytesInput(bytes1);
			var data2 = [];
			var _g1 = 0;
			var _g = bytes1.length >> 2;
			while(_g1 < _g) {
				var i = _g1++;
				data2.push(input.readInt32());
			}
			layers.push({ name : l.att.resolve("name"), opacity : l.has.resolve("opacity") ? parseFloat(l.att.resolve("opacity")) : 1., objects : [], data : data2});
		}
		var _g_head1 = x.nodes.resolve("objectgroup").h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var l1 = val1;
			var objs = [];
			var _g_head2 = l1.nodes.resolve("object").h;
			while(_g_head2 != null) {
				var val2 = _g_head2.item;
				_g_head2 = _g_head2.next;
				var o = val2;
				if(o.has.resolve("name")) {
					objs.push({ name : o.att.resolve("name"), type : o.has.resolve("type") ? o.att.resolve("type") : null, x : Std.parseInt(o.att.resolve("x")), y : Std.parseInt(o.att.resolve("y"))});
				}
			}
			layers.push({ name : l1.att.resolve("name"), opacity : 1., objects : objs, data : null});
		}
		return { width : Std.parseInt(x.att.resolve("width")), height : Std.parseInt(x.att.resolve("height")), layers : layers};
	}
	,__class__: hxd_res_TiledMap
});
var hxd_snd_NativeChannel = function(bufferSamples) {
	this.bufferSamples = bufferSamples;
	var ctx = hxd_snd_NativeChannel.getContext();
	if(ctx == null) {
		return;
	}
	this.sproc = ctx.createScriptProcessor(bufferSamples,2,2);
	var this1 = new Float32Array(bufferSamples * 2);
	this.tmpBuffer = this1;
	this.sproc.connect(ctx.destination);
	this.sproc.onaudioprocess = $bind(this,this.onJsSample);
};
$hxClasses["hxd.snd.NativeChannel"] = hxd_snd_NativeChannel;
hxd_snd_NativeChannel.__name__ = ["hxd","snd","NativeChannel"];
hxd_snd_NativeChannel.getContext = function() {
	if(hxd_snd_NativeChannel.ctx == null) {
		try {
			hxd_snd_NativeChannel.ctx = new AudioContext();
		} catch( e ) {
			try {
				hxd_snd_NativeChannel.ctx = new window.webkitAudioContext();
			} catch( e1 ) {
				hxd_snd_NativeChannel.ctx = null;
			}
		}
	}
	return hxd_snd_NativeChannel.ctx;
};
hxd_snd_NativeChannel.prototype = {
	onJsSample: function(event) {
		this.onSample(this.tmpBuffer);
		var r = 0;
		var left = event.outputBuffer.getChannelData(0);
		var right = event.outputBuffer.getChannelData(1);
		var _g1 = 0;
		var _g = this.bufferSamples;
		while(_g1 < _g) {
			var i = _g1++;
			left[i] = this.tmpBuffer[r++];
			right[i] = this.tmpBuffer[r++];
		}
	}
	,onSample: function(out) {
	}
	,stop: function() {
		if(this.sproc != null) {
			this.sproc.disconnect();
			this.sproc = null;
		}
	}
	,__class__: hxd_snd_NativeChannel
};
var hxd_snd__$ALEmulator_ALChannel = function(source,samples) {
	this.startup = 0.;
	this.source = source;
	hxd_snd_NativeChannel.call(this,samples);
};
$hxClasses["hxd.snd._ALEmulator.ALChannel"] = hxd_snd__$ALEmulator_ALChannel;
hxd_snd__$ALEmulator_ALChannel.__name__ = ["hxd","snd","_ALEmulator","ALChannel"];
hxd_snd__$ALEmulator_ALChannel.__super__ = hxd_snd_NativeChannel;
hxd_snd__$ALEmulator_ALChannel.prototype = $extend(hxd_snd_NativeChannel.prototype,{
	onSample: function(out) {
		var pos = 0;
		var count = out.length >> 1;
		if(this.source.duration > 0) {
			var volume = this.source.volume;
			var bufferIndex = 0;
			var baseSample = 0;
			var curSample = this.source.currentSample;
			var buffer = this.source.buffers[bufferIndex++];
			while(count > 0) {
				while(buffer != null && curSample >= buffer.samples) {
					baseSample += buffer.samples;
					curSample -= buffer.samples;
					buffer = this.source.buffers[bufferIndex++];
				}
				if(buffer == null) {
					if(this.source.loop) {
						curSample = 0;
						baseSample = 0;
						bufferIndex = 0;
						buffer = this.source.buffers[bufferIndex++];
						continue;
					}
					break;
				}
				var scount = buffer.samples - curSample;
				if(scount > count) {
					scount = count;
				}
				var read = curSample << 1;
				var data = buffer.data;
				if(this.startup < 1) {
					var _g1 = 0;
					var _g = scount;
					while(_g1 < _g) {
						var i = _g1++;
						out[pos++] = data[read++] * volume * this.startup;
						out[pos++] = data[read++] * volume * this.startup;
						if(this.startup < 1.) {
							this.startup += 0.1;
							if(this.startup > 1) {
								this.startup = 1;
							}
						}
					}
				} else {
					var _g11 = 0;
					var _g2 = scount;
					while(_g11 < _g2) {
						var i1 = _g11++;
						out[pos++] = data[read++] * volume;
						out[pos++] = data[read++] * volume;
					}
				}
				count -= scount;
				curSample += scount;
			}
			this.source.currentSample = baseSample + curSample;
			if(this.source.currentSample < 0) {
				throw new js__$Boot_HaxeError(baseSample + "/" + curSample);
			}
		}
		var _g12 = 0;
		var _g3 = count << 1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			out[pos++] = 0.;
		}
	}
	,__class__: hxd_snd__$ALEmulator_ALChannel
});
var hxd_snd_ALSource = function() {
	this.volume = 1.;
	this.loop = false;
	this.buffers = [];
	this.currentSample = 0;
	this.playedTime = 0.;
	this.id = ++hxd_snd_ALSource.ID;
	hxd_snd_ALSource.all.h[this.id] = this;
};
$hxClasses["hxd.snd.ALSource"] = hxd_snd_ALSource;
hxd_snd_ALSource.__name__ = ["hxd","snd","ALSource"];
hxd_snd_ALSource.ofInt = function(i) {
	return hxd_snd_ALSource.all.h[i];
};
hxd_snd_ALSource.prototype = {
	updateDuration: function() {
		this.frequency = this.buffers.length == 0 ? 1 : this.buffers[0].frequency;
		this.duration = 0.;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			this.duration += b.samples / b.frequency;
		}
	}
	,get_playing: function() {
		return this.chan != null;
	}
	,play: function() {
		if(this.chan == null) {
			this.playedTime = new Date().getTime() / 1000 - this.currentSample / this.frequency;
			this.chan = new hxd_snd__$ALEmulator_ALChannel(this,hxd_snd_ALSource.CHANNEL_BUFSIZE);
		}
	}
	,stop: function(immediate) {
		if(immediate == null) {
			immediate = false;
		}
		if(this.chan != null) {
			if(immediate) {
				this.chan.stop();
			} else {
				haxe_Timer.delay(($_=this.chan,$bind($_,$_.stop)),200);
			}
			this.chan = null;
		}
	}
	,dispose: function() {
		this.stop();
		hxd_snd_ALSource.all.remove(this.id);
		this.id = 0;
	}
	,toInt: function() {
		return this.id;
	}
	,__class__: hxd_snd_ALSource
};
var hxd_snd_ALBuffer = function() {
	this.samples = 0;
	this.frequency = 1;
	this.id = ++hxd_snd_ALBuffer.ID;
	hxd_snd_ALBuffer.all.h[this.id] = this;
};
$hxClasses["hxd.snd.ALBuffer"] = hxd_snd_ALBuffer;
hxd_snd_ALBuffer.__name__ = ["hxd","snd","ALBuffer"];
hxd_snd_ALBuffer.ofInt = function(i) {
	return hxd_snd_ALBuffer.all.h[i];
};
hxd_snd_ALBuffer.prototype = {
	dispose: function() {
		this.data = null;
		hxd_snd_ALBuffer.all.remove(this.id);
		this.id = 0;
	}
	,alloc: function(size) {
		if(this.data == null || this.data.length != size) {
			var this1 = new Array(size);
			this.data = this1;
		}
		return this.data;
	}
	,toInt: function() {
		return this.id;
	}
	,__class__: hxd_snd_ALBuffer
};
var hxd_snd_ALEmulator = function() { };
$hxClasses["hxd.snd.ALEmulator"] = hxd_snd_ALEmulator;
hxd_snd_ALEmulator.__name__ = ["hxd","snd","ALEmulator"];
hxd_snd_ALEmulator.dopplerFactor = function(value) {
};
hxd_snd_ALEmulator.dopplerVelocity = function(value) {
};
hxd_snd_ALEmulator.speedOfSound = function(value) {
};
hxd_snd_ALEmulator.distanceModel = function(distanceModel) {
};
hxd_snd_ALEmulator.enable = function(capability) {
};
hxd_snd_ALEmulator.disable = function(capability) {
};
hxd_snd_ALEmulator.isEnabled = function(capability) {
	return false;
};
hxd_snd_ALEmulator.getBooleanv = function(param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getIntegerv = function(param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getFloatv = function(param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getDoublev = function(param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getString = function(param) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getBoolean = function(param) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getInteger = function(param) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getFloat = function(param) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getDouble = function(param) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getError = function() {
	return 0;
};
hxd_snd_ALEmulator.loadExtensions = function() {
};
hxd_snd_ALEmulator.isExtensionPresent = function(extname) {
	return false;
};
hxd_snd_ALEmulator.getEnumValue = function(ename) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.listenerf = function(param,value) {
};
hxd_snd_ALEmulator.listener3f = function(param,value1,value2,value3) {
};
hxd_snd_ALEmulator.listenerfv = function(param,values) {
};
hxd_snd_ALEmulator.listeneri = function(param,value) {
};
hxd_snd_ALEmulator.listener3i = function(param,value1,value2,value3) {
};
hxd_snd_ALEmulator.listeneriv = function(param,values) {
};
hxd_snd_ALEmulator.getListenerf = function(param) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getListener3f = function(param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getListenerfv = function(param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getListeneri = function(param) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getListener3i = function(param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getListeneriv = function(param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.genSources = function(n,sources) {
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		sources.setInt32(i << 2,new hxd_snd_ALSource().id);
	}
};
hxd_snd_ALEmulator.deleteSources = function(n,sources) {
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		var i1 = sources.getInt32(i << 2);
		hxd_snd_ALSource.all.get(i1).dispose();
	}
};
hxd_snd_ALEmulator.isSource = function(source) {
	return source != null;
};
hxd_snd_ALEmulator.sourcef = function(source,param,value) {
	switch(param) {
	case 4106:
		source.volume = value;
		break;
	case 4128:case 4129:case 4131:
		break;
	case 4132:
		source.currentSample = source.buffers.length == 0 ? 0 : value * source.frequency | 0;
		if(source.chan != null) {
			source.stop(true);
			source.play();
		}
		break;
	default:
		throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
	}
};
hxd_snd_ALEmulator.source3f = function(source,param,value1,value2,value3) {
	switch(param) {
	case 4100:case 4101:case 4102:
		break;
	default:
		throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
	}
};
hxd_snd_ALEmulator.sourcefv = function(source,param,values) {
	throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
};
hxd_snd_ALEmulator.sourcei = function(source,param,value) {
	switch(param) {
	case 514:
		break;
	case 4103:
		source.loop = value != 0;
		break;
	case 4105:
		var b = hxd_snd_ALBuffer.all.get(value);
		source.buffers = b == null ? [] : [b];
		source.updateDuration();
		source.currentSample = 0;
		break;
	default:
		throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
	}
};
hxd_snd_ALEmulator.source3i = function(source,param,value1,value2,value3) {
	throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
};
hxd_snd_ALEmulator.sourceiv = function(source,param,values) {
	throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
};
hxd_snd_ALEmulator.getSourcef = function(source,param) {
	if(param == 4132) {
		if(source.buffers.length == 0) {
			return 0;
		}
		var now = new Date().getTime() / 1000;
		var t = now - source.playedTime;
		var maxT = source.duration;
		if(source.loop) {
			while(t > maxT) {
				t -= maxT;
				source.playedTime += maxT;
			}
		} else if(t > maxT) {
			t = maxT;
		}
		return t;
	} else {
		throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
	}
};
hxd_snd_ALEmulator.getSourcei = function(source,param) {
	switch(param) {
	case 4112:
		if(source.chan == null || source.buffers.length == 0 || !source.loop && new Date().getTime() / 1000 - source.playedTime >= source.duration) {
			return 4116;
		} else {
			return 4114;
		}
		break;
	case 4118:
		if(source.loop) {
			return 0;
		}
		var count = 0;
		var cur = source.currentSample;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(cur >= b.samples) {
				cur -= b.samples;
				++count;
			} else {
				break;
			}
		}
		return count;
	default:
		throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
	}
};
hxd_snd_ALEmulator.getSource3f = function(source,param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getSourcefv = function(source,param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getSource3i = function(source,param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getSourceiv = function(source,param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.sourcePlayv = function(n,sources) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.sourceStopv = function(n,sources) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.sourceRewindv = function(n,sources) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.sourcePausev = function(n,sources) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.sourcePlay = function(source) {
	source.play();
};
hxd_snd_ALEmulator.sourceStop = function(source) {
	source.stop();
	source.currentSample = 0;
};
hxd_snd_ALEmulator.sourceRewind = function(source) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.sourcePause = function(source) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.sourceQueueBuffers = function(source,nb,buffers) {
	var _g1 = 0;
	var _g = nb;
	while(_g1 < _g) {
		var i = _g1++;
		var i1 = buffers.getInt32(i * 4);
		var b = hxd_snd_ALBuffer.all.get(i1);
		if(b == null) {
			throw new js__$Boot_HaxeError("assert");
		}
		source.buffers.push(b);
	}
	source.updateDuration();
};
hxd_snd_ALEmulator.sourceUnqueueBuffers = function(source,nb,buffers) {
	var _g1 = 0;
	var _g = nb;
	while(_g1 < _g) {
		var i = _g1++;
		var i1 = buffers.getInt32(i * 4);
		var b = hxd_snd_ALBuffer.all.get(i1);
		if(b != source.buffers[0]) {
			throw new js__$Boot_HaxeError("assert");
		}
		if(source.chan != null) {
			if(source.currentSample < b.samples) {
				throw new js__$Boot_HaxeError("assert");
			}
			source.buffers.shift();
			source.currentSample -= b.samples;
			source.playedTime += b.samples / b.frequency;
		} else {
			source.buffers.shift();
		}
		source.updateDuration();
	}
};
hxd_snd_ALEmulator.genBuffers = function(n,buffers) {
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		buffers.setInt32(i << 2,new hxd_snd_ALBuffer().id);
	}
};
hxd_snd_ALEmulator.deleteBuffers = function(n,buffers) {
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		var i1 = buffers.getInt32(i << 2);
		hxd_snd_ALBuffer.all.get(i1).dispose();
	}
};
hxd_snd_ALEmulator.isBuffer = function(buffer) {
	return buffer != null;
};
hxd_snd_ALEmulator.bufferData = function(buffer,format,data,size,freq) {
	if(freq != hxd_snd_ALEmulator.NATIVE_FREQ) {
		throw new js__$Boot_HaxeError("Unsupported frequency value: " + freq + " should be " + hxd_snd_ALEmulator.NATIVE_FREQ);
	}
	switch(format) {
	case 4352:
		var bdata = buffer.alloc(size * 2);
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			var v = data.b[i] / 255;
			bdata[i << 1] = v;
			bdata[i << 1 | 1] = v;
		}
		break;
	case 4353:
		var bdata1 = buffer.alloc(size);
		var _g11 = 0;
		var _g2 = size >> 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var v1 = data.getUInt16(i1 << 1);
			var v2 = ((v1 & 32768) == 0 ? v1 : v1 | -65536) / 32768;
			bdata1[i1 << 1] = v2;
			bdata1[i1 << 1 | 1] = v2;
		}
		break;
	case 4354:
		var bdata2 = buffer.alloc(size);
		var _g12 = 0;
		var _g3 = size;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var v3 = data.b[i2] / 255;
			bdata2[i2] = v3;
		}
		break;
	case 4355:
		var bdata3 = buffer.alloc(size >> 1);
		var _g13 = 0;
		var _g4 = size >> 1;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var v4 = data.getUInt16(i3 << 1);
			var v5 = ((v4 & 32768) == 0 ? v4 : v4 | -65536) / 32768;
			bdata3[i3] = v5;
		}
		break;
	case 4368:
		var bdata4 = buffer.alloc(size >> 1);
		var _g14 = 0;
		var _g5 = size >> 2;
		while(_g14 < _g5) {
			var i4 = _g14++;
			var f = data.getFloat(i4 << 2);
			bdata4[i4 << 1] = f;
			bdata4[i4 << 1 | 1] = f;
		}
		break;
	case 4369:
		var bdata5 = buffer.alloc(size >> 2);
		var _g15 = 0;
		var _g6 = size >> 2;
		while(_g15 < _g6) {
			var i5 = _g15++;
			buffer.data[i5] = data.getFloat(i5 << 2);
		}
		break;
	default:
		throw new js__$Boot_HaxeError("Format not supported 0x" + StringTools.hex(format));
	}
	buffer.samples = buffer.data.length >> 1;
	buffer.frequency = freq;
};
hxd_snd_ALEmulator.bufferf = function(buffer,param,value) {
	throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
};
hxd_snd_ALEmulator.buffer3f = function(buffer,param,value1,value2,value3) {
	throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
};
hxd_snd_ALEmulator.bufferfv = function(buffer,param,values) {
	throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
};
hxd_snd_ALEmulator.bufferi = function(buffer,param,value) {
	throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
};
hxd_snd_ALEmulator.buffer3i = function(buffer,param,value1,value2,value3) {
	throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
};
hxd_snd_ALEmulator.bufferiv = function(buffer,param,values) {
	throw new js__$Boot_HaxeError("Unsupported param 0x" + StringTools.hex(param));
};
hxd_snd_ALEmulator.getBufferf = function(buffer,param) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getBuffer3f = function(buffer,param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getBufferfv = function(buffer,param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getBufferi = function(buffer,param) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getBuffer3i = function(buffer,param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALEmulator.getBufferiv = function(buffer,param,values) {
	throw new js__$Boot_HaxeError("TODO");
};
var hxd_snd_ALDevice = function() {
};
$hxClasses["hxd.snd.ALDevice"] = hxd_snd_ALDevice;
hxd_snd_ALDevice.__name__ = ["hxd","snd","ALDevice"];
hxd_snd_ALDevice.prototype = {
	__class__: hxd_snd_ALDevice
};
var hxd_snd_ALContext = function(d) {
	this.device = d;
};
$hxClasses["hxd.snd.ALContext"] = hxd_snd_ALContext;
hxd_snd_ALContext.__name__ = ["hxd","snd","ALContext"];
hxd_snd_ALContext.prototype = {
	__class__: hxd_snd_ALContext
};
var hxd_snd_ALCEmulator = function() { };
$hxClasses["hxd.snd.ALCEmulator"] = hxd_snd_ALCEmulator;
hxd_snd_ALCEmulator.__name__ = ["hxd","snd","ALCEmulator"];
hxd_snd_ALCEmulator.getError = function(device) {
	return 0;
};
hxd_snd_ALCEmulator.createContext = function(device,attrlist) {
	return new hxd_snd_ALContext(device);
};
hxd_snd_ALCEmulator.makeContextCurrent = function(context) {
	hxd_snd_ALCEmulator.ctx = context;
	return true;
};
hxd_snd_ALCEmulator.processContext = function(context) {
};
hxd_snd_ALCEmulator.suspendContext = function(context) {
};
hxd_snd_ALCEmulator.destroyContext = function(context) {
};
hxd_snd_ALCEmulator.getCurrentContext = function() {
	return hxd_snd_ALCEmulator.ctx;
};
hxd_snd_ALCEmulator.getContextsDevice = function(context) {
	return hxd_snd_ALCEmulator.ctx.device;
};
hxd_snd_ALCEmulator.openDevice = function(devicename) {
	return new hxd_snd_ALDevice();
};
hxd_snd_ALCEmulator.closeDevice = function(device) {
	return true;
};
hxd_snd_ALCEmulator.loadExtensions = function(alDevice) {
};
hxd_snd_ALCEmulator.isExtensionPresent = function(device,extname) {
	return false;
};
hxd_snd_ALCEmulator.getEnumValue = function(device,enumname) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALCEmulator.getString = function(device,param) {
	throw new js__$Boot_HaxeError("TODO");
};
hxd_snd_ALCEmulator.getIntegerv = function(device,param,size,values) {
	throw new js__$Boot_HaxeError("TODO");
};
var hxd_snd_ChannelBase = function() {
	this.volume = 1.;
	this.removedEffects = [];
	this.effects = [];
	this.mute = false;
	this.priority = 0.;
};
$hxClasses["hxd.snd.ChannelBase"] = hxd_snd_ChannelBase;
hxd_snd_ChannelBase.__name__ = ["hxd","snd","ChannelBase"];
hxd_snd_ChannelBase.prototype = {
	getEffect: function(etype) {
		var _g = 0;
		var _g1 = this.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var e1 = (e instanceof etype) ? e : null;
			if(e1 != null) {
				return e1;
			}
		}
		return null;
	}
	,set_volume: function(v) {
		this.currentFade = null;
		return this.volume = v;
	}
	,fadeTo: function(volume,time,onEnd) {
		if(time == null) {
			time = 1.;
		}
		this.currentFade = { start : new Date().getTime() / 1000, duration : time, startVolume : this.volume, targetVolume : volume, onEnd : onEnd};
	}
	,updateCurrentVolume: function(now) {
		if(this.currentFade != null) {
			var f = this.currentFade;
			var dt = now - f.start;
			if(dt >= f.duration) {
				this.set_volume(f.targetVolume);
				if(f.onEnd != null) {
					f.onEnd();
				}
			} else {
				this.set_volume(f.startVolume + dt / f.duration * (f.targetVolume - f.startVolume));
				this.currentFade = f;
			}
		}
		this.currentVolume = this.volume;
	}
	,addEffect: function(e) {
		if(e == null) {
			throw new js__$Boot_HaxeError("Can't add null effect");
		}
		if(this.effects.indexOf(e) >= 0) {
			throw new js__$Boot_HaxeError("effect already added on this channel");
		}
		this.effects.push(e);
		if(e.refs++ == 0) {
			e.onAlloc();
		}
		return e;
	}
	,removeEffect: function(e) {
		var found = HxOverrides.remove(this.effects,e);
		if(!found) {
			return;
		}
		this.removedEffects.push(e);
		if(e.refs != 0) {
			if(--e.refs == 0) {
				e.onDelete();
			}
		}
	}
	,__class__: hxd_snd_ChannelBase
};
var hxd_snd_Channel = function() {
	this.queue = [];
	hxd_snd_ChannelBase.call(this);
	this.id = hxd_snd_Channel.ID++;
	this.set_pause(false);
	this.isVirtual = false;
	this.loop = false;
	this.set_position(0.0);
	this.audibleGain = 1.0;
};
$hxClasses["hxd.snd.Channel"] = hxd_snd_Channel;
hxd_snd_Channel.__name__ = ["hxd","snd","Channel"];
hxd_snd_Channel.__super__ = hxd_snd_ChannelBase;
hxd_snd_Channel.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	onEnd: function() {
	}
	,set_position: function(v) {
		this.lastStamp = new Date().getTime() / 1000;
		this.positionChanged = true;
		return this.position = v;
	}
	,set_pause: function(v) {
		if(!v) {
			this.lastStamp = new Date().getTime() / 1000;
		}
		return this.pause = v;
	}
	,set_streaming: function(v) {
		if(this.source != null) {
			throw new js__$Boot_HaxeError("Can't change streaming mode while playing");
		}
		return this.streaming = v;
	}
	,updateCurrentVolume: function(now) {
		if(this.pause && this.currentFade != null) {
			var f = this.currentFade;
			this.currentFade = null;
			this.updateCurrentVolume(now);
			this.currentFade = f;
		}
		hxd_snd_ChannelBase.prototype.updateCurrentVolume.call(this,now);
		this.channelGroup.updateCurrentVolume(now);
		this.currentVolume *= this.channelGroup.currentVolume * this.soundGroup.volume;
		var _g = 0;
		var _g1 = this.channelGroup.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			this.currentVolume *= e.getVolumeModifier();
		}
		var _g2 = 0;
		var _g11 = this.effects;
		while(_g2 < _g11.length) {
			var e1 = _g11[_g2];
			++_g2;
			this.currentVolume *= e1.getVolumeModifier();
		}
	}
	,calcAudibleGain: function(now) {
		this.updateCurrentVolume(now);
		this.audibleGain = this.currentVolume;
		var _g = 0;
		var _g1 = this.channelGroup.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			this.audibleGain = e.applyAudibleGainModifier(this.audibleGain);
		}
		var _g2 = 0;
		var _g11 = this.effects;
		while(_g2 < _g11.length) {
			var e1 = _g11[_g2];
			++_g2;
			this.audibleGain = e1.applyAudibleGainModifier(this.audibleGain);
		}
	}
	,queueSound: function(sound) {
		this.queue.push(sound);
		if(this.driver != null && this.source != null) {
			this.driver.syncBuffers(this.source,this);
		}
	}
	,stop: function() {
		if(this.driver != null) {
			this.driver.releaseChannel(this);
			this.driver = null;
		}
	}
	,__class__: hxd_snd_Channel
});
var hxd_snd_ChannelGroup = function(name) {
	hxd_snd_ChannelBase.call(this);
	this.name = name;
};
$hxClasses["hxd.snd.ChannelGroup"] = hxd_snd_ChannelGroup;
hxd_snd_ChannelGroup.__name__ = ["hxd","snd","ChannelGroup"];
hxd_snd_ChannelGroup.__super__ = hxd_snd_ChannelBase;
hxd_snd_ChannelGroup.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	__class__: hxd_snd_ChannelGroup
});
var hxd_snd_SampleFormat = $hxClasses["hxd.snd.SampleFormat"] = { __ename__ : true, __constructs__ : ["UI8","I16","F32"] };
hxd_snd_SampleFormat.UI8 = ["UI8",0];
hxd_snd_SampleFormat.UI8.toString = $estr;
hxd_snd_SampleFormat.UI8.__enum__ = hxd_snd_SampleFormat;
hxd_snd_SampleFormat.I16 = ["I16",1];
hxd_snd_SampleFormat.I16.toString = $estr;
hxd_snd_SampleFormat.I16.__enum__ = hxd_snd_SampleFormat;
hxd_snd_SampleFormat.F32 = ["F32",2];
hxd_snd_SampleFormat.F32.toString = $estr;
hxd_snd_SampleFormat.F32.__enum__ = hxd_snd_SampleFormat;
hxd_snd_SampleFormat.__empty_constructs__ = [hxd_snd_SampleFormat.UI8,hxd_snd_SampleFormat.I16,hxd_snd_SampleFormat.F32];
var hxd_snd_Data = function() { };
$hxClasses["hxd.snd.Data"] = hxd_snd_Data;
hxd_snd_Data.__name__ = ["hxd","snd","Data"];
hxd_snd_Data.formatBytes = function(format) {
	switch(format[1]) {
	case 0:
		return 1;
	case 1:
		return 2;
	case 2:
		return 4;
	}
};
hxd_snd_Data.prototype = {
	decode: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		if(sampleStart < 0 || sampleCount < 0 || outPos < 0 || outPos + sampleCount * bpp > out.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(sampleStart + sampleCount >= this.samples) {
			var count = 0;
			if(sampleStart < this.samples) {
				count = this.samples - sampleStart;
				this.decodeBuffer(out,outPos,sampleStart,count);
			}
			out.fill(outPos + count * bpp,(sampleCount - count) * bpp,0);
			return;
		}
		this.decodeBuffer(out,outPos,sampleStart,sampleCount);
	}
	,resample: function(rate,format,channels) {
		if(this.sampleFormat == format && this.samplingRate == rate && this.channels == channels) {
			return this;
		}
		var newSamples = Math.ceil(this.samples * (rate / this.samplingRate));
		var bpp = this.getBytesPerSample();
		var data = new haxe_io_Bytes(new ArrayBuffer(bpp * this.samples));
		this.decodeBuffer(data,0,0,this.samples);
		var out = channels * newSamples;
		var out1;
		switch(format[1]) {
		case 0:
			out1 = 1;
			break;
		case 1:
			out1 = 2;
			break;
		case 2:
			out1 = 4;
			break;
		}
		var out2 = new haxe_io_Bytes(new ArrayBuffer(out * out1));
		this.resampleBuffer(out2,0,data,0,rate,format,channels,this.samples);
		var data1 = new hxd_snd_WavData(null);
		data1.channels = channels;
		data1.samples = newSamples;
		data1.sampleFormat = format;
		data1.samplingRate = rate;
		data1.rawData = out2;
		return data1;
	}
	,resampleBuffer: function(out,outPos,input,inPos,rate,format,channels,samples) {
		var bpp = this.getBytesPerSample();
		var newSamples = Math.ceil(samples * (rate / this.samplingRate));
		var resample = samples != newSamples;
		if(!resample && this.sampleFormat == hxd_snd_SampleFormat.I16 && format == hxd_snd_SampleFormat.I16 && channels == 1 && this.channels == 2) {
			var r = inPos;
			var w = outPos;
			var _g1 = 0;
			var _g = samples;
			while(_g1 < _g) {
				var i = _g1++;
				var sl = input.getUInt16(r);
				r += 2;
				var sr = input.getUInt16(r);
				r += 2;
				var s;
				if((sl ^ sr) >= 32768) {
					if((sl & 32768) == 0) {
						sl = sl;
					} else {
						sl |= -65536;
					}
					if((sr & 32768) == 0) {
						sr = sr;
					} else {
						sr |= -65536;
					}
					s = sl + sr >> 1 & 65535;
				} else {
					s = sl + sr >> 1;
				}
				out.setUInt16(w,s);
				w += 2;
			}
			return;
		}
		var srcChannels = this.channels;
		var commonChannels = channels < srcChannels ? channels : srcChannels;
		var extraChannels = channels - commonChannels;
		var sval = 0.;
		var ival = 0;
		var _g11 = 0;
		var _g2 = newSamples;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var targetSample = i1 / (newSamples - 1) * (samples - 1);
			var isample = targetSample | 0;
			var offset = targetSample - isample;
			var srcPos = inPos + isample * bpp;
			if(isample == samples - 1) {
				resample = false;
			}
			var _g3 = 0;
			var _g21 = commonChannels;
			while(_g3 < _g21) {
				var k = _g3++;
				var sval1;
				var sval2 = 0.;
				var _g4 = this.sampleFormat;
				switch(_g4[1]) {
				case 0:
					sval1 = input.b[srcPos] / 255;
					if(resample) {
						sval2 = input.b[srcPos + bpp] / 255;
					}
					++srcPos;
					break;
				case 1:
					var v = input.getUInt16(srcPos);
					sval1 = ((v & 32768) == 0 ? v : v | -65536) / 32768;
					if(resample) {
						var v1 = input.getUInt16(srcPos + bpp);
						sval2 = ((v1 & 32768) == 0 ? v1 : v1 | -65536) / 32768;
					}
					srcPos += 2;
					break;
				case 2:
					sval1 = input.getFloat(srcPos);
					if(resample) {
						sval2 = input.getFloat(srcPos + bpp);
					}
					srcPos += 4;
					break;
				}
				if(resample) {
					sval = sval1 + offset * (sval2 - sval1);
				} else {
					sval = sval1;
				}
				switch(format[1]) {
				case 0:
					ival = (sval + 1) * 128 | 0;
					if(ival > 255) {
						ival = 255;
					}
					out.b[outPos++] = ival & 255;
					break;
				case 1:
					ival = sval * 32768 | 0;
					if(ival > 32767) {
						ival = 32767;
					}
					ival &= 65535;
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
			var _g31 = 0;
			var _g22 = extraChannels;
			while(_g31 < _g22) {
				var i2 = _g31++;
				switch(format[1]) {
				case 0:
					out.b[outPos++] = ival & 255;
					break;
				case 1:
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,getBytesPerSample: function() {
		var tmp;
		switch(this.sampleFormat[1]) {
		case 0:
			tmp = 1;
			break;
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 4;
			break;
		}
		return this.channels * tmp;
	}
	,load: function(onEnd) {
		onEnd();
	}
	,get_duration: function() {
		return this.samples / this.samplingRate;
	}
	,__class__: hxd_snd_Data
};
var hxd_snd_Source = function(inst) {
	this.hasQueue = false;
	this.playing = false;
	this.volume = 1.;
	this.loop = false;
	this.inst = inst;
	this.buffers = [];
};
$hxClasses["hxd.snd.Source"] = hxd_snd_Source;
hxd_snd_Source.__name__ = ["hxd","snd","Source"];
hxd_snd_Source.prototype = {
	__class__: hxd_snd_Source
};
var hxd_snd_Buffer = function(inst) {
	this.inst = inst;
};
$hxClasses["hxd.snd.Buffer"] = hxd_snd_Buffer;
hxd_snd_Buffer.__name__ = ["hxd","snd","Buffer"];
hxd_snd_Buffer.prototype = {
	unref: function() {
		if(this.sound == null) {
			var tmp = new haxe_io_Bytes(new ArrayBuffer(4));
			tmp.setInt32(0,this.inst.id);
			hxd_snd_ALEmulator.deleteBuffers(1,tmp);
		} else {
			this.playCount--;
			if(this.playCount == 0) {
				this.lastStop = new Date().getTime() / 1000;
			}
		}
	}
	,__class__: hxd_snd_Buffer
};
var hxd_snd_Driver = function() {
	this.masterVolume = 1.0;
	this.masterSoundGroup = new hxd_snd_SoundGroup("master");
	this.masterChannelGroup = new hxd_snd_ChannelGroup("master");
	this.listener = new hxd_snd_Listener();
	this.buffers = [];
	this.bufferMap = new haxe_ds_ObjectMap();
	this.preUpdateCallbacks = [];
	this.postUpdateCallbacks = [];
	this.alDevice = hxd_snd_ALCEmulator.openDevice(null);
	this.alContext = hxd_snd_ALCEmulator.createContext(this.alDevice,null);
	hxd_snd_ALCEmulator.makeContextCurrent(this.alContext);
	hxd_snd_ALCEmulator.loadExtensions(this.alDevice);
	hxd_snd_ALEmulator.loadExtensions();
	this.sources = [];
	var bytes = new haxe_io_Bytes(new ArrayBuffer(4));
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		hxd_snd_ALEmulator.genSources(1,bytes);
		if(hxd_snd_ALEmulator.getError() != 0) {
			break;
		}
		var i1 = bytes.getInt32(0);
		var s = new hxd_snd_Source(hxd_snd_ALSource.all.get(i1));
		hxd_snd_ALEmulator.sourcei(s.inst,514,1);
		this.sources.push(s);
	}
	this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(24));
};
$hxClasses["hxd.snd.Driver"] = hxd_snd_Driver;
hxd_snd_Driver.__name__ = ["hxd","snd","Driver"];
hxd_snd_Driver.soundUpdate = function() {
	if(hxd_snd_Driver.instance != null) {
		var _g = 0;
		var _g1 = hxd_snd_Driver.instance.preUpdateCallbacks;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f();
		}
		hxd_snd_Driver.instance.update();
		var _g2 = 0;
		var _g11 = hxd_snd_Driver.instance.postUpdateCallbacks;
		while(_g2 < _g11.length) {
			var f1 = _g11[_g2];
			++_g2;
			f1();
		}
	}
};
hxd_snd_Driver.get = function() {
	if(hxd_snd_Driver.instance == null) {
		hxd_snd_Driver.instance = new hxd_snd_Driver();
		haxe_MainLoop.add(hxd_snd_Driver.soundUpdate);
	}
	return hxd_snd_Driver.instance;
};
hxd_snd_Driver.prototype = {
	addPreUpdateCallback: function(f) {
		this.preUpdateCallbacks.push(f);
	}
	,addPostUpdateCallback: function(f) {
		this.postUpdateCallbacks.push(f);
	}
	,getTmp: function(size) {
		if(this.cachedBytes.length < size) {
			this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.cachedBytes;
	}
	,stopAll: function() {
		while(this.channels != null) this.channels.stop();
	}
	,cleanCache: function() {
		var _g = 0;
		var _g1 = this.buffers.slice();
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.playCount == 0) {
				this.releaseBuffer(b);
			}
		}
	}
	,dispose: function() {
		this.stopAll();
		var tmp = this.sources.length;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.sources;
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			_g.push(s.inst.id);
		}
		var a = _g;
		var b = new haxe_io_Bytes(new ArrayBuffer(a.length * 4));
		var _g11 = 0;
		var _g3 = a.length;
		while(_g11 < _g3) {
			var i = _g11++;
			b.setInt32(i << 2,a[i]);
		}
		hxd_snd_ALEmulator.deleteSources(tmp,b);
		var tmp1 = this.buffers.length;
		var _g12 = [];
		var _g21 = 0;
		var _g31 = this.buffers;
		while(_g21 < _g31.length) {
			var b1 = _g31[_g21];
			++_g21;
			_g12.push(b1.inst.id);
		}
		var a1 = _g12;
		var b2 = new haxe_io_Bytes(new ArrayBuffer(a1.length * 4));
		var _g13 = 0;
		var _g4 = a1.length;
		while(_g13 < _g4) {
			var i1 = _g13++;
			b2.setInt32(i1 << 2,a1[i1]);
		}
		hxd_snd_ALEmulator.deleteBuffers(tmp1,b2);
		this.sources = [];
		this.buffers = [];
		hxd_snd_ALCEmulator.makeContextCurrent(null);
		hxd_snd_ALCEmulator.destroyContext(this.alContext);
		hxd_snd_ALCEmulator.closeDevice(this.alDevice);
	}
	,play: function(sound,channelGroup,soundGroup) {
		if(soundGroup == null) {
			soundGroup = this.masterSoundGroup;
		}
		if(channelGroup == null) {
			channelGroup = this.masterChannelGroup;
		}
		var c = new hxd_snd_Channel();
		c.driver = this;
		c.sound = sound;
		c.duration = c.sound.getData().get_duration();
		c.soundGroup = soundGroup;
		c.channelGroup = channelGroup;
		c.next = this.channels;
		c.set_streaming(c.duration > hxd_snd_Driver.STREAM_DURATION);
		this.channels = c;
		return c;
	}
	,update: function() {
		var now = new Date().getTime() / 1000;
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var c = s.channel;
			if(c == null) {
				continue;
			}
			var state = hxd_snd_ALEmulator.getSourcei(s.inst,4112);
			switch(state) {
			case 4114:
				if(c.streaming) {
					if(c.positionChanged) {
						this.releaseSource(s);
						continue;
					}
					var count = hxd_snd_ALEmulator.getSourcei(s.inst,4118);
					if(count > 0) {
						var b0 = s.buffers[0];
						var b1 = s.buffers[1];
						var tmp = this.getTmp(8);
						tmp.setInt32(0,b0.inst.id);
						hxd_snd_ALEmulator.sourceUnqueueBuffers(s.inst,1,tmp);
						s.streamPosition = s.streamPositionNext;
						this.updateStreaming(s,b0,c.soundGroup.mono);
						tmp.setInt32(0,b0.inst.id);
						hxd_snd_ALEmulator.sourceQueueBuffers(s.inst,1,tmp);
						s.buffers[0] = b1;
						s.buffers[1] = b0;
					}
					var position = hxd_snd_ALEmulator.getSourcef(s.inst,4132);
					var prev = c.position;
					c.set_position(position + s.streamPosition);
					c.lastStamp = now;
					if(c.position > c.duration) {
						if(c.queue.length > 0) {
							s.streamPosition -= c.duration;
							this.queueNext(c);
							c.onEnd();
						} else if(c.loop) {
							var _g2 = c;
							_g2.set_position(_g2.position - c.duration);
							s.streamPosition -= c.duration;
							c.onEnd();
						}
					}
					c.positionChanged = false;
				} else if(!c.positionChanged) {
					var position1 = hxd_snd_ALEmulator.getSourcef(s.inst,4132);
					var prev1 = c.position;
					c.set_position(position1);
					c.lastStamp = now;
					c.positionChanged = false;
					if(c.queue.length > 0) {
						var count1 = hxd_snd_ALEmulator.getSourcei(s.inst,4118);
						while(count1 > 0) {
							var tmp1 = this.getTmp(4);
							tmp1.setInt32(0,s.buffers[0].inst.id);
							hxd_snd_ALEmulator.sourceUnqueueBuffers(s.inst,1,tmp1);
							this.queueNext(c);
							--count1;
							c.onEnd();
						}
					} else if(position1 < prev1) {
						c.onEnd();
					}
				}
				break;
			case 4116:
				if(c.streaming && s.streamPosition != s.streamPositionNext) {
					this.releaseSource(s);
					continue;
				}
				this.releaseChannel(c);
				c.onEnd();
				break;
			default:
			}
		}
		var c1 = this.channels;
		while(c1 != null) {
			c1.calcAudibleGain(now);
			c1.isVirtual = c1.pause || c1.mute || c1.channelGroup.mute || c1.audibleGain < 1e-5;
			c1 = c1.next;
		}
		var list = this.channels;
		var cmp = $bind(this,this.sortChannel);
		var tmp2;
		if(list == null) {
			tmp2 = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g11 = 0;
					var _g3 = insize;
					while(_g11 < _g3) {
						var i = _g11++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp2 = list;
		}
		this.channels = tmp2;
		var sgroupRefs = new haxe_ds_ObjectMap();
		var audibleCount = 0;
		var c2 = this.channels;
		while(c2 != null && !c2.isVirtual) {
			if(++audibleCount > this.sources.length) {
				c2.isVirtual = true;
			} else if(c2.soundGroup.maxAudible >= 0) {
				var sgRefs = sgroupRefs.h[c2.soundGroup.__id__];
				if(sgRefs == null) {
					sgRefs = 0;
				}
				if(++sgRefs > c2.soundGroup.maxAudible) {
					c2.isVirtual = true;
					--audibleCount;
				}
				sgroupRefs.set(c2.soundGroup,sgRefs);
			}
			c2 = c2.next;
		}
		var _g4 = 0;
		var _g12 = this.sources;
		while(_g4 < _g12.length) {
			var s1 = _g12[_g4];
			++_g4;
			if(s1.channel == null || !s1.channel.isVirtual) {
				continue;
			}
			this.releaseSource(s1);
		}
		hxd_snd_ALEmulator.listenerf(4106,this.masterVolume);
		hxd_snd_ALEmulator.listener3f(4100,-this.listener.position.x,this.listener.position.y,this.listener.position.z);
		this.listener.direction.normalize();
		var tmpBytes = this.getTmp(24);
		tmpBytes.setFloat(0,-this.listener.direction.x);
		tmpBytes.setFloat(4,this.listener.direction.y);
		tmpBytes.setFloat(8,this.listener.direction.z);
		this.listener.up.normalize();
		tmpBytes.setFloat(12,-this.listener.up.x);
		tmpBytes.setFloat(16,this.listener.up.y);
		tmpBytes.setFloat(20,this.listener.up.z);
		hxd_snd_ALEmulator.listenerfv(4111,tmpBytes);
		var c3 = this.channels;
		while(c3 != null) {
			if(c3.source != null || c3.isVirtual) {
				c3 = c3.next;
				continue;
			}
			var s2 = null;
			var _g5 = 0;
			var _g13 = this.sources;
			while(_g5 < _g13.length) {
				var s21 = _g13[_g5];
				++_g5;
				if(s21.channel == null) {
					s2 = s21;
					break;
				}
			}
			if(s2 == null) {
				throw new js__$Boot_HaxeError("assert");
			}
			s2.channel = c3;
			c3.source = s2;
			this.syncBuffers(s2,c3);
			c3.positionChanged = true;
			c3 = c3.next;
		}
		var _g6 = 0;
		var _g14 = this.sources;
		while(_g6 < _g14.length) {
			var s3 = _g14[_g6];
			++_g6;
			var c4 = s3.channel;
			if(c4 == null) {
				continue;
			}
			this.syncSource(s3);
		}
		var c5 = this.channels;
		while(c5 != null) {
			var next = c5.next;
			if(!c5.pause && c5.isVirtual) {
				var _g7 = c5;
				_g7.set_position(_g7.position + (now - c5.lastStamp));
				c5.lastStamp = now;
				if(c5.position >= c5.duration && !this.queueNext(c5) && !c5.loop) {
					this.releaseChannel(c5);
					c5.onEnd();
				}
			}
			if(c5.channelGroup.removedEffects.length > 0) {
				c5.channelGroup.removedEffects = [];
			}
			if(c5.removedEffects != null && c5.removedEffects.length > 0) {
				c5.removedEffects = [];
			}
			c5 = next;
		}
	}
	,syncSource: function(s) {
		var c = s.channel;
		if(c == null) {
			return;
		}
		if(c.positionChanged) {
			if(!c.streaming) {
				hxd_snd_ALEmulator.sourcef(s.inst,4132,c.position);
				c.set_position(hxd_snd_ALEmulator.getSourcef(s.inst,4132));
			}
			c.positionChanged = false;
		}
		var loopFlag = c.loop && c.queue.length == 0 && !c.streaming;
		if(s.loop != loopFlag) {
			s.loop = loopFlag;
			hxd_snd_ALEmulator.sourcei(s.inst,4103,loopFlag ? 1 : 0);
		}
		var v = c.currentVolume;
		if(s.volume != v) {
			s.volume = v;
			hxd_snd_ALEmulator.sourcef(s.inst,4106,v);
		}
		var _g = 0;
		var _g1 = c.channelGroup.removedEffects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.unapply(s);
		}
		var _g2 = 0;
		var _g11 = c.removedEffects;
		while(_g2 < _g11.length) {
			var e1 = _g11[_g2];
			++_g2;
			e1.unapply(s);
		}
		var _g3 = 0;
		var _g12 = c.channelGroup.effects;
		while(_g3 < _g12.length) {
			var e2 = _g12[_g3];
			++_g3;
			e2.apply(s);
		}
		var _g4 = 0;
		var _g13 = c.effects;
		while(_g4 < _g13.length) {
			var e3 = _g13[_g4];
			++_g4;
			e3.apply(s);
		}
		if(!s.playing) {
			s.playing = true;
			hxd_snd_ALEmulator.sourcePlay(s.inst);
		}
	}
	,queueNext: function(c) {
		var snd = c.queue.shift();
		if(snd == null) {
			return false;
		}
		c.sound = snd;
		var _g = c;
		_g.set_position(_g.position - c.duration);
		c.duration = snd.getData().get_duration();
		c.positionChanged = false;
		return true;
	}
	,releaseSource: function(s) {
		if(s.channel != null) {
			var _g = 0;
			var _g1 = s.channel.channelGroup.removedEffects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				e.unapply(s);
			}
			var _g2 = 0;
			var _g11 = s.channel.removedEffects;
			while(_g2 < _g11.length) {
				var e1 = _g11[_g2];
				++_g2;
				e1.unapply(s);
			}
			var _g3 = 0;
			var _g12 = s.channel.channelGroup.effects;
			while(_g3 < _g12.length) {
				var e2 = _g12[_g3];
				++_g3;
				e2.unapply(s);
			}
			var _g4 = 0;
			var _g13 = s.channel.effects;
			while(_g4 < _g13.length) {
				var e3 = _g13[_g4];
				++_g4;
				e3.unapply(s);
			}
			s.channel.source = null;
			s.channel = null;
		}
		if(s.playing) {
			s.playing = false;
			hxd_snd_ALEmulator.sourceStop(s.inst);
		}
		this.syncBuffers(s,null);
	}
	,syncBuffers: function(s,c) {
		if(c == null) {
			if(s.buffers.length == 0) {
				return;
			}
			if(!s.hasQueue) {
				hxd_snd_ALEmulator.sourcei(s.inst,4105,0);
			} else {
				var tmpBytes = this.getTmp(4 * s.buffers.length);
				var _g1 = 0;
				var _g = s.buffers.length;
				while(_g1 < _g) {
					var i = _g1++;
					tmpBytes.setInt32(i << 2,s.buffers[i].inst.id);
				}
				hxd_snd_ALEmulator.sourceUnqueueBuffers(s.inst,s.buffers.length,tmpBytes);
			}
			var _g2 = 0;
			var _g11 = s.buffers;
			while(_g2 < _g11.length) {
				var b = _g11[_g2];
				++_g2;
				b.unref();
			}
			s.buffers = [];
			s.streamData = null;
			s.hasQueue = false;
		} else if(c.streaming) {
			if(!s.hasQueue) {
				if(s.buffers.length != 0) {
					throw new js__$Boot_HaxeError("assert");
				}
				s.hasQueue = true;
				var tmpBytes1 = this.getTmp(8);
				hxd_snd_ALEmulator.genBuffers(2,tmpBytes1);
				var i1 = tmpBytes1.getInt32(0);
				var tmp = new hxd_snd_Buffer(hxd_snd_ALBuffer.all.get(i1));
				var i2 = tmpBytes1.getInt32(4);
				s.buffers = [tmp,new hxd_snd_Buffer(hxd_snd_ALBuffer.all.get(i2))];
				s.streamData = c.sound.getData();
				s.streamSample = c.position * s.streamData.samplingRate | 0;
				this.updateStreaming(s,s.buffers[0],c.soundGroup.mono);
				s.streamPosition = s.streamPositionNext;
				this.updateStreaming(s,s.buffers[1],c.soundGroup.mono);
				tmpBytes1.setInt32(0,s.buffers[0].inst.id);
				tmpBytes1.setInt32(4,s.buffers[1].inst.id);
				hxd_snd_ALEmulator.sourceQueueBuffers(s.inst,2,tmpBytes1);
			}
		} else if(s.hasQueue || c.queue.length > 0) {
			if(!s.hasQueue && s.buffers.length > 0) {
				throw new js__$Boot_HaxeError("Can't queue on a channel that is currently playing an unstreamed data");
			}
			var buffers = [this.getBuffer(c.sound,c.soundGroup)];
			var _g3 = 0;
			var _g12 = c.queue;
			while(_g3 < _g12.length) {
				var snd = _g12[_g3];
				++_g3;
				buffers.push(this.getBuffer(snd,c.soundGroup));
			}
			var _g13 = 0;
			var _g4 = s.buffers.length;
			while(_g13 < _g4) {
				var i3 = _g13++;
				if(buffers.shift() != s.buffers[i3]) {
					throw new js__$Boot_HaxeError("assert");
				}
			}
			var tmpBytes2 = this.getTmp(buffers.length * 4);
			var _g14 = 0;
			var _g5 = buffers.length;
			while(_g14 < _g5) {
				var i4 = _g14++;
				var b1 = buffers[i4];
				b1.playCount++;
				tmpBytes2.setInt32(i4 << 2,b1.inst.id);
			}
			hxd_snd_ALEmulator.sourceQueueBuffers(s.inst,buffers.length,tmpBytes2);
			var _g6 = 0;
			while(_g6 < buffers.length) {
				var b2 = buffers[_g6];
				++_g6;
				s.buffers.push(b2);
			}
			if(hxd_snd_ALEmulator.getError() != 0) {
				throw new js__$Boot_HaxeError("Failed to queue buffers : format differs");
			}
		} else {
			var buffer = this.getBuffer(c.sound,c.soundGroup);
			hxd_snd_ALEmulator.sourcei(s.inst,4105,buffer.inst.id);
			if(s.buffers[0] != null) {
				s.buffers[0].unref();
			}
			s.buffers[0] = buffer;
			buffer.playCount++;
		}
	}
	,checkTargetFormat: function(dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		this.targetRate = dat.samplingRate;
		this.targetRate = hxd_snd_ALEmulator.NATIVE_FREQ;
		this.targetChannels = forceMono || dat.channels == 1 ? 1 : 2;
		var _g = dat.sampleFormat;
		var tmp;
		switch(_g[1]) {
		case 0:
			this.alFormat = this.targetChannels == 1 ? 4352 : 4354;
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 1:
			this.alFormat = this.targetChannels == 1 ? 4353 : 4355;
			tmp = hxd_snd_SampleFormat.I16;
			break;
		case 2:
			this.alFormat = this.targetChannels == 1 ? 4368 : 4369;
			tmp = hxd_snd_SampleFormat.F32;
			break;
		}
		this.targetFormat = tmp;
		if(this.targetChannels == dat.channels && this.targetFormat == dat.sampleFormat) {
			return this.targetRate == dat.samplingRate;
		} else {
			return false;
		}
	}
	,updateStreaming: function(s,buf,forceMono) {
		var tmpBytes = this.getTmp(hxd_snd_Driver.STREAM_BUFSIZE >> 1);
		var bpp = s.streamData.getBytesPerSample();
		var reqSamples = (hxd_snd_Driver.STREAM_BUFSIZE >> 1) / bpp | 0;
		var samples = reqSamples;
		var outPos = 0;
		var qPos = 0;
		while(samples > 0) {
			var avail = s.streamData.samples - s.streamSample;
			if(avail <= 0) {
				var next = s.channel.queue[qPos++];
				if(next != null) {
					s.streamSample -= s.streamData.samples;
					s.streamData = next.getData();
				} else if(!s.channel.loop || s.streamData.samples == 0) {
					break;
				} else {
					s.streamSample -= s.streamData.samples;
				}
			} else {
				var count = samples < avail ? samples : avail;
				if(outPos == 0) {
					s.streamPositionNext = s.streamSample / s.streamData.samplingRate;
				}
				s.streamData.decode(tmpBytes,outPos,s.streamSample,count);
				s.streamSample += count;
				outPos += count * bpp;
				samples -= count;
			}
		}
		if(!this.checkTargetFormat(s.streamData,forceMono)) {
			reqSamples -= samples;
			var bytes = this.resampleBytes;
			var reqBytes = this.targetChannels * reqSamples;
			var reqBytes1;
			switch(this.targetFormat[1]) {
			case 0:
				reqBytes1 = 1;
				break;
			case 1:
				reqBytes1 = 2;
				break;
			case 2:
				reqBytes1 = 4;
				break;
			}
			var reqBytes2 = reqBytes * reqBytes1;
			if(bytes == null || bytes.length < reqBytes2) {
				bytes = new haxe_io_Bytes(new ArrayBuffer(reqBytes2));
				this.resampleBytes = bytes;
			}
			s.streamData.resampleBuffer(this.resampleBytes,0,tmpBytes,0,this.targetRate,this.targetFormat,this.targetChannels,reqSamples);
			hxd_snd_ALEmulator.bufferData(buf.inst,this.alFormat,this.resampleBytes,reqBytes2,this.targetRate);
		} else {
			hxd_snd_ALEmulator.bufferData(buf.inst,this.alFormat,tmpBytes,outPos,s.streamData.samplingRate);
		}
	}
	,getBuffer: function(snd,grp) {
		var _gthis = this;
		var b = this.bufferMap.h[snd.__id__];
		if(b != null) {
			return b;
		}
		if(this.buffers.length >= 256) {
			var now = new Date().getTime() / 1000;
			var _g = 0;
			var _g1 = this.buffers.slice();
			while(_g < _g1.length) {
				var b1 = _g1[_g];
				++_g;
				if(b1.playCount == 0 && b1.lastStop < now - 60) {
					this.releaseBuffer(b1);
				}
			}
		}
		var tmpBytes = this.getTmp(4);
		hxd_snd_ALEmulator.genBuffers(1,tmpBytes);
		var i = tmpBytes.getInt32(0);
		var b2 = new hxd_snd_Buffer(hxd_snd_ALBuffer.all.get(i));
		b2.sound = snd;
		this.buffers.push(b2);
		this.bufferMap.set(snd,b2);
		var data = snd.getData();
		var mono = grp.mono;
		data.load(function() {
			_gthis.fillBuffer(b2,data,mono);
		});
		return b2;
	}
	,releaseBuffer: function(b) {
		HxOverrides.remove(this.buffers,b);
		this.bufferMap.remove(b.sound);
		b.sound.data = null;
		var tmpBytes = this.getTmp(4);
		tmpBytes.setInt32(0,b.inst.id);
		hxd_snd_ALEmulator.deleteBuffers(1,tmpBytes);
	}
	,sortChannel: function(a,b) {
		if(a.isVirtual != b.isVirtual) {
			if(a.isVirtual) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.channelGroup.priority != b.channelGroup.priority) {
			if(a.channelGroup.priority < b.channelGroup.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.priority != b.priority) {
			if(a.priority < b.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.audibleGain != b.audibleGain) {
			if(a.audibleGain < b.audibleGain) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.id < b.id) {
			return 1;
		} else {
			return -1;
		}
	}
	,releaseChannel: function(c) {
		if(this.channels == c) {
			this.channels = c.next;
		} else {
			var prev = this.channels;
			while(prev.next != c) prev = prev.next;
			prev.next = c.next;
		}
		var _g = 0;
		var _g1 = c.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			c.removeEffect(e);
		}
		if(c.source != null) {
			this.releaseSource(c.source);
		}
		c.next = null;
		c.driver = null;
		c.removedEffects = null;
	}
	,fillBuffer: function(buf,dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		if(!this.checkTargetFormat(dat,forceMono)) {
			dat = dat.resample(this.targetRate,this.targetFormat,this.targetChannels);
		}
		var dataBytes = new haxe_io_Bytes(new ArrayBuffer(dat.samples * dat.getBytesPerSample()));
		dat.decode(dataBytes,0,0,dat.samples);
		hxd_snd_ALEmulator.bufferData(buf.inst,this.alFormat,dataBytes,dataBytes.length,dat.samplingRate);
	}
	,__class__: hxd_snd_Driver
};
var hxd_snd_Effect = function() {
	this.refs = 0;
};
$hxClasses["hxd.snd.Effect"] = hxd_snd_Effect;
hxd_snd_Effect.__name__ = ["hxd","snd","Effect"];
hxd_snd_Effect.prototype = {
	get_allocated: function() {
		return this.refs > 0;
	}
	,applyAudibleGainModifier: function(v) {
		return v;
	}
	,getVolumeModifier: function() {
		return 1;
	}
	,incRefs: function() {
		if(this.refs++ == 0) {
			this.onAlloc();
		}
	}
	,decRefs: function() {
		if(this.refs == 0) {
			return;
		}
		if(--this.refs == 0) {
			this.onDelete();
		}
	}
	,onAlloc: function() {
	}
	,onDelete: function() {
	}
	,apply: function(source) {
	}
	,unapply: function(source) {
	}
	,__class__: hxd_snd_Effect
};
var hxd_snd_Listener = function() {
	this.position = new h3d_Vector();
	this.velocity = new h3d_Vector();
	this.direction = new h3d_Vector(1,0,0);
	this.up = new h3d_Vector(0,0,1);
};
$hxClasses["hxd.snd.Listener"] = hxd_snd_Listener;
hxd_snd_Listener.__name__ = ["hxd","snd","Listener"];
hxd_snd_Listener.prototype = {
	syncCamera: function(cam) {
		var _this = this.position;
		var v = cam.pos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		var _this1 = this.direction;
		_this1.x = cam.target.x - cam.pos.x;
		_this1.y = cam.target.y - cam.pos.y;
		_this1.z = cam.target.z - cam.pos.z;
		_this1.w = 1.;
		this.direction.normalize();
		var _this2 = this.up;
		var v1 = cam.up;
		_this2.x = v1.x;
		_this2.y = v1.y;
		_this2.z = v1.z;
		_this2.w = v1.w;
	}
	,__class__: hxd_snd_Listener
};
var hxd_snd_Mp3Data = function(bytes) {
	var mp = new format_mp3_Reader(new haxe_io_BytesInput(bytes)).read();
	this.samples = mp.sampleCount;
	var frame = mp.frames[0].data;
	var lame = -1;
	var _g1 = 0;
	var _g = frame.length - 24;
	while(_g1 < _g) {
		var i = _g1++;
		if(frame.b[i] == 76 && frame.b[i + 1] == 65 && frame.b[i + 2] == 77 && frame.b[i + 3] == 69) {
			lame = i;
			break;
		}
	}
	if(lame >= 0) {
		var startEnd = frame.b[lame + 21] << 16 | frame.b[lame + 22] << 8 | frame.b[lame + 23];
		var start = startEnd >> 12;
		var end = startEnd & 4095;
		this.samples -= start + end + 1152;
	}
	var header = mp.frames[0].header;
	this.sampleFormat = hxd_snd_SampleFormat.F32;
	this.samplingRate = format_mp3_MPEG.srEnum2Num(header.samplingRate);
	this.channels = header.channelMode == format_mp3_ChannelMode.Mono ? 1 : 2;
	var ctx = hxd_snd_NativeChannel.getContext();
	if(ctx == null) {
		return;
	}
	ctx.decodeAudioData(bytes.b.bufferValue,$bind(this,this.processBuffer));
	var decodedRate = ctx.sampleRate | 0;
	this.samples = Math.ceil(this.samples * decodedRate / this.samplingRate);
	this.samplingRate = decodedRate;
};
$hxClasses["hxd.snd.Mp3Data"] = hxd_snd_Mp3Data;
hxd_snd_Mp3Data.__name__ = ["hxd","snd","Mp3Data"];
hxd_snd_Mp3Data.__super__ = hxd_snd_Data;
hxd_snd_Mp3Data.prototype = $extend(hxd_snd_Data.prototype,{
	load: function(onEnd) {
		if(this.buffer != null) {
			onEnd();
		} else {
			this.onEnd = onEnd;
		}
	}
	,processBuffer: function(buf) {
		var left = buf.getChannelData(0);
		this.samples = buf.length;
		if(this.channels == 1) {
			this.buffer = haxe_io_Bytes.ofData(left.buffer);
			return;
		}
		var right = buf.numberOfChannels < 2 ? left : buf.getChannelData(1);
		var join = new Float32Array(left.length * 2);
		var w = 0;
		var _g1 = 0;
		var _g = buf.length;
		while(_g1 < _g) {
			var i = _g1++;
			join[w++] = left[i];
			join[w++] = right[i];
		}
		this.buffer = haxe_io_Bytes.ofData(join.buffer);
		if(this.onEnd != null) {
			this.onEnd();
			this.onEnd = null;
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		if(this.buffer == null) {
			out.fill(outPos,sampleCount * 4 * this.channels,0);
		} else {
			out.blit(outPos,this.buffer,sampleStart * 4 * this.channels,sampleCount * 4 * this.channels);
		}
	}
	,__class__: hxd_snd_Mp3Data
});
var hxd_snd_SoundGroup = function(name) {
	this.name = name;
	this.maxAudible = -1;
	this.volume = 1;
	this.mono = false;
};
$hxClasses["hxd.snd.SoundGroup"] = hxd_snd_SoundGroup;
hxd_snd_SoundGroup.__name__ = ["hxd","snd","SoundGroup"];
hxd_snd_SoundGroup.prototype = {
	__class__: hxd_snd_SoundGroup
};
var hxd_snd_WavData = function(bytes) {
	if(bytes != null) {
		this.init(new format_wav_Reader(new haxe_io_BytesInput(bytes)).read());
	}
};
$hxClasses["hxd.snd.WavData"] = hxd_snd_WavData;
hxd_snd_WavData.__name__ = ["hxd","snd","WavData"];
hxd_snd_WavData.__super__ = hxd_snd_Data;
hxd_snd_WavData.prototype = $extend(hxd_snd_Data.prototype,{
	init: function(d) {
		var h = d.header;
		this.samplingRate = h.samplingRate;
		this.channels = h.channels;
		var _g = h.bitsPerSample;
		var tmp;
		switch(_g) {
		case 8:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 16:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported WAV " + h.bitsPerSample + " bits");
		}
		this.sampleFormat = tmp;
		this.rawData = d.data;
		this.samples = this.rawData.length / this.getBytesPerSample() | 0;
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		out.blit(outPos,this.rawData,sampleStart * bpp,sampleCount * bpp);
	}
	,__class__: hxd_snd_WavData
});
var hxsl_Type = $hxClasses["hxsl.Type"] = { __ename__ : true, __constructs__ : ["TVoid","TInt","TBool","TFloat","TString","TVec","TMat3","TMat4","TMat3x4","TBytes","TSampler2D","TSamplerCube","TStruct","TFun","TArray","TChannel"] };
hxsl_Type.TVoid = ["TVoid",0];
hxsl_Type.TVoid.toString = $estr;
hxsl_Type.TVoid.__enum__ = hxsl_Type;
hxsl_Type.TInt = ["TInt",1];
hxsl_Type.TInt.toString = $estr;
hxsl_Type.TInt.__enum__ = hxsl_Type;
hxsl_Type.TBool = ["TBool",2];
hxsl_Type.TBool.toString = $estr;
hxsl_Type.TBool.__enum__ = hxsl_Type;
hxsl_Type.TFloat = ["TFloat",3];
hxsl_Type.TFloat.toString = $estr;
hxsl_Type.TFloat.__enum__ = hxsl_Type;
hxsl_Type.TString = ["TString",4];
hxsl_Type.TString.toString = $estr;
hxsl_Type.TString.__enum__ = hxsl_Type;
hxsl_Type.TVec = function(size,t) { var $x = ["TVec",5,size,t]; $x.__enum__ = hxsl_Type; $x.toString = $estr; return $x; };
hxsl_Type.TMat3 = ["TMat3",6];
hxsl_Type.TMat3.toString = $estr;
hxsl_Type.TMat3.__enum__ = hxsl_Type;
hxsl_Type.TMat4 = ["TMat4",7];
hxsl_Type.TMat4.toString = $estr;
hxsl_Type.TMat4.__enum__ = hxsl_Type;
hxsl_Type.TMat3x4 = ["TMat3x4",8];
hxsl_Type.TMat3x4.toString = $estr;
hxsl_Type.TMat3x4.__enum__ = hxsl_Type;
hxsl_Type.TBytes = function(size) { var $x = ["TBytes",9,size]; $x.__enum__ = hxsl_Type; $x.toString = $estr; return $x; };
hxsl_Type.TSampler2D = ["TSampler2D",10];
hxsl_Type.TSampler2D.toString = $estr;
hxsl_Type.TSampler2D.__enum__ = hxsl_Type;
hxsl_Type.TSamplerCube = ["TSamplerCube",11];
hxsl_Type.TSamplerCube.toString = $estr;
hxsl_Type.TSamplerCube.__enum__ = hxsl_Type;
hxsl_Type.TStruct = function(vl) { var $x = ["TStruct",12,vl]; $x.__enum__ = hxsl_Type; $x.toString = $estr; return $x; };
hxsl_Type.TFun = function(variants) { var $x = ["TFun",13,variants]; $x.__enum__ = hxsl_Type; $x.toString = $estr; return $x; };
hxsl_Type.TArray = function(t,size) { var $x = ["TArray",14,t,size]; $x.__enum__ = hxsl_Type; $x.toString = $estr; return $x; };
hxsl_Type.TChannel = function(size) { var $x = ["TChannel",15,size]; $x.__enum__ = hxsl_Type; $x.toString = $estr; return $x; };
hxsl_Type.__empty_constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TSampler2D,hxsl_Type.TSamplerCube];
var hxsl_VecType = $hxClasses["hxsl.VecType"] = { __ename__ : true, __constructs__ : ["VInt","VFloat","VBool"] };
hxsl_VecType.VInt = ["VInt",0];
hxsl_VecType.VInt.toString = $estr;
hxsl_VecType.VInt.__enum__ = hxsl_VecType;
hxsl_VecType.VFloat = ["VFloat",1];
hxsl_VecType.VFloat.toString = $estr;
hxsl_VecType.VFloat.__enum__ = hxsl_VecType;
hxsl_VecType.VBool = ["VBool",2];
hxsl_VecType.VBool.toString = $estr;
hxsl_VecType.VBool.__enum__ = hxsl_VecType;
hxsl_VecType.__empty_constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
var hxsl_SizeDecl = $hxClasses["hxsl.SizeDecl"] = { __ename__ : true, __constructs__ : ["SConst","SVar"] };
hxsl_SizeDecl.SConst = function(v) { var $x = ["SConst",0,v]; $x.__enum__ = hxsl_SizeDecl; $x.toString = $estr; return $x; };
hxsl_SizeDecl.SVar = function(v) { var $x = ["SVar",1,v]; $x.__enum__ = hxsl_SizeDecl; $x.toString = $estr; return $x; };
hxsl_SizeDecl.__empty_constructs__ = [];
var hxsl_Error = function(msg,pos) {
	this.msg = msg;
	this.pos = pos;
};
$hxClasses["hxsl.Error"] = hxsl_Error;
hxsl_Error.__name__ = ["hxsl","Error"];
hxsl_Error.t = function(msg,pos) {
	throw new js__$Boot_HaxeError(new hxsl_Error(msg,pos));
};
hxsl_Error.prototype = {
	toString: function() {
		return "Error(" + this.msg + ")@" + Std.string(this.pos);
	}
	,__class__: hxsl_Error
};
var hxsl_VarKind = $hxClasses["hxsl.VarKind"] = { __ename__ : true, __constructs__ : ["Global","Input","Param","Var","Local","Output","Function"] };
hxsl_VarKind.Global = ["Global",0];
hxsl_VarKind.Global.toString = $estr;
hxsl_VarKind.Global.__enum__ = hxsl_VarKind;
hxsl_VarKind.Input = ["Input",1];
hxsl_VarKind.Input.toString = $estr;
hxsl_VarKind.Input.__enum__ = hxsl_VarKind;
hxsl_VarKind.Param = ["Param",2];
hxsl_VarKind.Param.toString = $estr;
hxsl_VarKind.Param.__enum__ = hxsl_VarKind;
hxsl_VarKind.Var = ["Var",3];
hxsl_VarKind.Var.toString = $estr;
hxsl_VarKind.Var.__enum__ = hxsl_VarKind;
hxsl_VarKind.Local = ["Local",4];
hxsl_VarKind.Local.toString = $estr;
hxsl_VarKind.Local.__enum__ = hxsl_VarKind;
hxsl_VarKind.Output = ["Output",5];
hxsl_VarKind.Output.toString = $estr;
hxsl_VarKind.Output.__enum__ = hxsl_VarKind;
hxsl_VarKind.Function = ["Function",6];
hxsl_VarKind.Function.toString = $estr;
hxsl_VarKind.Function.__enum__ = hxsl_VarKind;
hxsl_VarKind.__empty_constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
var hxsl_VarQualifier = $hxClasses["hxsl.VarQualifier"] = { __ename__ : true, __constructs__ : ["Const","Private","Nullable","PerObject","Name","Shared","Precision","Range","Ignore"] };
hxsl_VarQualifier.Const = function(max) { var $x = ["Const",0,max]; $x.__enum__ = hxsl_VarQualifier; $x.toString = $estr; return $x; };
hxsl_VarQualifier.Private = ["Private",1];
hxsl_VarQualifier.Private.toString = $estr;
hxsl_VarQualifier.Private.__enum__ = hxsl_VarQualifier;
hxsl_VarQualifier.Nullable = ["Nullable",2];
hxsl_VarQualifier.Nullable.toString = $estr;
hxsl_VarQualifier.Nullable.__enum__ = hxsl_VarQualifier;
hxsl_VarQualifier.PerObject = ["PerObject",3];
hxsl_VarQualifier.PerObject.toString = $estr;
hxsl_VarQualifier.PerObject.__enum__ = hxsl_VarQualifier;
hxsl_VarQualifier.Name = function(n) { var $x = ["Name",4,n]; $x.__enum__ = hxsl_VarQualifier; $x.toString = $estr; return $x; };
hxsl_VarQualifier.Shared = ["Shared",5];
hxsl_VarQualifier.Shared.toString = $estr;
hxsl_VarQualifier.Shared.__enum__ = hxsl_VarQualifier;
hxsl_VarQualifier.Precision = function(p) { var $x = ["Precision",6,p]; $x.__enum__ = hxsl_VarQualifier; $x.toString = $estr; return $x; };
hxsl_VarQualifier.Range = function(min,max) { var $x = ["Range",7,min,max]; $x.__enum__ = hxsl_VarQualifier; $x.toString = $estr; return $x; };
hxsl_VarQualifier.Ignore = ["Ignore",8];
hxsl_VarQualifier.Ignore.toString = $estr;
hxsl_VarQualifier.Ignore.__enum__ = hxsl_VarQualifier;
hxsl_VarQualifier.__empty_constructs__ = [hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Ignore];
var hxsl_Prec = $hxClasses["hxsl.Prec"] = { __ename__ : true, __constructs__ : ["Low","Medium","High"] };
hxsl_Prec.Low = ["Low",0];
hxsl_Prec.Low.toString = $estr;
hxsl_Prec.Low.__enum__ = hxsl_Prec;
hxsl_Prec.Medium = ["Medium",1];
hxsl_Prec.Medium.toString = $estr;
hxsl_Prec.Medium.__enum__ = hxsl_Prec;
hxsl_Prec.High = ["High",2];
hxsl_Prec.High.toString = $estr;
hxsl_Prec.High.__enum__ = hxsl_Prec;
hxsl_Prec.__empty_constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
var hxsl_Const = $hxClasses["hxsl.Const"] = { __ename__ : true, __constructs__ : ["CNull","CBool","CInt","CFloat","CString"] };
hxsl_Const.CNull = ["CNull",0];
hxsl_Const.CNull.toString = $estr;
hxsl_Const.CNull.__enum__ = hxsl_Const;
hxsl_Const.CBool = function(b) { var $x = ["CBool",1,b]; $x.__enum__ = hxsl_Const; $x.toString = $estr; return $x; };
hxsl_Const.CInt = function(v) { var $x = ["CInt",2,v]; $x.__enum__ = hxsl_Const; $x.toString = $estr; return $x; };
hxsl_Const.CFloat = function(v) { var $x = ["CFloat",3,v]; $x.__enum__ = hxsl_Const; $x.toString = $estr; return $x; };
hxsl_Const.CString = function(v) { var $x = ["CString",4,v]; $x.__enum__ = hxsl_Const; $x.toString = $estr; return $x; };
hxsl_Const.__empty_constructs__ = [hxsl_Const.CNull];
var hxsl_ExprDef = $hxClasses["hxsl.ExprDef"] = { __ename__ : true, __constructs__ : ["EConst","EIdent","EParenthesis","EField","EBinop","EUnop","ECall","EBlock","EVars","EFunction","EIf","EDiscard","EFor","EReturn","EBreak","EContinue","EArray","EArrayDecl","ESwitch","EWhile","EMeta"] };
hxsl_ExprDef.EConst = function(c) { var $x = ["EConst",0,c]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EIdent = function(i) { var $x = ["EIdent",1,i]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EParenthesis = function(e) { var $x = ["EParenthesis",2,e]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EField = function(e,f) { var $x = ["EField",3,e,f]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EBinop = function(op,e1,e2) { var $x = ["EBinop",4,op,e1,e2]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EUnop = function(op,e1) { var $x = ["EUnop",5,op,e1]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.ECall = function(e,args) { var $x = ["ECall",6,e,args]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EBlock = function(el) { var $x = ["EBlock",7,el]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EVars = function(v) { var $x = ["EVars",8,v]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EFunction = function(f) { var $x = ["EFunction",9,f]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EIf = function(econd,eif,eelse) { var $x = ["EIf",10,econd,eif,eelse]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EDiscard = ["EDiscard",11];
hxsl_ExprDef.EDiscard.toString = $estr;
hxsl_ExprDef.EDiscard.__enum__ = hxsl_ExprDef;
hxsl_ExprDef.EFor = function(v,loop,block) { var $x = ["EFor",12,v,loop,block]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EReturn = function(e) { var $x = ["EReturn",13,e]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EBreak = ["EBreak",14];
hxsl_ExprDef.EBreak.toString = $estr;
hxsl_ExprDef.EBreak.__enum__ = hxsl_ExprDef;
hxsl_ExprDef.EContinue = ["EContinue",15];
hxsl_ExprDef.EContinue.toString = $estr;
hxsl_ExprDef.EContinue.__enum__ = hxsl_ExprDef;
hxsl_ExprDef.EArray = function(e,eindex) { var $x = ["EArray",16,e,eindex]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EArrayDecl = function(el) { var $x = ["EArrayDecl",17,el]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.ESwitch = function(e,cases,def) { var $x = ["ESwitch",18,e,cases,def]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EWhile = function(cond,loop,normalWhile) { var $x = ["EWhile",19,cond,loop,normalWhile]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.EMeta = function(name,args,e) { var $x = ["EMeta",20,name,args,e]; $x.__enum__ = hxsl_ExprDef; $x.toString = $estr; return $x; };
hxsl_ExprDef.__empty_constructs__ = [hxsl_ExprDef.EDiscard,hxsl_ExprDef.EBreak,hxsl_ExprDef.EContinue];
var hxsl_FunctionKind = $hxClasses["hxsl.FunctionKind"] = { __ename__ : true, __constructs__ : ["Vertex","Fragment","Init","Helper"] };
hxsl_FunctionKind.Vertex = ["Vertex",0];
hxsl_FunctionKind.Vertex.toString = $estr;
hxsl_FunctionKind.Vertex.__enum__ = hxsl_FunctionKind;
hxsl_FunctionKind.Fragment = ["Fragment",1];
hxsl_FunctionKind.Fragment.toString = $estr;
hxsl_FunctionKind.Fragment.__enum__ = hxsl_FunctionKind;
hxsl_FunctionKind.Init = ["Init",2];
hxsl_FunctionKind.Init.toString = $estr;
hxsl_FunctionKind.Init.__enum__ = hxsl_FunctionKind;
hxsl_FunctionKind.Helper = ["Helper",3];
hxsl_FunctionKind.Helper.toString = $estr;
hxsl_FunctionKind.Helper.__enum__ = hxsl_FunctionKind;
hxsl_FunctionKind.__empty_constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper];
var hxsl_TGlobal = $hxClasses["hxsl.TGlobal"] = { __ename__ : true, __constructs__ : ["Radians","Degrees","Sin","Cos","Tan","Asin","Acos","Atan","Pow","Exp","Log","Exp2","Log2","Sqrt","Inversesqrt","Abs","Sign","Floor","Ceil","Fract","Mod","Min","Max","Clamp","Mix","Step","Smoothstep","Length","Distance","Dot","Cross","Normalize","LReflect","Texture2D","TextureCube","ToInt","ToFloat","ToBool","Vec2","Vec3","Vec4","IVec2","IVec3","IVec4","BVec2","BVec3","BVec4","Mat2","Mat3","Mat4","Mat3x4","Saturate","Pack","Unpack","PackNormal","UnpackNormal","DFdx","DFdy","Fwidth","TextureCubeLod","Texture2DLod","ChannelRead","Trace"] };
hxsl_TGlobal.Radians = ["Radians",0];
hxsl_TGlobal.Radians.toString = $estr;
hxsl_TGlobal.Radians.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Degrees = ["Degrees",1];
hxsl_TGlobal.Degrees.toString = $estr;
hxsl_TGlobal.Degrees.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Sin = ["Sin",2];
hxsl_TGlobal.Sin.toString = $estr;
hxsl_TGlobal.Sin.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Cos = ["Cos",3];
hxsl_TGlobal.Cos.toString = $estr;
hxsl_TGlobal.Cos.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Tan = ["Tan",4];
hxsl_TGlobal.Tan.toString = $estr;
hxsl_TGlobal.Tan.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Asin = ["Asin",5];
hxsl_TGlobal.Asin.toString = $estr;
hxsl_TGlobal.Asin.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Acos = ["Acos",6];
hxsl_TGlobal.Acos.toString = $estr;
hxsl_TGlobal.Acos.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Atan = ["Atan",7];
hxsl_TGlobal.Atan.toString = $estr;
hxsl_TGlobal.Atan.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Pow = ["Pow",8];
hxsl_TGlobal.Pow.toString = $estr;
hxsl_TGlobal.Pow.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Exp = ["Exp",9];
hxsl_TGlobal.Exp.toString = $estr;
hxsl_TGlobal.Exp.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Log = ["Log",10];
hxsl_TGlobal.Log.toString = $estr;
hxsl_TGlobal.Log.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Exp2 = ["Exp2",11];
hxsl_TGlobal.Exp2.toString = $estr;
hxsl_TGlobal.Exp2.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Log2 = ["Log2",12];
hxsl_TGlobal.Log2.toString = $estr;
hxsl_TGlobal.Log2.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Sqrt = ["Sqrt",13];
hxsl_TGlobal.Sqrt.toString = $estr;
hxsl_TGlobal.Sqrt.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Inversesqrt = ["Inversesqrt",14];
hxsl_TGlobal.Inversesqrt.toString = $estr;
hxsl_TGlobal.Inversesqrt.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Abs = ["Abs",15];
hxsl_TGlobal.Abs.toString = $estr;
hxsl_TGlobal.Abs.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Sign = ["Sign",16];
hxsl_TGlobal.Sign.toString = $estr;
hxsl_TGlobal.Sign.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Floor = ["Floor",17];
hxsl_TGlobal.Floor.toString = $estr;
hxsl_TGlobal.Floor.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Ceil = ["Ceil",18];
hxsl_TGlobal.Ceil.toString = $estr;
hxsl_TGlobal.Ceil.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Fract = ["Fract",19];
hxsl_TGlobal.Fract.toString = $estr;
hxsl_TGlobal.Fract.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Mod = ["Mod",20];
hxsl_TGlobal.Mod.toString = $estr;
hxsl_TGlobal.Mod.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Min = ["Min",21];
hxsl_TGlobal.Min.toString = $estr;
hxsl_TGlobal.Min.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Max = ["Max",22];
hxsl_TGlobal.Max.toString = $estr;
hxsl_TGlobal.Max.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Clamp = ["Clamp",23];
hxsl_TGlobal.Clamp.toString = $estr;
hxsl_TGlobal.Clamp.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Mix = ["Mix",24];
hxsl_TGlobal.Mix.toString = $estr;
hxsl_TGlobal.Mix.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Step = ["Step",25];
hxsl_TGlobal.Step.toString = $estr;
hxsl_TGlobal.Step.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Smoothstep = ["Smoothstep",26];
hxsl_TGlobal.Smoothstep.toString = $estr;
hxsl_TGlobal.Smoothstep.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Length = ["Length",27];
hxsl_TGlobal.Length.toString = $estr;
hxsl_TGlobal.Length.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Distance = ["Distance",28];
hxsl_TGlobal.Distance.toString = $estr;
hxsl_TGlobal.Distance.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Dot = ["Dot",29];
hxsl_TGlobal.Dot.toString = $estr;
hxsl_TGlobal.Dot.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Cross = ["Cross",30];
hxsl_TGlobal.Cross.toString = $estr;
hxsl_TGlobal.Cross.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Normalize = ["Normalize",31];
hxsl_TGlobal.Normalize.toString = $estr;
hxsl_TGlobal.Normalize.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.LReflect = ["LReflect",32];
hxsl_TGlobal.LReflect.toString = $estr;
hxsl_TGlobal.LReflect.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Texture2D = ["Texture2D",33];
hxsl_TGlobal.Texture2D.toString = $estr;
hxsl_TGlobal.Texture2D.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.TextureCube = ["TextureCube",34];
hxsl_TGlobal.TextureCube.toString = $estr;
hxsl_TGlobal.TextureCube.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.ToInt = ["ToInt",35];
hxsl_TGlobal.ToInt.toString = $estr;
hxsl_TGlobal.ToInt.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.ToFloat = ["ToFloat",36];
hxsl_TGlobal.ToFloat.toString = $estr;
hxsl_TGlobal.ToFloat.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.ToBool = ["ToBool",37];
hxsl_TGlobal.ToBool.toString = $estr;
hxsl_TGlobal.ToBool.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Vec2 = ["Vec2",38];
hxsl_TGlobal.Vec2.toString = $estr;
hxsl_TGlobal.Vec2.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Vec3 = ["Vec3",39];
hxsl_TGlobal.Vec3.toString = $estr;
hxsl_TGlobal.Vec3.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Vec4 = ["Vec4",40];
hxsl_TGlobal.Vec4.toString = $estr;
hxsl_TGlobal.Vec4.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.IVec2 = ["IVec2",41];
hxsl_TGlobal.IVec2.toString = $estr;
hxsl_TGlobal.IVec2.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.IVec3 = ["IVec3",42];
hxsl_TGlobal.IVec3.toString = $estr;
hxsl_TGlobal.IVec3.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.IVec4 = ["IVec4",43];
hxsl_TGlobal.IVec4.toString = $estr;
hxsl_TGlobal.IVec4.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.BVec2 = ["BVec2",44];
hxsl_TGlobal.BVec2.toString = $estr;
hxsl_TGlobal.BVec2.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.BVec3 = ["BVec3",45];
hxsl_TGlobal.BVec3.toString = $estr;
hxsl_TGlobal.BVec3.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.BVec4 = ["BVec4",46];
hxsl_TGlobal.BVec4.toString = $estr;
hxsl_TGlobal.BVec4.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Mat2 = ["Mat2",47];
hxsl_TGlobal.Mat2.toString = $estr;
hxsl_TGlobal.Mat2.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Mat3 = ["Mat3",48];
hxsl_TGlobal.Mat3.toString = $estr;
hxsl_TGlobal.Mat3.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Mat4 = ["Mat4",49];
hxsl_TGlobal.Mat4.toString = $estr;
hxsl_TGlobal.Mat4.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Mat3x4 = ["Mat3x4",50];
hxsl_TGlobal.Mat3x4.toString = $estr;
hxsl_TGlobal.Mat3x4.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Saturate = ["Saturate",51];
hxsl_TGlobal.Saturate.toString = $estr;
hxsl_TGlobal.Saturate.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Pack = ["Pack",52];
hxsl_TGlobal.Pack.toString = $estr;
hxsl_TGlobal.Pack.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Unpack = ["Unpack",53];
hxsl_TGlobal.Unpack.toString = $estr;
hxsl_TGlobal.Unpack.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.PackNormal = ["PackNormal",54];
hxsl_TGlobal.PackNormal.toString = $estr;
hxsl_TGlobal.PackNormal.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.UnpackNormal = ["UnpackNormal",55];
hxsl_TGlobal.UnpackNormal.toString = $estr;
hxsl_TGlobal.UnpackNormal.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.DFdx = ["DFdx",56];
hxsl_TGlobal.DFdx.toString = $estr;
hxsl_TGlobal.DFdx.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.DFdy = ["DFdy",57];
hxsl_TGlobal.DFdy.toString = $estr;
hxsl_TGlobal.DFdy.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Fwidth = ["Fwidth",58];
hxsl_TGlobal.Fwidth.toString = $estr;
hxsl_TGlobal.Fwidth.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.TextureCubeLod = ["TextureCubeLod",59];
hxsl_TGlobal.TextureCubeLod.toString = $estr;
hxsl_TGlobal.TextureCubeLod.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Texture2DLod = ["Texture2DLod",60];
hxsl_TGlobal.Texture2DLod.toString = $estr;
hxsl_TGlobal.Texture2DLod.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.ChannelRead = ["ChannelRead",61];
hxsl_TGlobal.ChannelRead.toString = $estr;
hxsl_TGlobal.ChannelRead.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.Trace = ["Trace",62];
hxsl_TGlobal.Trace.toString = $estr;
hxsl_TGlobal.Trace.__enum__ = hxsl_TGlobal;
hxsl_TGlobal.__empty_constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture2D,hxsl_TGlobal.TextureCube,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.TextureCubeLod,hxsl_TGlobal.Texture2DLod,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.Trace];
var hxsl_Component = $hxClasses["hxsl.Component"] = { __ename__ : true, __constructs__ : ["X","Y","Z","W"] };
hxsl_Component.X = ["X",0];
hxsl_Component.X.toString = $estr;
hxsl_Component.X.__enum__ = hxsl_Component;
hxsl_Component.Y = ["Y",1];
hxsl_Component.Y.toString = $estr;
hxsl_Component.Y.__enum__ = hxsl_Component;
hxsl_Component.Z = ["Z",2];
hxsl_Component.Z.toString = $estr;
hxsl_Component.Z.__enum__ = hxsl_Component;
hxsl_Component.W = ["W",3];
hxsl_Component.W.toString = $estr;
hxsl_Component.W.__enum__ = hxsl_Component;
hxsl_Component.__empty_constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
var hxsl_TExprDef = $hxClasses["hxsl.TExprDef"] = { __ename__ : true, __constructs__ : ["TConst","TVar","TGlobal","TParenthesis","TBlock","TBinop","TUnop","TVarDecl","TCall","TSwiz","TIf","TDiscard","TReturn","TFor","TContinue","TBreak","TArray","TArrayDecl","TSwitch","TWhile","TMeta"] };
hxsl_TExprDef.TConst = function(c) { var $x = ["TConst",0,c]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TVar = function(v) { var $x = ["TVar",1,v]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TGlobal = function(g) { var $x = ["TGlobal",2,g]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TParenthesis = function(e) { var $x = ["TParenthesis",3,e]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TBlock = function(el) { var $x = ["TBlock",4,el]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TBinop = function(op,e1,e2) { var $x = ["TBinop",5,op,e1,e2]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TUnop = function(op,e1) { var $x = ["TUnop",6,op,e1]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TVarDecl = function(v,init) { var $x = ["TVarDecl",7,v,init]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TCall = function(e,args) { var $x = ["TCall",8,e,args]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TSwiz = function(e,regs) { var $x = ["TSwiz",9,e,regs]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TIf = function(econd,eif,eelse) { var $x = ["TIf",10,econd,eif,eelse]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TDiscard = ["TDiscard",11];
hxsl_TExprDef.TDiscard.toString = $estr;
hxsl_TExprDef.TDiscard.__enum__ = hxsl_TExprDef;
hxsl_TExprDef.TReturn = function(e) { var $x = ["TReturn",12,e]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TFor = function(v,it,loop) { var $x = ["TFor",13,v,it,loop]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TContinue = ["TContinue",14];
hxsl_TExprDef.TContinue.toString = $estr;
hxsl_TExprDef.TContinue.__enum__ = hxsl_TExprDef;
hxsl_TExprDef.TBreak = ["TBreak",15];
hxsl_TExprDef.TBreak.toString = $estr;
hxsl_TExprDef.TBreak.__enum__ = hxsl_TExprDef;
hxsl_TExprDef.TArray = function(e,index) { var $x = ["TArray",16,e,index]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TArrayDecl = function(el) { var $x = ["TArrayDecl",17,el]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TSwitch = function(e,cases,def) { var $x = ["TSwitch",18,e,cases,def]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TWhile = function(e,loop,normalWhile) { var $x = ["TWhile",19,e,loop,normalWhile]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.TMeta = function(m,args,e) { var $x = ["TMeta",20,m,args,e]; $x.__enum__ = hxsl_TExprDef; $x.toString = $estr; return $x; };
hxsl_TExprDef.__empty_constructs__ = [hxsl_TExprDef.TDiscard,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak];
var hxsl_Tools = function() { };
$hxClasses["hxsl.Tools"] = hxsl_Tools;
hxsl_Tools.__name__ = ["hxsl","Tools"];
hxsl_Tools.allocVarId = function() {
	return ++hxsl_Tools.UID;
};
hxsl_Tools.getName = function(v) {
	if(v.qualifiers == null) {
		return v.name;
	}
	var _g = 0;
	var _g1 = v.qualifiers;
	while(_g < _g1.length) {
		var q = _g1[_g];
		++_g;
		if(q[1] == 4) {
			var n = q[2];
			return n;
		}
	}
	return v.name;
};
hxsl_Tools.getConstBits = function(v) {
	var _g = v.type;
	switch(_g[1]) {
	case 1:
		var _g1 = 0;
		var _g11 = v.qualifiers;
		while(_g1 < _g11.length) {
			var q = _g11[_g1];
			++_g1;
			if(q[1] == 0) {
				var n = q[2];
				if(n != null) {
					var bits = 0;
					while(n >= 1 << bits) ++bits;
					return bits;
				}
				return 8;
			}
		}
		break;
	case 2:
		return 1;
	case 15:
		return 3 + hxsl_Tools.MAX_CHANNELS_BITS;
	default:
	}
	return 0;
};
hxsl_Tools.isConst = function(v) {
	var _g = v.type;
	if(_g[1] == 15) {
		return true;
	}
	if(v.qualifiers != null) {
		var _g1 = 0;
		var _g2 = v.qualifiers;
		while(_g1 < _g2.length) {
			var q = _g2[_g1];
			++_g1;
			if(q[1] == 0) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.isStruct = function(v) {
	var _g = v.type;
	if(_g[1] == 12) {
		return true;
	} else {
		return false;
	}
};
hxsl_Tools.isArray = function(v) {
	var _g = v.type;
	if(_g[1] == 14) {
		return true;
	} else {
		return false;
	}
};
hxsl_Tools.hasQualifier = function(v,q) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q2 = _g1[_g];
			++_g;
			if(q2 == q) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.isSampler = function(t) {
	switch(t[1]) {
	case 10:case 11:
		return true;
	default:
		return false;
	}
};
hxsl_Tools.toString = function(t) {
	switch(t[1]) {
	case 5:
		var t1 = t[3];
		var size = t[2];
		var prefix;
		switch(t1[1]) {
		case 0:
			prefix = "I";
			break;
		case 1:
			prefix = "";
			break;
		case 2:
			prefix = "B";
			break;
		}
		return prefix + "Vec" + size;
	case 9:
		var n = t[2];
		return "Bytes" + n;
	case 12:
		var vl = t[2];
		var _g = [];
		var _g1 = 0;
		while(_g1 < vl.length) {
			var v = vl[_g1];
			++_g1;
			_g.push(v.name + " : " + hxsl_Tools.toString(v.type));
		}
		return "{" + _g.join(",") + "}";
	case 14:
		var s = t[3];
		var t2 = t[2];
		var tmp = hxsl_Tools.toString(t2) + "[";
		var tmp1;
		switch(s[1]) {
		case 0:
			var i = s[2];
			tmp1 = "" + i;
			break;
		case 1:
			var v1 = s[2];
			tmp1 = v1.name;
			break;
		}
		return tmp + tmp1 + "]";
	default:
		return HxOverrides.substr(t[0],1,null);
	}
};
hxsl_Tools.toType = function(t) {
	switch(t[1]) {
	case 0:
		return hxsl_Type.TInt;
	case 1:
		return hxsl_Type.TFloat;
	case 2:
		return hxsl_Type.TBool;
	}
};
hxsl_Tools.hasSideEffect = function(e) {
	var _g = e.e;
	switch(_g[1]) {
	case 0:case 1:case 2:
		return false;
	case 3:
		var e1 = _g[2];
		return hxsl_Tools.hasSideEffect(e1);
	case 4:
		var el = _g[2];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e2 = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e2)) {
				return true;
			}
		}
		return false;
	case 5:
		switch(_g[2][1]) {
		case 4:case 20:
			return true;
		default:
			var e21 = _g[4];
			var e11 = _g[3];
			if(!hxsl_Tools.hasSideEffect(e11)) {
				return hxsl_Tools.hasSideEffect(e21);
			} else {
				return true;
			}
		}
		break;
	case 6:
		var e12 = _g[3];
		return hxsl_Tools.hasSideEffect(e12);
	case 9:
		var e3 = _g[2];
		return hxsl_Tools.hasSideEffect(e3);
	case 10:
		var eelse = _g[4];
		var eif = _g[3];
		var econd = _g[2];
		if(!(hxsl_Tools.hasSideEffect(econd) || hxsl_Tools.hasSideEffect(eif))) {
			if(eelse != null) {
				return hxsl_Tools.hasSideEffect(eelse);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 13:
		var loop = _g[4];
		var it = _g[3];
		if(!hxsl_Tools.hasSideEffect(it)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 7:case 8:case 11:case 12:case 14:case 15:
		return true;
	case 16:
		var index = _g[3];
		var e4 = _g[2];
		if(!hxsl_Tools.hasSideEffect(e4)) {
			return hxsl_Tools.hasSideEffect(index);
		} else {
			return true;
		}
		break;
	case 17:
		var el1 = _g[2];
		var _g2 = 0;
		while(_g2 < el1.length) {
			var e5 = el1[_g2];
			++_g2;
			if(hxsl_Tools.hasSideEffect(e5)) {
				return true;
			}
		}
		return false;
	case 18:
		var def = _g[4];
		var cases = _g[3];
		var e6 = _g[2];
		var _g3 = 0;
		while(_g3 < cases.length) {
			var c = cases[_g3];
			++_g3;
			var _g11 = 0;
			var _g21 = c.values;
			while(_g11 < _g21.length) {
				var v = _g21[_g11];
				++_g11;
				if(hxsl_Tools.hasSideEffect(v)) {
					return true;
				}
			}
			if(hxsl_Tools.hasSideEffect(c.expr)) {
				return true;
			}
		}
		if(!hxsl_Tools.hasSideEffect(e6)) {
			if(def != null) {
				return hxsl_Tools.hasSideEffect(def);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 19:
		var loop1 = _g[3];
		var e7 = _g[2];
		if(!hxsl_Tools.hasSideEffect(e7)) {
			return hxsl_Tools.hasSideEffect(loop1);
		} else {
			return true;
		}
		break;
	case 20:
		var e8 = _g[4];
		return hxsl_Tools.hasSideEffect(e8);
	}
};
hxsl_Tools.iter = function(e,f) {
	var _g = e.e;
	switch(_g[1]) {
	case 3:
		var e1 = _g[2];
		f(e1);
		break;
	case 4:
		var el = _g[2];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e2 = el[_g1];
			++_g1;
			f(e2);
		}
		break;
	case 5:
		var e21 = _g[4];
		var e11 = _g[3];
		f(e11);
		f(e21);
		break;
	case 6:
		var e12 = _g[3];
		f(e12);
		break;
	case 7:
		var init = _g[3];
		if(init != null) {
			f(init);
		}
		break;
	case 8:
		var args = _g[3];
		var e3 = _g[2];
		f(e3);
		var _g2 = 0;
		while(_g2 < args.length) {
			var a = args[_g2];
			++_g2;
			f(a);
		}
		break;
	case 9:
		var e4 = _g[2];
		f(e4);
		break;
	case 10:
		var eelse = _g[4];
		var eif = _g[3];
		var econd = _g[2];
		f(econd);
		f(eif);
		if(eelse != null) {
			f(eelse);
		}
		break;
	case 12:
		var e5 = _g[2];
		if(e5 != null) {
			f(e5);
		}
		break;
	case 13:
		var loop = _g[4];
		var it = _g[3];
		f(it);
		f(loop);
		break;
	case 0:case 1:case 2:case 11:case 14:case 15:
		break;
	case 16:
		var index = _g[3];
		var e6 = _g[2];
		f(e6);
		f(index);
		break;
	case 17:
		var el1 = _g[2];
		var _g3 = 0;
		while(_g3 < el1.length) {
			var e7 = el1[_g3];
			++_g3;
			f(e7);
		}
		break;
	case 18:
		var def = _g[4];
		var cases = _g[3];
		var e8 = _g[2];
		f(e8);
		var _g4 = 0;
		while(_g4 < cases.length) {
			var c = cases[_g4];
			++_g4;
			var _g11 = 0;
			var _g21 = c.values;
			while(_g11 < _g21.length) {
				var v = _g21[_g11];
				++_g11;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 19:
		var loop1 = _g[3];
		var e9 = _g[2];
		f(e9);
		f(loop1);
		break;
	case 20:
		var e10 = _g[4];
		f(e10);
		break;
	}
};
hxsl_Tools.map = function(e,f) {
	var ed;
	var _g = e.e;
	switch(_g[1]) {
	case 3:
		var e1 = _g[2];
		ed = hxsl_TExprDef.TParenthesis(f(e1));
		break;
	case 4:
		var el = _g[2];
		var _g1 = [];
		var _g11 = 0;
		while(_g11 < el.length) {
			var e2 = el[_g11];
			++_g11;
			_g1.push(f(e2));
		}
		ed = hxsl_TExprDef.TBlock(_g1);
		break;
	case 5:
		var e21 = _g[4];
		var e11 = _g[3];
		var op = _g[2];
		ed = hxsl_TExprDef.TBinop(op,f(e11),f(e21));
		break;
	case 6:
		var e12 = _g[3];
		var op1 = _g[2];
		ed = hxsl_TExprDef.TUnop(op1,f(e12));
		break;
	case 7:
		var init = _g[3];
		var v = _g[2];
		ed = hxsl_TExprDef.TVarDecl(v,init != null ? f(init) : null);
		break;
	case 8:
		var args = _g[3];
		var e3 = _g[2];
		var ed1 = f(e3);
		var _g2 = [];
		var _g12 = 0;
		while(_g12 < args.length) {
			var a = args[_g12];
			++_g12;
			_g2.push(f(a));
		}
		ed = hxsl_TExprDef.TCall(ed1,_g2);
		break;
	case 9:
		var c = _g[3];
		var e4 = _g[2];
		ed = hxsl_TExprDef.TSwiz(f(e4),c);
		break;
	case 10:
		var eelse = _g[4];
		var eif = _g[3];
		var econd = _g[2];
		ed = hxsl_TExprDef.TIf(f(econd),f(eif),eelse != null ? f(eelse) : null);
		break;
	case 12:
		var e5 = _g[2];
		ed = hxsl_TExprDef.TReturn(e5 != null ? f(e5) : null);
		break;
	case 13:
		var loop = _g[4];
		var it = _g[3];
		var v1 = _g[2];
		ed = hxsl_TExprDef.TFor(v1,f(it),f(loop));
		break;
	case 0:case 1:case 2:case 11:case 14:case 15:
		ed = e.e;
		break;
	case 16:
		var index = _g[3];
		var e6 = _g[2];
		ed = hxsl_TExprDef.TArray(f(e6),f(index));
		break;
	case 17:
		var el1 = _g[2];
		var _g3 = [];
		var _g13 = 0;
		while(_g13 < el1.length) {
			var e7 = el1[_g13];
			++_g13;
			_g3.push(f(e7));
		}
		ed = hxsl_TExprDef.TArrayDecl(_g3);
		break;
	case 18:
		var def = _g[4];
		var cases = _g[3];
		var e8 = _g[2];
		var ed2 = f(e8);
		var _g4 = [];
		var _g14 = 0;
		while(_g14 < cases.length) {
			var c1 = cases[_g14];
			++_g14;
			var _g21 = [];
			var _g31 = 0;
			var _g41 = c1.values;
			while(_g31 < _g41.length) {
				var v2 = _g41[_g31];
				++_g31;
				_g21.push(f(v2));
			}
			_g4.push({ values : _g21, expr : f(c1.expr)});
		}
		ed = hxsl_TExprDef.TSwitch(ed2,_g4,def == null ? null : f(def));
		break;
	case 19:
		var normalWhile = _g[4];
		var loop1 = _g[3];
		var e9 = _g[2];
		ed = hxsl_TExprDef.TWhile(f(e9),f(loop1),normalWhile);
		break;
	case 20:
		var e10 = _g[4];
		var args1 = _g[3];
		var m = _g[2];
		ed = hxsl_TExprDef.TMeta(m,args1,f(e10));
		break;
	}
	return { e : ed, t : e.t, p : e.p};
};
hxsl_Tools.size = function(t) {
	switch(t[1]) {
	case 0:
		return 0;
	case 1:case 3:
		return 1;
	case 5:
		var n = t[2];
		return n;
	case 6:
		return 9;
	case 7:
		return 16;
	case 8:
		return 12;
	case 9:
		var s = t[2];
		return s;
	case 2:case 4:case 10:case 11:case 13:
		return 0;
	case 12:
		var vl = t[2];
		var s1 = 0;
		var _g = 0;
		while(_g < vl.length) {
			var v = vl[_g];
			++_g;
			s1 += hxsl_Tools.size(v.type);
		}
		return s1;
	case 14:
		switch(t[3][1]) {
		case 0:
			var t1 = t[2];
			var v1 = t[3][2];
			return hxsl_Tools.size(t1) * v1;
		case 1:
			return 0;
		}
		break;
	case 15:
		var n1 = t[2];
		return n1;
	}
};
var hxsl_Tools2 = function() { };
$hxClasses["hxsl.Tools2"] = hxsl_Tools2;
hxsl_Tools2.__name__ = ["hxsl","Tools2"];
hxsl_Tools2.toString = function(g) {
	var n = g[0];
	return n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
};
var hxsl_Tools3 = function() { };
$hxClasses["hxsl.Tools3"] = hxsl_Tools3;
hxsl_Tools3.__name__ = ["hxsl","Tools3"];
hxsl_Tools3.toString = function(s) {
	return hxsl_Printer.shaderToString(s);
};
var hxsl_Tools4 = function() { };
$hxClasses["hxsl.Tools4"] = hxsl_Tools4;
hxsl_Tools4.__name__ = ["hxsl","Tools4"];
hxsl_Tools4.toString = function(e) {
	return hxsl_Printer.toString(e);
};
var hxsl_SearchMap = function() {
};
$hxClasses["hxsl.SearchMap"] = hxsl_SearchMap;
hxsl_SearchMap.__name__ = ["hxsl","SearchMap"];
hxsl_SearchMap.prototype = {
	__class__: hxsl_SearchMap
};
var hxsl_Cache = function() {
	this.constsToGlobal = false;
	this.linkCache = new hxsl_SearchMap();
	this.linkShaders = new haxe_ds_StringMap();
	this.byID = new haxe_ds_StringMap();
};
$hxClasses["hxsl.Cache"] = hxsl_Cache;
hxsl_Cache.__name__ = ["hxsl","Cache"];
hxsl_Cache.get = function() {
	var c = hxsl_Cache.INST;
	if(c == null) {
		c = new hxsl_Cache();
		hxsl_Cache.INST = c;
	}
	return c;
};
hxsl_Cache.clear = function() {
	hxsl_Cache.INST = null;
};
hxsl_Cache.prototype = {
	getLinkShader: function(vars) {
		var key = vars.join(",");
		var _this = this.linkShaders;
		var shader = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(shader != null) {
			return shader;
		}
		var s = new hxsl_SharedShader("");
		var v = vars.slice();
		s.data = { name : "shaderLinker", vars : [], funs : []};
		var pos = null;
		var outVars = new haxe_ds_StringMap();
		var outputCount = 0;
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var makeVec = function(g,size,args,makeOutExpr) {
			var out = [];
			var rem = size;
			var _g1 = 0;
			var _g = args.length;
			while(_g1 < _g) {
				var i = _g1++;
				var e = makeOutExpr(args[args.length - 1 - i],rem - (args.length - 1 - i));
				rem -= hxsl_Tools.size(e.t);
				out.unshift(e);
			}
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},out), t : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : pos};
		};
		var makeVar = function(name,t,parent) {
			var path = parent == null ? name : hxsl_Tools.getName(parent) + "." + name;
			var v1 = __map_reserved[path] != null ? outVars.getReserved(path) : outVars.h[path];
			if(v1 != null) {
				return v1;
			}
			v1 = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Var, parent : parent};
			if(parent == null) {
				s.data.vars.push(v1);
			} else {
				var _g2 = parent.type;
				if(_g2[1] == 12) {
					var vl = _g2[2];
					vl.push(v1);
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
			}
			if(__map_reserved[path] != null) {
				outVars.setReserved(path,v1);
			} else {
				outVars.h[path] = v1;
			}
			return v1;
		};
		var makeOutExpr1 = null;
		makeOutExpr1 = function(v2,rem1) {
			switch(v2[1]) {
			case 0:
				var v3 = v2[2];
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(v3)), t : hxsl_Type.TFloat, p : pos};
			case 1:
				var size1 = v2[3];
				var vname = v2[2];
				var v4 = __map_reserved[vname] != null ? outVars.getReserved(vname) : outVars.h[vname];
				if(v4 != null) {
					return { e : hxsl_TExprDef.TVar(v4), t : v4.type, p : pos};
				}
				var path1 = vname.split(".");
				var parent1 = null;
				while(path1.length > 1) {
					var parent2 = path1.shift();
					parent1 = makeVar(parent2,hxsl_Type.TStruct([]),parent1);
				}
				if(size1 != null) {
					rem1 = size1;
				}
				var v5 = path1.shift();
				v4 = makeVar(v5,rem1 == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(rem1,hxsl_VecType.VFloat),parent1);
				return { e : hxsl_TExprDef.TVar(v4), t : v4.type, p : pos};
			case 2:
				var v6 = v2[2];
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.PackNormal), t : hxsl_Type.TVoid, p : pos},[makeOutExpr1(v6,3)]), t : tvec4, p : pos};
			case 3:
				var v7 = v2[2];
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Pack), t : hxsl_Type.TVoid, p : pos},[makeOutExpr1(v7,1)]), t : tvec4, p : pos};
			case 4:
				var args1 = v2[2];
				return makeVec(hxsl_TGlobal.Vec2,2,args1,makeOutExpr1);
			case 5:
				var args2 = v2[2];
				return makeVec(hxsl_TGlobal.Vec3,3,args2,makeOutExpr1);
			case 6:
				var args3 = v2[2];
				return makeVec(hxsl_TGlobal.Vec4,4,args3,makeOutExpr1);
			case 7:
				var comps = v2[3];
				var v8 = v2[2];
				return { e : hxsl_TExprDef.TSwiz(makeOutExpr1(v8,4),comps), t : hxsl_Type.TVec(comps.length,hxsl_VecType.VFloat), p : pos};
			}
		};
		var makeOutExpr2 = makeOutExpr1;
		var makeOutput = function(v9) {
			outputCount += 1;
			var ov = { id : hxsl_Tools.allocVarId(), type : tvec4, name : "OUTPUT" + (outputCount - 1), kind : hxsl_VarKind.Output};
			s.data.vars.push(ov);
			return { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(ov), t : tvec4, p : pos},makeOutExpr2(v9,4)), t : hxsl_Type.TVoid, p : pos};
		};
		var defineFun = function(kind,vars1) {
			var fv = { id : hxsl_Tools.allocVarId(), type : hxsl_Type.TFun([]), name : ("" + Std.string(kind)).toLowerCase(), kind : hxsl_VarKind.Function};
			var _g3 = [];
			var _g11 = 0;
			while(_g11 < vars1.length) {
				var v10 = vars1[_g11];
				++_g11;
				_g3.push(makeOutput(v10));
			}
			var f = { kind : kind, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(_g3), p : pos, t : hxsl_Type.TVoid}};
			s.data.funs.push(f);
		};
		defineFun(hxsl_FunctionKind.Vertex,[hxsl_Output.Value("output.position")]);
		defineFun(hxsl_FunctionKind.Fragment,vars);
		shader = Type.createEmptyInstance(hxsl_Shader);
		shader.shader = s;
		var _this1 = this.linkShaders;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,shader);
		} else {
			_this1.h[key] = shader;
		}
		shader.updateConstantsFinal(null);
		return shader;
	}
	,link: function(shaders) {
		var c = this.linkCache;
		var _g_last;
		var _g_l = shaders;
		_g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			if(c.next == null) {
				c.next = new haxe_ds_IntMap();
			}
			var cs = c.next.h[i.id];
			if(cs == null) {
				cs = new hxsl_SearchMap();
				c.next.h[i.id] = cs;
			}
			c = cs;
		}
		if(c.linked == null) {
			c.linked = this.compileRuntimeShader(shaders);
		}
		return c.linked;
	}
	,compileRuntimeShader: function(shaders) {
		var shaderDatas = [];
		var index = 0;
		var _g_last;
		var _g_l = shaders;
		_g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			shaderDatas.push({ inst : i, p : s1.priority, index : index++});
		}
		shaderDatas.reverse();
		haxe_ds_ArraySort.sort(shaderDatas,function(s11,s2) {
			return s2.p - s11.p;
		});
		var linker = new hxsl_Linker();
		var _g = [];
		var _g1 = 0;
		while(_g1 < shaderDatas.length) {
			var s3 = shaderDatas[_g1];
			++_g1;
			_g.push(s3.inst.shader);
		}
		var s4 = linker.link(_g);
		var paramVars = new haxe_ds_IntMap();
		var _g11 = 0;
		var _g2 = linker.allVars;
		while(_g11 < _g2.length) {
			var v = _g2[_g11];
			++_g11;
			if(v.v.kind == hxsl_VarKind.Param) {
				var _g3 = v.v.type;
				if(_g3[1] == 12) {
					continue;
				}
				var inf = shaderDatas[v.instanceIndex];
				paramVars.h[v.id] = { instance : inf.index, index : inf.inst.params.h[v.merged[0].id]};
			}
		}
		var prev = s4;
		var s5 = new hxsl_Splitter().split(s4);
		var prev1 = s5;
		var s6 = new hxsl_Dce().dce(s5.vertex,s5.fragment);
		var r = new hxsl_RuntimeShader();
		r.vertex = this.flattenShader(s6.vertex,hxsl_FunctionKind.Vertex,paramVars);
		r.vertex.vertex = true;
		r.fragment = this.flattenShader(s6.fragment,hxsl_FunctionKind.Fragment,paramVars);
		r.globals = new haxe_ds_IntMap();
		this.initGlobals(r,r.vertex);
		this.initGlobals(r,r.fragment);
		r.signature = haxe_crypto_Md5.encode(hxsl_Printer.shaderToString(r.vertex.data) + hxsl_Printer.shaderToString(r.fragment.data));
		var key = r.signature;
		var _this = this.byID;
		var r2 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(r2 != null) {
			r.id = r2.id;
		} else {
			var key1 = r.signature;
			var _this1 = this.byID;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,r);
			} else {
				_this1.h[key1] = r;
			}
		}
		return r;
	}
	,initGlobals: function(r,s) {
		var p = s.globals;
		while(p != null) {
			r.globals.h[p.gid] = true;
			p = p.next;
		}
		var p1 = s.params;
		while(p1 != null) {
			if(p1.perObjectGlobal != null) {
				r.globals.h[p1.perObjectGlobal.gid] = true;
			}
			p1 = p1.next;
		}
	}
	,getPath: function(v) {
		if(v.parent == null) {
			return v.name;
		}
		return this.getPath(v.parent) + "." + v.name;
	}
	,flattenShader: function(s,kind,params) {
		var flat = new hxsl_Flatten();
		var c = new hxsl_RuntimeShaderData();
		var data = flat.flatten(s,kind,this.constsToGlobal);
		c.consts = flat.consts;
		var g = flat.allocData.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var alloc = flat.allocData.h[g1.__id__];
			var _g = g1.kind;
			switch(_g[1]) {
			case 0:
				var _g1 = [];
				var _g11 = 0;
				while(_g11 < alloc.length) {
					var a = alloc[_g11];
					++_g11;
					if(a.v != null) {
						_g1.push(new hxsl_AllocGlobal(a.pos,this.getPath(a.v),a.v.type));
					}
				}
				var out = _g1;
				var _g2 = 0;
				var _g12 = out.length - 1;
				while(_g2 < _g12) {
					var i = _g2++;
					out[i].next = out[i + 1];
				}
				var _g13 = g1.type;
				if(_g13[1] == 14) {
					if(_g13[2][1] == 5) {
						if(_g13[2][2] == 4) {
							if(_g13[2][3][1] == 1) {
								if(_g13[3][1] == 0) {
									var size = _g13[3][2];
									c.globals = out[0];
									c.globalsSize = size;
								} else {
									throw new js__$Boot_HaxeError("assert");
								}
							} else {
								throw new js__$Boot_HaxeError("assert");
							}
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
					} else {
						throw new js__$Boot_HaxeError("assert");
					}
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
				break;
			case 2:
				var out1 = [];
				var _g3 = 0;
				while(_g3 < alloc.length) {
					var a1 = alloc[_g3];
					++_g3;
					if(a1.v == null) {
						continue;
					}
					var p = params.h[a1.v.id];
					if(p == null) {
						var ap = new hxsl_AllocParam(a1.v.name,a1.pos,-1,-1,a1.v.type);
						ap.perObjectGlobal = new hxsl_AllocGlobal(-1,this.getPath(a1.v),a1.v.type);
						out1.push(ap);
						continue;
					}
					out1.push(new hxsl_AllocParam(a1.v.name,a1.pos,p.instance,p.index,a1.v.type));
				}
				var _g14 = 0;
				var _g4 = out1.length - 1;
				while(_g14 < _g4) {
					var i1 = _g14++;
					out1[i1].next = out1[i1 + 1];
				}
				var _g5 = g1.type;
				if(_g5[1] == 14) {
					switch(_g5[2][1]) {
					case 5:
						if(_g5[2][2] == 4) {
							if(_g5[2][3][1] == 1) {
								if(_g5[3][1] == 0) {
									var size1 = _g5[3][2];
									c.params = out1[0];
									c.paramsSize = size1;
								} else {
									throw new js__$Boot_HaxeError("assert");
								}
							} else {
								throw new js__$Boot_HaxeError("assert");
							}
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
						break;
					case 10:
						c.textures2D = out1[0];
						c.textures2DCount = out1.length;
						break;
					case 11:
						c.texturesCube = out1[0];
						c.texturesCubeCount = out1.length;
						break;
					default:
						throw new js__$Boot_HaxeError("assert");
					}
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
		}
		if(c.globals == null) {
			c.globalsSize = 0;
		}
		if(c.params == null) {
			c.paramsSize = 0;
		}
		if(c.textures2D == null) {
			c.textures2DCount = 0;
		}
		if(c.texturesCube == null) {
			c.texturesCubeCount = 0;
		}
		c.data = data;
		return c;
	}
	,__class__: hxsl_Cache
};
var hxsl_Channel = $hxClasses["hxsl.Channel"] = { __ename__ : true, __constructs__ : ["Unknown","R","G","B","A","PackedFloat","PackedNormal"] };
hxsl_Channel.Unknown = ["Unknown",0];
hxsl_Channel.Unknown.toString = $estr;
hxsl_Channel.Unknown.__enum__ = hxsl_Channel;
hxsl_Channel.R = ["R",1];
hxsl_Channel.R.toString = $estr;
hxsl_Channel.R.__enum__ = hxsl_Channel;
hxsl_Channel.G = ["G",2];
hxsl_Channel.G.toString = $estr;
hxsl_Channel.G.__enum__ = hxsl_Channel;
hxsl_Channel.B = ["B",3];
hxsl_Channel.B.toString = $estr;
hxsl_Channel.B.__enum__ = hxsl_Channel;
hxsl_Channel.A = ["A",4];
hxsl_Channel.A.toString = $estr;
hxsl_Channel.A.__enum__ = hxsl_Channel;
hxsl_Channel.PackedFloat = ["PackedFloat",5];
hxsl_Channel.PackedFloat.toString = $estr;
hxsl_Channel.PackedFloat.__enum__ = hxsl_Channel;
hxsl_Channel.PackedNormal = ["PackedNormal",6];
hxsl_Channel.PackedNormal.toString = $estr;
hxsl_Channel.PackedNormal.__enum__ = hxsl_Channel;
hxsl_Channel.__empty_constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
var hxsl_Clone = function() {
	this.varMap = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Clone"] = hxsl_Clone;
hxsl_Clone.__name__ = ["hxsl","Clone"];
hxsl_Clone.shaderData = function(s) {
	return new hxsl_Clone().shader(s);
};
hxsl_Clone.prototype = {
	tvar: function(v) {
		var v2 = this.varMap.h[v.id];
		if(v2 != null) {
			return v2;
		}
		v2 = { id : hxsl_Tools.allocVarId(), type : v.type, name : v.name, kind : v.kind};
		this.varMap.h[v.id] = v2;
		if(v.parent != null) {
			v2.parent = this.tvar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		v2.type = this.ttype(v.type);
		return v2;
	}
	,tfun: function(f) {
		var tmp = this.ttype(f.ret);
		var f1 = f.kind;
		var tmp1 = this.tvar(f.ref);
		var _g = [];
		var _g1 = 0;
		var _g2 = f.args;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(this.tvar(a));
		}
		return { ret : tmp, kind : f1, ref : tmp1, args : _g, expr : this.texpr(f.expr)};
	}
	,ttype: function(t) {
		switch(t[1]) {
		case 12:
			var vl = t[2];
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.tvar(v));
			}
			return hxsl_Type.TStruct(_g);
		case 13:
			var vars = t[2];
			var _g2 = [];
			var _g11 = 0;
			while(_g11 < vars.length) {
				var v1 = vars[_g11];
				++_g11;
				var _g21 = [];
				var _g3 = 0;
				var _g4 = v1.args;
				while(_g3 < _g4.length) {
					var a = _g4[_g3];
					++_g3;
					_g21.push({ name : a.name, type : this.ttype(a.type)});
				}
				_g2.push({ args : _g21, ret : this.ttype(v1.ret)});
			}
			return hxsl_Type.TFun(_g2);
		case 14:
			var size = t[3];
			var t1 = t[2];
			var tmp = this.ttype(t1);
			var tmp1;
			switch(size[1]) {
			case 0:
				tmp1 = size;
				break;
			case 1:
				var v2 = size[2];
				tmp1 = hxsl_SizeDecl.SVar(this.tvar(v2));
				break;
			}
			return hxsl_Type.TArray(tmp,tmp1);
		default:
			return t;
		}
	}
	,texpr: function(e) {
		var e2 = hxsl_Tools.map(e,$bind(this,this.texpr));
		e2.t = this.ttype(e.t);
		var _g = e2.e;
		var tmp;
		switch(_g[1]) {
		case 1:
			var v = _g[2];
			tmp = hxsl_TExprDef.TVar(this.tvar(v));
			break;
		case 7:
			var init = _g[3];
			var v1 = _g[2];
			tmp = hxsl_TExprDef.TVarDecl(this.tvar(v1),init);
			break;
		case 13:
			var loop = _g[4];
			var it = _g[3];
			var v2 = _g[2];
			tmp = hxsl_TExprDef.TFor(this.tvar(v2),it,loop);
			break;
		default:
			tmp = e2.e;
		}
		e2.e = tmp;
		return e2;
	}
	,shader: function(s) {
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.tvar(v));
		}
		var tmp = _g;
		var _g11 = [];
		var _g21 = 0;
		var _g3 = s.funs;
		while(_g21 < _g3.length) {
			var f = _g3[_g21];
			++_g21;
			_g11.push(this.tfun(f));
		}
		return { name : s1, vars : tmp, funs : _g11};
	}
	,__class__: hxsl_Clone
};
var hxsl__$Dce_Exit = function() {
};
$hxClasses["hxsl._Dce.Exit"] = hxsl__$Dce_Exit;
hxsl__$Dce_Exit.__name__ = ["hxsl","_Dce","Exit"];
hxsl__$Dce_Exit.prototype = {
	__class__: hxsl__$Dce_Exit
};
var hxsl__$Dce_VarDeps = function(v) {
	this.v = v;
	this.used = false;
	this.deps = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Dce.VarDeps"] = hxsl__$Dce_VarDeps;
hxsl__$Dce_VarDeps.__name__ = ["hxsl","_Dce","VarDeps"];
hxsl__$Dce_VarDeps.prototype = {
	__class__: hxsl__$Dce_VarDeps
};
var hxsl_Dce = function() {
};
$hxClasses["hxsl.Dce"] = hxsl_Dce;
hxsl_Dce.__name__ = ["hxsl","Dce"];
hxsl_Dce.prototype = {
	dce: function(vertex,fragment) {
		this.used = new haxe_ds_IntMap();
		this.channelVars = [];
		var inputs = [];
		var _g = 0;
		var _g1 = vertex.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var i = this.get(v);
			if(v.kind == hxsl_VarKind.Input) {
				inputs.push(i);
			}
			if(v.kind == hxsl_VarKind.Output) {
				i.keep = true;
			}
		}
		var _g2 = 0;
		var _g11 = fragment.vars;
		while(_g2 < _g11.length) {
			var v1 = _g11[_g2];
			++_g2;
			var i1 = this.get(v1);
			if(v1.kind == hxsl_VarKind.Output) {
				i1.keep = true;
			}
		}
		var _g3 = 0;
		var _g12 = vertex.funs;
		while(_g3 < _g12.length) {
			var f = _g12[_g3];
			++_g3;
			this.check(f.expr,[]);
		}
		var _g4 = 0;
		var _g13 = fragment.funs;
		while(_g4 < _g13.length) {
			var f1 = _g13[_g4];
			++_g4;
			this.check(f1.expr,[]);
		}
		var v2 = this.used.iterator();
		while(v2.hasNext()) {
			var v3 = v2.next();
			if(v3.keep) {
				this.markRec(v3);
			}
		}
		while(inputs.length > 1 && !inputs[inputs.length - 1].used) inputs.pop();
		var _g5 = 0;
		while(_g5 < inputs.length) {
			var v4 = inputs[_g5];
			++_g5;
			this.markRec(v4);
		}
		var v5 = this.used.iterator();
		while(v5.hasNext()) {
			var v6 = v5.next();
			if(v6.used) {
				continue;
			}
			HxOverrides.remove(vertex.vars,v6.v);
			HxOverrides.remove(fragment.vars,v6.v);
		}
		var _g6 = 0;
		var _g14 = vertex.funs;
		while(_g6 < _g14.length) {
			var f2 = _g14[_g6];
			++_g6;
			f2.expr = this.mapExpr(f2.expr,false);
		}
		var _g7 = 0;
		var _g15 = fragment.funs;
		while(_g7 < _g15.length) {
			var f3 = _g15[_g7];
			++_g7;
			f3.expr = this.mapExpr(f3.expr,false);
		}
		return { fragment : fragment, vertex : vertex};
	}
	,get: function(v) {
		var vd = this.used.h[v.id];
		if(vd == null) {
			vd = new hxsl__$Dce_VarDeps(v);
			this.used.h[v.id] = vd;
		}
		return vd;
	}
	,markRec: function(v) {
		if(v.used) {
			return;
		}
		v.used = true;
		var d = v.deps.iterator();
		while(d.hasNext()) {
			var d1 = d.next();
			this.markRec(d1);
		}
	}
	,link: function(v,writeTo) {
		var vd = this.get(v);
		var _g = 0;
		while(_g < writeTo.length) {
			var w = writeTo[_g];
			++_g;
			if(w == null) {
				vd.keep = true;
				continue;
			}
			w.deps.h[v.id] = vd;
		}
	}
	,hasDiscardRec: function(e) {
		var _g = e.e;
		if(_g[1] == 11) {
			throw new js__$Boot_HaxeError(new hxsl__$Dce_Exit());
		} else {
			hxsl_Tools.iter(e,$bind(this,this.hasDiscardRec));
		}
	}
	,hasDiscard: function(e) {
		try {
			this.hasDiscardRec(e);
			return false;
		} catch( e1 ) {
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,hxsl__$Dce_Exit) ) {
				return true;
			} else throw(e1);
		}
	}
	,check: function(e,writeTo) {
		var _g = e.e;
		switch(_g[1]) {
		case 1:
			var v = _g[2];
			this.link(v,writeTo);
			break;
		case 5:
			switch(_g[2][1]) {
			case 4:
				switch(_g[3].e[1]) {
				case 1:
					var e1 = _g[4];
					var v1 = _g[3].e[2];
					writeTo.push(this.get(v1));
					this.check(e1,writeTo);
					writeTo.pop();
					break;
				case 9:
					if(_g[3].e[2].e[1] == 1) {
						var e2 = _g[4];
						var v2 = _g[3].e[2].e[2];
						writeTo.push(this.get(v2));
						this.check(e2,writeTo);
						writeTo.pop();
					} else {
						var f = $bind(this,this.check);
						var a1 = writeTo;
						hxsl_Tools.iter(e,function(e3) {
							f(e3,a1);
						});
					}
					break;
				default:
					var f1 = $bind(this,this.check);
					var a11 = writeTo;
					hxsl_Tools.iter(e,function(e4) {
						f1(e4,a11);
					});
				}
				break;
			case 20:
				switch(_g[3].e[1]) {
				case 1:
					var e5 = _g[4];
					var v3 = _g[3].e[2];
					writeTo.push(this.get(v3));
					this.check(e5,writeTo);
					writeTo.pop();
					break;
				case 9:
					if(_g[3].e[2].e[1] == 1) {
						var e6 = _g[4];
						var v4 = _g[3].e[2].e[2];
						writeTo.push(this.get(v4));
						this.check(e6,writeTo);
						writeTo.pop();
					} else {
						var f2 = $bind(this,this.check);
						var a12 = writeTo;
						hxsl_Tools.iter(e,function(e7) {
							f2(e7,a12);
						});
					}
					break;
				default:
					var f3 = $bind(this,this.check);
					var a13 = writeTo;
					hxsl_Tools.iter(e,function(e8) {
						f3(e8,a13);
					});
				}
				break;
			default:
				var f4 = $bind(this,this.check);
				var a14 = writeTo;
				hxsl_Tools.iter(e,function(e9) {
					f4(e9,a14);
				});
			}
			break;
		case 7:
			var init = _g[3];
			var v5 = _g[2];
			if(init != null) {
				writeTo.push(this.get(v5));
				this.check(init,writeTo);
				writeTo.pop();
			} else {
				var f5 = $bind(this,this.check);
				var a15 = writeTo;
				hxsl_Tools.iter(e,function(e10) {
					f5(e10,a15);
				});
			}
			break;
		case 8:
			if(_g[2].e[1] == 2) {
				if(_g[2].e[2][1] == 61) {
					if(_g[3].length == 3) {
						if(_g[3][0].e[1] == 1) {
							if(_g[3][2].e[1] == 0) {
								if(_g[3][2].e[2][1] == 2) {
									var c = _g[3][0].e[2];
									var uv = _g[3][1];
									var cid = _g[3][2].e[2][2];
									this.check(uv,writeTo);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var f6 = $bind(this,this.check);
									var a16 = writeTo;
									hxsl_Tools.iter(e,function(e11) {
										f6(e11,a16);
									});
								}
							} else {
								var f7 = $bind(this,this.check);
								var a17 = writeTo;
								hxsl_Tools.iter(e,function(e12) {
									f7(e12,a17);
								});
							}
						} else {
							var f8 = $bind(this,this.check);
							var a18 = writeTo;
							hxsl_Tools.iter(e,function(e13) {
								f8(e13,a18);
							});
						}
					} else {
						var f9 = $bind(this,this.check);
						var a19 = writeTo;
						hxsl_Tools.iter(e,function(e14) {
							f9(e14,a19);
						});
					}
				} else {
					var f10 = $bind(this,this.check);
					var a110 = writeTo;
					hxsl_Tools.iter(e,function(e15) {
						f10(e15,a110);
					});
				}
			} else {
				var f11 = $bind(this,this.check);
				var a111 = writeTo;
				hxsl_Tools.iter(e,function(e16) {
					f11(e16,a111);
				});
			}
			break;
		case 10:
			var eelse = _g[4];
			var eif = _g[3];
			var e17 = _g[2];
			if(this.hasDiscard(eif) || eelse != null && this.hasDiscard(eelse)) {
				writeTo.push(null);
				this.check(e17,writeTo);
				writeTo.pop();
				this.check(eif,writeTo);
				if(eelse != null) {
					this.check(eelse,writeTo);
				}
			} else {
				var f12 = $bind(this,this.check);
				var a112 = writeTo;
				hxsl_Tools.iter(e,function(e18) {
					f12(e18,a112);
				});
			}
			break;
		case 13:
			var loop = _g[4];
			var it = _g[3];
			var v6 = _g[2];
			writeTo.push(null);
			this.check(it,writeTo);
			this.check(loop,writeTo);
			writeTo.pop();
			break;
		default:
			var f13 = $bind(this,this.check);
			var a113 = writeTo;
			hxsl_Tools.iter(e,function(e19) {
				f13(e19,a113);
			});
		}
	}
	,mapExpr: function(e,isVar) {
		var _gthis = this;
		var _g = e.e;
		switch(_g[1]) {
		case 4:
			var el = _g[2];
			var out = [];
			var count = 0;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				var isVar1 = isVar && count == el.length - 1;
				var e2 = this.mapExpr(e1,isVar1);
				if(hxsl_Tools.hasSideEffect(e2) || isVar1) {
					out.push(e2);
				}
				++count;
			}
			return { e : hxsl_TExprDef.TBlock(out), p : e.p, t : e.t};
		case 5:
			switch(_g[2][1]) {
			case 4:
				switch(_g[3].e[1]) {
				case 1:
					var v = _g[3].e[2];
					if(!this.get(v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e3) {
							return _gthis.mapExpr(e3,true);
						});
					}
					break;
				case 9:
					if(_g[3].e[2].e[1] == 1) {
						var v1 = _g[3].e[2].e[2];
						if(!this.get(v1).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e4) {
								return _gthis.mapExpr(e4,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e5) {
							return _gthis.mapExpr(e5,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e6) {
						return _gthis.mapExpr(e6,true);
					});
				}
				break;
			case 20:
				switch(_g[3].e[1]) {
				case 1:
					var v2 = _g[3].e[2];
					if(!this.get(v2).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e7) {
							return _gthis.mapExpr(e7,true);
						});
					}
					break;
				case 9:
					if(_g[3].e[2].e[1] == 1) {
						var v3 = _g[3].e[2].e[2];
						if(!this.get(v3).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e8) {
								return _gthis.mapExpr(e8,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e9) {
							return _gthis.mapExpr(e9,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e10) {
						return _gthis.mapExpr(e10,true);
					});
				}
				break;
			default:
				return hxsl_Tools.map(e,function(e11) {
					return _gthis.mapExpr(e11,true);
				});
			}
			break;
		case 7:
			var v4 = _g[2];
			if(!this.get(v4).used) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,function(e12) {
					return _gthis.mapExpr(e12,true);
				});
			}
			break;
		case 8:
			if(_g[2].e[1] == 2) {
				if(_g[2].e[2][1] == 61) {
					if(_g[3].length == 3) {
						if(_g[3][2].e[1] == 0) {
							if(_g[3][2].e[2][1] == 2) {
								var uv = _g[3][1];
								var cid = _g[3][2].e[2][2];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texture2D), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},uv]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e13) {
									return _gthis.mapExpr(e13,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e14) {
								return _gthis.mapExpr(e14,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e15) {
							return _gthis.mapExpr(e15,true);
						});
					}
				} else {
					return hxsl_Tools.map(e,function(e16) {
						return _gthis.mapExpr(e16,true);
					});
				}
			} else {
				return hxsl_Tools.map(e,function(e17) {
					return _gthis.mapExpr(e17,true);
				});
			}
			break;
		case 10:
			var eelse = _g[4];
			var econd = _g[3];
			var e18 = _g[2];
			var e19 = this.mapExpr(e18,true);
			var econd1 = this.mapExpr(econd,isVar);
			var eelse1 = eelse == null ? null : this.mapExpr(eelse,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(econd1) && (eelse1 == null || !hxsl_Tools.hasSideEffect(eelse1))) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e19.t, p : e19.p};
			}
			return { e : hxsl_TExprDef.TIf(e19,econd1,eelse1), p : e19.p, t : e19.t};
		case 13:
			var loop = _g[4];
			var it = _g[3];
			var v5 = _g[2];
			var it1 = this.mapExpr(it,true);
			var loop1 = this.mapExpr(loop,false);
			if(!hxsl_Tools.hasSideEffect(loop1)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TFor(v5,it1,loop1), p : e.p, t : e.t};
		default:
			return hxsl_Tools.map(e,function(e20) {
				return _gthis.mapExpr(e20,true);
			});
		}
	}
	,__class__: hxsl_Dce
};
var hxsl_DynamicShader = function(s) {
	this.varIndex = 0;
	this.varNames = new haxe_ds_StringMap();
	this.varIndexes = new haxe_ds_IntMap();
	this.accesses = [];
	this.values = [];
	this.shader = s;
	hxsl_Shader.call(this);
	var _g = 0;
	var _g1 = s.data.vars;
	while(_g < _g1.length) {
		var v = _g1[_g];
		++_g;
		this.addVarIndex(v);
	}
};
$hxClasses["hxsl.DynamicShader"] = hxsl_DynamicShader;
hxsl_DynamicShader.__name__ = ["hxsl","DynamicShader"];
hxsl_DynamicShader.__super__ = hxsl_Shader;
hxsl_DynamicShader.prototype = $extend(hxsl_Shader.prototype,{
	addVarIndex: function(v,access,defObj) {
		if(v.kind != hxsl_VarKind.Param) {
			return;
		}
		var vid = this.values.length;
		if(access != null) {
			access = { index : access.index, fields : access.fields.slice()};
		}
		var _g = v.type;
		if(_g[1] == 12) {
			var vl = _g[2];
			var vobj = { };
			if(access == null) {
				this.values.push(vobj);
				access = { index : vid, fields : []};
				this.varNames.set(v.name,vid);
			} else {
				defObj[v.name] = vobj;
			}
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				access.fields.push(v1.name);
				this.addVarIndex(v1,access,vobj);
				access.fields.pop();
			}
			return;
		}
		var value = null;
		var _g11 = v.type;
		switch(_g11[1]) {
		case 2:
			value = false;
			break;
		case 1:case 3:
			value = 0;
			break;
		case 5:
			value = new h3d_Vector();
			break;
		case 6:case 7:case 8:
			var m = new h3d_Matrix();
			m.identity();
			value = m;
			break;
		default:
		}
		if(access == null) {
			var key = v.name;
			var _this = this.varNames;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,vid);
			} else {
				_this.h[key] = vid;
			}
			this.values.push(value);
		} else {
			defObj[v.name] = value;
		}
		var vidx = this.accesses.length;
		this.varIndexes.h[v.id] = vidx;
		this.accesses.push(access == null ? { index : vid, fields : null} : access);
	}
	,getParamValue: function(index) {
		var a = this.accesses[index];
		var v = this.values[a.index];
		if(a.fields != null) {
			var _g = 0;
			var _g1 = a.fields;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				v = Reflect.field(v,f);
			}
		}
		return v;
	}
	,getParamFloatValue: function(index) {
		return this.getParamValue(index);
	}
	,setParamValue: function(p,value) {
		var vidx = this.varIndexes.h[p.id];
		var a = this.accesses[vidx];
		if(a.fields == null) {
			this.values[a.index] = value;
		} else {
			var obj = this.values[a.index];
			var _g1 = 0;
			var _g = a.fields.length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				obj = Reflect.field(obj,a.fields[i]);
			}
			obj[a.fields[a.fields.length - 1]] = value;
		}
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var c = this.shader.consts;
		while(c != null) {
			if(c.globalId != 0) {
				c = c.next;
				continue;
			}
			var v = this.getParamValue(this.varIndexes.h[c.v.id]);
			var _g = c.v.type;
			switch(_g[1]) {
			case 1:
				var v1 = v;
				if(v1 >>> c.bits != 0) {
					throw new js__$Boot_HaxeError("Constant outside range");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				if(v) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 15:
				var n = _g[2];
				throw new js__$Boot_HaxeError("TODO:" + Std.string(c.v.type));
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
			c = c.next;
		}
		this.updateConstantsFinal(globals);
	}
	,toString: function() {
		return "DynamicShader<" + this.shader.data.name + ">";
	}
	,__class__: hxsl_DynamicShader
});
var hxsl_Eval = function() {
	this.varMap = new haxe_ds_ObjectMap();
	this.funMap = new haxe_ds_ObjectMap();
	this.constants = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Eval"] = hxsl_Eval;
hxsl_Eval.__name__ = ["hxsl","Eval"];
hxsl_Eval.prototype = {
	setConstant: function(v,c) {
		this.constants.h[v.id] = hxsl_TExprDef.TConst(c);
	}
	,mapVar: function(v) {
		var v2 = this.varMap.h[v.__id__];
		if(v2 != null) {
			if(v == v2) {
				return v2;
			} else {
				return this.mapVar(v2);
			}
		}
		if(v.parent != null) {
			this.mapVar(v.parent);
			v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				if(v == v2) {
					return v2;
				} else {
					return this.mapVar(v2);
				}
			}
		}
		var v21;
		var _g = v.type;
		if(_g[1] == 15) {
			v21 = v.id;
		} else {
			v21 = hxsl_Tools.allocVarId();
		}
		v2 = { id : v21, name : v.name, type : v.type, kind : v.kind};
		if(v.parent != null) {
			v2.parent = this.mapVar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		this.varMap.set(v,v2);
		this.varMap.set(v2,v2);
		var _g1 = v2.type;
		switch(_g1[1]) {
		case 12:
			var vl = _g1[2];
			var _g11 = [];
			var _g2 = 0;
			while(_g2 < vl.length) {
				var v1 = vl[_g2];
				++_g2;
				_g11.push(this.mapVar(v1));
			}
			v2.type = hxsl_Type.TStruct(_g11);
			break;
		case 14:
			if(_g1[3][1] == 1) {
				var t = _g1[2];
				var vs = _g1[3][2];
				var c = this.constants.get(vs.id);
				if(c != null) {
					if(c[1] == 0) {
						if(c[2][1] == 2) {
							var v3 = c[2][2];
							v2.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v3));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs);
					v2.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2));
				}
			}
			break;
		default:
		}
		return v2;
	}
	,'eval': function(s) {
		var funs = [];
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var f1 = f.kind;
			var f2 = this.mapVar(f.ref);
			var _g2 = [];
			var _g3 = 0;
			var _g4 = f.args;
			while(_g3 < _g4.length) {
				var a = _g4[_g3];
				++_g3;
				_g2.push(this.mapVar(a));
			}
			var f21 = { kind : f1, ref : f2, args : _g2, ret : f.ret, expr : f.expr};
			if(!this.inlineCalls || f.kind != hxsl_FunctionKind.Helper) {
				funs.push(f21);
			}
			this.funMap.set(f21.ref,f);
		}
		var _g11 = 0;
		var _g5 = funs.length;
		while(_g11 < _g5) {
			var i = _g11++;
			this.curFun = funs[i];
			this.curFun.expr = this.evalExpr(this.curFun.expr,false);
		}
		var s1 = s.name;
		var _g6 = [];
		var _g12 = 0;
		var _g21 = s.vars;
		while(_g12 < _g21.length) {
			var v = _g21[_g12];
			++_g12;
			_g6.push(this.mapVar(v));
		}
		return { name : s1, vars : _g6, funs : funs};
	}
	,hasReturn: function(e) {
		this.markReturn = false;
		this.hasReturnLoop(e);
		return this.markReturn;
	}
	,hasReturnLoop: function(e) {
		var _g = e.e;
		if(_g[1] == 12) {
			this.markReturn = true;
		} else if(!this.markReturn) {
			hxsl_Tools.iter(e,$bind(this,this.hasReturnLoop));
		}
	}
	,handleReturn: function(e,isFinal) {
		if(isFinal == null) {
			isFinal = false;
		}
		var _g = e.e;
		switch(_g[1]) {
		case 3:
			var v = _g[2];
			var v1 = this.handleReturn(v,isFinal);
			return { e : hxsl_TExprDef.TParenthesis(v1), t : v1.t, p : e.p};
		case 4:
			var el = _g[2];
			var i = 0;
			var last = el.length;
			var out = [];
			try {
				while(i < last) {
					var e1 = el[i++];
					if(i == last) {
						out.push(this.handleReturn(e1,isFinal));
					} else {
						var _g1 = e1.e;
						switch(_g1[1]) {
						case 10:
							if(_g1[4] == null) {
								var econd = _g1[2];
								var eif = _g1[3];
								if(isFinal && this.hasReturn(eif)) {
									out.push(this.handleReturn({ e : hxsl_TExprDef.TIf(econd,eif,{ e : hxsl_TExprDef.TBlock(el.slice(i)), t : e1.t, p : e1.p}), t : e1.t, p : e1.p}));
									throw "__break__";
								} else {
									out.push(this.handleReturn(e1));
								}
							} else {
								out.push(this.handleReturn(e1));
							}
							break;
						case 12:
							var e2 = _g1[2];
							out.push(this.handleReturn(e2,isFinal));
							throw "__break__";
							break;
						default:
							out.push(this.handleReturn(e1));
						}
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			var t = isFinal ? out[out.length - 1].t : e.t;
			return { e : hxsl_TExprDef.TBlock(out), t : t, p : e.p};
		case 10:
			var eelse = _g[4];
			var eif1 = _g[3];
			var cond = _g[2];
			if(eelse != null && isFinal) {
				var cond1 = this.handleReturn(cond);
				var eif2 = this.handleReturn(eif1,isFinal);
				return { e : hxsl_TExprDef.TIf(cond1,eif2,this.handleReturn(eelse,isFinal)), t : eif2.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
			}
			break;
		case 12:
			var v2 = _g[2];
			if(!isFinal) {
				hxsl_Error.t("Cannot inline not final return",e.p);
			}
			if(v2 == null) {
				return { e : hxsl_TExprDef.TBlock([]), t : hxsl_Type.TVoid, p : e.p};
			}
			return this.handleReturn(v2,true);
		default:
			return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
		}
	}
	,handleReturnDef: function(e) {
		return this.handleReturn(e);
	}
	,evalCall: function(g,args,oldArgs,pos) {
		switch(g[1]) {
		case 36:
			if(args.length == 1) {
				if(args[0].e[1] == 0) {
					if(args[0].e[2][1] == 2) {
						var i = args[0].e[2][2];
						return hxsl_TExprDef.TConst(hxsl_Const.CFloat(i));
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 61:
			if(args.length == 2) {
				if(args[0].e[1] == 0) {
					if(args[0].e[2][1] == 2) {
						var uv = args[1];
						var i1 = args[0].e[2][2];
						var channel = oldArgs[0];
						var _g = channel.e;
						var tmp;
						if(_g[1] == 1) {
							var v = _g[2];
							tmp = hxsl_TExprDef.TVar(this.mapVar(v));
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
						channel.e = tmp;
						var count;
						var _g1 = channel.t;
						if(_g1[1] == 15) {
							var i2 = _g1[2];
							count = i2;
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
						var channelMode = Type.createEnumIndex(hxsl_Channel,i1 & 7,null);
						var tget = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ChannelRead), t : hxsl_Type.TVoid, p : pos},[channel,uv,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(i1 >> 3)), t : hxsl_Type.TInt, p : pos}]), t : hxsl_Type.TVoid, p : pos};
						switch(channelMode[1]) {
						case 0:
							var zero = { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0.)), t : hxsl_Type.TFloat, p : pos};
							if(count == 1) {
								return zero.e;
							}
							return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4][count - 2]), t : hxsl_Type.TVoid, p : pos},[zero]);
						case 1:case 2:case 3:case 4:
							var tmp1;
							switch(channelMode[1]) {
							case 1:
								tmp1 = hxsl_Component.X;
								break;
							case 2:
								tmp1 = hxsl_Component.Y;
								break;
							case 3:
								tmp1 = hxsl_Component.Z;
								break;
							default:
								tmp1 = hxsl_Component.W;
							}
							return hxsl_TExprDef.TSwiz(tget,[tmp1]);
						case 5:
							return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Unpack), t : hxsl_Type.TVoid, p : pos},[tget]);
						case 6:
							return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackNormal), t : hxsl_Type.TVoid, p : pos},[tget]);
						}
					} else {
						var t = args[0];
						return hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(t,true) + " " + this.constantsToString(),pos);
					}
				} else {
					var t1 = args[0];
					return hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(t1,true) + " " + this.constantsToString(),pos);
				}
			} else {
				return null;
			}
			break;
		case 62:
			var args1 = args;
			var _g2 = 0;
			while(_g2 < args1.length) {
				var a = args1[_g2];
				++_g2;
				haxe_Log.trace(hxsl_Printer.toString(a),{ fileName : a.p.file, lineNumber : 0, className : null, methodName : null});
			}
			return hxsl_TExprDef.TBlock([]);
		default:
			return null;
		}
	}
	,constantsToString: function() {
		var _g = [];
		var c = this.constants.keys();
		while(c.hasNext()) {
			var c1 = c.next();
			_g.push(c1 + " => " + hxsl_Printer.toString({ e : this.constants.h[c1], t : hxsl_Type.TVoid, p : null},true));
		}
		return _g.toString();
	}
	,evalExpr: function(e,isVal) {
		if(isVal == null) {
			isVal = true;
		}
		var _gthis = this;
		var d;
		var _g = e.e;
		switch(_g[1]) {
		case 1:
			var v = _g[2];
			var c = this.constants.get(v.id);
			if(c != null) {
				d = c;
			} else {
				var v2 = this.mapVar(v);
				d = hxsl_TExprDef.TVar(v2);
			}
			break;
		case 0:case 2:
			d = e.e;
			break;
		case 3:
			var e1 = _g[2];
			var e2 = this.evalExpr(e1,isVal);
			var _g1 = e2.e;
			if(_g1[1] == 0) {
				d = e2.e;
			} else {
				d = hxsl_TExprDef.TParenthesis(e2);
			}
			break;
		case 4:
			var el = _g[2];
			var out = [];
			var last = el.length - 1;
			var _g11 = 0;
			var _g2 = el.length;
			while(_g11 < _g2) {
				var i = _g11++;
				var isVal1 = isVal && i == last;
				var e3 = this.evalExpr(el[i],isVal1);
				var _g21 = e3.e;
				switch(_g21[1]) {
				case 0:case 1:
					if(!(!isVal1)) {
						out.push(e3);
					}
					break;
				default:
					out.push(e3);
				}
			}
			if(out.length == 1 && this.curFun.kind != hxsl_FunctionKind.Init) {
				d = out[0].e;
			} else {
				d = hxsl_TExprDef.TBlock(out);
			}
			break;
		case 5:
			var e21 = _g[4];
			var e11 = _g[3];
			var op = _g[2];
			var e12 = this.evalExpr(e11);
			var e22 = this.evalExpr(e21);
			switch(op[1]) {
			case 0:
				var _g3 = e22.e;
				var _g12 = e12.e;
				if(_g12[1] == 0) {
					switch(_g12[2][1]) {
					case 2:
						if(_g3[1] == 0) {
							if(_g3[2][1] == 2) {
								var a = _g12[2][2];
								var b = _g3[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a + b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g3[1] == 0) {
							if(_g3[2][1] == 3) {
								var a1 = _g12[2][2];
								var b1 = _g3[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a1 + b1));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 1:
				var _g4 = e22.e;
				var _g13 = e12.e;
				if(_g13[1] == 0) {
					switch(_g13[2][1]) {
					case 2:
						if(_g4[1] == 0) {
							if(_g4[2][1] == 2) {
								var a2 = _g13[2][2];
								var b2 = _g4[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a2 * b2 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g4[1] == 0) {
							if(_g4[2][1] == 3) {
								var a3 = _g13[2][2];
								var b3 = _g4[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a3 * b3));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 2:
				var _g5 = e22.e;
				var _g14 = e12.e;
				if(_g14[1] == 0) {
					switch(_g14[2][1]) {
					case 2:
						if(_g5[1] == 0) {
							if(_g5[2][1] == 2) {
								var a4 = _g14[2][2];
								var b4 = _g5[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a4 / b4 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g5[1] == 0) {
							if(_g5[2][1] == 3) {
								var a5 = _g14[2][2];
								var b5 = _g5[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a5 / b5));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 3:
				var _g6 = e22.e;
				var _g15 = e12.e;
				if(_g15[1] == 0) {
					switch(_g15[2][1]) {
					case 2:
						if(_g6[1] == 0) {
							if(_g6[2][1] == 2) {
								var a6 = _g15[2][2];
								var b6 = _g6[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a6 - b6 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g6[1] == 0) {
							if(_g6[2][1] == 3) {
								var a7 = _g15[2][2];
								var b7 = _g6[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a7 - b7));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 5:
				var _g7 = e22.e;
				var _g16 = e12.e;
				if(_g16[1] == 0) {
					switch(_g16[2][1]) {
					case 0:
						if(_g7[1] == 0) {
							if(_g7[2][1] == 0) {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
							} else {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 1:
						if(_g7[1] == 0) {
							switch(_g7[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a8 = _g16[2][2];
								var b8 = _g7[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a8 == b8 ? 0 : 1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						if(_g7[1] == 0) {
							switch(_g7[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a9 = _g16[2][2];
								var b9 = _g7[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a9 - b9 == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g7[1] == 0) {
							switch(_g7[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a10 = _g16[2][2];
								var b10 = _g7[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a10 > b10 ? 1 : a10 == b10 ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						if(_g7[1] == 0) {
							switch(_g7[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a11 = _g16[2][2];
								var b11 = _g7[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a11 > b11 ? 1 : a11 == b11 ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 6:
				var _g8 = e22.e;
				var _g17 = e12.e;
				if(_g17[1] == 0) {
					switch(_g17[2][1]) {
					case 0:
						if(_g8[1] == 0) {
							if(_g8[2][1] == 0) {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
							} else {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 1:
						if(_g8[1] == 0) {
							switch(_g8[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a12 = _g17[2][2];
								var b12 = _g8[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a12 == b12 ? 0 : 1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						if(_g8[1] == 0) {
							switch(_g8[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a13 = _g17[2][2];
								var b13 = _g8[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a13 - b13 != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g8[1] == 0) {
							switch(_g8[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a14 = _g17[2][2];
								var b14 = _g8[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a14 > b14 ? 1 : a14 == b14 ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						if(_g8[1] == 0) {
							switch(_g8[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a15 = _g17[2][2];
								var b15 = _g8[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a15 > b15 ? 1 : a15 == b15 ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 7:
				var _g9 = e22.e;
				var _g18 = e12.e;
				if(_g18[1] == 0) {
					switch(_g18[2][1]) {
					case 0:
						if(_g9[1] == 0) {
							if(_g9[2][1] == 0) {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
							} else {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 1:
						if(_g9[1] == 0) {
							switch(_g9[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a16 = _g18[2][2];
								var b16 = _g9[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a16 == b16 ? 0 : 1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						if(_g9[1] == 0) {
							switch(_g9[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a17 = _g18[2][2];
								var b17 = _g9[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a17 - b17 > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g9[1] == 0) {
							switch(_g9[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a18 = _g18[2][2];
								var b18 = _g9[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a18 > b18 ? 1 : a18 == b18 ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						if(_g9[1] == 0) {
							switch(_g9[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a19 = _g18[2][2];
								var b19 = _g9[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a19 > b19 ? 1 : a19 == b19 ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 8:
				var _g10 = e22.e;
				var _g19 = e12.e;
				if(_g19[1] == 0) {
					switch(_g19[2][1]) {
					case 0:
						if(_g10[1] == 0) {
							if(_g10[2][1] == 0) {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
							} else {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 1:
						if(_g10[1] == 0) {
							switch(_g10[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a20 = _g19[2][2];
								var b20 = _g10[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a20 == b20 ? 0 : 1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						if(_g10[1] == 0) {
							switch(_g10[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a21 = _g19[2][2];
								var b21 = _g10[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a21 - b21 >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g10[1] == 0) {
							switch(_g10[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a22 = _g19[2][2];
								var b22 = _g10[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a22 > b22 ? 1 : a22 == b22 ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						if(_g10[1] == 0) {
							switch(_g10[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a23 = _g19[2][2];
								var b23 = _g10[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a23 > b23 ? 1 : a23 == b23 ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 9:
				var _g20 = e22.e;
				var _g110 = e12.e;
				if(_g110[1] == 0) {
					switch(_g110[2][1]) {
					case 0:
						if(_g20[1] == 0) {
							if(_g20[2][1] == 0) {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
							} else {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 1:
						if(_g20[1] == 0) {
							switch(_g20[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a24 = _g110[2][2];
								var b24 = _g20[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a24 == b24 ? 0 : 1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						if(_g20[1] == 0) {
							switch(_g20[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a25 = _g110[2][2];
								var b25 = _g20[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a25 - b25 < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g20[1] == 0) {
							switch(_g20[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a26 = _g110[2][2];
								var b26 = _g20[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a26 > b26 ? 1 : a26 == b26 ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						if(_g20[1] == 0) {
							switch(_g20[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a27 = _g110[2][2];
								var b27 = _g20[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a27 > b27 ? 1 : a27 == b27 ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 10:
				var _g22 = e22.e;
				var _g111 = e12.e;
				if(_g111[1] == 0) {
					switch(_g111[2][1]) {
					case 0:
						if(_g22[1] == 0) {
							if(_g22[2][1] == 0) {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
							} else {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 1:
						if(_g22[1] == 0) {
							switch(_g22[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a28 = _g111[2][2];
								var b28 = _g22[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a28 == b28 ? 0 : 1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						if(_g22[1] == 0) {
							switch(_g22[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a29 = _g111[2][2];
								var b29 = _g22[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a29 - b29 <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g22[1] == 0) {
							switch(_g22[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a30 = _g111[2][2];
								var b30 = _g22[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a30 > b30 ? 1 : a30 == b30 ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						if(_g22[1] == 0) {
							switch(_g22[2][1]) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a31 = _g111[2][2];
								var b31 = _g22[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a31 > b31 ? 1 : a31 == b31 ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 11:
				var _g23 = e22.e;
				var _g112 = e12.e;
				if(_g112[1] == 0) {
					if(_g112[2][1] == 2) {
						if(_g23[1] == 0) {
							if(_g23[2][1] == 2) {
								var a32 = _g112[2][2];
								var b32 = _g23[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a32 & b32));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 12:
				var _g24 = e22.e;
				var _g113 = e12.e;
				if(_g113[1] == 0) {
					if(_g113[2][1] == 2) {
						if(_g24[1] == 0) {
							if(_g24[2][1] == 2) {
								var a33 = _g113[2][2];
								var b33 = _g24[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a33 | b33));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 13:
				var _g25 = e22.e;
				var _g114 = e12.e;
				if(_g114[1] == 0) {
					if(_g114[2][1] == 2) {
						if(_g25[1] == 0) {
							if(_g25[2][1] == 2) {
								var a34 = _g114[2][2];
								var b34 = _g25[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a34 ^ b34));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 14:
				var _g26 = e22.e;
				var _g115 = e12.e;
				if(_g115[1] == 0) {
					if(_g115[2][1] == 1) {
						if(_g26[1] == 0) {
							if(_g26[2][1] == 1) {
								var a35 = _g115[2][2];
								var b35 = _g26[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a35 && b35));
							} else {
								var a36 = _g115[2][2];
								if(a36 == false) {
									d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a36));
								} else {
									d = e22.e;
								}
							}
						} else {
							var a37 = _g115[2][2];
							if(a37 == false) {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a37));
							} else {
								d = e22.e;
							}
						}
					} else if(_g26[1] == 0) {
						if(_g26[2][1] == 1) {
							var a38 = _g26[2][2];
							if(a38 == false) {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a38));
							} else {
								d = e12.e;
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else if(_g26[1] == 0) {
					if(_g26[2][1] == 1) {
						var a39 = _g26[2][2];
						if(a39 == false) {
							d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a39));
						} else {
							d = e12.e;
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 15:
				var _g27 = e22.e;
				var _g116 = e12.e;
				if(_g116[1] == 0) {
					if(_g116[2][1] == 1) {
						if(_g27[1] == 0) {
							if(_g27[2][1] == 1) {
								var a40 = _g116[2][2];
								var b36 = _g27[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a40 || b36));
							} else {
								var a41 = _g116[2][2];
								if(a41 == true) {
									d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a41));
								} else {
									d = e22.e;
								}
							}
						} else {
							var a42 = _g116[2][2];
							if(a42 == true) {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a42));
							} else {
								d = e22.e;
							}
						}
					} else if(_g27[1] == 0) {
						if(_g27[2][1] == 1) {
							var a43 = _g27[2][2];
							if(a43 == true) {
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a43));
							} else {
								d = e12.e;
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else if(_g27[1] == 0) {
					if(_g27[2][1] == 1) {
						var a44 = _g27[2][2];
						if(a44 == true) {
							d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a44));
						} else {
							d = e12.e;
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 16:
				var _g28 = e22.e;
				var _g117 = e12.e;
				if(_g117[1] == 0) {
					if(_g117[2][1] == 2) {
						if(_g28[1] == 0) {
							if(_g28[2][1] == 2) {
								var a45 = _g117[2][2];
								var b37 = _g28[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a45 << b37));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 17:
				var _g29 = e22.e;
				var _g118 = e12.e;
				if(_g118[1] == 0) {
					if(_g118[2][1] == 2) {
						if(_g29[1] == 0) {
							if(_g29[2][1] == 2) {
								var a46 = _g118[2][2];
								var b38 = _g29[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a46 >> b38));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 18:
				var _g30 = e22.e;
				var _g119 = e12.e;
				if(_g119[1] == 0) {
					if(_g119[2][1] == 2) {
						if(_g30[1] == 0) {
							if(_g30[2][1] == 2) {
								var a47 = _g119[2][2];
								var b39 = _g30[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a47 >>> b39));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 19:
				var _g31 = e22.e;
				var _g120 = e12.e;
				if(_g120[1] == 0) {
					switch(_g120[2][1]) {
					case 2:
						if(_g31[1] == 0) {
							if(_g31[2][1] == 2) {
								var a48 = _g120[2][2];
								var b40 = _g31[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a48 % b40 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g31[1] == 0) {
							if(_g31[2][1] == 3) {
								var a49 = _g120[2][2];
								var b41 = _g31[2][2];
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a49 % b41));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 4:case 20:case 21:
				d = hxsl_TExprDef.TBinop(op,e12,e22);
				break;
			case 22:
				throw new js__$Boot_HaxeError("assert");
				break;
			}
			break;
		case 6:
			var e4 = _g[3];
			var op1 = _g[2];
			var e5 = this.evalExpr(e4);
			var _g32 = e5.e;
			if(_g32[1] == 0) {
				var c1 = _g32[2];
				switch(op1[1]) {
				case 2:
					if(c1[1] == 1) {
						var b42 = c1[2];
						d = hxsl_TExprDef.TConst(hxsl_Const.CBool(!b42));
					} else {
						d = hxsl_TExprDef.TUnop(op1,e5);
					}
					break;
				case 3:
					switch(c1[1]) {
					case 2:
						var i1 = c1[2];
						d = hxsl_TExprDef.TConst(hxsl_Const.CInt(-i1));
						break;
					case 3:
						var f = c1[2];
						d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(-f));
						break;
					default:
						d = hxsl_TExprDef.TUnop(op1,e5);
					}
					break;
				default:
					d = hxsl_TExprDef.TUnop(op1,e5);
				}
			} else {
				d = hxsl_TExprDef.TUnop(op1,e5);
			}
			break;
		case 7:
			var init = _g[3];
			var v1 = _g[2];
			d = hxsl_TExprDef.TVarDecl(this.mapVar(v1),init == null ? null : this.evalExpr(init));
			break;
		case 8:
			var eargs = _g[3];
			var c2 = _g[2];
			var c3 = this.evalExpr(c2);
			var _g33 = [];
			var _g121 = 0;
			while(_g121 < eargs.length) {
				var a50 = eargs[_g121];
				++_g121;
				_g33.push(this.evalExpr(a50));
			}
			var args = _g33;
			var _g122 = c3.e;
			switch(_g122[1]) {
			case 1:
				if(!this.inlineCalls) {
					d = hxsl_TExprDef.TCall(c3,args);
				} else {
					var v3 = _g122[2];
					if(this.funMap.exists(v3)) {
						var f1 = this.funMap.get(v3);
						var outExprs = [];
						var undo = [];
						var _g210 = 0;
						var _g123 = f1.args.length;
						while(_g210 < _g123) {
							var i2 = _g210++;
							var v4 = [f1.args[i2]];
							var e6 = args[i2];
							var _g34 = e6.e;
							switch(_g34[1]) {
							case 0:
								var old = [this.constants.get(v4[0].id)];
								undo.push((function(old1,v5) {
									return function() {
										if(old1[0] == null) {
											_gthis.constants.remove(v5[0].id);
										} else {
											_gthis.constants.set(v5[0].id,old1[0]);
										}
									};
								})(old,v4));
								this.constants.set(v4[0].id,e6.e);
								break;
							case 1:
								switch(_g34[2].kind[1]) {
								case 0:case 1:case 2:
									var old2 = [this.constants.get(v4[0].id)];
									undo.push((function(old3,v6) {
										return function() {
											if(old3[0] == null) {
												_gthis.constants.remove(v6[0].id);
											} else {
												_gthis.constants.set(v6[0].id,old3[0]);
											}
										};
									})(old2,v4));
									this.constants.set(v4[0].id,e6.e);
									break;
								default:
									var old4 = [this.varMap.get(v4[0])];
									if(old4[0] == null) {
										undo.push((function(v7) {
											return function() {
												_gthis.varMap.remove(v7[0]);
											};
										})(v4));
									} else {
										this.varMap.remove(v4[0]);
										undo.push((function(old5,v8) {
											return function() {
												_gthis.varMap.set(v8[0],old5[0]);
											};
										})(old4,v4));
									}
									var v21 = this.mapVar(v4[0]);
									outExprs.push({ e : hxsl_TExprDef.TVarDecl(v21,e6), t : hxsl_Type.TVoid, p : e6.p});
								}
								break;
							default:
								var old6 = [this.varMap.get(v4[0])];
								if(old6[0] == null) {
									undo.push((function(v9) {
										return function() {
											_gthis.varMap.remove(v9[0]);
										};
									})(v4));
								} else {
									this.varMap.remove(v4[0]);
									undo.push((function(old7,v10) {
										return function() {
											_gthis.varMap.set(v10[0],old7[0]);
										};
									})(old6,v4));
								}
								var v22 = this.mapVar(v4[0]);
								outExprs.push({ e : hxsl_TExprDef.TVarDecl(v22,e6), t : hxsl_Type.TVoid, p : e6.p});
							}
						}
						var e7 = this.handleReturn(this.evalExpr(f1.expr,false),true);
						var _g124 = 0;
						while(_g124 < undo.length) {
							var u = undo[_g124];
							++_g124;
							u();
						}
						var _g125 = e7.e;
						if(_g125[1] == 4) {
							var el1 = _g125[2];
							var _g126 = 0;
							while(_g126 < el1.length) {
								var e8 = el1[_g126];
								++_g126;
								outExprs.push(e8);
							}
						} else {
							outExprs.push(e7);
						}
						d = hxsl_TExprDef.TBlock(outExprs);
					} else {
						d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c3) + "'",c3.p);
					}
				}
				break;
			case 2:
				var g = _g122[2];
				var v11 = this.evalCall(g,args,eargs,e.p);
				if(v11 != null) {
					d = v11;
				} else {
					d = hxsl_TExprDef.TCall(c3,args);
				}
				break;
			default:
				d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c3) + "'",c3.p);
			}
			break;
		case 9:
			var r = _g[3];
			var e9 = _g[2];
			d = hxsl_TExprDef.TSwiz(this.evalExpr(e9),r.slice());
			break;
		case 10:
			var eelse = _g[4];
			var eif = _g[3];
			var econd = _g[2];
			var econd1 = this.evalExpr(econd);
			var _g35 = econd1.e;
			if(_g35[1] == 0) {
				if(_g35[2][1] == 1) {
					var b43 = _g35[2][2];
					if(b43) {
						d = this.evalExpr(eif,isVal).e;
					} else if(eelse == null) {
						d = hxsl_TExprDef.TConst(hxsl_Const.CNull);
					} else {
						d = this.evalExpr(eelse,isVal).e;
					}
				} else if(isVal && eelse != null && this.eliminateConditionals) {
					d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
				} else {
					d = hxsl_TExprDef.TIf(econd1,this.evalExpr(eif,isVal),eelse == null ? null : this.evalExpr(eelse,isVal));
				}
			} else if(isVal && eelse != null && this.eliminateConditionals) {
				d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
			} else {
				d = hxsl_TExprDef.TIf(econd1,this.evalExpr(eif,isVal),eelse == null ? null : this.evalExpr(eelse,isVal));
			}
			break;
		case 11:
			d = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			var e10 = _g[2];
			d = hxsl_TExprDef.TReturn(e10 == null ? null : this.evalExpr(e10));
			break;
		case 13:
			var loop = _g[4];
			var it = _g[3];
			var v12 = _g[2];
			var v23 = this.mapVar(v12);
			var it1 = this.evalExpr(it);
			var e13;
			var _g36 = it1.e;
			if(_g36[1] == 5) {
				if(_g36[2][1] == 21) {
					if(_g36[3].e[1] == 0) {
						if(_g36[3].e[2][1] == 2) {
							if(_g36[4].e[1] == 0) {
								if(_g36[4].e[2][1] == 2) {
									var start = _g36[3].e[2][2];
									var len = _g36[4].e[2][2];
									if(this.unrollLoops) {
										var out1 = [];
										var _g127 = start;
										var _g37 = len;
										while(_g127 < _g37) {
											var i3 = _g127++;
											this.constants.set(v12.id,hxsl_TExprDef.TConst(hxsl_Const.CInt(i3)));
											out1.push(this.evalExpr(loop,false));
										}
										this.constants.remove(v12.id);
										e13 = hxsl_TExprDef.TBlock(out1);
									} else {
										e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
									}
								} else {
									e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
								}
							} else {
								e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
							}
						} else {
							e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
						}
					} else {
						e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
					}
				} else {
					e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
				}
			} else {
				e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
			}
			this.varMap.remove(v12);
			d = e13;
			break;
		case 14:
			d = hxsl_TExprDef.TContinue;
			break;
		case 15:
			d = hxsl_TExprDef.TBreak;
			break;
		case 16:
			var e23 = _g[3];
			var e14 = _g[2];
			var e15 = this.evalExpr(e14);
			var e24 = this.evalExpr(e23);
			var _g38 = e24.e;
			var _g128 = e15.e;
			if(_g128[1] == 17) {
				if(_g38[1] == 0) {
					if(_g38[2][1] == 2) {
						var el2 = _g128[2];
						var i4 = _g38[2][2];
						if(i4 >= 0 && i4 < el2.length) {
							d = el2[i4].e;
						} else {
							d = hxsl_TExprDef.TArray(e15,e24);
						}
					} else {
						d = hxsl_TExprDef.TArray(e15,e24);
					}
				} else {
					d = hxsl_TExprDef.TArray(e15,e24);
				}
			} else {
				d = hxsl_TExprDef.TArray(e15,e24);
			}
			break;
		case 17:
			var el3 = _g[2];
			var _g39 = [];
			var _g129 = 0;
			while(_g129 < el3.length) {
				var e16 = el3[_g129];
				++_g129;
				_g39.push(this.evalExpr(e16));
			}
			d = hxsl_TExprDef.TArrayDecl(_g39);
			break;
		case 18:
			var def = _g[4];
			var cases = _g[3];
			var e17 = _g[2];
			var e18 = this.evalExpr(e17);
			var _g40 = [];
			var _g130 = 0;
			while(_g130 < cases.length) {
				var c4 = cases[_g130];
				++_g130;
				var _g211 = [];
				var _g310 = 0;
				var _g41 = c4.values;
				while(_g310 < _g41.length) {
					var v13 = _g41[_g310];
					++_g310;
					_g211.push(this.evalExpr(v13));
				}
				_g40.push({ values : _g211, expr : this.evalExpr(c4.expr,isVal)});
			}
			var cases1 = _g40;
			var def1 = def == null ? null : this.evalExpr(def,isVal);
			var hasCase = false;
			var _g131 = e18.e;
			if(_g131[1] == 0) {
				var c5 = _g131[2];
				if(c5[1] == 2) {
					var val = c5[2];
					var _g132 = 0;
					while(_g132 < cases1.length) {
						var c6 = cases1[_g132];
						++_g132;
						var _g212 = 0;
						var _g311 = c6.values;
						while(_g212 < _g311.length) {
							var v14 = _g311[_g212];
							++_g212;
							var _g42 = v14.e;
							if(_g42[1] == 0) {
								var cst = _g42[2];
								switch(cst[1]) {
								case 2:
									var k = cst[2];
									if(k == val) {
										return c6.expr;
									}
									break;
								case 3:
									var k1 = cst[2];
									if(k1 == val) {
										return c6.expr;
									}
									break;
								default:
								}
							} else {
								hasCase = true;
							}
						}
					}
				} else {
					throw new js__$Boot_HaxeError("Unsupported switch constant " + Std.string(c5));
				}
			} else {
				hasCase = true;
			}
			if(hasCase) {
				d = hxsl_TExprDef.TSwitch(e18,cases1,def1);
			} else if(def1 == null) {
				d = hxsl_TExprDef.TBlock([]);
			} else {
				d = def1.e;
			}
			break;
		case 19:
			var normalWhile = _g[4];
			var loop1 = _g[3];
			var cond = _g[2];
			var cond1 = this.evalExpr(cond);
			var loop2 = this.evalExpr(loop1,false);
			d = hxsl_TExprDef.TWhile(cond1,loop2,normalWhile);
			break;
		case 20:
			var e19 = _g[4];
			var args1 = _g[3];
			var name = _g[2];
			var e25;
			if(name == "unroll") {
				var old8 = this.unrollLoops;
				this.unrollLoops = true;
				e25 = this.evalExpr(e19,isVal);
				this.unrollLoops = false;
			} else {
				e25 = this.evalExpr(e19,isVal);
			}
			d = hxsl_TExprDef.TMeta(name,args1,e25);
			break;
		}
		return { e : d, t : e.t, p : e.p};
	}
	,__class__: hxsl_Eval
};
var hxsl__$Flatten_Alloc = function(g,t,pos,size) {
	this.g = g;
	this.t = t;
	this.pos = pos;
	this.size = size;
};
$hxClasses["hxsl._Flatten.Alloc"] = hxsl__$Flatten_Alloc;
hxsl__$Flatten_Alloc.__name__ = ["hxsl","_Flatten","Alloc"];
hxsl__$Flatten_Alloc.prototype = {
	__class__: hxsl__$Flatten_Alloc
};
var hxsl_ARead = $hxClasses["hxsl.ARead"] = { __ename__ : true, __constructs__ : ["AIndex","AOffset"] };
hxsl_ARead.AIndex = function(a) { var $x = ["AIndex",0,a]; $x.__enum__ = hxsl_ARead; $x.toString = $estr; return $x; };
hxsl_ARead.AOffset = function(a,stride,delta) { var $x = ["AOffset",1,a,stride,delta]; $x.__enum__ = hxsl_ARead; $x.toString = $estr; return $x; };
hxsl_ARead.__empty_constructs__ = [];
var hxsl_Flatten = function() {
};
$hxClasses["hxsl.Flatten"] = hxsl_Flatten;
hxsl_Flatten.__name__ = ["hxsl","Flatten"];
hxsl_Flatten.prototype = {
	flatten: function(s,kind,constsToGlobal) {
		this.globals = [];
		this.params = [];
		this.outVars = [];
		if(constsToGlobal) {
			this.consts = [];
			var p = s.funs[0].expr.p;
			var gc = { id : hxsl_Tools.allocVarId(), name : "__consts__", kind : hxsl_VarKind.Global, type : null};
			this.econsts = { e : hxsl_TExprDef.TVar(gc), t : null, p : p};
			var s1 = s.name;
			var s2 = s.vars.slice();
			var _g = [];
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				_g.push(this.mapFun(f,$bind(this,this.mapConsts)));
			}
			s = { name : s1, vars : s2, funs : _g};
			var _g11 = 0;
			var _g21 = s.vars;
			while(_g11 < _g21.length) {
				var v = _g21[_g11];
				++_g11;
				var _g3 = v.type;
				if(_g3[1] == 9) {
					this.allocConst(255,p);
				}
			}
			if(this.consts.length > 0) {
				gc.type = this.econsts.t = hxsl_Type.TArray(hxsl_Type.TFloat,hxsl_SizeDecl.SConst(this.consts.length));
				s.vars.push(gc);
			}
		}
		this.varMap = new haxe_ds_ObjectMap();
		this.allocData = new haxe_ds_ObjectMap();
		var _g4 = 0;
		var _g12 = s.vars;
		while(_g4 < _g12.length) {
			var v1 = _g12[_g4];
			++_g4;
			this.gatherVar(v1);
		}
		var prefix;
		switch(kind[1]) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
		this.pack(prefix + "Globals",hxsl_VarKind.Global,this.globals,hxsl_VecType.VFloat);
		this.pack(prefix + "Params",hxsl_VarKind.Param,this.params,hxsl_VecType.VFloat);
		var allVars = this.globals.concat(this.params);
		var textures = this.packTextures(prefix + "Textures",allVars,hxsl_Type.TSampler2D).concat(this.packTextures(prefix + "TexturesCube",allVars,hxsl_Type.TSamplerCube));
		var _g5 = [];
		var _g13 = 0;
		var _g22 = s.funs;
		while(_g13 < _g22.length) {
			var f1 = _g22[_g13];
			++_g13;
			_g5.push(this.mapFun(f1,$bind(this,this.mapExpr)));
		}
		var funs = _g5;
		var _g14 = 0;
		while(_g14 < textures.length) {
			var t = textures[_g14];
			++_g14;
			t.pos >>= 2;
		}
		return { name : s.name, vars : this.outVars, funs : funs};
	}
	,mapFun: function(f,mapExpr) {
		return { kind : f.kind, ret : f.ret, args : f.args, ref : f.ref, expr : mapExpr(f.expr)};
	}
	,mapExpr: function(e) {
		var _g = e.e;
		switch(_g[1]) {
		case 1:
			var v = _g[2];
			var a = this.varMap.get(v);
			if(a == null) {
				e = e;
			} else {
				e = this.access(a,v.type,e.p,hxsl_ARead.AIndex(a));
			}
			break;
		case 16:
			if(_g[2].e[1] == 1) {
				var eindex = _g[3];
				var vp = _g[2].p;
				var v1 = _g[2].e[2];
				var _g1 = eindex.e;
				if(!(_g1[1] == 0 && _g1[2][1] == 2)) {
					var a1 = this.varMap.get(v1);
					if(a1 == null) {
						e = e;
					} else {
						var _g11 = v1.type;
						if(_g11[1] == 14) {
							var t = _g11[2];
							var stride = this.varSize(t,a1.t);
							if(stride == 0 || (stride & 3) != 0) {
								throw new js__$Boot_HaxeError(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
							}
							stride >>= 2;
							eindex = this.mapExpr(eindex);
							var toInt = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : vp},[eindex]), t : hxsl_Type.TInt, p : vp};
							e = this.access(a1,t,vp,hxsl_ARead.AOffset(a1,stride,stride == 1 ? toInt : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpMult,toInt,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(stride)), t : hxsl_Type.TInt, p : vp}), t : hxsl_Type.TInt, p : vp}));
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
					}
				} else {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		default:
			e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
		}
		return this.optimize(e);
	}
	,mapConsts: function(e) {
		var _g = e.e;
		switch(_g[1]) {
		case 0:
			var c = _g[2];
			switch(c[1]) {
			case 2:
				var v = c[2];
				return this.allocConst(v,e.p);
			case 3:
				var v1 = c[2];
				return this.allocConst(v1,e.p);
			default:
				return e;
			}
			break;
		case 2:
			var g = _g[2];
			switch(g[1]) {
			case 0:
				this.allocConst(Math.PI / 180,e.p);
				break;
			case 1:
				this.allocConst(180 / Math.PI,e.p);
				break;
			case 9:
				this.allocConst(1.4426950408889634,e.p);
				break;
			case 10:
				this.allocConst(0.6931471805599453,e.p);
				break;
			case 24:
				this.allocConst(1,e.p);
				break;
			case 52:
				this.allocConsts([1,255,65025,16581375],e.p);
				this.allocConsts([0.00392156862745098,0.00392156862745098,0.00392156862745098,0],e.p);
				break;
			case 53:
				this.allocConsts([1,0.00392156862745098,1.53787004998077679e-05,6.03086294110108446e-08],e.p);
				break;
			case 54:
				this.allocConst(1,e.p);
				this.allocConst(0.5,e.p);
				break;
			case 55:
				this.allocConst(0.5,e.p);
				break;
			default:
			}
			break;
		case 5:
			if(_g[2][1] == 1) {
				if(_g[4].t[1] == 8) {
					this.allocConst(1,e.p);
				}
			}
			break;
		case 8:
			if(_g[2].e[1] == 2) {
				if(_g[2].e[2][1] == 40) {
					if(_g[3].length == 2) {
						if(_g[3][0].e[1] == 1) {
							switch(_g[3][0].e[2].kind[1]) {
							case 0:
								if(_g[3][0].t[1] == 5) {
									if(_g[3][0].t[2] == 3) {
										if(_g[3][0].t[3][1] == 1) {
											if(_g[3][1].e[1] == 0) {
												if(_g[3][1].e[2][1] == 2) {
													if(_g[3][1].e[2][2] == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 1:
								if(_g[3][0].t[1] == 5) {
									if(_g[3][0].t[2] == 3) {
										if(_g[3][0].t[3][1] == 1) {
											if(_g[3][1].e[1] == 0) {
												if(_g[3][1].e[2][1] == 2) {
													if(_g[3][1].e[2][2] == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 2:
								if(_g[3][0].t[1] == 5) {
									if(_g[3][0].t[2] == 3) {
										if(_g[3][0].t[3][1] == 1) {
											if(_g[3][1].e[1] == 0) {
												if(_g[3][1].e[2][1] == 2) {
													if(_g[3][1].e[2][2] == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 3:
								if(_g[3][0].t[1] == 5) {
									if(_g[3][0].t[2] == 3) {
										if(_g[3][0].t[3][1] == 1) {
											if(_g[3][1].e[1] == 0) {
												if(_g[3][1].e[2][1] == 2) {
													if(_g[3][1].e[2][2] == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							default:
							}
						}
					}
				}
			}
			break;
		case 16:
			if(_g[3].e[1] == 0) {
				if(_g[3].e[2][1] == 2) {
					var ea = _g[2];
					var eindex = _g[3];
					return { e : hxsl_TExprDef.TArray(this.mapConsts(ea),eindex), t : e.t, p : e.p};
				} else {
					var ea1 = _g[2];
					var eindex1 = _g[3];
					var _g1 = ea1.t;
					if(_g1[1] == 14) {
						var t = _g1[2];
						var stride = this.varSize(t,hxsl_VecType.VFloat) >> 2;
						this.allocConst(stride,e.p);
					}
				}
			} else {
				var ea2 = _g[2];
				var eindex2 = _g[3];
				var _g2 = ea2.t;
				if(_g2[1] == 14) {
					var t1 = _g2[2];
					var stride1 = this.varSize(t1,hxsl_VecType.VFloat) >> 2;
					this.allocConst(stride1,e.p);
				}
			}
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapConsts));
	}
	,allocConst: function(v,p) {
		var index = this.consts.indexOf(v);
		if(index < 0) {
			index = this.consts.length;
			this.consts.push(v);
		}
		return { e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
	}
	,allocConsts: function(va,p) {
		var _gthis = this;
		var pad = va.length - 1 & 3;
		var index = -1;
		var _g1 = 0;
		var _g = this.consts.length - (va.length - 1);
		while(_g1 < _g) {
			var i = _g1++;
			if(i >> 2 != i + pad >> 2) {
				continue;
			}
			var found = true;
			var _g3 = 0;
			var _g2 = va.length;
			while(_g3 < _g2) {
				var j = _g3++;
				if(this.consts[i + j] != va[j]) {
					found = false;
					break;
				}
			}
			if(found) {
				index = i;
				break;
			}
		}
		if(index < 0) {
			while(this.consts.length >> 2 != this.consts.length + pad >> 2) this.consts.push(0);
			index = this.consts.length;
			var _g4 = 0;
			while(_g4 < va.length) {
				var v = va[_g4];
				++_g4;
				this.consts.push(v);
			}
		}
		var _g5 = va.length;
		switch(_g5) {
		case 1:
			return { e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
		case 2:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec2), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(2,hxsl_VecType.VFloat), p : p};
		case 3:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec3), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 2)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(3,hxsl_VecType.VFloat), p : p};
		case 4:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 3)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 4)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : p};
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,mkInt: function(v,pos) {
		return { e : hxsl_TExprDef.TConst(hxsl_Const.CInt(v)), t : hxsl_Type.TInt, p : pos};
	}
	,readIndex: function(a,index,pos) {
		return { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a.g), t : a.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a.pos >> 2) + index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a.t), p : pos};
	}
	,readOffset: function(a,stride,delta,index,pos) {
		var index1 = (a.pos >> 2) + index;
		var offset = index1 == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
		return { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a.g), t : a.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a.t), p : pos};
	}
	,access: function(a,t,pos,acc) {
		var _gthis = this;
		switch(t[1]) {
		case 6:
			var tmp = this.access(a,hxsl_Type.TMat3x4,pos,acc);
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3), t : hxsl_Type.TFun([]), p : pos},[tmp]), t : hxsl_Type.TMat3, p : pos};
		case 7:
			var tmp1 = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4);
			var tmp2 = hxsl_Type.TFun([]);
			var tmp3;
			switch(acc[1]) {
			case 0:
				var a1 = acc[2];
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a1.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc[4];
				var stride = acc[3];
				var a2 = acc[2];
				var index = a2.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a2.g), t : a2.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a2.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc[1]) {
			case 0:
				var a3 = acc[2];
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a3.g), t : a3.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a3.pos >> 2) + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a3.t), p : pos};
				break;
			case 1:
				var delta1 = acc[4];
				var stride1 = acc[3];
				var a4 = acc[2];
				var index1 = (a4.pos >> 2) + 1;
				var offset1 = index1 == 0 ? delta1 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a4.g), t : a4.g.type, p : pos},offset1), t : hxsl_Type.TVec(4,a4.t), p : pos};
				break;
			}
			var tmp5;
			switch(acc[1]) {
			case 0:
				var a5 = acc[2];
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a5.g), t : a5.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a5.pos >> 2) + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a5.t), p : pos};
				break;
			case 1:
				var delta2 = acc[4];
				var stride2 = acc[3];
				var a6 = acc[2];
				var index2 = (a6.pos >> 2) + 2;
				var offset2 = index2 == 0 ? delta2 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta2,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a6.g), t : a6.g.type, p : pos},offset2), t : hxsl_Type.TVec(4,a6.t), p : pos};
				break;
			}
			var tmp6;
			switch(acc[1]) {
			case 0:
				var a7 = acc[2];
				tmp6 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a7.g), t : a7.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a7.pos >> 2) + 3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a7.t), p : pos};
				break;
			case 1:
				var delta3 = acc[4];
				var stride3 = acc[3];
				var a8 = acc[2];
				var index3 = (a8.pos >> 2) + 3;
				var offset3 = index3 == 0 ? delta3 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta3,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp6 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a8.g), t : a8.g.type, p : pos},offset3), t : hxsl_Type.TVec(4,a8.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp1, t : tmp2, p : pos},[tmp3,tmp4,tmp5,tmp6]), t : hxsl_Type.TMat4, p : pos};
		case 8:
			var tmp7 = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4);
			var tmp8 = hxsl_Type.TFun([]);
			var tmp9;
			switch(acc[1]) {
			case 0:
				var a9 = acc[2];
				tmp9 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a9.g), t : a9.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a9.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a9.t), p : pos};
				break;
			case 1:
				var delta4 = acc[4];
				var stride4 = acc[3];
				var a10 = acc[2];
				var index4 = a10.pos >> 2;
				var offset4 = index4 == 0 ? delta4 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta4,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index4)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp9 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a10.g), t : a10.g.type, p : pos},offset4), t : hxsl_Type.TVec(4,a10.t), p : pos};
				break;
			}
			var tmp10;
			switch(acc[1]) {
			case 0:
				var a11 = acc[2];
				tmp10 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a11.g), t : a11.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a11.pos >> 2) + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a11.t), p : pos};
				break;
			case 1:
				var delta5 = acc[4];
				var stride5 = acc[3];
				var a12 = acc[2];
				var index5 = (a12.pos >> 2) + 1;
				var offset5 = index5 == 0 ? delta5 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta5,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index5)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp10 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a12.g), t : a12.g.type, p : pos},offset5), t : hxsl_Type.TVec(4,a12.t), p : pos};
				break;
			}
			var tmp11;
			switch(acc[1]) {
			case 0:
				var a13 = acc[2];
				tmp11 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a13.g), t : a13.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a13.pos >> 2) + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a13.t), p : pos};
				break;
			case 1:
				var delta6 = acc[4];
				var stride6 = acc[3];
				var a14 = acc[2];
				var index6 = (a14.pos >> 2) + 2;
				var offset6 = index6 == 0 ? delta6 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta6,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index6)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp11 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a14.g), t : a14.g.type, p : pos},offset6), t : hxsl_Type.TVec(4,a14.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp7, t : tmp8, p : pos},[tmp9,tmp10,tmp11]), t : hxsl_Type.TMat3x4, p : pos};
		case 10:case 11:case 15:
			switch(acc[1]) {
			case 0:
				var a15 = acc[2];
				return { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a15.g), t : a15.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a15.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a15.t), p : pos};
			case 1:
				var delta7 = acc[4];
				var stride7 = acc[3];
				var a16 = acc[2];
				var index7 = a16.pos >> 2;
				var offset7 = index7 == 0 ? delta7 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta7,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index7)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				return { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a16.g), t : a16.g.type, p : pos},offset7), t : hxsl_Type.TVec(4,a16.t), p : pos};
			}
			break;
		case 14:
			if(t[3][1] == 0) {
				var t1 = t[2];
				var len = t[3][2];
				var stride8 = a.size / len | 0;
				var _g = [];
				var _g2 = 0;
				var _g1 = len;
				while(_g2 < _g1) {
					var i = _g2++;
					var a17 = new hxsl__$Flatten_Alloc(a.g,a.t,a.pos + stride8 * i,stride8);
					_g.push(this.access(a17,t1,pos,hxsl_ARead.AIndex(a17)));
				}
				var earr = _g;
				return { e : hxsl_TExprDef.TArrayDecl(earr), t : t1, p : pos};
			} else {
				var size = this.varSize(t,a.t);
				if(size <= 4) {
					var k;
					switch(acc[1]) {
					case 0:
						var a18 = acc[2];
						k = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a18.g), t : a18.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a18.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a18.t), p : pos};
						break;
					case 1:
						var delta8 = acc[4];
						var stride9 = acc[3];
						var a19 = acc[2];
						var index8 = a19.pos >> 2;
						var offset8 = index8 == 0 ? delta8 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta8,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index8)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
						k = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a19.g), t : a19.g.type, p : pos},offset8), t : hxsl_Type.TVec(4,a19.t), p : pos};
						break;
					}
					if(size == 4) {
						if((a.pos & 3) != 0) {
							throw new js__$Boot_HaxeError("assert");
						}
						return k;
					} else {
						var sw = [];
						var _g11 = 0;
						var _g3 = size;
						while(_g11 < _g3) {
							var i1 = _g11++;
							sw.push(hxsl_Tools.SWIZ[i1 + (a.pos & 3)]);
						}
						return { e : hxsl_TExprDef.TSwiz(k,sw), t : t, p : pos};
					}
				}
				return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
			}
			break;
		default:
			var size1 = this.varSize(t,a.t);
			if(size1 <= 4) {
				var k1;
				switch(acc[1]) {
				case 0:
					var a20 = acc[2];
					k1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a20.g), t : a20.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a20.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a20.t), p : pos};
					break;
				case 1:
					var delta9 = acc[4];
					var stride10 = acc[3];
					var a21 = acc[2];
					var index9 = a21.pos >> 2;
					var offset9 = index9 == 0 ? delta9 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta9,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index9)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					k1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a21.g), t : a21.g.type, p : pos},offset9), t : hxsl_Type.TVec(4,a21.t), p : pos};
					break;
				}
				if(size1 == 4) {
					if((a.pos & 3) != 0) {
						throw new js__$Boot_HaxeError("assert");
					}
					return k1;
				} else {
					var sw1 = [];
					var _g12 = 0;
					var _g4 = size1;
					while(_g12 < _g4) {
						var i2 = _g12++;
						sw1.push(hxsl_Tools.SWIZ[i2 + (a.pos & 3)]);
					}
					return { e : hxsl_TExprDef.TSwiz(k1,sw1), t : t, p : pos};
				}
			}
			return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
		}
	}
	,optimize: function(e) {
		var _g = e.e;
		switch(_g[1]) {
		case 8:
			if(_g[2].e[1] == 2) {
				if(_g[2].e[2][1] == 50) {
					if(_g[3].length == 1) {
						if(_g[3][0].e[1] == 8) {
							if(_g[3][0].e[2].e[1] == 2) {
								if(_g[3][0].e[2].e[2][1] == 49) {
									var args = _g[3][0].e[3];
									var rem = 0;
									var size = 0;
									while(size < 4) {
										var t = args[args.length - 1 - rem].t;
										size += this.varSize(t,hxsl_VecType.VFloat);
										++rem;
									}
									if(size == 4) {
										var _g1 = 0;
										var _g2 = rem;
										while(_g1 < _g2) {
											var i = _g1++;
											args.pop();
										}
										var emat;
										var _g3 = e.e;
										if(_g3[1] == 8) {
											var e1 = _g3[2];
											emat = e1;
										} else {
											throw new js__$Boot_HaxeError("assert");
										}
										return { e : hxsl_TExprDef.TCall(emat,args), t : e.t, p : e.p};
									}
								}
							}
						}
					}
				}
			}
			break;
		case 16:
			if(_g[2].e[1] == 17) {
				if(_g[3].e[1] == 0) {
					if(_g[3].e[2][1] == 2) {
						var el = _g[2].e[2];
						var i1 = _g[3].e[2][2];
						if(i1 >= 0 && i1 < el.length) {
							return el[i1];
						}
						hxsl_Error.t("Reading outside array bounds",e.p);
					}
				}
			}
			break;
		default:
		}
		return e;
	}
	,packTextures: function(name,vars,t) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			if(v.type != t) {
				var tmp;
				if(t == hxsl_Type.TSampler2D) {
					var _g1 = v.type;
					if(_g1[1] == 15) {
						tmp = true;
					} else {
						tmp = false;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					continue;
				}
			}
			var a = new hxsl__$Flatten_Alloc(g,null,alloc.length << 2,1);
			a.v = v;
			this.varMap.set(v,a);
			alloc.push(a);
		}
		g.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(alloc.length));
		if(alloc.length > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return alloc;
	}
	,pack: function(name,kind,vars,t) {
		var alloc = [];
		var apos = 0;
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVec(0,t), kind : kind};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var _g1 = v.type;
			switch(_g1[1]) {
			case 10:case 11:case 15:
				continue;
				break;
			default:
			}
			var size = this.varSize(v.type,t);
			var best = null;
			var _g2 = 0;
			while(_g2 < alloc.length) {
				var a = alloc[_g2];
				++_g2;
				if(a.v == null && a.size >= size && (best == null || best.size > a.size)) {
					best = a;
				}
			}
			if(best != null) {
				var free = best.size - size;
				if(free > 0) {
					var i = Lambda.indexOf(alloc,best);
					var a1 = new hxsl__$Flatten_Alloc(g,t,best.pos + size,free);
					alloc.splice(i + 1,0,a1);
					best.size = size;
				}
				best.v = v;
				this.varMap.set(v,best);
			} else {
				var a2 = new hxsl__$Flatten_Alloc(g,t,apos,size);
				apos += size;
				a2.v = v;
				this.varMap.set(v,a2);
				alloc.push(a2);
				var pad = (4 - size % 4) % 4;
				if(pad > 0) {
					var a3 = new hxsl__$Flatten_Alloc(g,t,apos,pad);
					apos += pad;
					alloc.push(a3);
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TVec(4,t),hxsl_SizeDecl.SConst(apos >> 2));
		if(apos > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return g;
	}
	,varSize: function(v,t) {
		switch(v[1]) {
		case 3:
			if(t == hxsl_VecType.VFloat) {
				return 1;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 5:
			var t2 = v[3];
			var n = v[2];
			if(t == t2) {
				return n;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 7:
			if(t == hxsl_VecType.VFloat) {
				return 16;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 6:case 8:
			if(t == hxsl_VecType.VFloat) {
				return 12;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 14:
			if(v[3][1] == 0) {
				var at = v[2];
				var n1 = v[3][2];
				return this.varSize(at,t) * n1;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		default:
			throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
		}
	}
	,gatherVar: function(v) {
		var _g = v.type;
		if(_g[1] == 12) {
			var vl = _g[2];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.gatherVar(v1);
			}
		} else {
			var _g2 = v.kind;
			switch(_g2[1]) {
			case 0:
				if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.PerObject)) {
					this.params.push(v);
				} else {
					this.globals.push(v);
				}
				break;
			case 2:
				this.params.push(v);
				break;
			default:
				this.outVars.push(v);
			}
		}
	}
	,__class__: hxsl_Flatten
};
var hxsl__$Globals_GlobalSlot_$Impl_$ = {};
$hxClasses["hxsl._Globals.GlobalSlot_Impl_"] = hxsl__$Globals_GlobalSlot_$Impl_$;
hxsl__$Globals_GlobalSlot_$Impl_$.__name__ = ["hxsl","_Globals","GlobalSlot_Impl_"];
hxsl__$Globals_GlobalSlot_$Impl_$._new = function(name) {
	var this1 = hxsl_Globals.allocID(name);
	return this1;
};
hxsl__$Globals_GlobalSlot_$Impl_$.toInt = function(this1) {
	return this1;
};
hxsl__$Globals_GlobalSlot_$Impl_$.set = function(this1,globals,v) {
	globals.map.set(this1,v);
};
hxsl__$Globals_GlobalSlot_$Impl_$.get = function(this1,globals) {
	return globals.map.get(this1);
};
var hxsl_Globals = function() {
	this.channels = [];
	this.map = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Globals"] = hxsl_Globals;
hxsl_Globals.__name__ = ["hxsl","Globals"];
hxsl_Globals.allocID = function(path) {
	if(hxsl_Globals.MAP == null) {
		hxsl_Globals.MAP = new haxe_ds_StringMap();
		hxsl_Globals.ALL = [];
	}
	var _this = hxsl_Globals.MAP;
	var id = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
	if(id == null) {
		id = hxsl_Globals.ALL.length;
		hxsl_Globals.ALL.push(path);
		var _this1 = hxsl_Globals.MAP;
		if(__map_reserved[path] != null) {
			_this1.setReserved(path,id);
		} else {
			_this1.h[path] = id;
		}
	}
	return id;
};
hxsl_Globals.prototype = {
	set: function(path,v) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		this1.h[key] = v;
	}
	,get: function(path) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		return this1.h[key];
	}
	,fastSet: function(id,v) {
		this.map.h[id] = v;
	}
	,fastGet: function(id) {
		return this.map.h[id];
	}
	,resetChannels: function() {
		this.maxChannels = 0;
	}
	,allocChannelID: function(t) {
		var _g1 = 0;
		var _g = this.maxChannels;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.channels[i] == t) {
				return i;
			}
		}
		if(this.maxChannels == 1 << hxsl_Tools.MAX_CHANNELS_BITS) {
			throw new js__$Boot_HaxeError("Too many unique channels");
		}
		var i1 = this.maxChannels++;
		this.channels[i1] = t;
		return i1;
	}
	,__class__: hxsl_Globals
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var hxsl_GlslOut = function() {
	this.exprIds = 0;
	this.varNames = new haxe_ds_IntMap();
	this.allNames = new haxe_ds_StringMap();
	this.flipY = true;
};
$hxClasses["hxsl.GlslOut"] = hxsl_GlslOut;
hxsl_GlslOut.__name__ = ["hxsl","GlslOut"];
hxsl_GlslOut.compile = function(s) {
	var out = new hxsl_GlslOut();
	out.glES = true;
	return out.run(s);
};
hxsl_GlslOut.prototype = {
	add: function(v) {
		this.buf.b += Std.string(v);
	}
	,ident: function(v) {
		var v1 = this.varName(v);
		this.buf.b += Std.string(v1);
	}
	,decl: function(s) {
		var _g = 0;
		var _g1 = this.decls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d == s) {
				return;
			}
		}
		if(HxOverrides.cca(s,0) == 35) {
			this.decls.unshift(s);
		} else {
			this.decls.push(s);
		}
	}
	,addType: function(t) {
		switch(t[1]) {
		case 0:
			this.buf.b += "void";
			break;
		case 1:
			this.buf.b += "int";
			break;
		case 2:
			this.buf.b += "bool";
			break;
		case 3:
			this.buf.b += "float";
			break;
		case 4:
			this.buf.b += "string";
			break;
		case 5:
			var k = t[3];
			var size = t[2];
			switch(k[1]) {
			case 0:
				this.buf.b += "i";
				break;
			case 1:
				break;
			case 2:
				this.buf.b += "b";
				break;
			}
			this.buf.b += "vec";
			this.buf.b += Std.string(size);
			break;
		case 6:
			this.buf.b += "mat3";
			break;
		case 7:
			this.buf.b += "mat4";
			break;
		case 8:
			this.decl(hxsl_GlslOut.MAT34);
			this.buf.b += "_mat3x4";
			break;
		case 9:
			var n = t[2];
			this.buf.b += "vec";
			this.buf.b += Std.string(n);
			break;
		case 10:
			this.buf.b += "sampler2D";
			break;
		case 11:
			this.buf.b += "samplerCube";
			break;
		case 12:
			var vl = t[2];
			this.buf.b += "struct { ";
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.addVar(v);
				this.buf.b += ";";
			}
			this.buf.b += " }";
			break;
		case 13:
			this.buf.b += "function";
			break;
		case 14:
			var size1 = t[3];
			var t1 = t[2];
			this.addType(t1);
			this.buf.b += "[";
			switch(size1[1]) {
			case 0:
				if(size1[2] == 1) {
					if(this.intelDriverFix) {
						this.buf.b += "2";
					} else {
						var v1 = size1[2];
						this.buf.b += Std.string(v1);
					}
				} else {
					var v2 = size1[2];
					this.buf.b += Std.string(v2);
				}
				break;
			case 1:
				var v3 = size1[2];
				var v4 = this.varName(v3);
				this.buf.b += Std.string(v4);
				break;
			}
			this.buf.b += "]";
			break;
		case 15:
			var n1 = t[2];
			this.buf.b += Std.string("channel" + n1);
			break;
		}
	}
	,addVar: function(v) {
		var _g = v.type;
		if(_g[1] == 14) {
			var size = _g[3];
			var t = _g[2];
			var old = v.type;
			v.type = t;
			this.addVar(v);
			v.type = old;
			this.buf.b += "[";
			switch(size[1]) {
			case 0:
				if(size[2] == 1) {
					if(this.intelDriverFix) {
						this.buf.b += "2";
					} else {
						var n = size[2];
						this.buf.b += Std.string(n);
					}
				} else {
					var n1 = size[2];
					this.buf.b += Std.string(n1);
				}
				break;
			case 1:
				var v1 = size[2];
				var v2 = this.varName(v1);
				this.buf.b += Std.string(v2);
				break;
			}
			this.buf.b += "]";
		} else {
			this.addType(v.type);
			this.buf.b += " ";
			var v3 = this.varName(v);
			this.buf.b += Std.string(v3);
		}
	}
	,addValue: function(e,tabs) {
		var _g = e.e;
		switch(_g[1]) {
		case 4:
			var el = _g[2];
			var name = "val" + this.exprIds++;
			var tmp = this.buf;
			this.buf = new StringBuf();
			this.addType(e.t);
			this.buf.b += " ";
			this.buf.b += Std.string(name);
			this.buf.b += "(void)";
			var el2 = el.slice();
			var last = el2[el2.length - 1];
			el2[el2.length - 1] = { e : hxsl_TExprDef.TReturn(last), t : e.t, p : last.p};
			var e2 = { t : hxsl_Type.TVoid, e : hxsl_TExprDef.TBlock(el2), p : e.p};
			this.addExpr(e2,"");
			this.exprValues.push(this.buf.b);
			this.buf = tmp;
			this.buf.b += Std.string(name);
			this.buf.b += "()";
			break;
		case 10:
			var eelse = _g[4];
			var eif = _g[3];
			var econd = _g[2];
			this.buf.b += "( ";
			this.addValue(econd,tabs);
			this.buf.b += " ) ? ";
			this.addValue(eif,tabs);
			this.buf.b += " : ";
			this.addValue(eelse,tabs);
			break;
		case 20:
			var e1 = _g[4];
			this.addValue(e1,tabs);
			break;
		default:
			this.addExpr(e,tabs);
		}
	}
	,addBlock: function(e,tabs) {
		this.addExpr(e,tabs);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g[1]) {
		case 0:
			var c = _g[2];
			switch(c[1]) {
			case 0:
				this.buf.b += "null";
				break;
			case 1:
				var b = c[2];
				this.buf.b += Std.string(b);
				break;
			case 2:
				var v = c[2];
				this.buf.b += Std.string(v);
				break;
			case 3:
				var f = c[2];
				var str = "" + f;
				this.buf.b += Std.string(str);
				if(str.indexOf(".") == -1 && str.indexOf("e") == -1) {
					this.buf.b += ".";
				}
				break;
			case 4:
				var v1 = c[2];
				this.buf.b += Std.string("\"" + v1 + "\"");
				break;
			}
			break;
		case 1:
			var v2 = _g[2];
			var v3 = this.varName(v2);
			this.buf.b += Std.string(v3);
			break;
		case 2:
			var g = _g[2];
			switch(g[1]) {
			case 33:
				this.decl("vec4 _texture2D( sampler2D t, vec2 v ) { return " + (this.glES ? "texture2D" : "texture") + "(t,vec2(v.x," + (this.flipY ? "0.999999-v.y" : "v.y") + ")); }");
				break;
			case 34:
				if(!this.glES) {
					this.buf.b += "texture";
					return;
				}
				break;
			case 50:
				this.decl(hxsl_GlslOut.MAT34);
				break;
			case 52:
				this.decl("vec4 pack( float v ) { vec4 color = fract(v * vec4(1, 255, 255.*255., 255.*255.*255.)); return color - color.yzww * vec4(1. / 255., 1. / 255., 1. / 255., 0.); }");
				break;
			case 53:
				this.decl("float unpack( vec4 color ) { return dot(color,vec4(1., 1. / 255., 1. / (255. * 255.), 1. / (255. * 255. * 255.))); }");
				break;
			case 54:
				this.decl("vec4 packNormal( vec3 v ) { return vec4((v + vec3(1.)) * vec3(0.5),1.); }");
				break;
			case 55:
				this.decl("vec3 unpackNormal( vec4 v ) { return normalize((v.xyz - vec3(0.5)) * vec3(2.)); }");
				break;
			case 56:case 57:case 58:
				this.decl("#extension GL_OES_standard_derivatives:enable");
				break;
			case 59:
				if(!this.glES) {
					this.buf.b += "textureLod";
					return;
				}
				break;
			default:
			}
			var v4 = hxsl_GlslOut.GLOBALS.get(g);
			this.buf.b += Std.string(v4);
			break;
		case 3:
			var e1 = _g[2];
			this.buf.b += "(";
			this.addValue(e1,tabs);
			this.buf.b += ")";
			break;
		case 4:
			var el = _g[2];
			this.buf.b += "{\n";
			var t2 = tabs + "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e2 = el[_g1];
				++_g1;
				this.buf.b += Std.string(t2);
				this.addExpr(e2,t2);
				this.newLine(e2);
			}
			this.buf.b += Std.string(tabs);
			this.buf.b += "}";
			break;
		case 5:
			var e21 = _g[4];
			var e11 = _g[3];
			var op = _g[2];
			var _g2 = e21.t;
			var _g11 = e11.t;
			switch(op[1]) {
			case 1:
				if(_g11[1] == 5) {
					if(_g11[2] == 3) {
						if(_g11[3][1] == 1) {
							if(_g2[1] == 8) {
								this.decl(hxsl_GlslOut.MAT34);
								this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
								if(op[1] == 20) {
									this.addValue(e11,tabs);
									this.buf.b += " = ";
								}
								this.buf.b += "m3x4mult(";
								this.addValue(e11,tabs);
								this.buf.b += ",";
								this.addValue(e21,tabs);
								this.buf.b += ")";
							} else {
								this.addValue(e11,tabs);
								this.buf.b += " ";
								var v5 = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v5);
								this.buf.b += " ";
								this.addValue(e21,tabs);
							}
						} else {
							this.addValue(e11,tabs);
							this.buf.b += " ";
							var v6 = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v6);
							this.buf.b += " ";
							this.addValue(e21,tabs);
						}
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v7 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v7);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v8 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v8);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			case 5:
				if(_g11[1] == 5) {
					if(_g2[1] == 5) {
						var n = _g11[2];
						this.buf.b += Std.string("vec" + n + "(");
						var v9;
						switch(op[1]) {
						case 5:
							v9 = "equal";
							break;
						case 6:
							v9 = "notEqual";
							break;
						case 7:
							v9 = "greaterThan";
							break;
						case 8:
							v9 = "greaterThanEqual";
							break;
						case 9:
							v9 = "lessThan";
							break;
						case 10:
							v9 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v9);
						this.buf.b += "(";
						this.addValue(e11,tabs);
						this.buf.b += ",";
						this.addValue(e21,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v10 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v10);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v11 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v11);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			case 6:
				if(_g11[1] == 5) {
					if(_g2[1] == 5) {
						var n1 = _g11[2];
						this.buf.b += Std.string("vec" + n1 + "(");
						var v12;
						switch(op[1]) {
						case 5:
							v12 = "equal";
							break;
						case 6:
							v12 = "notEqual";
							break;
						case 7:
							v12 = "greaterThan";
							break;
						case 8:
							v12 = "greaterThanEqual";
							break;
						case 9:
							v12 = "lessThan";
							break;
						case 10:
							v12 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v12);
						this.buf.b += "(";
						this.addValue(e11,tabs);
						this.buf.b += ",";
						this.addValue(e21,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v13 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v13);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v14 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v14);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			case 7:
				if(_g11[1] == 5) {
					if(_g2[1] == 5) {
						var n2 = _g11[2];
						this.buf.b += Std.string("vec" + n2 + "(");
						var v15;
						switch(op[1]) {
						case 5:
							v15 = "equal";
							break;
						case 6:
							v15 = "notEqual";
							break;
						case 7:
							v15 = "greaterThan";
							break;
						case 8:
							v15 = "greaterThanEqual";
							break;
						case 9:
							v15 = "lessThan";
							break;
						case 10:
							v15 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v15);
						this.buf.b += "(";
						this.addValue(e11,tabs);
						this.buf.b += ",";
						this.addValue(e21,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v16 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v16);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v17 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v17);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			case 8:
				if(_g11[1] == 5) {
					if(_g2[1] == 5) {
						var n3 = _g11[2];
						this.buf.b += Std.string("vec" + n3 + "(");
						var v18;
						switch(op[1]) {
						case 5:
							v18 = "equal";
							break;
						case 6:
							v18 = "notEqual";
							break;
						case 7:
							v18 = "greaterThan";
							break;
						case 8:
							v18 = "greaterThanEqual";
							break;
						case 9:
							v18 = "lessThan";
							break;
						case 10:
							v18 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v18);
						this.buf.b += "(";
						this.addValue(e11,tabs);
						this.buf.b += ",";
						this.addValue(e21,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v19 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v19);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v20 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v20);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			case 9:
				if(_g11[1] == 5) {
					if(_g2[1] == 5) {
						var n4 = _g11[2];
						this.buf.b += Std.string("vec" + n4 + "(");
						var v21;
						switch(op[1]) {
						case 5:
							v21 = "equal";
							break;
						case 6:
							v21 = "notEqual";
							break;
						case 7:
							v21 = "greaterThan";
							break;
						case 8:
							v21 = "greaterThanEqual";
							break;
						case 9:
							v21 = "lessThan";
							break;
						case 10:
							v21 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v21);
						this.buf.b += "(";
						this.addValue(e11,tabs);
						this.buf.b += ",";
						this.addValue(e21,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v22 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v22);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v23 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v23);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			case 10:
				if(_g11[1] == 5) {
					if(_g2[1] == 5) {
						var n5 = _g11[2];
						this.buf.b += Std.string("vec" + n5 + "(");
						var v24;
						switch(op[1]) {
						case 5:
							v24 = "equal";
							break;
						case 6:
							v24 = "notEqual";
							break;
						case 7:
							v24 = "greaterThan";
							break;
						case 8:
							v24 = "greaterThanEqual";
							break;
						case 9:
							v24 = "lessThan";
							break;
						case 10:
							v24 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v24);
						this.buf.b += "(";
						this.addValue(e11,tabs);
						this.buf.b += ",";
						this.addValue(e21,tabs);
						this.buf.b += "))";
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v25 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v25);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v26 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v26);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			case 18:
				this.decl("int _ushr( int i, int j ) { return int(uint(i) >> uint(j)); }");
				this.buf.b += "_ushr(";
				this.addValue(e11,tabs);
				this.buf.b += ",";
				this.addValue(e21,tabs);
				this.buf.b += ")";
				break;
			case 19:
				if(op[1] == 20) {
					this.addValue(e11,tabs);
					this.buf.b += " = ";
				}
				this.buf.b += "mod(";
				this.addValue(e11,tabs);
				this.buf.b += ",";
				this.addValue(e21,tabs);
				this.buf.b += ")";
				break;
			case 20:
				switch(op[2][1]) {
				case 1:
					if(_g11[1] == 5) {
						if(_g11[2] == 3) {
							if(_g11[3][1] == 1) {
								if(_g2[1] == 8) {
									this.decl(hxsl_GlslOut.MAT34);
									this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
									if(op[1] == 20) {
										this.addValue(e11,tabs);
										this.buf.b += " = ";
									}
									this.buf.b += "m3x4mult(";
									this.addValue(e11,tabs);
									this.buf.b += ",";
									this.addValue(e21,tabs);
									this.buf.b += ")";
								} else {
									this.addValue(e11,tabs);
									this.buf.b += " ";
									var v27 = hxsl_Printer.opStr(op);
									this.buf.b += Std.string(v27);
									this.buf.b += " ";
									this.addValue(e21,tabs);
								}
							} else {
								this.addValue(e11,tabs);
								this.buf.b += " ";
								var v28 = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v28);
								this.buf.b += " ";
								this.addValue(e21,tabs);
							}
						} else {
							this.addValue(e11,tabs);
							this.buf.b += " ";
							var v29 = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v29);
							this.buf.b += " ";
							this.addValue(e21,tabs);
						}
					} else {
						this.addValue(e11,tabs);
						this.buf.b += " ";
						var v30 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v30);
						this.buf.b += " ";
						this.addValue(e21,tabs);
					}
					break;
				case 19:
					if(op[1] == 20) {
						this.addValue(e11,tabs);
						this.buf.b += " = ";
					}
					this.buf.b += "mod(";
					this.addValue(e11,tabs);
					this.buf.b += ",";
					this.addValue(e21,tabs);
					this.buf.b += ")";
					break;
				default:
					this.addValue(e11,tabs);
					this.buf.b += " ";
					var v31 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v31);
					this.buf.b += " ";
					this.addValue(e21,tabs);
				}
				break;
			default:
				this.addValue(e11,tabs);
				this.buf.b += " ";
				var v32 = hxsl_Printer.opStr(op);
				this.buf.b += Std.string(v32);
				this.buf.b += " ";
				this.addValue(e21,tabs);
			}
			break;
		case 6:
			var e12 = _g[3];
			var op1 = _g[2];
			var _this = this.buf;
			var _this1 = _this.b;
			var tmp;
			switch(op1[1]) {
			case 0:
				tmp = "++";
				break;
			case 1:
				tmp = "--";
				break;
			case 2:
				tmp = "!";
				break;
			case 3:
				tmp = "-";
				break;
			case 4:
				tmp = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp);
			this.addValue(e12,tabs);
			break;
		case 7:
			var init = _g[3];
			var v33 = _g[2];
			this.locals.set(v33.id,v33);
			if(init != null) {
				var v34 = this.varName(v33);
				this.buf.b += Std.string(v34);
				this.buf.b += " = ";
				this.addValue(init,tabs);
			} else {
				this.buf.b += "/*var*/";
			}
			break;
		case 8:
			if(_g[2].e[1] == 2) {
				switch(_g[2].e[2][1]) {
				case 48:
					if(_g[3].length == 1) {
						var e3 = _g[3][0];
						if(e3.t == hxsl_Type.TMat3x4) {
							this.decl(hxsl_GlslOut.MAT34);
							this.decl("mat3 _mat3( _mat3x4 v ) { return mat3(v.a.xyz,v.b.xyz,v.c.xyz); }");
							this.buf.b += "_mat3(";
							this.addValue(e3,tabs);
							this.buf.b += ")";
						} else {
							var e4 = _g[2];
							var args = _g[3];
							this.addValue(e4,tabs);
							this.buf.b += "(";
							var first = true;
							var _g3 = 0;
							while(_g3 < args.length) {
								var e5 = args[_g3];
								++_g3;
								if(first) {
									first = false;
								} else {
									this.buf.b += ", ";
								}
								this.addValue(e5,tabs);
							}
							this.buf.b += ")";
						}
					} else {
						var e6 = _g[2];
						var args1 = _g[3];
						this.addValue(e6,tabs);
						this.buf.b += "(";
						var first1 = true;
						var _g4 = 0;
						while(_g4 < args1.length) {
							var e7 = args1[_g4];
							++_g4;
							if(first1) {
								first1 = false;
							} else {
								this.buf.b += ", ";
							}
							this.addValue(e7,tabs);
						}
						this.buf.b += ")";
					}
					break;
				case 51:
					if(_g[3].length == 1) {
						var e8 = _g[3][0];
						this.buf.b += "clamp(";
						this.addValue(e8,tabs);
						this.buf.b += ", 0., 1.)";
					} else {
						var e9 = _g[2];
						var args2 = _g[3];
						this.addValue(e9,tabs);
						this.buf.b += "(";
						var first2 = true;
						var _g5 = 0;
						while(_g5 < args2.length) {
							var e10 = args2[_g5];
							++_g5;
							if(first2) {
								first2 = false;
							} else {
								this.buf.b += ", ";
							}
							this.addValue(e10,tabs);
						}
						this.buf.b += ")";
					}
					break;
				default:
					var args3 = _g[3];
					var e13 = _g[2];
					this.addValue(e13,tabs);
					this.buf.b += "(";
					var first3 = true;
					var _g6 = 0;
					while(_g6 < args3.length) {
						var e14 = args3[_g6];
						++_g6;
						if(first3) {
							first3 = false;
						} else {
							this.buf.b += ", ";
						}
						this.addValue(e14,tabs);
					}
					this.buf.b += ")";
				}
			} else {
				var args4 = _g[3];
				var e15 = _g[2];
				this.addValue(e15,tabs);
				this.buf.b += "(";
				var first4 = true;
				var _g7 = 0;
				while(_g7 < args4.length) {
					var e16 = args4[_g7];
					++_g7;
					if(first4) {
						first4 = false;
					} else {
						this.buf.b += ", ";
					}
					this.addValue(e16,tabs);
				}
				this.buf.b += ")";
			}
			break;
		case 9:
			var regs = _g[3];
			var e17 = _g[2];
			var _g8 = e17.t;
			if(_g8[1] == 3) {
				var _g9 = 0;
				while(_g9 < regs.length) {
					var r = regs[_g9];
					++_g9;
					if(r != hxsl_Component.X) {
						throw new js__$Boot_HaxeError("assert");
					}
				}
				var _g10 = regs.length;
				switch(_g10) {
				case 1:
					this.addValue(e17,tabs);
					break;
				case 2:
					this.decl("vec2 _vec2( float v ) { return vec2(v,v); }");
					this.buf.b += "_vec2(";
					this.addValue(e17,tabs);
					this.buf.b += ")";
					break;
				case 3:
					this.decl("vec3 _vec3( float v ) { return vec3(v,v,v); }");
					this.buf.b += "_vec3(";
					this.addValue(e17,tabs);
					this.buf.b += ")";
					break;
				case 4:
					this.decl("vec4 _vec4( float v ) { return vec4(v,v,v,v); }");
					this.buf.b += "_vec4(";
					this.addValue(e17,tabs);
					this.buf.b += ")";
					break;
				default:
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				this.addValue(e17,tabs);
				this.buf.b += ".";
				var _g12 = 0;
				while(_g12 < regs.length) {
					var r1 = regs[_g12];
					++_g12;
					var _this2 = this.buf;
					var _this3 = _this2.b;
					var tmp1;
					switch(r1[1]) {
					case 0:
						tmp1 = "x";
						break;
					case 1:
						tmp1 = "y";
						break;
					case 2:
						tmp1 = "z";
						break;
					case 3:
						tmp1 = "w";
						break;
					}
					_this2.b = _this3 + Std.string(tmp1);
				}
			}
			break;
		case 10:
			var eelse = _g[4];
			var eif = _g[3];
			var econd = _g[2];
			this.buf.b += "if( ";
			this.addValue(econd,tabs);
			this.buf.b += ") ";
			this.addExpr(eif,tabs);
			if(eelse != null) {
				if(!this.isBlock(eif)) {
					this.buf.b += ";";
				}
				this.buf.b += " else ";
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buf.b += "discard";
			break;
		case 12:
			var e18 = _g[2];
			if(e18 == null) {
				this.buf.b += "return";
			} else {
				this.buf.b += "return ";
				this.addValue(e18,tabs);
			}
			break;
		case 13:
			var loop = _g[4];
			var it = _g[3];
			var v35 = _g[2];
			this.locals.set(v35.id,v35);
			var _g13 = it.e;
			if(_g13[1] == 5) {
				if(_g13[2][1] == 21) {
					var e22 = _g13[4];
					var e19 = _g13[3];
					this.buf.b += "for(";
					this.buf.b += Std.string(v35.name + "=");
					this.addValue(e19,tabs);
					this.buf.b += Std.string(";" + v35.name + "<");
					this.addValue(e22,tabs);
					this.buf.b += Std.string(";" + v35.name + "++) ");
					this.addBlock(loop,tabs);
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			break;
		case 14:
			this.buf.b += "continue";
			break;
		case 15:
			this.buf.b += "break";
			break;
		case 16:
			var index = _g[3];
			var e20 = _g[2];
			this.addValue(e20,tabs);
			this.buf.b += "[";
			this.addValue(index,tabs);
			this.buf.b += "]";
			break;
		case 17:
			var el1 = _g[2];
			this.buf.b += "[";
			var first5 = true;
			var _g14 = 0;
			while(_g14 < el1.length) {
				var e23 = el1[_g14];
				++_g14;
				if(first5) {
					first5 = false;
				} else {
					this.buf.b += ", ";
				}
				this.addValue(e23,tabs);
			}
			this.buf.b += "]";
			break;
		case 18:
			this.buf.b += "switch(...)";
			break;
		case 19:
			if(_g[4] == false) {
				var e24 = _g[2];
				var loop1 = _g[3];
				var old = tabs;
				tabs += "\t";
				this.buf.b += "do ";
				this.addBlock(loop1,tabs);
				this.buf.b += " while( ";
				this.addValue(e24,tabs);
				this.buf.b += " )";
			} else {
				var e25 = _g[2];
				var loop2 = _g[3];
				this.buf.b += "while( ";
				this.addValue(e25,tabs);
				this.buf.b += " ) ";
				this.addBlock(loop2,tabs);
			}
			break;
		case 20:
			var e26 = _g[4];
			this.addExpr(e26,tabs);
			break;
		}
	}
	,varName: function(v) {
		if(v.kind == hxsl_VarKind.Output) {
			if(this.isVertex) {
				return "gl_Position";
			}
			if(this.glES) {
				if(this.outIndexes == null) {
					return "gl_FragColor";
				}
				return "gl_FragData[" + this.outIndexes.h[v.id] + "]";
			}
		}
		var n = this.varNames.h[v.id];
		if(n != null) {
			return n;
		}
		n = v.name;
		var _this = hxsl_GlslOut.KWDS;
		if(__map_reserved[n] != null ? _this.existsReserved(n) : _this.h.hasOwnProperty(n)) {
			n = "_" + n;
		}
		var _this1 = this.allNames;
		if(__map_reserved[n] != null ? _this1.existsReserved(n) : _this1.h.hasOwnProperty(n)) {
			var k = 2;
			n += "_";
			while(true) {
				var _this2 = this.allNames;
				var key = n + k;
				if(!(__map_reserved[key] != null ? _this2.existsReserved(key) : _this2.h.hasOwnProperty(key))) {
					break;
				}
				++k;
			}
			n += k;
		}
		this.varNames.h[v.id] = n;
		var value = v.id;
		var _this3 = this.allNames;
		if(__map_reserved[n] != null) {
			_this3.setReserved(n,value);
		} else {
			_this3.h[n] = value;
		}
		return n;
	}
	,newLine: function(e) {
		if(this.isBlock(e)) {
			this.buf.b += "\n";
		} else {
			this.buf.b += ";\n";
		}
	}
	,isBlock: function(e) {
		var _g = e.e;
		switch(_g[1]) {
		case 4:
			return true;
		case 13:
			var loop = _g[4];
			return this.isBlock(loop);
		case 19:
			if(_g[4] == true) {
				var loop1 = _g[3];
				return this.isBlock(loop1);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,run: function(s) {
		this.locals = new haxe_ds_IntMap();
		this.decls = [];
		this.buf = new StringBuf();
		this.exprValues = [];
		this.decl("precision mediump float;");
		if(s.funs.length != 1) {
			throw new js__$Boot_HaxeError("assert");
		}
		var f = s.funs[0];
		this.isVertex = f.kind == hxsl_FunctionKind.Vertex;
		var outIndex = 0;
		this.outIndexes = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var _g2 = v.kind;
			switch(_g2[1]) {
			case 0:case 2:
				this.buf.b += "uniform ";
				break;
			case 1:
				this.buf.b += Std.string(this.glES ? "attribute " : "in ");
				break;
			case 3:
				this.buf.b += Std.string(this.glES ? "varying " : this.isVertex ? "out " : "in ");
				break;
			case 4:
				break;
			case 5:
				if(this.glES) {
					this.outIndexes.set(v.id,outIndex++);
					continue;
				}
				if(this.isVertex) {
					continue;
				}
				this.buf.b += "out ";
				break;
			case 6:
				continue;
				break;
			}
			if(v.qualifiers != null) {
				var _g3 = 0;
				var _g4 = v.qualifiers;
				while(_g3 < _g4.length) {
					var q = _g4[_g3];
					++_g3;
					if(q[1] == 6) {
						var p = q[2];
						switch(p[1]) {
						case 0:
							this.buf.b += "lowp ";
							break;
						case 1:
							this.buf.b += "mediump ";
							break;
						case 2:
							this.buf.b += "highp ";
							break;
						}
					}
				}
			}
			this.addVar(v);
			this.buf.b += ";\n";
		}
		this.buf.b += "\n";
		if(outIndex < 2) {
			this.outIndexes = null;
		} else if(!this.isVertex && this.glES) {
			this.decl("#extension GL_EXT_draw_buffers : enable");
		}
		var tmp = this.buf;
		this.buf = new StringBuf();
		this.buf.b += "void main(void) {\n";
		var _g5 = f.expr.e;
		if(_g5[1] == 4) {
			var el = _g5[2];
			var _g6 = 0;
			while(_g6 < el.length) {
				var e = el[_g6];
				++_g6;
				this.buf.b += "\t";
				this.addExpr(e,"\t");
				this.newLine(e);
			}
		} else {
			this.addExpr(f.expr,"");
		}
		this.buf.b += "}";
		this.exprValues.push(this.buf.b);
		this.buf = tmp;
		var v1 = this.locals.iterator();
		while(v1.hasNext()) {
			var v2 = v1.next();
			this.addVar(v2);
			this.buf.b += ";\n";
		}
		this.buf.b += "\n";
		var _g11 = 0;
		var _g21 = this.exprValues;
		while(_g11 < _g21.length) {
			var e1 = _g21[_g11];
			++_g11;
			this.buf.b += Std.string(e1);
			this.buf.b += "\n\n";
		}
		if(this.version != null) {
			this.decl("#version " + this.version);
		} else if(this.glES) {
			this.decl("#version 100");
		} else {
			this.decl("#version 130");
		}
		this.decls.push(this.buf.b);
		this.buf = null;
		return this.decls.join("\n");
	}
	,__class__: hxsl_GlslOut
};
var hxsl__$Linker_AllocatedVar = function() {
};
$hxClasses["hxsl._Linker.AllocatedVar"] = hxsl__$Linker_AllocatedVar;
hxsl__$Linker_AllocatedVar.__name__ = ["hxsl","_Linker","AllocatedVar"];
hxsl__$Linker_AllocatedVar.prototype = {
	__class__: hxsl__$Linker_AllocatedVar
};
var hxsl__$Linker_ShaderInfos = function(n,v) {
	this.name = n;
	this.vertex = v;
	this.processed = new haxe_ds_IntMap();
	this.usedFunctions = [];
	this.read = new haxe_ds_IntMap();
	this.write = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Linker.ShaderInfos"] = hxsl__$Linker_ShaderInfos;
hxsl__$Linker_ShaderInfos.__name__ = ["hxsl","_Linker","ShaderInfos"];
hxsl__$Linker_ShaderInfos.prototype = {
	__class__: hxsl__$Linker_ShaderInfos
};
var hxsl_Linker = function() {
	this.debugDepth = 0;
};
$hxClasses["hxsl.Linker"] = hxsl_Linker;
hxsl_Linker.__name__ = ["hxsl","Linker"];
hxsl_Linker.prototype = {
	debug: function(msg,pos) {
	}
	,error: function(msg,p) {
		return hxsl_Error.t(msg,p);
	}
	,mergeVar: function(path,v,v2,p) {
		var _g = v.kind;
		switch(_g[1]) {
		case 2:case 6:
			throw new js__$Boot_HaxeError("assert");
			break;
		case 0:case 1:case 3:case 4:case 5:
			break;
		}
		if(v.kind != v2.kind && v.kind != hxsl_VarKind.Local && v2.kind != hxsl_VarKind.Local) {
			this.error("'" + path + "' kind does not match : " + Std.string(v.kind) + " should be " + Std.string(v2.kind),p);
		}
		var _g1 = v2.type;
		var _g2 = v.type;
		if(_g2[1] == 12) {
			if(_g1[1] == 12) {
				var fl1 = _g2[2];
				var fl2 = _g1[2];
				var _g11 = 0;
				while(_g11 < fl1.length) {
					var f1 = fl1[_g11];
					++_g11;
					var ft = null;
					var _g21 = 0;
					while(_g21 < fl2.length) {
						var f2 = fl2[_g21];
						++_g21;
						if(f1.name == f2.name) {
							ft = f2;
							break;
						}
					}
					if(ft == null) {
						fl2.push(this.allocVar(f1,p).v);
					} else {
						this.mergeVar(path + "." + ft.name,f1,ft,p);
					}
				}
			} else if(!Type.enumEq(v.type,v2.type)) {
				this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
			}
		} else if(!Type.enumEq(v.type,v2.type)) {
			this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
		}
	}
	,allocVar: function(v,p,path,parent) {
		if(v.parent != null && parent == null) {
			parent = this.allocVar(v.parent,p);
			var p1 = parent.v;
			path = p1.name;
			p1 = p1.parent;
			while(p1 != null) {
				path = p1.name + "." + path;
				p1 = p1.parent;
			}
		}
		var key = path == null ? v.name : path + "." + v.name;
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q[1] == 4) {
					var n = q[2];
					key = n;
				}
			}
		}
		var _this = this.varMap;
		var v2 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		var vname = v.name;
		if(v2 != null) {
			var _g2 = 0;
			var _g11 = v2.merged;
			while(_g2 < _g11.length) {
				var vm = _g11[_g2];
				++_g2;
				if(vm == v) {
					return v2;
				}
			}
			var tmp;
			var tmp1;
			if(!(v.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Shared) || v.kind == hxsl_VarKind.Function || v.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Private))) {
				var v1 = v2.v;
				if(!(v1.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Shared) || v1.kind == hxsl_VarKind.Function)) {
					if(v1.kind == hxsl_VarKind.Var) {
						tmp1 = hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Private);
					} else {
						tmp1 = false;
					}
				} else {
					tmp1 = true;
				}
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				if(v.kind == hxsl_VarKind.Param) {
					tmp = v2.v.kind == hxsl_VarKind.Param;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				var k = 2;
				while(true) {
					var _this1 = this.varMap;
					var key1 = key + k;
					var a = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
					if(a == null) {
						break;
					}
					var _g3 = 0;
					var _g12 = a.merged;
					while(_g3 < _g12.length) {
						var vm1 = _g12[_g3];
						++_g3;
						if(vm1 == v) {
							return a;
						}
					}
					++k;
				}
				vname += k;
				key += k;
			} else {
				v2.merged.push(v);
				this.mergeVar(key,v,v2.v,p);
				this.varIdMap.h[v.id] = v2.id;
				return v2;
			}
		}
		var vid = this.allVars.length + 1;
		var v21 = { id : vid, name : vname, type : v.type, kind : v.kind, qualifiers : v.qualifiers, parent : parent == null ? null : parent.v};
		var a1 = new hxsl__$Linker_AllocatedVar();
		a1.v = v21;
		a1.merged = [v];
		a1.path = key;
		a1.id = vid;
		a1.parent = parent;
		a1.instanceIndex = this.curInstance;
		this.allVars.push(a1);
		var _this2 = this.varMap;
		if(__map_reserved[key] != null) {
			_this2.setReserved(key,a1);
		} else {
			_this2.h[key] = a1;
		}
		var _g4 = v21.type;
		if(_g4[1] == 12) {
			var vl = _g4[2];
			var _g5 = [];
			var _g13 = 0;
			while(_g13 < vl.length) {
				var v3 = vl[_g13];
				++_g13;
				_g5.push(this.allocVar(v3,p,key,a1).v);
			}
			v21.type = hxsl_Type.TStruct(_g5);
		}
		return a1;
	}
	,mapExprVar: function(e) {
		var _g = e.e;
		switch(_g[1]) {
		case 1:
			var v = _g[2];
			if(!this.locals.exists(v.id)) {
				var v1 = this.allocVar(v,e.p);
				if(this.curShader != null && !this.curShader.write.exists(v1.id)) {
					var msg = this.curShader.name + " read " + v1.path;
					this.curShader.read.set(v1.id,v1);
					if(this.curShader.vertex == null && v1.v.kind == hxsl_VarKind.Var) {
						var msg1 = "Force " + this.curShader.name + " into fragment (use varying)";
						this.curShader.vertex = false;
					}
				}
				return { e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p};
			}
			break;
		case 5:
			var e2 = _g[4];
			var e1 = _g[3];
			var op = _g[2];
			var _g1 = e1.e;
			switch(op[1]) {
			case 4:
				switch(_g1[1]) {
				case 1:
					var v2 = _g1[2];
					if(!this.locals.exists(v2.id)) {
						var e21 = this.mapExprVar(e2);
						var v3 = this.allocVar(v2,e1.p);
						if(this.curShader != null) {
							var msg2 = this.curShader.name + " write " + v3.path;
							this.curShader.write.set(v3.id,v3);
						}
						return { e : hxsl_TExprDef.TBinop(op,{ e : hxsl_TExprDef.TVar(v3.v), t : v3.v.type, p : e.p},e21), t : e.t, p : e.p};
					} else {
						var v4 = _g1[2];
						if(!this.locals.exists(v4.id)) {
							var e11 = this.mapExprVar(e1);
							var e22 = this.mapExprVar(e2);
							var v5 = this.allocVar(v4,e11.p);
							if(this.curShader != null) {
								var msg3 = this.curShader.name + " write " + v5.path;
								this.curShader.write.set(v5.id,v5);
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e22), t : e.t, p : e.p};
						}
					}
					break;
				case 9:
					if(_g1[2].e[1] == 1) {
						var v6 = _g1[2].e[2];
						if(!this.locals.exists(v6.id)) {
							var e12 = this.mapExprVar(e1);
							var e23 = this.mapExprVar(e2);
							var v7 = this.allocVar(v6,e12.p);
							if(this.curShader != null) {
								var msg4 = this.curShader.name + " write " + v7.path;
								this.curShader.write.set(v7.id,v7);
							}
							return { e : hxsl_TExprDef.TBinop(op,e12,e23), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			case 20:
				switch(_g1[1]) {
				case 1:
					var v8 = _g1[2];
					if(!this.locals.exists(v8.id)) {
						var e13 = this.mapExprVar(e1);
						var e24 = this.mapExprVar(e2);
						var v9 = this.allocVar(v8,e13.p);
						if(this.curShader != null) {
							var msg5 = this.curShader.name + " write " + v9.path;
							this.curShader.write.set(v9.id,v9);
						}
						return { e : hxsl_TExprDef.TBinop(op,e13,e24), t : e.t, p : e.p};
					}
					break;
				case 9:
					if(_g1[2].e[1] == 1) {
						var v10 = _g1[2].e[2];
						if(!this.locals.exists(v10.id)) {
							var e14 = this.mapExprVar(e1);
							var e25 = this.mapExprVar(e2);
							var v11 = this.allocVar(v10,e14.p);
							if(this.curShader != null) {
								var msg6 = this.curShader.name + " write " + v11.path;
								this.curShader.write.set(v11.id,v11);
							}
							return { e : hxsl_TExprDef.TBinop(op,e14,e25), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 7:
			var v12 = _g[2];
			this.locals.set(v12.id,true);
			break;
		case 11:
			if(this.curShader != null) {
				this.curShader.vertex = false;
				this.curShader.hasDiscard = true;
			}
			break;
		case 13:
			var v13 = _g[2];
			this.locals.set(v13.id,true);
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapExprVar));
	}
	,addShader: function(name,vertex,e,p) {
		var s = new hxsl__$Linker_ShaderInfos(name,vertex);
		this.curShader = s;
		s.priority = p;
		s.body = this.mapExprVar(e);
		this.shaders.push(s);
		this.curShader = null;
		return s;
	}
	,sortByPriorityDesc: function(s1,s2) {
		return s2.priority - s1.priority;
	}
	,buildDependency: function(s,v,isWritten) {
		var found = !isWritten;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var parent = _g1[_g];
			++_g;
			if(parent == s) {
				found = true;
				continue;
			} else if(!found) {
				continue;
			}
			if(!parent.write.h.hasOwnProperty(v.id)) {
				continue;
			}
			if(s.vertex && parent.vertex == false) {
				continue;
			}
			var msg = s.name + " => " + parent.name + " (" + v.path + ")";
			s.deps.set(parent,true);
			this.debugDepth++;
			this.initDependencies(parent);
			this.debugDepth--;
			if(!parent.read.h.hasOwnProperty(v.id)) {
				return;
			}
		}
		if(v.v.kind == hxsl_VarKind.Var) {
			this.error("Variable " + v.path + " required by " + s.name + " is missing initializer",null);
		}
	}
	,initDependencies: function(s) {
		if(s.deps != null) {
			return;
		}
		s.deps = new haxe_ds_ObjectMap();
		var r = s.read.iterator();
		while(r.hasNext()) {
			var r1 = r.next();
			this.buildDependency(s,r1,s.write.h.hasOwnProperty(r1.id));
		}
		if(s.vertex == null) {
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.vertex == false) {
					var msg = s.name + " marked as fragment because of " + d1.name;
					s.vertex = false;
					break;
				}
			}
		}
		if(s.vertex) {
			var d2 = s.deps.keys();
			while(d2.hasNext()) {
				var d3 = d2.next();
				if(d3.vertex == null) {
					var msg1 = d3.name + " marked as vertex because of " + s.name;
					d3.vertex = true;
				}
			}
		}
	}
	,collect: function(cur,out,vertex) {
		if(cur.onStack) {
			this.error("Loop in shader dependencies (" + cur.name + ")",null);
		}
		if(cur.marked == vertex) {
			return;
		}
		cur.marked = vertex;
		cur.onStack = true;
		var _g = [];
		var d = cur.deps.keys();
		while(d.hasNext()) {
			var d1 = d.next();
			_g.push(d1);
		}
		var deps = _g;
		deps.sort($bind(this,this.sortByPriorityDesc));
		var _g1 = 0;
		while(_g1 < deps.length) {
			var d2 = deps[_g1];
			++_g1;
			this.collect(d2,out,vertex);
		}
		if(cur.vertex == null) {
			var msg = "MARK " + cur.name + " " + (vertex ? "vertex" : "fragment");
			cur.vertex = vertex;
		}
		if(cur.vertex == vertex) {
			var msg1 = "COLLECT " + cur.name + " " + (vertex ? "vertex" : "fragment");
			out.push(cur);
		}
		cur.onStack = false;
	}
	,uniqueLocals: function(expr,locals) {
		var _g = expr.e;
		switch(_g[1]) {
		case 4:
			var el = _g[2];
			var _g1 = new haxe_ds_StringMap();
			var k = locals.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				if(__map_reserved[k1] != null) {
					_g1.setReserved(k1,true);
				} else {
					_g1.h[k1] = true;
				}
			}
			var locals1 = _g1;
			var _g11 = 0;
			while(_g11 < el.length) {
				var e = el[_g11];
				++_g11;
				this.uniqueLocals(e,locals1);
			}
			break;
		case 7:
			var v = _g[2];
			var key = v.name;
			if(__map_reserved[key] != null ? locals.existsReserved(key) : locals.h.hasOwnProperty(key)) {
				var k2 = 2;
				while(true) {
					var key1 = v.name + k2;
					if(!(__map_reserved[key1] != null ? locals.existsReserved(key1) : locals.h.hasOwnProperty(key1))) {
						break;
					}
					++k2;
				}
				v.name += k2;
			}
			var key2 = v.name;
			if(__map_reserved[key2] != null) {
				locals.setReserved(key2,true);
			} else {
				locals.h[key2] = true;
			}
			break;
		default:
			var f = $bind(this,this.uniqueLocals);
			var a2 = locals;
			hxsl_Tools.iter(expr,function(a1) {
				f(a1,a2);
			});
		}
	}
	,link: function(shadersData) {
		var _gthis = this;
		this.varMap = new haxe_ds_StringMap();
		this.varIdMap = new haxe_ds_IntMap();
		this.allVars = [];
		this.shaders = [];
		this.locals = new haxe_ds_IntMap();
		var dupShaders = new haxe_ds_ObjectMap();
		var _g = [];
		var _g1 = 0;
		while(_g1 < shadersData.length) {
			var s = shadersData[_g1];
			++_g1;
			var s1 = s;
			var sreal = s1;
			if(dupShaders.h.__keys__[s1.__id__] != null) {
				s1 = hxsl_Clone.shaderData(s1);
			}
			dupShaders.set(s1,sreal);
			_g.push(s1);
		}
		shadersData = _g;
		this.curInstance = 0;
		var outVars = [];
		var _g11 = 0;
		while(_g11 < shadersData.length) {
			var s2 = shadersData[_g11];
			++_g11;
			var _g2 = 0;
			var _g3 = s2.vars;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				this.allocVar(v,null);
				if(v.kind == hxsl_VarKind.Output) {
					outVars.push(v);
				}
			}
			var _g21 = 0;
			var _g31 = s2.funs;
			while(_g21 < _g31.length) {
				var f = _g31[_g21];
				++_g21;
				var v1 = this.allocVar(f.ref,f.expr.p);
				v1.kind = f.kind;
			}
			this.curInstance++;
		}
		var priority = 0;
		var _g12 = 0;
		while(_g12 < shadersData.length) {
			var s3 = shadersData[_g12];
			++_g12;
			var _g22 = 0;
			var _g32 = s3.funs;
			while(_g22 < _g32.length) {
				var f1 = _g32[_g22];
				++_g22;
				var v2 = this.allocVar(f1.ref,f1.expr.p);
				if(v2.kind == null) {
					throw new js__$Boot_HaxeError("assert");
				}
				var _g4 = v2.kind;
				switch(_g4[1]) {
				case 0:case 1:
					this.addShader(s3.name + "." + (v2.kind == hxsl_FunctionKind.Vertex ? "vertex" : "fragment"),v2.kind == hxsl_FunctionKind.Vertex,f1.expr,priority);
					break;
				case 2:
					var status;
					var _g41 = f1.ref.name;
					switch(_g41) {
					case "__init__fragment":
						status = false;
						break;
					case "__init__vertex":
						status = true;
						break;
					default:
						status = null;
					}
					var _g5 = f1.expr.e;
					if(_g5[1] == 4) {
						var el = _g5[2];
						var index = 0;
						var priority1 = -el.length;
						var _g51 = 0;
						while(_g51 < el.length) {
							var e = el[_g51];
							++_g51;
							this.addShader(s3.name + "." + f1.ref.name + index++,status,e,priority1++);
						}
					} else {
						this.addShader(s3.name + "." + f1.ref.name,status,f1.expr,-1);
					}
					break;
				case 3:
					throw new js__$Boot_HaxeError("Unexpected helper function in linker " + v2.v.name);
					break;
				}
			}
			++priority;
		}
		this.shaders.sort($bind(this,this.sortByPriorityDesc));
		var entry = new hxsl__$Linker_ShaderInfos("<entry>",false);
		entry.deps = new haxe_ds_ObjectMap();
		var _g13 = 0;
		while(_g13 < outVars.length) {
			var v3 = outVars[_g13];
			++_g13;
			this.buildDependency(entry,this.allocVar(v3,null),false);
		}
		var _g14 = 0;
		var _g23 = this.shaders;
		while(_g14 < _g23.length) {
			var s4 = _g23[_g14];
			++_g14;
			if(s4.hasDiscard) {
				this.initDependencies(s4);
				entry.deps.set(s4,true);
			}
		}
		var _g15 = 0;
		var _g24 = this.shaders;
		while(_g15 < _g24.length) {
			var s5 = _g24[_g15];
			++_g15;
			if(s5.vertex != null) {
				continue;
			}
			var onlyParams = true;
			var r = s5.read.iterator();
			while(r.hasNext()) {
				var r1 = r.next();
				if(r1.v.kind != hxsl_VarKind.Param) {
					onlyParams = false;
					break;
				}
			}
			if(onlyParams) {
				var msg = "Force " + s5.name + " into fragment since it only reads params";
				s5.vertex = false;
			}
		}
		var v4 = [];
		var f2 = [];
		this.collect(entry,v4,true);
		this.collect(entry,f2,false);
		if(f2.pop() != entry) {
			throw new js__$Boot_HaxeError("assert");
		}
		var _g16 = 0;
		var _g25 = this.shaders;
		while(_g16 < _g25.length) {
			var s6 = _g25[_g16];
			++_g16;
			s6.marked = null;
		}
		var _g17 = 0;
		var _g26 = v4.concat(f2);
		while(_g17 < _g26.length) {
			var s7 = _g26[_g17];
			++_g17;
			var d = s7.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.marked == null) {
					this.error(d1.name + " needed by " + s7.name + " is unreachable",null);
				}
			}
			s7.marked = true;
		}
		var outVars1 = [];
		var varMap = new haxe_ds_IntMap();
		var addVar = null;
		addVar = function(v5) {
			if(varMap.h.hasOwnProperty(v5.id)) {
				return;
			}
			varMap.h[v5.id] = true;
			if(v5.v.parent != null) {
				addVar(v5.parent);
			} else {
				outVars1.push(v5.v);
			}
		};
		var addVar1 = addVar;
		var _g18 = 0;
		var _g27 = v4.concat(f2);
		while(_g18 < _g27.length) {
			var s8 = _g27[_g18];
			++_g18;
			var v6 = s8.read.iterator();
			while(v6.hasNext()) {
				var v7 = v6.next();
				addVar1(v7);
			}
			var v8 = s8.write.iterator();
			while(v8.hasNext()) {
				var v9 = v8.next();
				addVar1(v9);
			}
		}
		var cleanVar = null;
		cleanVar = function(v10) {
			var _g19 = v10.type;
			if(_g19[1] == 12) {
				var vl = _g19[2];
				if(v10.kind != hxsl_VarKind.Input) {
					var vout = [];
					var _g110 = 0;
					while(_g110 < vl.length) {
						var v11 = vl[_g110];
						++_g110;
						if(varMap.h.hasOwnProperty(v11.id)) {
							cleanVar(v11);
							vout.push(v11);
						}
					}
					v10.type = hxsl_Type.TStruct(vout);
				}
			}
		};
		var cleanVar1 = cleanVar;
		var _g111 = 0;
		while(_g111 < outVars1.length) {
			var v12 = outVars1[_g111];
			++_g111;
			cleanVar1(v12);
		}
		var build = function(kind,name,a) {
			var v13 = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TFun([{ ret : hxsl_Type.TVoid, args : []}]), kind : hxsl_VarKind.Function};
			outVars1.push(v13);
			var exprs = [];
			var _g112 = 0;
			while(_g112 < a.length) {
				var s9 = a[_g112];
				++_g112;
				var _g28 = s9.body.e;
				if(_g28[1] == 4) {
					var el1 = _g28[2];
					var _g29 = 0;
					while(_g29 < el1.length) {
						var e1 = el1[_g29];
						++_g29;
						exprs.push(e1);
					}
				} else {
					exprs.push(s9.body);
				}
			}
			var expr = { e : hxsl_TExprDef.TBlock(exprs), t : hxsl_Type.TVoid, p : exprs.length == 0 ? null : exprs[0].p};
			_gthis.uniqueLocals(expr,new haxe_ds_StringMap());
			return { kind : kind, ref : v13, ret : hxsl_Type.TVoid, args : [], expr : expr};
		};
		var funs = [build(hxsl_FunctionKind.Vertex,"vertex",v4),build(hxsl_FunctionKind.Fragment,"fragment",f2)];
		var s10 = dupShaders.keys();
		while(s10.hasNext()) {
			var s11 = s10.next();
			var sreal1 = dupShaders.h[s11.__id__];
			if(s11 == sreal1) {
				continue;
			}
			var _g210 = 0;
			var _g113 = s11.vars.length;
			while(_g210 < _g113) {
				var i = _g210++;
				this.allocVar(s11.vars[i],null).merged.unshift(sreal1.vars[i]);
			}
		}
		return { name : "out", vars : outVars1, funs : funs};
	}
	,__class__: hxsl_Linker
};
var hxsl_Output = $hxClasses["hxsl.Output"] = { __ename__ : true, __constructs__ : ["Const","Value","PackNormal","PackFloat","Vec2","Vec3","Vec4","Swiz"] };
hxsl_Output.Const = function(v) { var $x = ["Const",0,v]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.Value = function(v,size) { var $x = ["Value",1,v,size]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.PackNormal = function(v) { var $x = ["PackNormal",2,v]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.PackFloat = function(v) { var $x = ["PackFloat",3,v]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.Vec2 = function(a) { var $x = ["Vec2",4,a]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.Vec3 = function(a) { var $x = ["Vec3",5,a]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.Vec4 = function(a) { var $x = ["Vec4",6,a]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.Swiz = function(a,swiz) { var $x = ["Swiz",7,a,swiz]; $x.__enum__ = hxsl_Output; $x.toString = $estr; return $x; };
hxsl_Output.__empty_constructs__ = [];
var hxsl_Printer = function(varId) {
	if(varId == null) {
		varId = false;
	}
	this.varId = varId;
};
$hxClasses["hxsl.Printer"] = hxsl_Printer;
hxsl_Printer.__name__ = ["hxsl","Printer"];
hxsl_Printer.opStr = function(op) {
	switch(op[1]) {
	case 0:
		return "+";
	case 1:
		return "*";
	case 2:
		return "/";
	case 3:
		return "-";
	case 4:
		return "=";
	case 5:
		return "==";
	case 6:
		return "!=";
	case 7:
		return ">";
	case 8:
		return ">=";
	case 9:
		return "<";
	case 10:
		return "<=";
	case 11:
		return "&";
	case 12:
		return "|";
	case 13:
		return "^";
	case 14:
		return "&&";
	case 15:
		return "||";
	case 16:
		return "<<";
	case 17:
		return ">>";
	case 18:
		return ">>>";
	case 19:
		return "%";
	case 20:
		var op1 = op[2];
		return hxsl_Printer.opStr(op1) + "=";
	case 21:
		return "...";
	case 22:
		return "=>";
	}
};
hxsl_Printer.toString = function(e,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).exprString(e);
};
hxsl_Printer.shaderToString = function(s,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).shaderString(s);
};
hxsl_Printer.check = function(s,from) {
	try {
		var vars = new haxe_ds_IntMap();
		var regVars = [];
		var regVar = null;
		regVar = function(v,reg) {
			if(reg) {
				if(vars.h.hasOwnProperty(v.id)) {
					throw new js__$Boot_HaxeError("Duplicate var " + v.id);
				}
				vars.h[v.id] = v;
				regVars.push(v);
			} else {
				vars.remove(v.id);
			}
			var _g = v.type;
			if(_g[1] == 12) {
				var vl = _g[2];
				var _g1 = 0;
				while(_g1 < vl.length) {
					var v1 = vl[_g1];
					++_g1;
					regVar(v1,reg);
				}
			}
		};
		var regVar1 = regVar;
		var checkExpr = null;
		checkExpr = function(e) {
			var _g2 = e.e;
			switch(_g2[1]) {
			case 1:
				var v2 = _g2[2];
				if(!vars.h.hasOwnProperty(v2.id)) {
					throw new js__$Boot_HaxeError("Unbound var " + v2.name + "@" + v2.id);
				}
				break;
			case 4:
				var el = _g2[2];
				var old = regVars;
				regVars = [];
				var _g3 = 0;
				while(_g3 < el.length) {
					var e1 = el[_g3];
					++_g3;
					checkExpr(e1);
				}
				var _g4 = 0;
				while(_g4 < regVars.length) {
					var v3 = regVars[_g4];
					++_g4;
					regVar1(v3,false);
				}
				regVars = old;
				break;
			case 7:
				var init = _g2[3];
				var v4 = _g2[2];
				if(init != null) {
					checkExpr(init);
				}
				regVar1(v4,true);
				break;
			case 13:
				var loop = _g2[4];
				var it = _g2[3];
				var v5 = _g2[2];
				checkExpr(it);
				regVar1(v5,true);
				checkExpr(loop);
				regVar1(v5,false);
				break;
			default:
				hxsl_Tools.iter(e,checkExpr);
			}
		};
		var checkExpr1 = checkExpr;
		var _g5 = 0;
		var _g11 = s.vars;
		while(_g5 < _g11.length) {
			var v6 = _g11[_g5];
			++_g5;
			regVar1(v6,true);
		}
		var _g6 = 0;
		var _g12 = s.funs;
		while(_g6 < _g12.length) {
			var f = _g12[_g6];
			++_g6;
			var _g21 = 0;
			var _g31 = f.args;
			while(_g21 < _g31.length) {
				var v7 = _g31[_g21];
				++_g21;
				regVar1(v7,true);
			}
			checkExpr1(f.expr);
			var _g22 = 0;
			var _g32 = f.args;
			while(_g22 < _g32.length) {
				var v8 = _g32[_g22];
				++_g22;
				regVar1(v8,false);
			}
		}
	} catch( e2 ) {
		if (e2 instanceof js__$Boot_HaxeError) e2 = e2.val;
		if( js_Boot.__instanceof(e2,String) ) {
			var msg = e2 + "\n    in\n" + hxsl_Printer.shaderToString(s,true);
			if(from != null) {
				var _g13 = [];
				var _g23 = 0;
				while(_g23 < from.length) {
					var s1 = from[_g23];
					++_g23;
					_g13.push(hxsl_Printer.shaderToString(s1,true));
				}
				msg += "\n    from\n\n" + _g13.join("\n\n");
			}
			throw new js__$Boot_HaxeError(msg);
		} else throw(e2);
	}
};
hxsl_Printer.prototype = {
	add: function(v) {
		this.buffer.b += Std.string(v);
	}
	,shaderString: function(s) {
		this.buffer = new StringBuf();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addVar(v,hxsl_VarKind.Var);
			this.buffer.b += ";\n";
		}
		if(s.vars.length > 0) {
			this.buffer.b += "\n";
		}
		var _g2 = 0;
		var _g11 = s.funs;
		while(_g2 < _g11.length) {
			var f = _g11[_g2];
			++_g2;
			this.addFun(f);
			this.buffer.b += "\n\n";
		}
		return this.buffer.b;
	}
	,varString: function(v) {
		this.buffer = new StringBuf();
		this.addVar(v,null);
		return this.buffer.b;
	}
	,funString: function(f) {
		this.buffer = new StringBuf();
		this.addFun(f);
		return this.buffer.b;
	}
	,exprString: function(e) {
		this.buffer = new StringBuf();
		this.addExpr(e,"");
		return this.buffer.b;
	}
	,addVar: function(v,defKind,tabs,parent) {
		if(tabs == null) {
			tabs = "";
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				var v1;
				switch(q[1]) {
				case 0:
					var max = q[2];
					v1 = "const" + (max == null ? "" : "(" + max + ")");
					break;
				case 1:
					v1 = "private";
					break;
				case 2:
					v1 = "nullable";
					break;
				case 3:
					v1 = "perObject";
					break;
				case 4:
					var n = q[2];
					v1 = "name('" + n + "')";
					break;
				case 5:
					v1 = "shared";
					break;
				case 6:
					var p = q[2];
					v1 = p[0].toLowerCase() + "p";
					break;
				case 7:
					var max1 = q[3];
					var min = q[2];
					v1 = "range(" + min + "," + max1 + ")";
					break;
				case 8:
					v1 = "ignore";
					break;
				}
				this.buffer.b += Std.string("@" + v1 + " ");
			}
		}
		if(v.kind != defKind) {
			var _g2 = v.kind;
			switch(_g2[1]) {
			case 0:
				this.buffer.b += "@global ";
				break;
			case 1:
				this.buffer.b += "@input ";
				break;
			case 2:
				this.buffer.b += "@param ";
				break;
			case 3:
				this.buffer.b += "@var ";
				break;
			case 4:
				this.buffer.b += "@local ";
				break;
			case 5:
				this.buffer.b += "@output ";
				break;
			case 6:
				this.buffer.b += "@function ";
				break;
			}
		}
		this.buffer.b += "var ";
		if(v.parent == parent) {
			this.buffer.b += Std.string(v.name + (this.varId ? "@" + v.id : ""));
		} else {
			this.addVarName(v);
		}
		this.buffer.b += " : ";
		var _g3 = v.type;
		if(_g3[1] == 12) {
			var vl = _g3[2];
			this.buffer.b += "{";
			var first = true;
			var _g4 = 0;
			while(_g4 < vl.length) {
				var v2 = vl[_g4];
				++_g4;
				if(first) {
					first = false;
				} else {
					this.buffer.b += ", ";
				}
				this.addVar(v2,v2.kind,tabs,v2);
			}
			this.buffer.b += "}";
		} else {
			var v3 = hxsl_Tools.toString(v.type);
			this.buffer.b += Std.string(v3);
		}
	}
	,addFun: function(f) {
		this.buffer.b += Std.string("function " + f.ref.name + "(");
		var first = true;
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(first) {
				this.buffer.b += " ";
				first = false;
			} else {
				this.buffer.b += ", ";
			}
			this.addVar(a,hxsl_VarKind.Local);
		}
		if(f.args.length > 0) {
			this.buffer.b += " ";
		}
		var v = ") : " + hxsl_Tools.toString(f.ret) + " ";
		this.buffer.b += Std.string(v);
		this.addExpr(f.expr,"");
	}
	,addVarName: function(v) {
		if(v.parent != null) {
			this.addVarName(v.parent);
			this.buffer.b += ".";
		}
		this.buffer.b += Std.string(v.name);
		if(this.varId) {
			this.buffer.b += Std.string("@" + v.id);
		}
	}
	,addConst: function(c) {
		var _this = this.buffer;
		var _this1 = _this.b;
		var tmp;
		switch(c[1]) {
		case 0:
			tmp = "null";
			break;
		case 1:
			var b = c[2];
			tmp = b;
			break;
		case 2:
			var i = c[2];
			tmp = i;
			break;
		case 3:
			var f = c[2];
			tmp = f;
			break;
		case 4:
			var s = c[2];
			tmp = "\"" + s + "\"";
			break;
		}
		_this.b = _this1 + Std.string(tmp);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g[1]) {
		case 0:
			var c = _g[2];
			this.addConst(c);
			break;
		case 1:
			var v = _g[2];
			this.addVarName(v);
			break;
		case 2:
			var g = _g[2];
			var v1 = hxsl_Tools2.toString(g);
			this.buffer.b += Std.string(v1);
			break;
		case 3:
			var e1 = _g[2];
			this.buffer.b += "(";
			this.addExpr(e1,tabs);
			this.buffer.b += ")";
			break;
		case 4:
			var el = _g[2];
			this.buffer.b += "{";
			tabs += "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e2 = el[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.addExpr(e2,tabs);
				this.buffer.b += ";";
			}
			tabs = HxOverrides.substr(tabs,1,null);
			if(el.length > 0) {
				this.buffer.b += Std.string("\n" + tabs);
			}
			this.buffer.b += "}";
			break;
		case 5:
			var e21 = _g[4];
			var e11 = _g[3];
			var op = _g[2];
			this.addExpr(e11,tabs);
			var v2 = " " + hxsl_Printer.opStr(op) + " ";
			this.buffer.b += Std.string(v2);
			this.addExpr(e21,tabs);
			break;
		case 6:
			var e3 = _g[3];
			var op1 = _g[2];
			var _this = this.buffer;
			var _this1 = _this.b;
			var tmp;
			switch(op1[1]) {
			case 0:
				tmp = "++";
				break;
			case 1:
				tmp = "--";
				break;
			case 2:
				tmp = "!";
				break;
			case 3:
				tmp = "-";
				break;
			case 4:
				tmp = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp);
			this.addExpr(e3,tabs);
			break;
		case 7:
			var init = _g[3];
			var v3 = _g[2];
			this.addVar(v3,hxsl_VarKind.Local,tabs);
			if(init != null) {
				this.buffer.b += " = ";
				this.addExpr(init,tabs);
			}
			break;
		case 8:
			var el1 = _g[3];
			var e4 = _g[2];
			this.addExpr(e4,tabs);
			this.buffer.b += "(";
			var first = true;
			var _g2 = 0;
			while(_g2 < el1.length) {
				var e5 = el1[_g2];
				++_g2;
				if(first) {
					first = false;
				} else {
					this.buffer.b += ", ";
				}
				this.addExpr(e5,tabs);
			}
			this.buffer.b += ")";
			break;
		case 9:
			var regs = _g[3];
			var e6 = _g[2];
			this.addExpr(e6,tabs);
			this.buffer.b += ".";
			var _g3 = 0;
			while(_g3 < regs.length) {
				var r = regs[_g3];
				++_g3;
				this.buffer.b += Std.string(hxsl_Printer.SWIZ[r[1]]);
			}
			break;
		case 10:
			var eelse = _g[4];
			var eif = _g[3];
			var cond = _g[2];
			this.buffer.b += "if( ";
			this.addExpr(cond,tabs);
			this.buffer.b += " ) ";
			this.addExpr(eif,tabs);
			if(eelse != null) {
				this.buffer.b += " else ";
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buffer.b += "discard";
			break;
		case 12:
			var e7 = _g[2];
			this.buffer.b += "return";
			if(e7 != null) {
				this.buffer.b += " ";
				this.addExpr(e7,tabs);
			}
			break;
		case 13:
			var loop = _g[4];
			var it = _g[3];
			var v4 = _g[2];
			this.buffer.b += "for( ";
			this.addVarName(v4);
			this.buffer.b += " in ";
			this.addExpr(it,tabs);
			this.buffer.b += " ) ";
			this.addExpr(loop,tabs);
			break;
		case 14:
			this.buffer.b += "continue";
			break;
		case 15:
			this.buffer.b += "break";
			break;
		case 16:
			var e22 = _g[3];
			var e12 = _g[2];
			this.addExpr(e12,tabs);
			this.buffer.b += "[";
			this.addExpr(e22,tabs);
			this.buffer.b += "]";
			break;
		case 17:
			var el2 = _g[2];
			this.buffer.b += "[";
			var first1 = true;
			var _g4 = 0;
			while(_g4 < el2.length) {
				var e8 = el2[_g4];
				++_g4;
				if(first1) {
					first1 = false;
				} else {
					this.buffer.b += ", ";
				}
				this.addExpr(e8,tabs);
			}
			this.buffer.b += "]";
			break;
		case 18:
			var def = _g[4];
			var cases = _g[3];
			var e9 = _g[2];
			this.buffer.b += "switch( ";
			this.addExpr(e9,tabs);
			this.buffer.b += ") {";
			var old = tabs;
			var _g5 = 0;
			while(_g5 < cases.length) {
				var c1 = cases[_g5];
				++_g5;
				this.buffer.b += Std.string("\n" + tabs);
				this.buffer.b += "case ";
				var first2 = true;
				var _g11 = 0;
				var _g21 = c1.values;
				while(_g11 < _g21.length) {
					var v5 = _g21[_g11];
					++_g11;
					if(first2) {
						first2 = false;
					} else {
						this.buffer.b += ", ";
					}
					this.addExpr(v5,tabs);
				}
				tabs += "\t";
				this.buffer.b += Std.string(":\n" + tabs);
				this.addExpr(c1.expr,tabs);
				tabs = old;
			}
			if(def != null) {
				this.buffer.b += Std.string("\n" + tabs);
				tabs += "\t";
				this.buffer.b += Std.string("default:\n" + tabs);
				this.addExpr(def,tabs);
				tabs = old;
			}
			this.buffer.b += Std.string("\n" + tabs + "}");
			break;
		case 19:
			if(_g[4] == false) {
				var e10 = _g[2];
				var loop1 = _g[3];
				var old1 = tabs;
				tabs += "\t";
				this.buffer.b += Std.string("do {\n" + tabs);
				this.addExpr(loop1,tabs);
				tabs = old1;
				this.buffer.b += Std.string("\n" + tabs + "} while( ");
				this.addExpr(e10,tabs);
				this.buffer.b += " )";
			} else {
				var e13 = _g[2];
				var loop2 = _g[3];
				this.buffer.b += "while( ";
				this.addExpr(e13,tabs);
				var old2 = tabs;
				tabs += "\t";
				this.buffer.b += Std.string(" ) {\n" + tabs);
				this.addExpr(loop2,tabs);
				tabs = old2;
				this.buffer.b += Std.string("\n" + tabs + "}");
			}
			break;
		case 20:
			var e14 = _g[4];
			var args = _g[3];
			var m = _g[2];
			this.buffer.b += Std.string(m);
			if(args.length > 0) {
				this.buffer.b += "(";
				var first3 = true;
				var _g6 = 0;
				while(_g6 < args.length) {
					var c2 = args[_g6];
					++_g6;
					if(first3) {
						first3 = false;
					} else {
						this.buffer.b += ", ";
					}
					this.addConst(c2);
				}
				this.buffer.b += ")";
			}
			this.buffer.b += " ";
			this.addExpr(e14,tabs);
			break;
		}
	}
	,__class__: hxsl_Printer
};
var hxsl_AllocParam = function(name,pos,instance,index,type) {
	this.name = name;
	this.pos = pos;
	this.instance = instance;
	this.index = index;
	this.type = type;
};
$hxClasses["hxsl.AllocParam"] = hxsl_AllocParam;
hxsl_AllocParam.__name__ = ["hxsl","AllocParam"];
hxsl_AllocParam.prototype = {
	__class__: hxsl_AllocParam
};
var hxsl_AllocGlobal = function(pos,path,type) {
	this.pos = pos;
	this.path = path;
	this.gid = hxsl_Globals.allocID(path);
	this.type = type;
};
$hxClasses["hxsl.AllocGlobal"] = hxsl_AllocGlobal;
hxsl_AllocGlobal.__name__ = ["hxsl","AllocGlobal"];
hxsl_AllocGlobal.prototype = {
	__class__: hxsl_AllocGlobal
};
var hxsl_RuntimeShaderData = function() {
};
$hxClasses["hxsl.RuntimeShaderData"] = hxsl_RuntimeShaderData;
hxsl_RuntimeShaderData.__name__ = ["hxsl","RuntimeShaderData"];
hxsl_RuntimeShaderData.prototype = {
	__class__: hxsl_RuntimeShaderData
};
var hxsl_RuntimeShader = function() {
	this.id = hxsl_RuntimeShader.UID++;
};
$hxClasses["hxsl.RuntimeShader"] = hxsl_RuntimeShader;
hxsl_RuntimeShader.__name__ = ["hxsl","RuntimeShader"];
hxsl_RuntimeShader.prototype = {
	hasGlobal: function(gid) {
		return this.globals.h.hasOwnProperty(gid);
	}
	,__class__: hxsl_RuntimeShader
};
var hxsl_ShaderList = function(s,n) {
	this.s = s;
	this.next = n;
};
$hxClasses["hxsl.ShaderList"] = hxsl_ShaderList;
hxsl_ShaderList.__name__ = ["hxsl","ShaderList"];
hxsl_ShaderList.prototype = {
	clone: function() {
		return new hxsl_ShaderList(this.s.clone(),this.next == null ? null : this.next.clone());
	}
	,iterator: function() {
		return new hxsl__$ShaderList_ShaderIterator(this,null);
	}
	,iterateTo: function(s) {
		return new hxsl__$ShaderList_ShaderIterator(this,s);
	}
	,__class__: hxsl_ShaderList
};
var hxsl__$ShaderList_ShaderIterator = function(l,last) {
	this.l = l;
	this.last = last;
};
$hxClasses["hxsl._ShaderList.ShaderIterator"] = hxsl__$ShaderList_ShaderIterator;
hxsl__$ShaderList_ShaderIterator.__name__ = ["hxsl","_ShaderList","ShaderIterator"];
hxsl__$ShaderList_ShaderIterator.prototype = {
	hasNext: function() {
		return this.l != this.last;
	}
	,next: function() {
		var s = this.l.s;
		this.l = this.l.next;
		return s;
	}
	,__class__: hxsl__$ShaderList_ShaderIterator
};
var hxsl_ShaderInstance = function(shader) {
	this.id = hxsl_Tools.allocVarId();
	this.shader = shader;
	this.params = new haxe_ds_IntMap();
};
$hxClasses["hxsl.ShaderInstance"] = hxsl_ShaderInstance;
hxsl_ShaderInstance.__name__ = ["hxsl","ShaderInstance"];
hxsl_ShaderInstance.prototype = {
	__class__: hxsl_ShaderInstance
};
var hxsl_ShaderGlobal = function(v,gid) {
	this.v = v;
	this.globalId = gid;
};
$hxClasses["hxsl.ShaderGlobal"] = hxsl_ShaderGlobal;
hxsl_ShaderGlobal.__name__ = ["hxsl","ShaderGlobal"];
hxsl_ShaderGlobal.prototype = {
	__class__: hxsl_ShaderGlobal
};
var hxsl_ShaderConst = function(v,pos,bits) {
	this.v = v;
	this.pos = pos;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderConst"] = hxsl_ShaderConst;
hxsl_ShaderConst.__name__ = ["hxsl","ShaderConst"];
hxsl_ShaderConst.prototype = {
	__class__: hxsl_ShaderConst
};
var hxsl_SharedShader = function(src) {
	this.instanceCache = new haxe_ds_IntMap();
	this.consts = null;
	this.globals = [];
	if(src == "") {
		return;
	}
	this.data = haxe_Unserializer.run(src);
	this.initialize();
};
$hxClasses["hxsl.SharedShader"] = hxsl_SharedShader;
hxsl_SharedShader.__name__ = ["hxsl","SharedShader"];
hxsl_SharedShader.prototype = {
	initialize: function() {
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.browseVar(v);
		}
	}
	,getInstance: function(constBits) {
		var i = this.instanceCache.h[constBits];
		if(i == null) {
			return this.makeInstance(constBits);
		} else {
			return i;
		}
	}
	,makeInstance: function(constBits) {
		var $eval = new hxsl_Eval();
		var c = this.consts;
		while(c != null) {
			var c1 = c.v;
			var _g = c.v.type;
			var tmp;
			switch(_g[1]) {
			case 1:case 15:
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			case 2:
				tmp = hxsl_Const.CBool((constBits >>> c.pos & 1) != 0);
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
			$eval.setConstant(c1,tmp);
			c = c.next;
		}
		$eval.inlineCalls = true;
		$eval.unrollLoops = true;
		var i = new hxsl_ShaderInstance($eval["eval"](this.data));
		this.paramsCount = 0;
		var _g1 = 0;
		var _g11 = this.data.vars;
		while(_g1 < _g11.length) {
			var v = _g11[_g1];
			++_g1;
			this.addParam($eval,i,v);
		}
		this.instanceCache.h[constBits] = i;
		return i;
	}
	,addSelfParam: function(i,v) {
		var _g = v.type;
		if(_g[1] == 12) {
			var vl = _g[2];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.addSelfParam(i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.set(v.id,this.paramsCount);
			this.paramsCount++;
		}
	}
	,addParam: function($eval,i,v) {
		var _g = v.type;
		if(_g[1] == 12) {
			var vl = _g[2];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.addParam($eval,i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.set($eval.varMap.get(v).id,this.paramsCount);
			this.paramsCount++;
		}
	}
	,browseVar: function(v,path) {
		v.id = hxsl_Tools.allocVarId();
		if(path == null) {
			path = hxsl_Tools.getName(v);
		} else {
			path += "." + v.name;
		}
		var _g = v.type;
		if(_g[1] == 12) {
			var vl = _g[2];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var vs = vl[_g1];
				++_g1;
				this.browseVar(vs,path);
			}
		} else {
			var globalId = 0;
			if(v.kind == hxsl_VarKind.Global) {
				globalId = hxsl_Globals.allocID(path);
				this.globals.push(new hxsl_ShaderGlobal(v,globalId));
			}
			if(!hxsl_Tools.isConst(v)) {
				return;
			}
			var bits = hxsl_Tools.getConstBits(v);
			if(bits > 0) {
				var pos = this.consts == null ? 0 : this.consts.pos + this.consts.bits;
				var c = new hxsl_ShaderConst(v,pos,bits);
				c.globalId = globalId;
				c.next = this.consts;
				this.consts = c;
			}
		}
	}
	,__class__: hxsl_SharedShader
};
var hxsl__$Splitter_VarProps = function(v) {
	this.v = v;
	this.read = 0;
	this.write = 0;
};
$hxClasses["hxsl._Splitter.VarProps"] = hxsl__$Splitter_VarProps;
hxsl__$Splitter_VarProps.__name__ = ["hxsl","_Splitter","VarProps"];
hxsl__$Splitter_VarProps.prototype = {
	__class__: hxsl__$Splitter_VarProps
};
var hxsl_Splitter = function() {
};
$hxClasses["hxsl.Splitter"] = hxsl_Splitter;
hxsl_Splitter.__name__ = ["hxsl","Splitter"];
hxsl_Splitter.prototype = {
	split: function(s) {
		var vfun = null;
		var vvars = new haxe_ds_IntMap();
		var ffun = null;
		var fvars = new haxe_ds_IntMap();
		this.varNames = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var _g2 = f.kind;
			switch(_g2[1]) {
			case 0:
				this.vars = vvars;
				vfun = f;
				this.checkExpr(f.expr);
				break;
			case 1:
				this.vars = fvars;
				ffun = f;
				this.checkExpr(f.expr);
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
		}
		this.varMap = new haxe_ds_ObjectMap();
		var _g3 = 0;
		var _g11 = Lambda.array(vvars);
		while(_g3 < _g11.length) {
			var inf = _g11[_g3];
			++_g3;
			var v = inf.v;
			var _g21 = v.kind;
			switch(_g21[1]) {
			case 3:case 4:
				v.kind = fvars.h.hasOwnProperty(v.id) ? hxsl_VarKind.Var : hxsl_VarKind.Local;
				break;
			default:
			}
			var _g31 = v.kind;
			switch(_g31[1]) {
			case 3:case 5:
				if(inf.read > 0 || inf.write > 1) {
					var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
					this.vars = vvars;
					var ninf = this.get(nv);
					v.kind = hxsl_VarKind.Local;
					var p = vfun.expr.p;
					var e = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : nv.type, p : p},{ e : hxsl_TExprDef.TVar(v), t : v.type, p : p}), t : nv.type, p : p};
					this.addExpr(vfun,e);
					this.checkExpr(e);
					if(nv.kind == hxsl_VarKind.Var) {
						var old = fvars.h[v.id];
						this.varMap.set(v,nv);
						fvars.remove(v.id);
						var np = new hxsl__$Splitter_VarProps(nv);
						np.read = old.read;
						np.write = old.write;
						fvars.h[nv.id] = np;
					}
				}
				break;
			default:
			}
		}
		var finits = [];
		var todo = [];
		var inf1 = fvars.iterator();
		while(inf1.hasNext()) {
			var inf2 = inf1.next();
			var v1 = inf2.v;
			var _g4 = v1.kind;
			switch(_g4[1]) {
			case 1:
				var nv1 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Var, type : v1.type};
				this.uniqueName(nv1);
				var i = vvars.h[v1.id];
				if(i == null) {
					i = new hxsl__$Splitter_VarProps(v1);
					vvars.h[v1.id] = i;
				}
				i.read++;
				var vp = new hxsl__$Splitter_VarProps(nv1);
				vp.write = 1;
				vvars.h[nv1.id] = vp;
				var fp = new hxsl__$Splitter_VarProps(nv1);
				fp.read = 1;
				todo.push(fp);
				this.addExpr(vfun,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv1), t : v1.type, p : vfun.expr.p},{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : vfun.expr.p}), t : v1.type, p : vfun.expr.p});
				this.varMap.set(v1,nv1);
				inf2.local = true;
				break;
			case 3:
				if(inf2.write > 0) {
					var nv2 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Local, type : v1.type};
					this.uniqueName(nv2);
					finits.push({ e : hxsl_TExprDef.TVarDecl(nv2,{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : ffun.expr.p}), t : hxsl_Type.TVoid, p : ffun.expr.p});
					this.varMap.set(v1,nv2);
				}
				break;
			default:
			}
		}
		var _g5 = 0;
		while(_g5 < todo.length) {
			var v2 = todo[_g5];
			++_g5;
			fvars.h[v2.v.id] = v2;
		}
		var v3 = vvars.iterator();
		while(v3.hasNext()) {
			var v4 = v3.next();
			this.checkVar(v4,true,vvars);
		}
		var v5 = fvars.iterator();
		while(v5.hasNext()) {
			var v6 = v5.next();
			this.checkVar(v6,false,vvars);
		}
		var v7 = this.varMap.keys();
		while(v7.hasNext()) {
			var v8 = v7.next();
			var v21 = this.varMap.h[this.varMap.h[v8.__id__].__id__];
			if(v21 != null) {
				this.varMap.set(v8,v21);
			}
		}
		ffun = { ret : ffun.ret, ref : ffun.ref, kind : ffun.kind, args : ffun.args, expr : this.mapVars(ffun.expr)};
		var _g6 = ffun.expr.e;
		if(_g6[1] == 4) {
			var el = _g6[2];
			var _g7 = 0;
			while(_g7 < finits.length) {
				var e1 = finits[_g7];
				++_g7;
				el.unshift(e1);
			}
		} else {
			finits.push(ffun.expr);
			ffun.expr = { e : hxsl_TExprDef.TBlock(finits), t : hxsl_Type.TVoid, p : ffun.expr.p};
		}
		var _g12 = [];
		var v9 = vvars.iterator();
		while(v9.hasNext()) {
			var v10 = v9.next();
			if(!v10.local) {
				_g12.push(v10.v);
			}
		}
		var vvars1 = _g12;
		var _g22 = [];
		var v11 = fvars.iterator();
		while(v11.hasNext()) {
			var v12 = v11.next();
			if(!v12.local) {
				_g22.push(v12.v);
			}
		}
		var fvars1 = _g22;
		vvars1.sort(function(v13,v22) {
			return v13.id - v22.id;
		});
		fvars1.sort(function(v14,v23) {
			return v14.id - v23.id;
		});
		return { vertex : { name : "vertex", vars : vvars1, funs : [vfun]}, fragment : { name : "fragment", vars : fvars1, funs : [ffun]}};
	}
	,addExpr: function(f,e) {
		var _g = f.expr.e;
		if(_g[1] == 4) {
			var el = _g[2];
			el.push(e);
		} else {
			f.expr = { e : hxsl_TExprDef.TBlock([f.expr,e]), t : hxsl_Type.TVoid, p : f.expr.p};
		}
	}
	,checkVar: function(v,vertex,vvars) {
		var _g = v.v.kind;
		switch(_g[1]) {
		case 3:
			if(!vertex) {
				var i = vvars.h[v.v.id];
				if(i == null || i.write == 0) {
					throw new js__$Boot_HaxeError("Varying " + v.v.name + " is not written by vertex shader");
				}
			}
			break;
		case 4:
			if(v.requireInit) {
				throw new js__$Boot_HaxeError("Variable " + v.v.name + " is written without being initialized");
			}
			break;
		default:
		}
	}
	,mapVars: function(e) {
		var _g = e.e;
		if(_g[1] == 1) {
			var v = _g[2];
			var v2 = this.varMap.get(v);
			if(v2 == null) {
				return e;
			} else {
				return { e : hxsl_TExprDef.TVar(v2), t : e.t, p : e.p};
			}
		} else {
			return hxsl_Tools.map(e,$bind(this,this.mapVars));
		}
	}
	,get: function(v) {
		var i = this.vars.h[v.id];
		if(i == null) {
			i = new hxsl__$Splitter_VarProps(v);
			this.vars.h[v.id] = i;
			this.uniqueName(v);
		}
		return i;
	}
	,uniqueName: function(v) {
		if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
			return;
		}
		v.parent = null;
		var key = v.name;
		var _this = this.varNames;
		var n = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(n != null && n != v) {
			var k = 2;
			while(true) {
				var key1 = v.name + k;
				var _this1 = this.varNames;
				if(!(__map_reserved[key1] != null ? _this1.existsReserved(key1) : _this1.h.hasOwnProperty(key1))) {
					break;
				}
				++k;
			}
			v.name += k;
		}
		var key2 = v.name;
		var _this2 = this.varNames;
		if(__map_reserved[key2] != null) {
			_this2.setReserved(key2,v);
		} else {
			_this2.h[key2] = v;
		}
	}
	,checkExpr: function(e) {
		var _g = e.e;
		switch(_g[1]) {
		case 1:
			var v = _g[2];
			var inf = this.get(v);
			if(inf.write == 0) {
				inf.requireInit = true;
			}
			inf.read++;
			break;
		case 5:
			switch(_g[2][1]) {
			case 4:
				switch(_g[3].e[1]) {
				case 1:
					var e1 = _g[4];
					var v1 = _g[3].e[2];
					var inf1 = this.get(v1);
					inf1.write++;
					this.checkExpr(e1);
					break;
				case 9:
					if(_g[3].e[2].e[1] == 1) {
						var e2 = _g[4];
						var v2 = _g[3].e[2].e[2];
						var inf2 = this.get(v2);
						inf2.write++;
						this.checkExpr(e2);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			case 20:
				switch(_g[3].e[1]) {
				case 1:
					var e3 = _g[4];
					var v3 = _g[3].e[2];
					var inf3 = this.get(v3);
					if(inf3.write == 0) {
						inf3.requireInit = true;
					}
					inf3.read++;
					inf3.write++;
					this.checkExpr(e3);
					break;
				case 9:
					if(_g[3].e[2].e[1] == 1) {
						var e4 = _g[4];
						var v4 = _g[3].e[2].e[2];
						var inf4 = this.get(v4);
						if(inf4.write == 0) {
							inf4.requireInit = true;
						}
						inf4.read++;
						inf4.write++;
						this.checkExpr(e4);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			default:
				hxsl_Tools.iter(e,$bind(this,this.checkExpr));
			}
			break;
		case 7:
			var init = _g[3];
			var v5 = _g[2];
			var inf5 = this.get(v5);
			inf5.local = true;
			if(init != null) {
				this.checkExpr(init);
				inf5.write++;
			}
			break;
		case 13:
			var loop = _g[4];
			var it = _g[3];
			var v6 = _g[2];
			this.checkExpr(it);
			var inf6 = this.get(v6);
			inf6.local = true;
			inf6.write++;
			this.checkExpr(loop);
			break;
		default:
			hxsl_Tools.iter(e,$bind(this,this.checkExpr));
		}
	}
	,__class__: hxsl_Splitter
};
var hxsl_ChannelTools = function() { };
$hxClasses["hxsl.ChannelTools"] = hxsl_ChannelTools;
hxsl_ChannelTools.__name__ = ["hxsl","ChannelTools"];
hxsl_ChannelTools.isPackedFormat = function(c) {
	return c.format == h3d_mat_Texture.nativeFormat;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "R_gravityFont_png", data : ""},{ name : "R_customFont_png", data : "iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAAB3RJTUUH3ggHCScOe+sAagAAABd0RVh0U29mdHdhcmUAR0xEUE5HIHZlciAzLjRxhaThAAAACHRwTkdHTEQzAAAAAEqAKR8AAAAEZ0FNQQAAsY8L/GEFAAAABmJLR0QAngCeAJ53Twm3AAAHUElEQVR4nO1c244bOwzL//+0+xRgoBUlUnZmsl0aIDKWdaEktg/FwXmttV7G38X1sojvDorv238lceiu5j+JOBOWN/LL7KjneJT8ZR1VAOg7K/oK390ylTrK/ZRwOt6x10nfcZYVdyZP+9YRjN/Z6UhW+ZT6TPOs/3T5aCbT/hi/eNSeSj91SF2DkWSXv/JnFlod9I44sNwX+FUFmNVTcjG8bxUAo+pdny6W9VeQ1UJzmPSJuE/tUt/qILLTqXGtnznYBpQBqoNA9XbqT7hc5xHPrQJgBlI1yw4r5ogNV3UZjix26mWcoy07VXw368y/y1Pl/yGAv4R2MKLfr8XjBIzvEcD1MPYKnS96Zzgw/E75Z4d5q+pkc0A5XsFexW8JgE3MFGLJdLmr5tSBnLKzfap12HzIv4r9iABYItlhB4BqLfD2lwRQ5RkJIBsuWuJkIBWyuGwwnS3aM86Io5qHeUN1VG4Zn1Ozb/8GUAtleVDDzPIZAWT5mRwTOzuLyLWrU31nfKo8RwXAFJqSmfhdzycXjewTAbDzRN8ovvKXBZANt7J3xTtC6F3NVQ1K7Yexx7euxy4m47sbH2NoAUxAFzpQZ9Sg8VkBGL8c748FHBZ4X+F7FbYstrMzMdmpuLL2adzVjnhlPaDa0bfyV31SAWTFmGZP2Kcxyp2xZ99TXozQUIzCZ0sEKHn2e2I4yK7EdM3ucOq+Gb5sf8yyOu4MrqcVQNc4+v2kALomqjiFE9sbK1ImnhXAKfzIx5JbwdYNKR51ycpQ2HtnR7/qohXbjjiUpV/PtgAmdlYASo3JfZJzt/6TAmi57QogKoxtNvpPalS1Jv4nBRBPx0npdyICmG83+SlyT/P4BkzmEI9c9+mmjYfx/libidj4RfhW78wb8mFqfzuO879TAGyNT3I5PsCbcZz/NfH1xKKdfQG74rsK2yu5Z1yyIcUciCfLWe1R7VPxz+K6GUABKIkmhTtSkxxdPJsr+z7V+66dmdltAmD843lCALH2bxJA1QN77/zGAlDtHYl4FAEwHCa5dnqPvSh9MnOr+mH7gAJgyHdNKepFjaK4mLfyU+Oz74p/1mPXH7uYeNA7u7uSD0P4k6gavSP+dC8n/W7B4wSMvyuA93mF3yXkQHmreqvwzfhUvlnOk7NBuSs7O49HBZANkyZd+KKhoTtrnw46cpvMpsrD9tkKADmqg7ra49kVQMyj5GDeKv9OcOqiutzXw/DMDlOP/i+C2EFlhaN/55P5VjkynywPqq0sqKuH+HacYlzXH+pF6UMWwIn7bpyyEKaP7HT1Kx9Us+sn5ox82JkwPmMBoMbjYchkOXYFgAZ3UrioHpOHyRl/O8FtI1uk2hhqJJ7MN2tcbbTjVnFBbx0H1M+JpUxyVz3SAtghLBU9jBN1JzlGAyfrnsh9mwCMs8u/FSzReJ4aSvaObCvxib7dHfUfc2dzQb1UuZQ+UU9Kb60AMqKoICpW+bPNd76o3gJxVf4qlzpkpT92sZNlw5xMwPUoxBb4ZgXX2aumUZ6dGihX10fHW4nL3pg75LwjgKoRZoDsvfKL3Bh/pca0VrRXS2YEpb5l96we9f8IisEVkenyd5ejCEbNFfuvFnpiyVUcmzOrkdZlkrPqXsS3MuzT9mkudnHKkj/9lvmm8UxyVgBqni7vafturni6PwDI//Rbd0c2WQDVQtPkh2O+Eb++j8cJGN8hgBUeVvi+nugXfVHOCJSLrVFx7upec+5w7mwoH1uzmskJnvS/BHbNZSTZAezWUHJ3dRXOzKJZftejzmiL50RtKFnV2CfsDOeKY4xTczxlPzrDiTpXeEME7xiC+ick6+HbBbASn65P2s4EMQS/TQBVPMpxJ+edutc+sn4U+xEBdIO9WwCTmLs4V6Jc4e0WPojIDkEl3469e0NCnuQ7zbm6I77sThS7/x3gr+N6eZ/r/RVs8b6SuF10ubL3ypb11MWr98oP1T/ZZ5aX4lwtVV0UE5MRZxtVFr3DW80Xe8niP9UnU6OEspDsrbMjYtV9WouxM/eOFyuueHZmyvBSaqQCYJQ5VW31zQjjlL176xaNelxJ3IRDF3OiBhQAaqRrkrGzxFHMKTs7mMzGiucTAlDtsgA+RTYtenlbpP8puwUABBAXkgVnb509fjODZjhM7dHG+Cj2mKcTy7QOY+/efgjgLrSkjPvwOAHj9wpgDd6jrbtHG6rJ5DEIAXSDYwed2VcT48V+gQDQEt6nW8wddoWPQQogO3GQyH63ABS7QQoAIQ54uoin7IYogGyQK3lXF6Har7VX8I+2yt8QBZBBHfgpOyOYivPjw/0N+OZBXg/DJ/M3NgVg/Od4nIBhARgWgGEBGBaAYQEYFoBhARgWgGEBGBaAYQEYFoBhARgWgGEBGBaAYQEYFoBhARgWgGEBGBaAYQEYFoBhARgWgGEBGBaAYQEYFoBhARgWgGEBGBaAYQEYFoBhARgWgGEBGBaAYQEYFoDxOAHDAjAsAMMCMB7BP4/5kGtJow6+AAAAAElFTkSuQmCC"},{ name : "R_hxlogo_png", data : ""},{ name : "R_gravityFont_fnt", data : ""},{ name : "R_normalmap_png", data : ""},{ name : "R_customFont_fnt", data : ""}];
var __map_reserved = {};
var hx__registerFont;
hx__registerFont = function(name,data) {
	var s = window.document.createElement("style");
	s.type = "text/css";
	s.innerHTML = "@font-face{ font-family: " + name + "; src: url('data:font/ttf;base64," + data + "') format('truetype'); }";
	window.document.getElementsByTagName("head")[0].appendChild(s);
	var div = window.document.createElement("div");
	div.style.fontFamily = name;
	div.style.opacity = 0;
	div.style.width = "1px";
	div.style.height = "1px";
	div.style.position = "fixed";
	div.style.bottom = "0px";
	div.style.right = "0px";
	div.innerHTML = ".";
	div.className = "hx__loadFont";
	window.document.body.appendChild(div);
};
hx__registerFont("R_trueTypeFont_ttf","");
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
format_gif_Tools.LN2 = Math.log(2);
format_mp3_MPEG.V1 = 3;
format_mp3_MPEG.V2 = 2;
format_mp3_MPEG.V25 = 0;
format_mp3_MPEG.Reserved = 1;
format_mp3_MPEG.V1_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.V2_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.SamplingRates = [[format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_Bad]];
format_mp3_CLayer.LReserved = 0;
format_mp3_CLayer.LLayer3 = 1;
format_mp3_CLayer.LLayer2 = 2;
format_mp3_CLayer.LLayer1 = 3;
format_mp3_CChannelMode.CStereo = 0;
format_mp3_CChannelMode.CJointStereo = 1;
format_mp3_CChannelMode.CDualChannel = 2;
format_mp3_CChannelMode.CMono = 3;
format_mp3_CEmphasis.ENone = 0;
format_mp3_CEmphasis.EMs50_15 = 1;
format_mp3_CEmphasis.EReserved = 2;
format_mp3_CEmphasis.ECCIT_J17 = 3;
h2d_Flow.tmpBounds = new h2d_col_Bounds();
hxbit_Serializer.UID = 0;
hxbit_Serializer.SEQ = 0;
hxbit_Serializer.SEQ_BITS = 8;
hxbit_Serializer.SEQ_MASK = 16777215;
hxbit_Serializer.CLASSES = [];
h3d_prim_Primitive.__clid = hxbit_Serializer.registerClass(h3d_prim_Primitive);
h2d__$Graphics_GraphicsContent.__clid = hxbit_Serializer.registerClass(h2d__$Graphics_GraphicsContent);
h2d_RenderContext.BUFFERING = false;
h2d__$TileGroup_TileLayerContent.__clid = hxbit_Serializer.registerClass(h2d__$TileGroup_TileLayerContent);
h3d_Buffer.GUID = 0;
h3d_BufferOffset.UID = 0;
h3d_Matrix.tmp = new h3d_Matrix();
h3d_Matrix.lumR = 0.212671;
h3d_Matrix.lumG = 0.71516;
h3d_Matrix.lumB = 0.072169;
h3d_Matrix.SQ13 = 0.57735026918962576450914878050196;
h3d_anim_Animation.EPSILON = 0.000001;
h3d_col_OptimizedCollider.__clid = hxbit_Serializer.registerClass(h3d_col_OptimizedCollider);
h3d_col_ObjectCollider.__clid = hxbit_Serializer.registerClass(h3d_col_ObjectCollider);
h3d_col_SkinCollider.__clid = hxbit_Serializer.registerClass(h3d_col_SkinCollider);
h3d_impl_GlDriver.STREAM_POS = 1;
h3d_impl_GlDriver.TFILTERS = [[[9728,9728],[9729,9729]],[[9728,9984],[9729,9985]],[[9728,9986],[9729,9987]]];
h3d_impl_GlDriver.TWRAP = [33071,10497];
h3d_impl_GlDriver.FACES = [0,1028,1029,1032];
h3d_impl_GlDriver.BLEND = [1,0,770,768,772,774,771,769,773,775,32769,32771,32770,32772,776];
h3d_impl_GlDriver.COMPARE = [519,512,514,517,516,518,513,515];
h3d_impl_GlDriver.STENCIL_OP = [7680,0,7681,7682,34055,7683,34056,5386];
h3d_impl_GlDriver.OP = [32774,32778,32779];
h3d_impl_GlDriver.CUBE_FACES = [34069,34070,34071,34072,34073,34074];
h3d_impl_GlDriver.CBUFFERS = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 32) {
			var i = _g1++;
			var _g2 = [];
			var _g4 = 0;
			var _g3 = i;
			while(_g4 < _g3) {
				var k = _g4++;
				_g2.push(36064 + k);
			}
			_g.push(_g2);
		}
	}
	$r = _g;
	return $r;
}(this));
h3d_impl_MemoryManager.MAX_MEMORY = 4294967296.;
h3d_impl_MemoryManager.MAX_BUFFERS = 65536;
h3d_impl_MemoryManager.SIZE = 65533;
h3d_impl_MemoryManager.ALL_FLAGS = h3d_BufferFlag.__empty_constructs__;
h3d_mat_BaseMaterial.__clid = hxbit_Serializer.registerClass(h3d_mat_BaseMaterial);
h3d_mat_Defaults.defaultKillAlphaThreshold = 0.5;
h3d_mat_Defaults.loadingTextureColor = -65281;
h3d_mat_Material.__clid = hxbit_Serializer.registerClass(h3d_mat_Material);
h3d_mat_MaterialSetup.current = new h3d_mat_MaterialSetup("Default");
h3d_mat_Pass.__clid = hxbit_Serializer.registerClass(h3d_mat_Pass);
h3d_mat_Pass.culling_bits = 2;
h3d_mat_Pass.culling_offset = 0;
h3d_mat_Pass.culling_mask = 3;
h3d_mat_Pass.depthWrite_bits = 1;
h3d_mat_Pass.depthWrite_offset = 2;
h3d_mat_Pass.depthWrite_mask = 4;
h3d_mat_Pass.depthTest_bits = 3;
h3d_mat_Pass.depthTest_offset = 3;
h3d_mat_Pass.depthTest_mask = 56;
h3d_mat_Pass.blendSrc_bits = 4;
h3d_mat_Pass.blendSrc_offset = 6;
h3d_mat_Pass.blendSrc_mask = 960;
h3d_mat_Pass.blendDst_bits = 4;
h3d_mat_Pass.blendDst_offset = 10;
h3d_mat_Pass.blendDst_mask = 15360;
h3d_mat_Pass.blendAlphaSrc_bits = 4;
h3d_mat_Pass.blendAlphaSrc_offset = 14;
h3d_mat_Pass.blendAlphaSrc_mask = 245760;
h3d_mat_Pass.blendAlphaDst_bits = 4;
h3d_mat_Pass.blendAlphaDst_offset = 18;
h3d_mat_Pass.blendAlphaDst_mask = 3932160;
h3d_mat_Pass.blendOp_bits = 2;
h3d_mat_Pass.blendOp_offset = 22;
h3d_mat_Pass.blendOp_mask = 12582912;
h3d_mat_Pass.blendAlphaOp_bits = 2;
h3d_mat_Pass.blendAlphaOp_offset = 24;
h3d_mat_Pass.blendAlphaOp_mask = 50331648;
h3d_mat_Pass.colorMask_bits = 4;
h3d_mat_Pass.colorMask_offset = 26;
h3d_mat_Pass.colorMask_mask = 1006632960;
h3d_mat_Stencil.__clid = hxbit_Serializer.registerClass(h3d_mat_Stencil);
h3d_mat_Stencil.frontTest_bits = 3;
h3d_mat_Stencil.frontTest_offset = 0;
h3d_mat_Stencil.frontTest_mask = 7;
h3d_mat_Stencil.frontSTfail_bits = 3;
h3d_mat_Stencil.frontSTfail_offset = 3;
h3d_mat_Stencil.frontSTfail_mask = 56;
h3d_mat_Stencil.frontDPfail_bits = 3;
h3d_mat_Stencil.frontDPfail_offset = 6;
h3d_mat_Stencil.frontDPfail_mask = 448;
h3d_mat_Stencil.frontDPpass_bits = 3;
h3d_mat_Stencil.frontDPpass_offset = 9;
h3d_mat_Stencil.frontDPpass_mask = 3584;
h3d_mat_Stencil.frontRef_bits = 8;
h3d_mat_Stencil.frontRef_offset = 0;
h3d_mat_Stencil.frontRef_mask = 255;
h3d_mat_Stencil.frontReadMask_bits = 8;
h3d_mat_Stencil.frontReadMask_offset = 8;
h3d_mat_Stencil.frontReadMask_mask = 65280;
h3d_mat_Stencil.frontWriteMask_bits = 8;
h3d_mat_Stencil.frontWriteMask_offset = 16;
h3d_mat_Stencil.frontWriteMask_mask = 16711680;
h3d_mat_Stencil.backTest_bits = 3;
h3d_mat_Stencil.backTest_offset = 12;
h3d_mat_Stencil.backTest_mask = 28672;
h3d_mat_Stencil.backSTfail_bits = 3;
h3d_mat_Stencil.backSTfail_offset = 15;
h3d_mat_Stencil.backSTfail_mask = 229376;
h3d_mat_Stencil.backDPfail_bits = 3;
h3d_mat_Stencil.backDPfail_offset = 18;
h3d_mat_Stencil.backDPfail_mask = 1835008;
h3d_mat_Stencil.backDPpass_bits = 3;
h3d_mat_Stencil.backDPpass_offset = 21;
h3d_mat_Stencil.backDPpass_mask = 14680064;
h3d_mat_Stencil.backRef_bits = 8;
h3d_mat_Stencil.backRef_offset = 0;
h3d_mat_Stencil.backRef_mask = 255;
h3d_mat_Stencil.backReadMask_bits = 8;
h3d_mat_Stencil.backReadMask_offset = 8;
h3d_mat_Stencil.backReadMask_mask = 65280;
h3d_mat_Stencil.backWriteMask_bits = 8;
h3d_mat_Stencil.backWriteMask_offset = 16;
h3d_mat_Stencil.backWriteMask_mask = 16711680;
h3d_mat_Texture.UID = 0;
h3d_mat_Texture.nativeFormat = hxd_PixelFormat.RGBA;
h3d_mat_Texture.nativeFlip = false;
h3d_mat_Texture.noiseTextures = new haxe_ds_IntMap();
h3d_pass_Blur.__meta__ = { obj : { ignore : ["shader"]}, fields : { quality : { range : [1,4,1], inspect : null}, sigma : { range : [0,2], inspect : null}, passes : { range : [0,5,1], inspect : null}}};
h3d_pass__$Border_BorderShader.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:4:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey8:positiony4:typejy9:hxsl.Type:5:2i4jy12:hxsl.VecType:1:0y6:parentoR6r10R8y6:outputR10jR11:12:1ar9oR6r10R8y5:colorR10jR11:5:2i4r11R13r13y2:idi-249ghR16i-247gR16i-248gy1:poy4:filey74:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fpass%2FBorder.hxy3:maxi295y3:mini280gy1:tr12goR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:40:0R17oR18R19R20i302R21i298gR22jR11:13:1ahgaoR3jR4:1:1oR6jR7:1:0R8R9R10jR11:5:2i2r11R13oR6r30R8y5:inputR10jR11:12:1ar29hR16i-245gR16i-246gR17oR18R19R20i317R21i303gR22r31goR3jR4:0:1jy10:hxsl.Const:3:1zR17oR18R19R20i320R21i319gR22jR11:3:0goR3jR4:0:1jR25:3:1i1R17oR18R19R20i323R21i322gR22r41ghR17oR18R19R20i324R21i298gR22jR11:5:2i4r11gR17oR18R19R20i324R21i280gR22r12ghR17oR18R19R20i330R21i274gR22jR11:0:0gR6jy17:hxsl.FunctionKind:0:0y3:refoR6jR7:6:0R8y6:vertexR10jR11:13:1aoR1ahy3:retr53ghR16i-250gR29r53goR1ahR2oR3jR4:4:1aoR3jR4:5:3r7oR3jR4:1:1r15R17oR18R19R20i374R21i362gR22r16goR3jR4:1:1oR6jR7:2:0R8R15R10jR11:5:2i4r11R16i-244gR17oR18R19R20i382R21i377gR22r72gR17oR18R19R20i382R21i362gR22r16ghR17oR18R19R20i388R21i356gR22r53gR6jR26:1:0R27oR6r56R8y8:fragmentR10jR11:13:1aoR1ahR29r53ghR16i-251gR29r53ghR8y29:h3d.pass._Border.BorderShadery4:varsar70r32r13r55r80hg";
h3d_shader_ScreenShader.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:4:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey8:positiony4:typejy9:hxsl.Type:5:2i4jy12:hxsl.VecType:1:0y6:parentoR6r10R8y6:outputR10jR11:12:1ar9oR6r10R8y5:colorR10jR11:5:2i4r11R13r13y2:idi-242ghR16i-240gR16i-241gy1:poy4:filey82:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FScreenShader.hxy3:maxi262y3:mini247gy1:tr12goR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:40:0R17oR18R19R20i269R21i265gR22jR11:13:1ahgaoR3jR4:1:1oR6jR7:1:0R8R9R10jR11:5:2i2r11R13oR6r30R8y5:inputR10jR11:12:1ar29oR6r30R8y2:uvR10jR11:5:2i2r11R13r32R16i-239ghR16i-237gR16i-238gR17oR18R19R20i284R21i270gR22r31goR3jR4:0:1jy10:hxsl.Const:3:1zR17oR18R19R20i287R21i286gR22jR11:3:0goR3jR4:0:1jR26:3:1i1R17oR18R19R20i290R21i289gR22r43ghR17oR18R19R20i291R21i265gR22jR11:5:2i4r11gR17oR18R19R20i291R21i247gR22r12ghR17oR18R19R20i297R21i241gR22jR11:0:0gR6jy17:hxsl.FunctionKind:0:0y3:refoR6jR7:6:0R8y6:vertexR10jR11:13:1aoR1ahy3:retr55ghR16i-243gR30r55ghR8y23:h3d.shader.ScreenShadery4:varsar32r13r57hg";
h3d_pass__$Copy_CopyShader.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:4:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey8:positiony4:typejy9:hxsl.Type:5:2i4jy12:hxsl.VecType:1:0y6:parentoR6r10R8y6:outputR10jR11:12:1ar9oR6r10R8y5:colorR10jR11:5:2i4r11R13r13y2:idi-298ghR16i-296gR16i-297gy1:poy4:filey82:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FScreenShader.hxy3:maxi262y3:mini247gy1:tr12goR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:40:0R17oR18R19R20i269R21i265gR22jR11:13:1ahgaoR3jR4:1:1oR6jR7:1:0R8R9R10jR11:5:2i2r11R13oR6r30R8y5:inputR10jR11:12:1ar29oR6r30R8y2:uvR10jR11:5:2i2r11R13r32R16i-295ghR16i-293gR16i-294gR17oR18R19R20i284R21i270gR22r31goR3jR4:0:1jy10:hxsl.Const:3:1zR17oR18R19R20i287R21i286gR22jR11:3:0goR3jR4:0:1jR26:3:1i1R17oR18R19R20i290R21i289gR22r43ghR17oR18R19R20i291R21i265gR22jR11:5:2i4r11gR17oR18R19R20i291R21i247gR22r12ghR17oR18R19R20i297R21i241gR22jR11:0:0gR6jy17:hxsl.FunctionKind:0:0y3:refoR6jR7:6:0R8y6:vertexR10jR11:13:1aoR1ahy3:retr55ghR16i-302gR30r55goR1ahR2oR3jR4:4:1aoR3jR4:5:3r7oR3jR4:1:1oR6r10R8y12:calculatedUVR10jR11:5:2i2r11R16i-301gR17oR18y72:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fpass%2FCopy.hxR20i237R21i225gR22r70goR3jR4:1:1r34R17oR18R32R20i248R21i240gR22r35gR17oR18R32R20i248R21i225gR22r70ghR17oR18R32R20i254R21i219gR22r55gR6jR27:2:0R28oR6r58R8y8:__init__R10jR11:13:1aoR1ahR30r55ghR16i-303gR30r55goR1ahR2oR3jR4:4:1aoR3jR4:5:3r7oR3jR4:1:1oR6r10R8y10:pixelColorR10jR11:5:2i4r11R16i-300gR17oR18R32R20i304R21i294gR22r93goR3jR4:8:2oR3jR4:2:1jR23:33:0R17oR18R32R20i314R21i307gR22jR11:13:1aoR1aoR8y1:_R10jR11:10:0goR8R25R10jR11:5:2i2r11ghR30jR11:5:2i4r11ghgaoR3jR4:1:1oR6jR7:2:0R8y7:textureR10r105R16i-299gR17oR18R32R20i314R21i307gR22r105goR3jR4:1:1r69R17oR18R32R20i331R21i319gR22r70ghR17oR18R32R20i332R21i307gR22r108gR17oR18R32R20i332R21i294gR22r93ghR17oR18R32R20i338R21i288gR22r55gR6r80R28oR6r58R8y16:__init__fragmentR10jR11:13:1aoR1ahR30r55ghR16i-304gR30r55goR1ahR2oR3jR4:4:1aoR3jR4:5:3r7oR3jR4:1:1r15R17oR18R32R20i382R21i370gR22r16goR3jR4:1:1r92R17oR18R32R20i395R21i385gR22r93gR17oR18R32R20i395R21i370gR22r16ghR17oR18R32R20i401R21i364gR22r55gR6jR27:1:0R28oR6r58R8y8:fragmentR10jR11:13:1aoR1ahR30r55ghR16i-305gR30r55ghR8y25:h3d.pass._Copy.CopyShadery4:varsar32r13r112r92r69r57r81r125r146hg";
h3d_pass_Default.__meta__ = { fields : { cameraView : { global : ["camera.view"]}, cameraNear : { global : ["camera.zNear"]}, cameraFar : { global : ["camera.zFar"]}, cameraProj : { global : ["camera.proj"]}, cameraPos : { global : ["camera.position"]}, cameraProjDiag : { global : ["camera.projDiag"]}, cameraViewProj : { global : ["camera.viewProj"]}, cameraInverseViewProj : { global : ["camera.inverseViewProj"]}, globalTime : { global : ["global.time"]}, pixelSize : { global : ["global.pixelSize"]}, globalModelView : { global : ["global.modelView"]}, globalModelViewInverse : { global : ["global.modelViewInverse"]}}};
h3d_pass__$HardwarePick_FixedColor.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:4:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey8:positiony4:typejy9:hxsl.Type:5:2i4jy12:hxsl.VecType:1:0y6:parentoR6r10R8y6:outputR10jR11:12:1ar9oR6r10R8y7:colorIDR10jR11:5:2i4r11R13r13y2:idi-37ghR16i-35gR16i-36gy1:poy4:filey80:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fpass%2FHardwarePick.hxy3:maxi246y3:mini231gy1:tr12goR3jR4:5:3jR5:1:0oR3jR4:3:1oR3jR4:5:3jR5:0:0oR3jR4:1:1r9R17oR18R19R20i265R21i250gR22r12goR3jR4:5:3r21oR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:40:0R17oR18R19R20i272R21i268gR22jR11:13:1ahgaoR3jR4:9:2oR3jR4:1:1oR6jR7:2:0R8y8:viewportR10jR11:5:2i4r11R16i-34gR17oR18R19R20i281R21i273gR22r41gajy14:hxsl.Component:0:0jR25:1:0hR17oR18R19R20i284R21i273gR22jR11:5:2i2r11goR3jR4:0:1jy10:hxsl.Const:3:1d0R17oR18R19R20i288R21i286gR22jR11:3:0goR3jR4:0:1jR26:3:1d0R17oR18R19R20i292R21i290gR22r54ghR17oR18R19R20i293R21i268gR22jR11:5:2i4r11goR3jR4:9:2oR3jR4:1:1r9R17oR18R19R20i311R21i296gR22r12gajR25:3:0hR17oR18R19R20i313R21i296gR22r54gR17oR18R19R20i313R21i268gR22r61gR17oR18R19R20i313R21i250gR22jR11:5:2i4r11gR17oR18R19R20i314R21i249gR22r74goR3jR4:8:2oR3jR4:2:1r31R17oR18R19R20i321R21i317gR22r35gaoR3jR4:9:2oR3jR4:1:1r39R17oR18R19R20i330R21i322gR22r41gajR25:2:0r67hR17oR18R19R20i333R21i322gR22jR11:5:2i2r11goR3jR4:0:1jR26:3:1d1R17oR18R19R20i337R21i335gR22r54goR3jR4:0:1jR26:3:1d1R17oR18R19R20i341R21i339gR22r54ghR17oR18R19R20i342R21i317gR22jR11:5:2i4r11gR17oR18R19R20i342R21i249gR22jR11:5:2i4r11gR17oR18R19R20i342R21i231gR22r12ghR17oR18R19R20i347R21i226gR22jR11:0:0gR6jy17:hxsl.FunctionKind:0:0y3:refoR6jR7:6:0R8y6:vertexR10jR11:13:1aoR1ahy3:retr109ghR16i-38gR30r109goR1ahR2oR3jR4:4:1aoR3jR4:5:3r7oR3jR4:1:1r15R17oR18R19R20i389R21i375gR22r16goR3jR4:1:1oR6r40R8R15R10jR11:5:2i4r11R16i-33gR17oR18R19R20i399R21i392gR22r127gR17oR18R19R20i399R21i375gR22r16ghR17oR18R19R20i404R21i370gR22r109gR6jR27:1:0R28oR6r112R8y8:fragmentR10jR11:13:1aoR1ahR30r109ghR16i-39gR30r109ghR8y33:h3d.pass._HardwarePick.FixedColory4:varsar126r39r13r111r135hg";
h3d_pass_ShadowMap.__meta__ = { fields : { border : { ignore : null}}};
h3d_prim_BigPrimitive.__clid = hxbit_Serializer.registerClass(h3d_prim_BigPrimitive);
h3d_prim_MeshPrimitive.__clid = hxbit_Serializer.registerClass(h3d_prim_MeshPrimitive);
h3d_prim_HMDModel.__clid = hxbit_Serializer.registerClass(h3d_prim_HMDModel);
h3d_prim_Plan2D.__clid = hxbit_Serializer.registerClass(h3d_prim_Plan2D);
h3d_prim_Polygon.__clid = hxbit_Serializer.registerClass(h3d_prim_Polygon);
h3d_prim_RawPrimitive.__clid = hxbit_Serializer.registerClass(h3d_prim_RawPrimitive);
h3d_scene_Object.ROT2RAD = -0.017453292519943295769236907684886;
h3d_scene_Object.__clid = hxbit_Serializer.registerClass(h3d_scene_Object);
h3d_scene_Light.__clid = hxbit_Serializer.registerClass(h3d_scene_Light);
h3d_scene_DirLight.__clid = hxbit_Serializer.registerClass(h3d_scene_DirLight);
h3d_scene_Mesh.__clid = hxbit_Serializer.registerClass(h3d_scene_Mesh);
h3d_scene_Graphics.__clid = hxbit_Serializer.registerClass(h3d_scene_Graphics);
h3d_scene_Interactive.__clid = hxbit_Serializer.registerClass(h3d_scene_Interactive);
h3d_scene_MultiMaterial.__clid = hxbit_Serializer.registerClass(h3d_scene_MultiMaterial);
h3d_scene__$Object_ObjectFlags_$Impl_$.FPosChanged = 1;
h3d_scene__$Object_ObjectFlags_$Impl_$.FVisible = 2;
h3d_scene__$Object_ObjectFlags_$Impl_$.FCulled = 4;
h3d_scene__$Object_ObjectFlags_$Impl_$.FFollowPositionOnly = 8;
h3d_scene__$Object_ObjectFlags_$Impl_$.FLightCameraCenter = 16;
h3d_scene__$Object_ObjectFlags_$Impl_$.FAllocated = 32;
h3d_scene__$Object_ObjectFlags_$Impl_$.FAlwaysSync = 64;
h3d_scene__$Object_ObjectFlags_$Impl_$.FInheritCulled = 128;
h3d_scene__$Object_ObjectFlags_$Impl_$.FNoSerialize = 256;
h3d_scene__$Object_ObjectFlags_$Impl_$.FIgnoreBounds = 512;
h3d_scene__$Object_ObjectFlags_$Impl_$.FIgnoreCollide = 1024;
h3d_scene_Scene.__clid = hxbit_Serializer.registerClass(h3d_scene_Scene);
h3d_scene_Joint.__clid = hxbit_Serializer.registerClass(h3d_scene_Joint);
h3d_scene_Skin.__clid = hxbit_Serializer.registerClass(h3d_scene_Skin);
h3d_shader_AmbientLight.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:4:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey10:lightColory4:typejy9:hxsl.Type:5:2i3jy12:hxsl.VecType:1:0y2:idi-229gy1:poy4:filey82:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FAmbientLight.hxy3:maxi349y3:mini339gy1:tr12goR3jR4:10:3oR3jR4:1:1oR6jR7:2:0R8y8:additiveR10jR11:2:0y10:qualifiersajy17:hxsl.VarQualifier:0:1nhR13i-230gR14oR15R16R17i360R18i352gR19r19goR3jR4:1:1oR6jR7:0:0R8y12:ambientLightR10jR11:5:2i3r11y6:parentoR6r26R8y6:globalR10jR11:12:1ar25oR6r26R8y16:perPixelLightingR10r19R24r28R21ajR22:0:1nhR13i-226ghR13i-224gR13i-225gR14oR15R16R17i382R18i363gR19r27goR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:39:0R14oR15R16R17i389R18i385gR19jR11:13:1ahgaoR3jR4:0:1jy10:hxsl.Const:3:1d0R14oR15R16R17i392R18i390gR19jR11:3:0ghR14oR15R16R17i393R18i385gR19jR11:5:2i3r11gR14oR15R16R17i393R18i352gR19r27gR14oR15R16R17i393R18i339gR19r12ghR14oR15R16R17i399R18i333gR19jR11:0:0gR6jy17:hxsl.FunctionKind:2:0y3:refoR6jR7:6:0R8y8:__init__R10jR11:13:1aoR1ahy3:retr58ghR13i-231gR32r58goR1ahR2oR3jR4:4:1aoR3jR4:5:3r7oR3jR4:1:1oR6r10R8y15:lightPixelColorR10jR11:5:2i3r11R13i-228gR14oR15R16R17i454R18i439gR19r73goR3jR4:10:3oR3jR4:1:1r17R14oR15R16R17i465R18i457gR19r19goR3jR4:1:1r25R14oR15R16R17i487R18i468gR19r27goR3jR4:8:2oR3jR4:2:1r38R14oR15R16R17i494R18i490gR19r42gaoR3jR4:0:1jR28:3:1d0R14oR15R16R17i497R18i495gR19r48ghR14oR15R16R17i498R18i490gR19jR11:5:2i3r11gR14oR15R16R17i498R18i457gR19r27gR14oR15R16R17i498R18i439gR19r73ghR14oR15R16R17i504R18i433gR19r58gR6r59R30oR6r61R8y16:__init__fragmentR10jR11:13:1aoR1ahR32r58ghR13i-232gR32r58goR1aoR6r10R8R9R10jR11:5:2i3r11R13i-233ghR2oR3jR4:4:1aoR3jR4:12:1oR3jR4:10:3oR3jR4:1:1r17R14oR15R16R17i578R18i570gR19r19goR3jR4:1:1r108R14oR15R16R17i591R18i581gR19r109goR3jR4:3:1oR3jR4:5:3jR5:0:0oR3jR4:1:1r25R14oR15R16R17i614R18i595gR19r27goR3jR4:5:3jR5:1:0oR3jR4:8:2oR3jR4:2:1jR27:22:0R14oR15R16R17i642R18i617gR19jR11:13:1aoR1aoR8y1:_R10r27goR8y1:bR10r48ghR32jR11:5:2i3r11ghgaoR3jR4:3:1oR3jR4:5:3jR5:3:0oR3jR4:0:1jR28:3:1i1R14oR15R16R17i619R18i618gR19r48goR3jR4:1:1r25R14oR15R16R17i641R18i622gR19r27gR14oR15R16R17i641R18i618gR19r27gR14oR15R16R17i642R18i617gR19r27goR3jR4:0:1jR28:3:1d0R14oR15R16R17i649R18i647gR19r48ghR14oR15R16R17i650R18i617gR19r138goR3jR4:1:1r108R14oR15R16R17i663R18i653gR19r109gR14oR15R16R17i663R18i617gR19jR11:5:2i3r11gR14oR15R16R17i663R18i595gR19jR11:5:2i3r11gR14oR15R16R17i664R18i594gR19r169gR14oR15R16R17i664R18i570gR19r109gR14oR15R16R17i664R18i563gR19r58ghR14oR15R16R17i670R18i557gR19r58gR6jR29:3:0R30oR6r61R8y9:calcLightR10jR11:13:1aoR1aoR8R9R10r109ghR32jR11:5:2i3r11ghR13i-234gR32r184goR1ahR2oR3jR4:4:1aoR3jR4:10:3oR3jR4:6:2jy15:haxe.macro.Unop:2:0oR3jR4:1:1r30R14oR15R16R17i728R18i705gR19r19gR14oR15R16R17i728R18i704gR19r19goR3jR4:5:3jR5:20:1r127oR3jR4:9:2oR3jR4:1:1oR6r10R8y10:pixelColorR10jR11:5:2i4r11R13i-227gR14oR15R16R17i741R18i731gR19r203gajy14:hxsl.Component:0:0jR40:1:0jR40:2:0hR14oR15R16R17i745R18i731gR19jR11:5:2i3r11goR3jR4:8:2oR3jR4:1:1r179R14oR15R16R17i758R18i749gR19r185gaoR3jR4:1:1r9R14oR15R16R17i769R18i759gR19r12ghR14oR15R16R17i770R18i749gR19r184gR14oR15R16R17i770R18i731gR19r212gnR14oR15R16R17i770R18i700gR19r58ghR14oR15R16R17i776R18i694gR19r58gR6jR29:0:0R30oR6r61R8y6:vertexR10jR11:13:1aoR1ahR32r58ghR13i-235gR32r58goR1ahR2oR3jR4:4:1aoR3jR4:10:3oR3jR4:1:1r30R14oR15R16R17i835R18i812gR19r19goR3jR4:5:3jR5:20:1r127oR3jR4:9:2oR3jR4:1:1r202R14oR15R16R17i848R18i838gR19r203gar207r208r209hR14oR15R16R17i852R18i838gR19jR11:5:2i3r11goR3jR4:8:2oR3jR4:1:1r179R14oR15R16R17i865R18i856gR19r185gaoR3jR4:1:1r72R14oR15R16R17i881R18i866gR19r73ghR14oR15R16R17i882R18i856gR19r184gR14oR15R16R17i882R18i838gR19r252gnR14oR15R16R17i882R18i808gR19r58ghR14oR15R16R17i888R18i802gR19r58gR6jR29:1:0R30oR6r61R8y8:fragmentR10jR11:13:1aoR1ahR32r58ghR13i-236gR32r58ghR8y23:h3d.shader.AmbientLighty4:varsar28r202r72r9r17r60r101r179r230r270hg";
h3d_shader_Base2d.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:4:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey14:spritePositiony4:typejy9:hxsl.Type:5:2i4jy12:hxsl.VecType:1:0y2:idi-11gy1:poy4:filey76:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FBase2d.hxy3:maxi983y3:mini969gy1:tr12goR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:40:0R14oR15R16R17i990R18i986gR19jR11:13:1ahgaoR3jR4:1:1oR6jR7:1:0R8y8:positionR10jR11:5:2i2r11y6:parentoR6r25R8y5:inputR10jR11:12:1ar24oR6r25R8y2:uvR10jR11:5:2i2r11R22r27R13i-3goR6r25R8y5:colorR10jR11:5:2i4r11R22r27R13i-4ghR13i-1gR13i-2gR14oR15R16R17i1005R18i991gR19r26goR3jR4:1:1oR6jR7:2:0R8y6:zValueR10jR11:3:0R13i-9gR14oR15R16R17i1013R18i1007gR19r39goR3jR4:0:1jy10:hxsl.Const:3:1i1R14oR15R16R17i1016R18i1015gR19r39ghR14oR15R16R17i1017R18i986gR19jR11:5:2i4r11gR14oR15R16R17i1017R18i969gR19r12goR3jR4:10:3oR3jR4:1:1oR6r38R8y10:isRelativeR10jR11:2:0y10:qualifiersajy17:hxsl.VarQualifier:0:1nhR13i-16gR14oR15R16R17i1037R18i1027gR19r54goR3jR4:4:1aoR3jR4:5:3r7oR3jR4:9:2oR3jR4:1:1oR6r10R8y16:absolutePositionR10jR11:5:2i4r11R13i-12gR14oR15R16R17i1063R18i1047gR19r65gajy14:hxsl.Component:0:0hR14oR15R16R17i1065R18i1047gR19r39goR3jR4:8:2oR3jR4:2:1jR20:29:0R14oR15R16R17i1093R18i1068gR19jR11:13:1aoR1aoR8y1:_R10jR11:5:2i3r11goR8y1:bR10jR11:5:2i3r11ghy3:retr39ghgaoR3jR4:8:2oR3jR4:2:1jR20:39:0R14oR15R16R17i1072R18i1068gR19jR11:13:1ahgaoR3jR4:9:2oR3jR4:1:1r9R14oR15R16R17i1087R18i1073gR19r12gar69jR32:1:0hR14oR15R16R17i1090R18i1073gR19jR11:5:2i2r11goR3jR4:0:1jR27:3:1i1R14oR15R16R17i1092R18i1091gR19r39ghR14oR15R16R17i1093R18i1068gR19r81goR3jR4:1:1oR6r38R8y15:absoluteMatrixAR10jR11:5:2i3r11R13i-18gR14oR15R16R17i1113R18i1098gR19r111ghR14oR15R16R17i1114R18i1068gR19r39gR14oR15R16R17i1114R18i1047gR19r39goR3jR4:5:3r7oR3jR4:9:2oR3jR4:1:1r64R14oR15R16R17i1137R18i1121gR19r65gar99hR14oR15R16R17i1139R18i1121gR19r39goR3jR4:8:2oR3jR4:2:1r74R14oR15R16R17i1167R18i1142gR19jR11:13:1aoR1aoR8R33R10jR11:5:2i3r11gr82hR35r39ghgaoR3jR4:8:2oR3jR4:2:1r88R14oR15R16R17i1146R18i1142gR19r92gaoR3jR4:9:2oR3jR4:1:1r9R14oR15R16R17i1161R18i1147gR19r12gar69r99hR14oR15R16R17i1164R18i1147gR19jR11:5:2i2r11goR3jR4:0:1jR27:3:1i1R14oR15R16R17i1166R18i1165gR19r39ghR14oR15R16R17i1167R18i1142gR19r134goR3jR4:1:1oR6r38R8y15:absoluteMatrixBR10jR11:5:2i3r11R13i-19gR14oR15R16R17i1187R18i1172gR19r158ghR14oR15R16R17i1188R18i1142gR19r39gR14oR15R16R17i1188R18i1121gR19r39goR3jR4:5:3r7oR3jR4:9:2oR3jR4:1:1r64R14oR15R16R17i1211R18i1195gR19r65gajR32:2:0jR32:3:0hR14oR15R16R17i1214R18i1195gR19jR11:5:2i2r11goR3jR4:9:2oR3jR4:1:1r9R14oR15R16R17i1231R18i1217gR19r12gar171r172hR14oR15R16R17i1234R18i1217gR19jR11:5:2i2r11gR14oR15R16R17i1234R18i1195gR19r175ghR14oR15R16R17i1241R18i1040gR19jR11:0:0goR3jR4:5:3r7oR3jR4:1:1r64R14oR15R16R17i1268R18i1252gR19r65goR3jR4:1:1r9R14oR15R16R17i1285R18i1271gR19r12gR14oR15R16R17i1285R18i1252gR19r65gR14oR15R16R17i1285R18i1023gR19r188goR3jR4:5:3r7oR3jR4:1:1oR6jR7:3:0R8y12:calculatedUVR10jR11:5:2i2r11R13i-15gR14oR15R16R17i1303R18i1291gR19r204goR3jR4:10:3oR3jR4:1:1oR6r38R8y8:hasUVPosR10r54R29ajR30:0:1nhR13i-22gR14oR15R16R17i1314R18i1306gR19r54goR3jR4:5:3jR5:0:0oR3jR4:5:3jR5:1:0oR3jR4:1:1r29R14oR15R16R17i1325R18i1317gR19r30goR3jR4:9:2oR3jR4:1:1oR6r38R8y5:uvPosR10jR11:5:2i4r11R13i-23gR14oR15R16R17i1333R18i1328gR19r224gar171r172hR14oR15R16R17i1336R18i1328gR19jR11:5:2i2r11gR14oR15R16R17i1336R18i1317gR19jR11:5:2i2r11goR3jR4:9:2oR3jR4:1:1r223R14oR15R16R17i1344R18i1339gR19r224gar69r99hR14oR15R16R17i1347R18i1339gR19jR11:5:2i2r11gR14oR15R16R17i1347R18i1317gR19jR11:5:2i2r11goR3jR4:1:1r29R14oR15R16R17i1358R18i1350gR19r30gR14oR15R16R17i1358R18i1306gR19r244gR14oR15R16R17i1358R18i1291gR19r204goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y10:pixelColorR10jR11:5:2i4r11R13i-13gR14oR15R16R17i1374R18i1364gR19r255goR3jR4:10:3oR3jR4:1:1r53R14oR15R16R17i1387R18i1377gR19r54goR3jR4:5:3r217oR3jR4:1:1oR6r38R8R25R10jR11:5:2i4r11R13i-17gR14oR15R16R17i1395R18i1390gR19r265goR3jR4:1:1r31R14oR15R16R17i1409R18i1398gR19r32gR14oR15R16R17i1409R18i1390gR19jR11:5:2i4r11goR3jR4:1:1r31R14oR15R16R17i1423R18i1412gR19r32gR14oR15R16R17i1423R18i1377gR19r273gR14oR15R16R17i1423R18i1364gR19r255goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y12:textureColorR10jR11:5:2i4r11R13i-14gR14oR15R16R17i1441R18i1429gR19r284goR3jR4:8:2oR3jR4:2:1jR20:33:0R14oR15R16R17i1451R18i1444gR19jR11:13:1aoR1aoR8R33R10jR11:10:0goR8R24R10jR11:5:2i2r11ghR35jR11:5:2i4r11ghgaoR3jR4:1:1oR6r38R8y7:textureR10r296R13i-10gR14oR15R16R17i1451R18i1444gR19r296goR3jR4:1:1r202R14oR15R16R17i1468R18i1456gR19r204ghR14oR15R16R17i1469R18i1444gR19r299gR14oR15R16R17i1469R18i1429gR19r284goR3jR4:5:3jR5:20:1r217oR3jR4:1:1r254R14oR15R16R17i1485R18i1475gR19r255goR3jR4:1:1r283R14oR15R16R17i1501R18i1489gR19r284gR14oR15R16R17i1501R18i1475gR19r255ghR14oR15R16R17i1507R18i963gR19r188gR6jy17:hxsl.FunctionKind:2:0y3:refoR6jR7:6:0R8y8:__init__R10jR11:13:1aoR1ahR35r188ghR13i-29gR35r188goR1ahR2oR3jR4:4:1aoR3jR4:7:2oR6r10R8y3:tmpR10jR11:5:2i3r11R13i-32goR3jR4:8:2oR3jR4:2:1r88R14oR15R16R17i1610R18i1606gR19r92gaoR3jR4:9:2oR3jR4:1:1r64R14oR15R16R17i1627R18i1611gR19r65gar69r99hR14oR15R16R17i1630R18i1611gR19jR11:5:2i2r11goR3jR4:0:1jR27:3:1i1R14oR15R16R17i1633R18i1632gR19r39ghR14oR15R16R17i1634R18i1606gR19r338gR14oR15R16R17i1635R18i1596gR19r188goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y14:outputPositionR10jR11:5:2i4r11R13i-28gR14oR15R16R17i1654R18i1640gR19r363goR3jR4:8:2oR3jR4:2:1r17R14oR15R16R17i1661R18i1657gR19r21gaoR3jR4:8:2oR3jR4:2:1r74R14oR15R16R17i1671R18i1668gR19jR11:13:1aoR1aoR8R33R10r338gr82hR35r39ghgaoR3jR4:1:1r337R14oR15R16R17i1671R18i1668gR19r338goR3jR4:1:1oR6r38R8y13:filterMatrixAR10jR11:5:2i3r11R13i-20gR14oR15R16R17i1689R18i1676gR19r386ghR14oR15R16R17i1690R18i1668gR19r39goR3jR4:8:2oR3jR4:2:1r74R14oR15R16R17i1700R18i1697gR19jR11:13:1aoR1aoR8R33R10r338gr82hR35r39ghgaoR3jR4:1:1r337R14oR15R16R17i1700R18i1697gR19r338goR3jR4:1:1oR6r38R8y13:filterMatrixBR10jR11:5:2i3r11R13i-21gR14oR15R16R17i1718R18i1705gR19r406ghR14oR15R16R17i1719R18i1697gR19r39goR3jR4:9:2oR3jR4:1:1r64R14oR15R16R17i1742R18i1726gR19r65gar171r172hR14oR15R16R17i1745R18i1726gR19jR11:5:2i2r11ghR14oR15R16R17i1751R18i1657gR19jR11:5:2i4r11gR14oR15R16R17i1751R18i1640gR19r363goR3jR4:5:3r7oR3jR4:9:2oR3jR4:1:1r362R14oR15R16R17i1800R18i1786gR19r363gar69r99hR14oR15R16R17i1803R18i1786gR19jR11:5:2i2r11goR3jR4:5:3r217oR3jR4:3:1oR3jR4:5:3r215oR3jR4:9:2oR3jR4:1:1r362R14oR15R16R17i1821R18i1807gR19r363gar69r99hR14oR15R16R17i1824R18i1807gR19jR11:5:2i2r11goR3jR4:9:2oR3jR4:1:1oR6r38R8y8:viewportR10jR11:5:2i4r11R13i-27gR14oR15R16R17i1835R18i1827gR19r447gar69r99hR14oR15R16R17i1838R18i1827gR19jR11:5:2i2r11gR14oR15R16R17i1838R18i1807gR19jR11:5:2i2r11gR14oR15R16R17i1839R18i1806gR19r456goR3jR4:9:2oR3jR4:1:1r446R14oR15R16R17i1850R18i1842gR19r447gar171r172hR14oR15R16R17i1853R18i1842gR19jR11:5:2i2r11gR14oR15R16R17i1853R18i1806gR19jR11:5:2i2r11gR14oR15R16R17i1853R18i1786gR19r432goR3jR4:10:3oR3jR4:1:1oR6r38R8y10:pixelAlignR10r54R29ajR30:0:1nhR13i-25gR14oR15R16R17i1959R18i1949gR19r54goR3jR4:5:3jR5:20:1jR5:3:0oR3jR4:9:2oR3jR4:1:1r362R14oR15R16R17i1976R18i1962gR19r363gar69r99hR14oR15R16R17i1979R18i1962gR19jR11:5:2i2r11goR3jR4:1:1oR6r38R8y16:halfPixelInverseR10jR11:5:2i2r11R13i-26gR14oR15R16R17i1999R18i1983gR19r492gR14oR15R16R17i1999R18i1962gR19r489gnR14oR15R16R17i1999R18i1945gR19r188goR3jR4:5:3r7oR3jR4:1:1oR6r10R8R21R10jR11:5:2i4r11R22oR6r10R8y6:outputR10jR11:12:1ar501oR6r10R8R25R10jR11:5:2i4r11R22r503R13i-7ghR13i-5gR13i-6gR14oR15R16R17i2020R18i2005gR19r502goR3jR4:1:1r362R14oR15R16R17i2037R18i2023gR19r363gR14oR15R16R17i2037R18i2005gR19r502ghR14oR15R16R17i2043R18i1531gR19r188gR6jR44:0:0R45oR6r327R8y6:vertexR10jR11:13:1aoR1ahR35r188ghR13i-30gR35r188goR1ahR2oR3jR4:4:1aoR3jR4:10:3oR3jR4:5:3jR5:14:0oR3jR4:1:1oR6r38R8y9:killAlphaR10r54R29ajR30:0:1nhR13i-24gR14oR15R16R17i2088R18i2079gR19r54goR3jR4:5:3jR5:9:0oR3jR4:9:2oR3jR4:1:1r254R14oR15R16R17i2102R18i2092gR19r255gar172hR14oR15R16R17i2104R18i2092gR19r39goR3jR4:0:1jR27:3:1d0.001R14oR15R16R17i2112R18i2107gR19r39gR14oR15R16R17i2112R18i2092gR19r54gR14oR15R16R17i2112R18i2079gR19r54goR3jR4:11:0R14oR15R16R17i2122R18i2115gR19r188gnR14oR15R16R17i2122R18i2075gR19r188goR3jR4:5:3r7oR3jR4:1:1r505R14oR15R16R17i2140R18i2128gR19r506goR3jR4:1:1r254R14oR15R16R17i2153R18i2143gR19r255gR14oR15R16R17i2153R18i2128gR19r506ghR14oR15R16R17i2159R18i2069gR19r188gR6jR44:1:0R45oR6r327R8y8:fragmentR10jR11:13:1aoR1ahR35r188ghR13i-31gR35r188ghR8y17:h3d.shader.Base2dy4:varsar27r503oR6jR7:0:0R8y4:timeR10r39R13i-8gr37r303r9r64r254r283r202r53r264r110r157r385r405r209r223r531r474r491r446r362r326r518r570hg";
h3d_shader_BaseMesh.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:4:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey16:relativePositiony4:typejy9:hxsl.Type:5:2i3jy12:hxsl.VecType:1:0y2:idi-97gy1:poy4:filey78:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FBaseMesh.hxy3:maxi1269y3:mini1253gy1:tr12goR3jR4:1:1oR6jR7:1:0R8y8:positionR10jR11:5:2i3r11y6:parentoR6r17R8y5:inputR10jR11:12:1ar16oR6r17R8y6:normalR10jR11:5:2i3r11R21r19R13i-91ghR13i-89gR13i-90gR14oR15R16R17i1286R18i1272gR19r18gR14oR15R16R17i1286R18i1253gR19r12goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y19:transformedPositionR10jR11:5:2i3r11R13i-98gR14oR15R16R17i1311R18i1292gR19r31goR3jR4:5:3jR5:1:0oR3jR4:1:1r9R14oR15R16R17i1330R18i1314gR19r12goR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:50:0R14oR15R16R17i1349R18i1333gR19jR11:13:1ahgaoR3jR4:1:1oR6jR7:0:0R8y9:modelViewR10jR11:7:0R21oR6r49R8y6:globalR10jR11:12:1aoR6r49R8y4:timeR10jR11:3:0R21r51R13i-85goR6r49R8y9:pixelSizeR10jR11:5:2i2r11R21r51R13i-86gr48oR6r49R8y16:modelViewInverseR10r50R21r51y10:qualifiersajy17:hxsl.VarQualifier:3:0hR13i-88ghR13i-84gR31ar59hR13i-87gR14oR15R16R17i1349R18i1333gR19r50ghR14oR15R16R17i1358R18i1333gR19jR11:8:0gR14oR15R16R17i1358R18i1314gR19jR11:5:2i3r11gR14oR15R16R17i1358R18i1292gR19r31goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y17:projectedPositionR10jR11:5:2i4r11R13i-101gR14oR15R16R17i1381R18i1364gR19r75goR3jR4:5:3r35oR3jR4:8:2oR3jR4:2:1jR25:40:0R14oR15R16R17i1388R18i1384gR19jR11:13:1ahgaoR3jR4:1:1r30R14oR15R16R17i1408R18i1389gR19r31goR3jR4:0:1jy10:hxsl.Const:3:1i1R14oR15R16R17i1411R18i1410gR19r54ghR14oR15R16R17i1412R18i1384gR19jR11:5:2i4r11goR3jR4:1:1oR6r49R8y8:viewProjR10r50R21oR6r49R8y6:cameraR10jR11:12:1aoR6r49R8y4:viewR10r50R21r99R13i-75goR6r49R8y4:projR10r50R21r99R13i-76goR6r49R8R20R10jR11:5:2i3r11R21r99R13i-77goR6r49R8y8:projDiagR10jR11:5:2i3r11R21r99R13i-78gr98oR6r49R8y15:inverseViewProjR10r50R21r99R13i-80goR6r49R8y5:zNearR10r54R21r99R13i-81goR6r49R8y4:zFarR10r54R21r99R13i-82goR6jR7:3:0R8y3:dirR10jR11:5:2i3r11R21r99R13i-83ghR13i-74gR13i-79gR14oR15R16R17i1430R18i1415gR19r50gR14oR15R16R17i1430R18i1384gR19jR11:5:2i4r11gR14oR15R16R17i1430R18i1364gR19r75goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y17:transformedNormalR10jR11:5:2i3r11R13i-100gR14oR15R16R17i1453R18i1436gR19r124goR3jR4:8:2oR3jR4:2:1jR25:31:0R14oR15R16R17i1496R18i1456gR19jR11:13:1aoR1aoR8y1:_R10r69ghy3:retr69ghgaoR3jR4:3:1oR3jR4:5:3r35oR3jR4:1:1r21R14oR15R16R17i1469R18i1457gR19r22goR3jR4:8:2oR3jR4:2:1jR25:48:0R14oR15R16R17i1488R18i1472gR19jR11:13:1ahgaoR3jR4:1:1r48R14oR15R16R17i1488R18i1472gR19r50ghR14oR15R16R17i1495R18i1472gR19jR11:6:0gR14oR15R16R17i1495R18i1457gR19r69gR14oR15R16R17i1496R18i1456gR19r69ghR14oR15R16R17i1508R18i1456gR19r69gR14oR15R16R17i1508R18i1436gR19r124goR3jR4:5:3r7oR3jR4:1:1r110R14oR15R16R17i1524R18i1514gR19r112goR3jR4:8:2oR3jR4:2:1r129R14oR15R16R17i1566R18i1527gR19jR11:13:1aoR1aoR8R45R10jR11:5:2i3r11ghR46r69ghgaoR3jR4:3:1oR3jR4:5:3jR5:3:0oR3jR4:1:1r103R14oR15R16R17i1543R18i1528gR19r104goR3jR4:1:1r30R14oR15R16R17i1565R18i1546gR19r31gR14oR15R16R17i1565R18i1528gR19r177gR14oR15R16R17i1566R18i1527gR19r177ghR14oR15R16R17i1578R18i1527gR19r69gR14oR15R16R17i1578R18i1514gR19r112goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y10:pixelColorR10jR11:5:2i4r11R13i-102gR14oR15R16R17i1594R18i1584gR19r200goR3jR4:1:1oR6jR7:2:0R8y5:colorR10jR11:5:2i4r11R13i-107gR14oR15R16R17i1602R18i1597gR19r206gR14oR15R16R17i1602R18i1584gR19r200goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y9:specPowerR10r54R13i-105gR14oR15R16R17i1617R18i1608gR19r54goR3jR4:1:1oR6r205R8y13:specularPowerR10r54R31ajR32:7:2d0d100hR13i-108gR14oR15R16R17i1633R18i1620gR19r54gR14oR15R16R17i1633R18i1608gR19r54goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y9:specColorR10jR11:5:2i3r11R13i-106gR14oR15R16R17i1648R18i1639gR19r227goR3jR4:5:3r35oR3jR4:1:1oR6r205R8y13:specularColorR10jR11:5:2i3r11R13i-110gR14oR15R16R17i1664R18i1651gR19r233goR3jR4:1:1oR6r205R8y14:specularAmountR10r54R31ajR32:7:2d0d10hR13i-109gR14oR15R16R17i1681R18i1667gR19r54gR14oR15R16R17i1681R18i1651gR19r233gR14oR15R16R17i1681R18i1639gR19r227goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y8:screenUVR10jR11:5:2i2r11R13i-104gR14oR15R16R17i1695R18i1687gR19r249goR3jR4:5:3jR5:0:0oR3jR4:5:3r35oR3jR4:3:1oR3jR4:5:3jR5:2:0oR3jR4:9:2oR3jR4:1:1r74R14oR15R16R17i1716R18i1699gR19r75gajy14:hxsl.Component:0:0jR55:1:0hR14oR15R16R17i1719R18i1699gR19jR11:5:2i2r11goR3jR4:9:2oR3jR4:1:1r74R14oR15R16R17i1739R18i1722gR19r75gajR55:3:0hR14oR15R16R17i1741R18i1722gR19r54gR14oR15R16R17i1741R18i1699gR19r267gR14oR15R16R17i1742R18i1698gR19r267goR3jR4:8:2oR3jR4:2:1jR25:38:0R14oR15R16R17i1749R18i1745gR19jR11:13:1ahgaoR3jR4:0:1jR34:3:1d0.5R14oR15R16R17i1753R18i1750gR19r54goR3jR4:0:1jR34:3:1d-0.5R14oR15R16R17i1759R18i1755gR19r54ghR14oR15R16R17i1760R18i1745gR19jR11:5:2i2r11gR14oR15R16R17i1760R18i1698gR19jR11:5:2i2r11goR3jR4:0:1jR34:3:1d0.5R14oR15R16R17i1766R18i1763gR19r54gR14oR15R16R17i1766R18i1698gR19r301gR14oR15R16R17i1766R18i1687gR19r249goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y5:depthR10r54R13i-103gR14oR15R16R17i1777R18i1772gR19r54goR3jR4:5:3r257oR3jR4:9:2oR3jR4:1:1r74R14oR15R16R17i1797R18i1780gR19r75gajR55:2:0hR14oR15R16R17i1799R18i1780gR19r54goR3jR4:9:2oR3jR4:1:1r74R14oR15R16R17i1819R18i1802gR19r75gar273hR14oR15R16R17i1821R18i1802gR19r54gR14oR15R16R17i1821R18i1780gR19r54gR14oR15R16R17i1821R18i1772gR19r54ghR14oR15R16R17i1827R18i1247gR19jR11:0:0gR6jy17:hxsl.FunctionKind:2:0y3:refoR6jR7:6:0R8y8:__init__R10jR11:13:1aoR1ahR46r337ghR13i-111gR46r337goR1ahR2oR3jR4:4:1aoR3jR4:5:3r7oR3jR4:1:1r123R14oR15R16R17i1884R18i1867gR19r124goR3jR4:8:2oR3jR4:2:1r129R14oR15R16R17i1904R18i1887gR19jR11:13:1aoR1aoR8R45R10r124ghR46r69ghgaoR3jR4:1:1r123R14oR15R16R17i1904R18i1887gR19r124ghR14oR15R16R17i1916R18i1887gR19r69gR14oR15R16R17i1916R18i1867gR19r124goR3jR4:5:3r7oR3jR4:1:1r248R14oR15R16R17i2025R18i2017gR19r249goR3jR4:5:3r253oR3jR4:5:3r35oR3jR4:3:1oR3jR4:5:3r257oR3jR4:9:2oR3jR4:1:1r74R14oR15R16R17i2046R18i2029gR19r75gar263r264hR14oR15R16R17i2049R18i2029gR19jR11:5:2i2r11goR3jR4:9:2oR3jR4:1:1r74R14oR15R16R17i2069R18i2052gR19r75gar273hR14oR15R16R17i2071R18i2052gR19r54gR14oR15R16R17i2071R18i2029gR19r385gR14oR15R16R17i2072R18i2028gR19r385goR3jR4:8:2oR3jR4:2:1r282R14oR15R16R17i2079R18i2075gR19r286gaoR3jR4:0:1jR34:3:1d0.5R14oR15R16R17i2083R18i2080gR19r54goR3jR4:0:1jR34:3:1d-0.5R14oR15R16R17i2089R18i2085gR19r54ghR14oR15R16R17i2090R18i2075gR19jR11:5:2i2r11gR14oR15R16R17i2090R18i2028gR19jR11:5:2i2r11goR3jR4:0:1jR34:3:1d0.5R14oR15R16R17i2096R18i2093gR19r54gR14oR15R16R17i2096R18i2028gR19r415gR14oR15R16R17i2096R18i2017gR19r249goR3jR4:5:3r7oR3jR4:1:1r312R14oR15R16R17i2107R18i2102gR19r54goR3jR4:5:3r257oR3jR4:9:2oR3jR4:1:1r74R14oR15R16R17i2127R18i2110gR19r75gar321hR14oR15R16R17i2129R18i2110gR19r54goR3jR4:9:2oR3jR4:1:1r74R14oR15R16R17i2149R18i2132gR19r75gar273hR14oR15R16R17i2151R18i2132gR19r54gR14oR15R16R17i2151R18i2110gR19r54gR14oR15R16R17i2151R18i2102gR19r54goR3jR4:5:3r7oR3jR4:1:1r213R14oR15R16R17i2244R18i2235gR19r54goR3jR4:1:1r217R14oR15R16R17i2260R18i2247gR19r54gR14oR15R16R17i2260R18i2235gR19r54goR3jR4:5:3r7oR3jR4:1:1r226R14oR15R16R17i2275R18i2266gR19r227goR3jR4:5:3r35oR3jR4:1:1r232R14oR15R16R17i2291R18i2278gR19r233goR3jR4:1:1r237R14oR15R16R17i2308R18i2294gR19r54gR14oR15R16R17i2308R18i2278gR19r233gR14oR15R16R17i2308R18i2266gR19r227ghR14oR15R16R17i2314R18i1861gR19r337gR6r338R58oR6r340R8y16:__init__fragmentR10jR11:13:1aoR1ahR46r337ghR13i-112gR46r337goR1ahR2oR3jR4:4:1aoR3jR4:5:3r7oR3jR4:1:1oR6r10R8R20R10jR11:5:2i4r11R21oR6r10R8y6:outputR10jR11:12:1ar484oR6r10R8R48R10jR11:5:2i4r11R21r486R13i-94goR6r10R8R56R10r54R21r486R13i-95goR6r10R8R23R10jR11:5:2i3r11R21r486R13i-96ghR13i-92gR13i-93gR14oR15R16R17i2359R18i2344gR19r485goR3jR4:1:1r74R14oR15R16R17i2379R18i2362gR19r75gR14oR15R16R17i2379R18i2344gR19r485goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y24:pixelTransformedPositionR10jR11:5:2i3r11R13i-99gR14oR15R16R17i2409R18i2385gR19r504goR3jR4:1:1r30R14oR15R16R17i2431R18i2412gR19r31gR14oR15R16R17i2431R18i2385gR19r504ghR14oR15R16R17i2437R18i2338gR19r337gR6jR57:0:0R58oR6r340R8y6:vertexR10jR11:13:1aoR1ahR46r337ghR13i-113gR46r337goR1ahR2oR3jR4:4:1aoR3jR4:5:3r7oR3jR4:1:1r488R14oR15R16R17i2481R18i2469gR19r489goR3jR4:1:1r199R14oR15R16R17i2494R18i2484gR19r200gR14oR15R16R17i2494R18i2469gR19r489goR3jR4:5:3r7oR3jR4:1:1r490R14oR15R16R17i2512R18i2500gR19r54goR3jR4:1:1r312R14oR15R16R17i2520R18i2515gR19r54gR14oR15R16R17i2520R18i2500gR19r54goR3jR4:5:3r7oR3jR4:1:1r491R14oR15R16R17i2539R18i2526gR19r492goR3jR4:1:1r123R14oR15R16R17i2559R18i2542gR19r124gR14oR15R16R17i2559R18i2526gR19r492ghR14oR15R16R17i2565R18i2463gR19r337gR6jR57:1:0R58oR6r340R8y8:fragmentR10jR11:13:1aoR1ahR46r337ghR13i-114gR46r337ghR8y19:h3d.shader.BaseMeshy4:varsar99r51r19r486r9r30r503r123r74r199r312r248r213r226r204r217r237r232r339r473r515r554hg";
h3d_shader_Blur.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:4:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey8:positiony4:typejy9:hxsl.Type:5:2i4jy12:hxsl.VecType:1:0y6:parentoR6r10R8y6:outputR10jR11:12:1ar9oR6r10R8y5:colorR10jR11:5:2i4r11R13r13y2:idi-257ghR16i-255gR16i-256gy1:poy4:filey82:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FScreenShader.hxy3:maxi262y3:mini247gy1:tr12goR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:40:0R17oR18R19R20i269R21i265gR22jR11:13:1ahgaoR3jR4:1:1oR6jR7:1:0R8R9R10jR11:5:2i2r11R13oR6r30R8y5:inputR10jR11:12:1ar29oR6r30R8y2:uvR10jR11:5:2i2r11R13r32R16i-254ghR16i-252gR16i-253gR17oR18R19R20i284R21i270gR22r31goR3jR4:0:1jy10:hxsl.Const:3:1zR17oR18R19R20i287R21i286gR22jR11:3:0goR3jR4:0:1jR26:3:1i1R17oR18R19R20i290R21i289gR22r43ghR17oR18R19R20i291R21i265gR22jR11:5:2i4r11gR17oR18R19R20i291R21i247gR22r12ghR17oR18R19R20i297R21i241gR22jR11:0:0gR6jy17:hxsl.FunctionKind:0:0y3:refoR6jR7:6:0R8y6:vertexR10jR11:13:1aoR1ahy3:retr55ghR16i-271gR30r55goR1ahR2oR3jR4:4:1aoR3jR4:10:3oR3jR4:1:1oR6jR7:2:0R8y16:isDepthDependantR10jR11:2:0y10:qualifiersajy17:hxsl.VarQualifier:0:1nhR16i-268gR17oR18y74:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FBlur.hxR20i638R21i622gR22r71goR3jR4:4:1aoR3jR4:7:2oR6r10R8y4:pcurR10jR11:5:2i3r11R16i-275goR3jR4:8:2oR3jR4:1:1oR6r58R8y11:getPositionR10jR11:13:1aoR1aoR8R25R10jR11:5:2i2r11ghR30r80ghR16i-274gR17oR18R34R20i670R21i659gR22r89gaoR3jR4:1:1r34R17oR18R34R20i679R21i671gR22r35ghR17oR18R34R20i680R21i659gR22r80gR17oR18R34R20i681R21i648gR22r55goR3jR4:7:2oR6r10R8y4:ccurR10jR11:5:2i4r11R16i-276goR3jR4:8:2oR3jR4:2:1jR23:33:0R17oR18R34R20i705R21i698gR22jR11:13:1aoR1aoR8y1:_R10jR11:10:0goR8R25R10jR11:5:2i2r11ghR30r102ghgaoR3jR4:1:1oR6r70R8y7:textureR10r112R16i-259gR17oR18R34R20i705R21i698gR22r112goR3jR4:1:1r34R17oR18R34R20i718R21i710gR22r35ghR17oR18R34R20i719R21i698gR22r102gR17oR18R34R20i720R21i687gR22r55goR3jR4:7:2oR6r10R8R15R10jR11:5:2i4r11R16i-277goR3jR4:8:2oR3jR4:2:1r22R17oR18R34R20i742R21i738gR22r26gaoR3jR4:0:1jR26:3:1zR17oR18R34R20i744R21i743gR22r43goR3jR4:0:1jR26:3:1zR17oR18R34R20i747R21i746gR22r43goR3jR4:0:1jR26:3:1zR17oR18R34R20i750R21i749gR22r43goR3jR4:0:1jR26:3:1zR17oR18R34R20i753R21i752gR22r43ghR17oR18R34R20i754R21i738gR22r130gR17oR18R34R20i755R21i726gR22r55goR3jR4:7:2oR6r10R8y4:ncurR10jR11:5:2i3r11R16i-278goR3jR4:8:2oR3jR4:2:1jR23:55:0R17oR18R34R20i784R21i772gR22jR11:13:1aoR1aoR8y5:valueR10jR11:5:2i4r11ghR30r158ghgaoR3jR4:8:2oR3jR4:2:1r105R17oR18R34R20i798R21i785gR22jR11:13:1aoR1aoR8R38R10r112gr113hR30r102ghgaoR3jR4:1:1oR6r70R8y13:normalTextureR10r112R16i-270gR17oR18R34R20i798R21i785gR22r112goR3jR4:1:1r34R17oR18R34R20i811R21i803gR22r35ghR17oR18R34R20i812R21i785gR22r102ghR17oR18R34R20i813R21i772gR22r158gR17oR18R34R20i814R21i761gR22r55goR3jR4:20:3y6:unrollahoR3jR4:13:3oR6r10R8y1:iR10jR11:1:0R16i-279goR3jR4:5:3jR5:21:0oR3jR4:5:3jR5:0:0oR3jR4:6:2jy15:haxe.macro.Unop:3:0oR3jR4:1:1oR6r70R8y7:QualityR10r198R32ajR33:0:1nhR16i-261gR17oR18R34R20i846R21i839gR22r198gR17oR18R34R20i846R21i838gR22r198goR3jR4:0:1jR26:2:1i1R17oR18R34R20i853R21i849gR22r198gR17oR18R34R20i853R21i838gR22r198goR3jR4:1:1r206R17oR18R34R20i860R21i853gR22r198gR17oR18R34R20i860R21i838gR22jR11:14:2r198jy13:hxsl.SizeDecl:0:1zgoR3jR4:4:1aoR3jR4:7:2oR6r10R8R25R10jR11:5:2i2r11R16i-280goR3jR4:5:3r202oR3jR4:1:1r34R17oR18R34R20i888R21i880gR22r35goR3jR4:5:3jR5:1:0oR3jR4:1:1oR6r70R8y5:pixelR10jR11:5:2i2r11R16i-264gR17oR18R34R20i896R21i891gR22r239goR3jR4:8:2oR3jR4:2:1jR23:36:0R17oR18R34R20i904R21i899gR22jR11:13:1aoR1aoR8R41R10r198ghR30r43ghgaoR3jR4:1:1r197R17oR18R34R20i906R21i905gR22r198ghR17oR18R34R20i907R21i899gR22r43gR17oR18R34R20i907R21i891gR22r239gR17oR18R34R20i907R21i880gR22r230gR17oR18R34R20i908R21i871gR22r55goR3jR4:7:2oR6r10R8y1:cR10r102R16i-281goR3jR4:8:2oR3jR4:2:1r105R17oR18R34R20i930R21i923gR22jR11:13:1aoR1aoR8R38R10r112gr113hR30r102ghgaoR3jR4:1:1r118R17oR18R34R20i930R21i923gR22r112goR3jR4:1:1r229R17oR18R34R20i937R21i935gR22r230ghR17oR18R34R20i938R21i923gR22r102gR17oR18R34R20i939R21i915gR22r55goR3jR4:7:2oR6r10R8R17R10r80R16i-282goR3jR4:8:2oR3jR4:1:1r83R17oR18R34R20i965R21i954gR22r89gaoR3jR4:1:1r229R17oR18R34R20i968R21i966gR22r230ghR17oR18R34R20i969R21i954gR22r80gR17oR18R34R20i970R21i946gR22r55goR3jR4:7:2oR6r10R8y1:dR10r43R16i-283goR3jR4:8:2oR3jR4:2:1jR23:29:0R17oR18R34R20i995R21i985gR22jR11:13:1aoR1aoR8R38R10jR11:5:2i3r11goR8y1:bR10jR11:5:2i3r11ghR30r43ghgaoR3jR4:3:1oR3jR4:5:3jR5:3:0oR3jR4:1:1r287R17oR18R34R20i987R21i986gR22r80goR3jR4:1:1r79R17oR18R34R20i994R21i990gR22r80gR17oR18R34R20i994R21i986gR22r311gR17oR18R34R20i995R21i985gR22r311goR3jR4:5:3r318oR3jR4:1:1r287R17oR18R34R20i1001R21i1000gR22r80goR3jR4:1:1r79R17oR18R34R20i1008R21i1004gR22r80gR17oR18R34R20i1008R21i1000gR22jR11:5:2i3r11ghR17oR18R34R20i1009R21i985gR22r43gR17oR18R34R20i1010R21i977gR22r55goR3jR4:7:2oR6r10R8y1:nR10r158R16i-284goR3jR4:8:2oR3jR4:2:1r161R17oR18R34R20i1037R21i1025gR22r169gaoR3jR4:8:2oR3jR4:2:1r105R17oR18R34R20i1051R21i1038gR22jR11:13:1aoR1aoR8R38R10r112gr113hR30r102ghgaoR3jR4:1:1r182R17oR18R34R20i1051R21i1038gR22r112goR3jR4:1:1r229R17oR18R34R20i1058R21i1056gR22r230ghR17oR18R34R20i1059R21i1038gR22r102ghR17oR18R34R20i1060R21i1025gR22r158gR17oR18R34R20i1061R21i1017gR22r55goR3jR4:5:3r7oR3jR4:1:1r265R17oR18R34R20i1071R21i1070gR22r102goR3jR4:8:2oR3jR4:2:1jR23:24:0R17oR18R34R20i1077R21i1074gR22jR11:13:1aoR1aoR8y1:xR10r102goR8y1:yR10r102goR8y1:aR10r43ghR30r102ghgaoR3jR4:1:1r101R17oR18R34R20i1082R21i1078gR22r102goR3jR4:1:1r265R17oR18R34R20i1085R21i1084gR22r102goR3jR4:8:2oR3jR4:2:1r304R17oR18R34R20i1091R21i1087gR22jR11:13:1aoR1aoR8R38R10r158gr312hR30r43ghgaoR3jR4:1:1r157R17oR18R34R20i1091R21i1087gR22r158goR3jR4:1:1r344R17oR18R34R20i1097R21i1096gR22r158ghR17oR18R34R20i1098R21i1087gR22r43ghR17oR18R34R20i1099R21i1074gR22r102gR17oR18R34R20i1099R21i1070gR22r102goR3jR4:5:3r7oR3jR4:1:1r265R17oR18R34R20i1108R21i1107gR22r102goR3jR4:8:2oR3jR4:2:1r378R17oR18R34R20i1114R21i1111gR22jR11:13:1ar382hgaoR3jR4:1:1r265R17oR18R34R20i1116R21i1115gR22r102goR3jR4:1:1r101R17oR18R34R20i1122R21i1118gR22r102goR3jR4:8:2oR3jR4:2:1jR23:21:0R17oR18R34R20i1154R21i1124gR22jR11:13:1aoR1aoR8R38R10r43goR8R51R10r43ghR30r43ghgaoR3jR4:3:1oR3jR4:5:3r236oR3jR4:8:2oR3jR4:2:1jR23:22:0R17oR18R34R20i1136R21i1125gR22jR11:13:1aoR1aoR8R38R10r43gr443hR30r43ghgaoR3jR4:3:1oR3jR4:5:3r318oR3jR4:1:1r301R17oR18R34R20i1127R21i1126gR22r43goR3jR4:0:1jR26:3:1d0.001R17oR18R34R20i1135R21i1130gR22r43gR17oR18R34R20i1135R21i1126gR22r43gR17oR18R34R20i1136R21i1125gR22r43goR3jR4:0:1jR26:3:1d0R17oR18R34R20i1143R21i1141gR22r43ghR17oR18R34R20i1144R21i1125gR22r43goR3jR4:0:1jR26:3:1i100000R17oR18R34R20i1153R21i1147gR22r43gR17oR18R34R20i1153R21i1125gR22r43gR17oR18R34R20i1154R21i1124gR22r43goR3jR4:0:1jR26:3:1d1R17oR18R34R20i1161R21i1159gR22r43ghR17oR18R34R20i1162R21i1124gR22r43ghR17oR18R34R20i1163R21i1111gR22r102gR17oR18R34R20i1163R21i1107gR22r102goR3jR4:5:3jR5:20:1r202oR3jR4:1:1r129R17oR18R34R20i1176R21i1171gR22r130goR3jR4:5:3r236oR3jR4:1:1r265R17oR18R34R20i1181R21i1180gR22r102goR3jR4:16:2oR3jR4:1:1oR6r70R8y6:valuesR10jR11:14:2r43jR47:1:1r206R16i-263gR17oR18R34R20i1190R21i1184gR22r509goR3jR4:10:3oR3jR4:5:3jR5:9:0oR3jR4:1:1r197R17oR18R34R20i1192R21i1191gR22r198goR3jR4:0:1jR26:2:1zR17oR18R34R20i1196R21i1195gR22r198gR17oR18R34R20i1196R21i1191gR22r71goR3jR4:6:2r204oR3jR4:1:1r197R17oR18R34R20i1201R21i1200gR22r198gR17oR18R34R20i1201R21i1199gR22r198goR3jR4:1:1r197R17oR18R34R20i1205R21i1204gR22r198gR17oR18R34R20i1205R21i1191gR22r198gR17oR18R34R20i1206R21i1184gR22r43gR17oR18R34R20i1206R21i1180gR22r102gR17oR18R34R20i1206R21i1171gR22r130ghR17oR18R34R20i1214R21i863gR22r55gR17oR18R34R20i1214R21i828gR22r55gR17oR18R34R20i1214R21i821gR22r55goR3jR4:5:3r7oR3jR4:1:1r15R17oR18R34R20i1232R21i1220gR22r16goR3jR4:1:1r129R17oR18R34R20i1240R21i1235gR22r130gR17oR18R34R20i1240R21i1220gR22r16ghR17oR18R34R20i1247R21i641gR22r55goR3jR4:10:3oR3jR4:1:1oR6r70R8y7:isDepthR10r71R32ajR33:0:1nhR16i-262gR17oR18R34R20i1268R21i1261gR22r71goR3jR4:4:1aoR3jR4:7:2oR6r10R8y3:valR10r43R16i-285goR3jR4:0:1jR26:3:1d0R17oR18R34R20i1290R21i1288gR22r43gR17oR18R34R20i1291R21i1278gR22r55goR3jR4:20:3R43ahoR3jR4:13:3oR6r10R8R44R10r198R16i-286goR3jR4:5:3r200oR3jR4:5:3r202oR3jR4:6:2r204oR3jR4:1:1r206R17oR18R34R20i1323R21i1316gR22r198gR17oR18R34R20i1323R21i1315gR22r198goR3jR4:0:1jR26:2:1i1R17oR18R34R20i1330R21i1326gR22r198gR17oR18R34R20i1330R21i1315gR22r198goR3jR4:1:1r206R17oR18R34R20i1337R21i1330gR22r198gR17oR18R34R20i1337R21i1315gR22jR11:14:2r198jR47:0:1zgoR3jR4:5:3jR5:20:1r202oR3jR4:1:1r568R17oR18R34R20i1349R21i1346gR22r43goR3jR4:5:3r236oR3jR4:8:2oR3jR4:2:1jR23:53:0R17oR18R34R20i1359R21i1353gR22jR11:13:1aoR1aoR8R41R10jR11:5:2i4r11ghR30r43ghgaoR3jR4:8:2oR3jR4:2:1r105R17oR18R34R20i1367R21i1360gR22jR11:13:1aoR1aoR8R38R10r112gr113hR30r102ghgaoR3jR4:1:1r118R17oR18R34R20i1367R21i1360gR22r112goR3jR4:5:3r202oR3jR4:1:1r34R17oR18R34R20i1380R21i1372gR22r35goR3jR4:5:3r236oR3jR4:1:1r238R17oR18R34R20i1388R21i1383gR22r239goR3jR4:8:2oR3jR4:2:1r244R17oR18R34R20i1396R21i1391gR22jR11:13:1ar248hgaoR3jR4:1:1r578R17oR18R34R20i1398R21i1397gR22r198ghR17oR18R34R20i1399R21i1391gR22r43gR17oR18R34R20i1399R21i1383gR22r239gR17oR18R34R20i1399R21i1372gR22jR11:5:2i2r11ghR17oR18R34R20i1400R21i1360gR22r102ghR17oR18R34R20i1401R21i1353gR22r43goR3jR4:16:2oR3jR4:1:1r507R17oR18R34R20i1410R21i1404gR22r509goR3jR4:10:3oR3jR4:5:3r514oR3jR4:1:1r578R17oR18R34R20i1412R21i1411gR22r198goR3jR4:0:1jR26:2:1zR17oR18R34R20i1416R21i1415gR22r198gR17oR18R34R20i1416R21i1411gR22r71goR3jR4:6:2r204oR3jR4:1:1r578R17oR18R34R20i1421R21i1420gR22r198gR17oR18R34R20i1421R21i1419gR22r198goR3jR4:1:1r578R17oR18R34R20i1425R21i1424gR22r198gR17oR18R34R20i1425R21i1411gR22r198gR17oR18R34R20i1426R21i1404gR22r43gR17oR18R34R20i1426R21i1353gR22r43gR17oR18R34R20i1426R21i1346gR22r43gR17oR18R34R20i1426R21i1305gR22r55gR17oR18R34R20i1426R21i1298gR22r55goR3jR4:5:3r7oR3jR4:1:1r15R17oR18R34R20i1445R21i1433gR22r16goR3jR4:8:2oR3jR4:2:1jR23:52:0R17oR18R34R20i1452R21i1448gR22jR11:13:1aoR1aoR8R41R10r43ghR30jR11:5:2i4r11ghgaoR3jR4:8:2oR3jR4:2:1r436R17oR18R34R20i1456R21i1453gR22jR11:13:1aoR1aoR8R38R10r43gr443hR30r43ghgaoR3jR4:1:1r568R17oR18R34R20i1456R21i1453gR22r43goR3jR4:0:1jR26:3:1d0.9999999R17oR18R34R20i1470R21i1461gR22r43ghR17oR18R34R20i1471R21i1453gR22r43ghR17oR18R34R20i1472R21i1448gR22r709gR17oR18R34R20i1472R21i1433gR22r16ghR17oR18R34R20i1479R21i1271gR22r55goR3jR4:4:1aoR3jR4:7:2oR6r10R8R15R10jR11:5:2i4r11R16i-287goR3jR4:8:2oR3jR4:2:1r22R17oR18R34R20i1508R21i1504gR22r26gaoR3jR4:0:1jR26:3:1zR17oR18R34R20i1510R21i1509gR22r43goR3jR4:0:1jR26:3:1zR17oR18R34R20i1513R21i1512gR22r43goR3jR4:0:1jR26:3:1zR17oR18R34R20i1516R21i1515gR22r43goR3jR4:0:1jR26:3:1zR17oR18R34R20i1519R21i1518gR22r43ghR17oR18R34R20i1520R21i1504gR22r741gR17oR18R34R20i1521R21i1492gR22r55goR3jR4:20:3R43ahoR3jR4:13:3oR6r10R8R44R10r198R16i-288goR3jR4:5:3r200oR3jR4:5:3r202oR3jR4:6:2r204oR3jR4:1:1r206R17oR18R34R20i1553R21i1546gR22r198gR17oR18R34R20i1553R21i1545gR22r198goR3jR4:0:1jR26:2:1i1R17oR18R34R20i1560R21i1556gR22r198gR17oR18R34R20i1560R21i1545gR22r198goR3jR4:1:1r206R17oR18R34R20i1567R21i1560gR22r198gR17oR18R34R20i1567R21i1545gR22jR11:14:2r198jR47:0:1zgoR3jR4:5:3jR5:20:1r202oR3jR4:1:1r740R17oR18R34R20i1581R21i1576gR22r741goR3jR4:5:3r236oR3jR4:8:2oR3jR4:2:1r105R17oR18R34R20i1592R21i1585gR22jR11:13:1aoR1aoR8R38R10r112gr113hR30r102ghgaoR3jR4:1:1r118R17oR18R34R20i1592R21i1585gR22r112goR3jR4:5:3r202oR3jR4:1:1r34R17oR18R34R20i1605R21i1597gR22r35goR3jR4:5:3r236oR3jR4:1:1r238R17oR18R34R20i1613R21i1608gR22r239goR3jR4:8:2oR3jR4:2:1r244R17oR18R34R20i1621R21i1616gR22jR11:13:1ar248hgaoR3jR4:1:1r770R17oR18R34R20i1623R21i1622gR22r198ghR17oR18R34R20i1624R21i1616gR22r43gR17oR18R34R20i1624R21i1608gR22r239gR17oR18R34R20i1624R21i1597gR22jR11:5:2i2r11ghR17oR18R34R20i1625R21i1585gR22r102goR3jR4:16:2oR3jR4:1:1r507R17oR18R34R20i1634R21i1628gR22r509goR3jR4:10:3oR3jR4:5:3r514oR3jR4:1:1r770R17oR18R34R20i1636R21i1635gR22r198goR3jR4:0:1jR26:2:1zR17oR18R34R20i1640R21i1639gR22r198gR17oR18R34R20i1640R21i1635gR22r71goR3jR4:6:2r204oR3jR4:1:1r770R17oR18R34R20i1645R21i1644gR22r198gR17oR18R34R20i1645R21i1643gR22r198goR3jR4:1:1r770R17oR18R34R20i1649R21i1648gR22r198gR17oR18R34R20i1649R21i1635gR22r198gR17oR18R34R20i1650R21i1628gR22r43gR17oR18R34R20i1650R21i1585gR22r102gR17oR18R34R20i1650R21i1576gR22r741gR17oR18R34R20i1650R21i1535gR22r55gR17oR18R34R20i1650R21i1528gR22r55goR3jR4:5:3r7oR3jR4:1:1r15R17oR18R34R20i1669R21i1657gR22r16goR3jR4:1:1r740R17oR18R34R20i1677R21i1672gR22r741gR17oR18R34R20i1677R21i1657gR22r16ghR17oR18R34R20i1684R21i1485gR22r55gR17oR18R34R20i1684R21i1257gR22r55gR17oR18R34R20i1684R21i618gR22r55goR3jR4:10:3oR3jR4:1:1oR6r70R8y13:hasFixedColorR10r71R32ajR33:0:1nhR16i-265gR17oR18R34R20i1706R21i1693gR22r71goR3jR4:4:1aoR3jR4:5:3r7oR3jR4:9:2oR3jR4:1:1r15R17oR18R34R20i1728R21i1716gR22r16gajy14:hxsl.Component:0:0jR60:1:0jR60:2:0hR17oR18R34R20i1732R21i1716gR22jR11:5:2i3r11goR3jR4:9:2oR3jR4:1:1oR6r70R8y10:fixedColorR10jR11:5:2i4r11R16i-267gR17oR18R34R20i1745R21i1735gR22r913gar904r905r906hR17oR18R34R20i1749R21i1735gR22jR11:5:2i3r11gR17oR18R34R20i1749R21i1716gR22r909goR3jR4:10:3oR3jR4:1:1oR6r70R8y16:smoothFixedColorR10r71R32ajR33:0:1nhR16i-266gR17oR18R34R20i1776R21i1760gR22r71goR3jR4:5:3jR5:20:1r236oR3jR4:9:2oR3jR4:1:1r15R17oR18R34R20i1797R21i1785gR22r16gajR60:3:0hR17oR18R34R20i1799R21i1785gR22r43goR3jR4:9:2oR3jR4:1:1r912R17oR18R34R20i1813R21i1803gR22r913gar936hR17oR18R34R20i1815R21i1803gR22r43gR17oR18R34R20i1815R21i1785gR22r43goR3jR4:5:3r7oR3jR4:9:2oR3jR4:1:1r15R17oR18R34R20i1845R21i1833gR22r16gar936hR17oR18R34R20i1847R21i1833gR22r43goR3jR4:5:3r236oR3jR4:9:2oR3jR4:1:1r912R17oR18R34R20i1860R21i1850gR22r913gar936hR17oR18R34R20i1862R21i1850gR22r43goR3jR4:8:2oR3jR4:2:1r244R17oR18R34R20i1870R21i1865gR22jR11:13:1aoR1aoR8R41R10r71ghR30r43ghgaoR3jR4:5:3jR5:7:0oR3jR4:9:2oR3jR4:1:1r15R17oR18R34R20i1883R21i1871gR22r16gar936hR17oR18R34R20i1885R21i1871gR22r43goR3jR4:0:1jR26:3:1zR17oR18R34R20i1889R21i1888gR22r43gR17oR18R34R20i1889R21i1871gR22r71ghR17oR18R34R20i1890R21i1865gR22r43gR17oR18R34R20i1890R21i1850gR22r43gR17oR18R34R20i1890R21i1833gR22r43gR17oR18R34R20i1890R21i1756gR22r55ghR17oR18R34R20i1897R21i1709gR22r55gnR17oR18R34R20i1897R21i1689gR22r55ghR17oR18R34R20i1902R21i612gR22r55gR6jR27:1:0R28oR6r58R8y8:fragmentR10jR11:13:1aoR1ahR30r55ghR16i-272gR30r55goR1aoR6r10R8R25R10r88R16i-273ghR2oR3jR4:4:1aoR3jR4:7:2oR6r10R8y5:depthR10r43R16i-289goR3jR4:8:2oR3jR4:2:1r608R17oR18R34R20i1973R21i1967gR22r616gaoR3jR4:8:2oR3jR4:2:1r105R17oR18R34R20i1986R21i1974gR22jR11:13:1aoR1aoR8R38R10r112gr113hR30r102ghgaoR3jR4:1:1oR6r70R8y12:depthTextureR10r112R16i-260gR17oR18R34R20i1986R21i1974gR22r112goR3jR4:1:1r1011R17oR18R34R20i1993R21i1991gR22r88ghR17oR18R34R20i1994R21i1974gR22r102ghR17oR18R34R20i1995R21i1967gR22r43gR17oR18R34R20i1996R21i1955gR22r55goR3jR4:7:2oR6r10R8y3:uv2R10jR11:5:2i2r11R16i-290goR3jR4:5:3r236oR3jR4:3:1oR3jR4:5:3r318oR3jR4:1:1r1011R17oR18R34R20i2014R21i2012gR22r88goR3jR4:0:1jR26:3:1d0.5R17oR18R34R20i2020R21i2017gR22r43gR17oR18R34R20i2020R21i2012gR22r88gR17oR18R34R20i2021R21i2011gR22r88goR3jR4:8:2oR3jR4:2:1jR23:38:0R17oR18R34R20i2028R21i2024gR22jR11:13:1ahgaoR3jR4:0:1jR26:3:1i2R17oR18R34R20i2030R21i2029gR22r43goR3jR4:0:1jR26:3:1i-2R17oR18R34R20i2034R21i2032gR22r43ghR17oR18R34R20i2035R21i2024gR22jR11:5:2i2r11gR17oR18R34R20i2035R21i2011gR22r1046gR17oR18R34R20i2036R21i2001gR22r55goR3jR4:7:2oR6r10R8y4:tempR10r102R16i-291goR3jR4:5:3r236oR3jR4:8:2oR3jR4:2:1r22R17oR18R34R20i2056R21i2052gR22r26gaoR3jR4:1:1r1045R17oR18R34R20i2060R21i2057gR22r1046goR3jR4:1:1r1015R17oR18R34R20i2067R21i2062gR22r43goR3jR4:0:1jR26:3:1i1R17oR18R34R20i2070R21i2069gR22r43ghR17oR18R34R20i2071R21i2052gR22jR11:5:2i4r11goR3jR4:1:1oR6r70R8y21:cameraInverseViewProjR10jR11:7:0R16i-258gR17oR18R34R20i2095R21i2074gR22r1107gR17oR18R34R20i2095R21i2052gR22r102gR17oR18R34R20i2096R21i2041gR22r55goR3jR4:7:2oR6r10R8y8:originWSR10jR11:5:2i3r11R16i-292goR3jR4:5:3jR5:2:0oR3jR4:9:2oR3jR4:1:1r1085R17oR18R34R20i2120R21i2116gR22r102gar904r905r906hR17oR18R34R20i2124R21i2116gR22r1116goR3jR4:9:2oR3jR4:1:1r1085R17oR18R34R20i2131R21i2127gR22r102gar936hR17oR18R34R20i2133R21i2127gR22r43gR17oR18R34R20i2133R21i2116gR22r1116gR17oR18R34R20i2134R21i2101gR22r55goR3jR4:12:1oR3jR4:1:1r1115R17oR18R34R20i2154R21i2146gR22r1116gR17oR18R34R20i2154R21i2139gR22r55ghR17oR18R34R20i2160R21i1949gR22r55gR6jR27:3:0R28r83R30r80ghR8y15:h3d.shader.Blury4:varsar32r13r1106r118r1032r206r560r507r238r891r924r912r69oR6r70R8y9:hasNormalR10r71R32ajR33:0:1nhR16i-269gr182r57r1004r83hg";
h3d_shader_ColorAdd.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:20:1jR5:0:0oR3jR4:9:2oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey10:pixelColory4:typejy9:hxsl.Type:5:2i4jy12:hxsl.VecType:1:0y2:idi-306gy1:poy4:filey78:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FColorAdd.hxy3:maxi180y3:mini170gy1:tr14gajy14:hxsl.Component:0:0jR20:1:0jR20:2:0hR14oR15R16R17i184R18i170gR19jR11:5:2i3r13goR3jR4:1:1oR6jR7:2:0R8y5:colorR10jR11:5:2i3r13R13i-307gR14oR15R16R17i193R18i188gR19r27gR14oR15R16R17i193R18i170gR19r23ghR14oR15R16R17i199R18i164gR19jR11:0:0gR6jy17:hxsl.FunctionKind:1:0y3:refoR6jR7:6:0R8y8:fragmentR10jR11:13:1aoR1ahy3:retr34ghR13i-308gR25r34ghR8y19:h3d.shader.ColorAddy4:varsar11r25r36hg";
h3d_shader_ColorKey.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:7:2oy4:kindjy12:hxsl.VarKind:4:0y4:namey5:cdiffy4:typejy9:hxsl.Type:5:2i4jy12:hxsl.VecType:1:0y2:idi-312goR3jR4:5:3jy16:haxe.macro.Binop:3:0oR3jR4:1:1oR5r8R7y12:textureColorR9jR10:5:2i4r9R12i-310gy1:poy4:filey78:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FColorKey.hxy3:maxi197y3:mini185gy1:tr15goR3jR4:1:1oR5jR6:2:0R7y8:colorKeyR9jR10:5:2i4r9R12i-309gR15oR16R17R18i208R19i200gR20r21gR15oR16R17R18i208R19i185gR20r10gR15oR16R17R18i209R19i173gR20jR10:0:0goR3jR4:10:3oR3jR4:5:3jR13:9:0oR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:29:0R15oR16R17R18i223R19i218gR20jR10:13:1aoR1aoR7y1:_R9r10goR7y1:bR9jR10:5:2i4r9ghy3:retjR10:3:0ghgaoR3jR4:1:1r7R15oR16R17R18i223R19i218gR20r10goR3jR4:1:1r7R15oR16R17R18i233R19i228gR20r10ghR15oR16R17R18i234R19i218gR20r43goR3jR4:0:1jy10:hxsl.Const:3:1d1e-05R15oR16R17R18i244R19i237gR20r43gR15oR16R17R18i244R19i218gR20jR10:2:0goR3jR4:11:0R15oR16R17R18i254R19i247gR20r28gnR15oR16R17R18i254R19i214gR20r28ghR15oR16R17R18i260R19i167gR20r28gR5jy17:hxsl.FunctionKind:1:0y3:refoR5jR6:6:0R7y8:fragmentR9jR10:13:1aoR1ahR25r28ghR12i-311gR25r28ghR7y19:h3d.shader.ColorKeyy4:varsar19r14r69hg";
h3d_shader_ColorMatrix.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:4:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey10:pixelColory4:typejy9:hxsl.Type:5:2i4jy12:hxsl.VecType:1:0y2:idi-313gy1:poy4:filey81:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FColorMatrix.hxy3:maxi184y3:mini174gy1:tr12goR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:40:0R14oR15R16R17i191R18i187gR19jR11:13:1ahgaoR3jR4:9:2oR3jR4:3:1oR3jR4:5:3jR5:1:0oR3jR4:8:2oR3jR4:2:1r17R14oR15R16R17i198R18i194gR19r21gaoR3jR4:9:2oR3jR4:1:1r9R14oR15R16R17i209R18i199gR19r12gajy14:hxsl.Component:0:0jR21:1:0jR21:2:0hR14oR15R16R17i213R18i199gR19jR11:5:2i3r11goR3jR4:0:1jy10:hxsl.Const:3:1d1R14oR15R16R17i216R18i214gR19jR11:3:0ghR14oR15R16R17i217R18i194gR19jR11:5:2i4r11goR3jR4:1:1oR6jR7:2:0R8y6:matrixR10jR11:7:0R13i-314gR14oR15R16R17i226R18i220gR19r54gR14oR15R16R17i226R18i194gR19jR11:5:2i4r11gR14oR15R16R17i227R18i193gR19r59gar37r38r39hR14oR15R16R17i231R18i193gR19jR11:5:2i3r11goR3jR4:9:2oR3jR4:3:1oR3jR4:5:3r26oR3jR4:1:1r9R14oR15R16R17i244R18i234gR19r12goR3jR4:1:1r52R14oR15R16R17i253R18i247gR19r54gR14oR15R16R17i253R18i234gR19r59gR14oR15R16R17i254R18i233gR19r59gajR21:3:0hR14oR15R16R17i256R18i233gR19r47ghR14oR15R16R17i257R18i187gR19jR11:5:2i4r11gR14oR15R16R17i257R18i174gR19r12ghR14oR15R16R17i263R18i168gR19jR11:0:0gR6jy17:hxsl.FunctionKind:1:0y3:refoR6jR7:6:0R8y8:fragmentR10jR11:13:1aoR1ahy3:retr90ghR13i-315gR27r90ghR8y22:h3d.shader.ColorMatrixy4:varsar9r52r92hg";
h3d_shader_DirLight.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:7:2oy4:kindjy12:hxsl.VarKind:4:0y4:namey4:diffy4:typejy9:hxsl.Type:3:0y2:idi-54goR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:22:0y1:poy4:filey78:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FDirLight.hxy3:maxi501y3:mini468gy1:tjR10:13:1aoR1aoR7y1:_R9r9goR7y1:bR9r9ghy3:retr9ghgaoR3jR4:8:2oR3jR4:2:1jR12:29:0R13oR14R15R16i485R17i468gR18jR10:13:1aoR1aoR7R19R9jR10:5:2i3jy12:hxsl.VecType:1:0goR7R20R9jR10:5:2i3r31ghR21r9ghgaoR3jR4:1:1oR5r8R7y17:transformedNormalR9r32R11i-47gR13oR14R15R16i485R17i468gR18r32goR3jR4:6:2jy15:haxe.macro.Unop:3:0oR3jR4:1:1oR5jR6:2:0R7y9:directionR9jR10:5:2i3r31R11i-41gR13oR14R15R16i500R17i491gR18r46gR13oR14R15R16i500R17i490gR18r46ghR13oR14R15R16i501R17i468gR18r9goR3jR4:0:1jy10:hxsl.Const:3:1d0R13oR14R15R16i508R17i506gR18r9ghR13oR14R15R16i509R17i468gR18r9gR13oR14R15R16i510R17i457gR18jR10:0:0goR3jR4:10:3oR3jR4:6:2jR24:2:0oR3jR4:1:1oR5r45R7y14:enableSpecularR9jR10:2:0y10:qualifiersajy17:hxsl.VarQualifier:0:1nhR11i-42gR13oR14R15R16i534R17i520gR18r67gR13oR14R15R16i534R17i519gR18r67goR3jR4:12:1oR3jR4:5:3jy16:haxe.macro.Binop:1:0oR3jR4:1:1oR5r45R7y5:colorR9jR10:5:2i3r31R11i-40gR13oR14R15R16i554R17i549gR18r79goR3jR4:1:1r7R13oR14R15R16i561R17i557gR18r9gR13oR14R15R16i561R17i549gR18r79gR13oR14R15R16i561R17i542gR18r61gnR13oR14R15R16i561R17i515gR18r61goR3jR4:7:2oR5r8R7y1:rR9r34R11i-55goR3jR4:8:2oR3jR4:2:1jR12:31:0R13oR14R15R16i612R17i575gR18jR10:13:1aoR1aoR7R19R9r34ghR21r34ghgaoR3jR4:8:2oR3jR4:2:1jR12:32:0R13oR14R15R16i582R17i575gR18jR10:13:1aoR1aoR7y1:aR9r34goR7R20R9r34ghR21r34ghgaoR3jR4:1:1r44R13oR14R15R16i592R17i583gR18r46goR3jR4:1:1r38R13oR14R15R16i611R17i594gR18r32ghR13oR14R15R16i612R17i575gR18r34ghR13oR14R15R16i624R17i575gR18r34gR13oR14R15R16i625R17i567gR18r61goR3jR4:7:2oR5r8R7y9:specValueR9r9R11i-56goR3jR4:8:2oR3jR4:2:1r12R13oR14R15R16i704R17i646gR18jR10:13:1aoR1aoR7R19R9r9gr19hR21r9ghgaoR3jR4:8:2oR3jR4:2:1r24R13oR14R15R16i647R17i646gR18jR10:13:1aoR1aoR7R19R9r34gr33hR21r9ghgaoR3jR4:1:1r92R13oR14R15R16i647R17i646gR18r34goR3jR4:8:2oR3jR4:2:1r95R13oR14R15R16i691R17i652gR18jR10:13:1aoR1aoR7R19R9jR10:5:2i3r31ghR21r34ghgaoR3jR4:3:1oR3jR4:5:3jR30:3:0oR3jR4:1:1oR5jR6:0:0R7y8:positionR9jR10:5:2i3r31y6:parentoR5r169R7y6:cameraR9jR10:12:1ar168hR11i-43gR11i-44gR13oR14R15R16i668R17i653gR18r170goR3jR4:1:1oR5r8R7y19:transformedPositionR9jR10:5:2i3r31R11i-48gR13oR14R15R16i690R17i671gR18r178gR13oR14R15R16i690R17i653gR18r161gR13oR14R15R16i691R17i652gR18r161ghR13oR14R15R16i703R17i652gR18r34ghR13oR14R15R16i704R17i646gR18r9goR3jR4:0:1jR26:3:1d0R13oR14R15R16i711R17i709gR18r9ghR13oR14R15R16i712R17i646gR18r9gR13oR14R15R16i713R17i630gR18r61goR3jR4:12:1oR3jR4:5:3r76oR3jR4:1:1r78R13oR14R15R16i730R17i725gR18r79goR3jR4:3:1oR3jR4:5:3jR30:0:0oR3jR4:1:1r7R13oR14R15R16i738R17i734gR18r9goR3jR4:5:3r76oR3jR4:1:1oR5r8R7y9:specColorR9jR10:5:2i3r31R11i-50gR13oR14R15R16i750R17i741gR18r211goR3jR4:8:2oR3jR4:2:1jR12:8:0R13oR14R15R16i756R17i753gR18jR10:13:1aoR1aoR7R33R9r9gr19hR21r9ghgaoR3jR4:1:1r129R13oR14R15R16i766R17i757gR18r9goR3jR4:1:1oR5r8R7y9:specPowerR9r9R11i-49gR13oR14R15R16i777R17i768gR18r9ghR13oR14R15R16i778R17i753gR18r9gR13oR14R15R16i778R17i741gR18r211gR13oR14R15R16i778R17i734gR18r211gR13oR14R15R16i779R17i733gR18r211gR13oR14R15R16i779R17i725gR18jR10:5:2i3r31gR13oR14R15R16i779R17i718gR18r61ghR13oR14R15R16i785R17i451gR18r61gR5jy17:hxsl.FunctionKind:3:0y3:refoR5jR6:6:0R7y12:calcLightingR9jR10:13:1aoR1ahR21jR10:5:2i3r31ghR11i-51gR21r253goR1ahR2oR3jR4:4:1aoR3jR4:5:3jR30:20:1r204oR3jR4:9:2oR3jR4:1:1oR5r8R7y10:lightColorR9jR10:5:2i3r31R11i-45gR13oR14R15R16i825R17i815gR18r264gajy14:hxsl.Component:0:0jR45:1:0jR45:2:0hR13oR14R15R16i829R17i815gR18jR10:5:2i3r31goR3jR4:8:2oR3jR4:1:1r248R13oR14R15R16i845R17i833gR18r254gahR13oR14R15R16i847R17i833gR18r253gR13oR14R15R16i847R17i815gR18r273ghR13oR14R15R16i853R17i809gR18r61gR5jR41:0:0R42oR5r249R7y6:vertexR9jR10:13:1aoR1ahR21r61ghR11i-52gR21r61goR1ahR2oR3jR4:4:1aoR3jR4:5:3jR30:20:1r204oR3jR4:9:2oR3jR4:1:1oR5r8R7y15:lightPixelColorR9jR10:5:2i3r31R11i-46gR13oR14R15R16i900R17i885gR18r300gar268r269r270hR13oR14R15R16i904R17i885gR18jR10:5:2i3r31goR3jR4:8:2oR3jR4:1:1r248R13oR14R15R16i920R17i908gR18r254gahR13oR14R15R16i922R17i908gR18r253gR13oR14R15R16i922R17i885gR18r306ghR13oR14R15R16i928R17i879gR18r61gR5jR41:1:0R42oR5r249R7y8:fragmentR9jR10:13:1aoR1ahR21r61ghR11i-53gR21r61ghR7y19:h3d.shader.DirLighty4:varsar78r44r66r171r263r299r38r177r229r210r248r286r319hg";
h3d_shader_LineShader.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:4:1aoR3jR4:7:2oy4:kindjy12:hxsl.VarKind:4:0y4:namey3:diry4:typejy9:hxsl.Type:5:2i3jy12:hxsl.VecType:1:0y2:idi-136goR3jR4:5:3jy16:haxe.macro.Binop:1:0oR3jR4:1:1oR5jR6:1:0R7y6:normalR9jR10:5:2i3r11y6:parentoR5r17R7y5:inputR9jR10:12:1aoR5r17R7y8:positionR9jR10:5:2i3r11R15r19R12i-123gr16oR5r17R7y2:uvR9jR10:5:2i2r11R15r19R12i-125ghR12i-122gR12i-124gy1:poy4:filey80:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FLineShader.hxy3:maxi683y3:mini671gy1:tr18goR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:48:0R19oR20R21R22i702R23i686gR24jR10:13:1ahgaoR3jR4:1:1oR5jR6:0:0R7y9:modelViewR9jR10:7:0R15oR5r38R7y6:globalR9jR10:12:1aoR5r38R7y9:pixelSizeR9jR10:5:2i2r11R15r40R12i-120gr37hR12i-119gy10:qualifiersajy17:hxsl.VarQualifier:3:0hR12i-121gR19oR20R21R22i702R23i686gR24r39ghR19oR20R21R22i709R23i686gR24jR10:6:0gR19oR20R21R22i709R23i671gR24r12gR19oR20R21R22i710R23i661gR24jR10:0:0goR3jR4:5:3jR13:4:0oR3jR4:1:1oR5r10R7y4:pdirR9jR10:5:2i4r11R12i-133gR19oR20R21R22i734R23i730gR24r61goR3jR4:5:3r14oR3jR4:8:2oR3jR4:2:1jR25:40:0R19oR20R21R22i741R23i737gR24jR10:13:1ahgaoR3jR4:5:3r14oR3jR4:1:1r9R19oR20R21R22i745R23i742gR24r12goR3jR4:8:2oR3jR4:2:1r30R19oR20R21R22i752R23i748gR24jR10:13:1ahgaoR3jR4:1:1oR5r38R7y4:viewR9r39R15oR5r38R7y6:cameraR9jR10:12:1ar85oR5r38R7y4:projR9r39R15r86R12i-117goR5r38R7y8:viewProjR9r39R15r86R12i-118ghR12i-115gR12i-116gR19oR20R21R22i764R23i753gR24r39ghR19oR20R21R22i765R23i748gR24r51gR19oR20R21R22i765R23i742gR24r12goR3jR4:0:1jy10:hxsl.Const:3:1i1R19oR20R21R22i768R23i767gR24jR10:3:0ghR19oR20R21R22i769R23i737gR24jR10:5:2i4r11goR3jR4:1:1r88R19oR20R21R22i783R23i772gR24r39gR19oR20R21R22i783R23i737gR24jR10:5:2i4r11gR19oR20R21R22i783R23i730gR24r61goR3jR4:5:3jR13:20:1r14oR3jR4:9:2oR3jR4:1:1r60R19oR20R21R22i794R23i790gR24r61gajy14:hxsl.Component:0:0jR37:1:0hR19oR20R21R22i797R23i790gR24jR10:5:2i2r11goR3jR4:5:3jR13:2:0oR3jR4:0:1jR36:3:1i1R19oR20R21R22i802R23i801gR24r101goR3jR4:8:2oR3jR4:2:1jR25:13:0R19oR20R21R22i809R23i805gR24jR10:13:1aoR1aoR7y5:valueR9r101ghy3:retr101ghgaoR3jR4:5:3jR13:0:0oR3jR4:5:3r14oR3jR4:9:2oR3jR4:1:1r60R19oR20R21R22i814R23i810gR24r61gar120hR19oR20R21R22i816R23i810gR24r101goR3jR4:9:2oR3jR4:1:1r60R19oR20R21R22i823R23i819gR24r61gar120hR19oR20R21R22i825R23i819gR24r101gR19oR20R21R22i825R23i810gR24r101goR3jR4:5:3r14oR3jR4:9:2oR3jR4:1:1r60R19oR20R21R22i832R23i828gR24r61gar121hR19oR20R21R22i834R23i828gR24r101goR3jR4:9:2oR3jR4:1:1r60R19oR20R21R22i841R23i837gR24r61gar121hR19oR20R21R22i843R23i837gR24r101gR19oR20R21R22i843R23i828gR24r101gR19oR20R21R22i843R23i810gR24r101ghR19oR20R21R22i844R23i805gR24r101gR19oR20R21R22i844R23i801gR24r101gR19oR20R21R22i844R23i790gR24r124goR3jR4:5:3jR13:20:1r143oR3jR4:1:1oR5r10R7y19:transformedPositionR9jR10:5:2i3r11R12i-129gR19oR20R21R22i870R23i851gR24r190goR3jR4:5:3r14oR3jR4:5:3r14oR3jR4:1:1r9R19oR20R21R22i877R23i874gR24r12goR3jR4:9:2oR3jR4:1:1r23R19oR20R21R22i888R23i880gR24r24gar120hR19oR20R21R22i890R23i880gR24r101gR19oR20R21R22i890R23i874gR24r12goR3jR4:1:1oR5jR6:2:0R7y11:lengthScaleR9r101R12i-131gR19oR20R21R22i904R23i893gR24r101gR19oR20R21R22i904R23i874gR24r12gR19oR20R21R22i904R23i851gR24r190goR3jR4:5:3r58oR3jR4:1:1oR5r10R7y17:transformedNormalR9jR10:5:2i3r11R12i-128gR19oR20R21R22i928R23i911gR24r219goR3jR4:8:2oR3jR4:2:1jR25:31:0R19oR20R21R22i934R23i931gR24jR10:13:1aoR1aoR7y1:_R9r12ghR39r12ghgaoR3jR4:1:1r9R19oR20R21R22i934R23i931gR24r12ghR19oR20R21R22i946R23i931gR24r12gR19oR20R21R22i946R23i911gR24r219ghR19oR20R21R22i953R23i654gR24r56ghR19oR20R21R22i958R23i648gR24r56gR5jy17:hxsl.FunctionKind:2:0y3:refoR5jR6:6:0R7y8:__init__R9jR10:13:1aoR1ahR39r56ghR12i-134gR39r56goR1ahR2oR3jR4:4:1aoR3jR4:5:3jR13:20:1r143oR3jR4:9:2oR3jR4:1:1oR5r10R7y17:projectedPositionR9jR10:5:2i4r11R12i-130gR19oR20R21R22i1005R23i988gR24r260gar120r121hR19oR20R21R22i1008R23i988gR24jR10:5:2i2r11goR3jR4:5:3r14oR3jR4:5:3r14oR3jR4:5:3r14oR3jR4:5:3r14oR3jR4:3:1oR3jR4:5:3r14oR3jR4:9:2oR3jR4:1:1r60R19oR20R21R22i1017R23i1013gR24r61gar121r120hR19oR20R21R22i1020R23i1013gR24jR10:5:2i2r11goR3jR4:8:2oR3jR4:2:1jR25:38:0R19oR20R21R22i1027R23i1023gR24jR10:13:1ahgaoR3jR4:0:1jR36:3:1i1R19oR20R21R22i1029R23i1028gR24r101goR3jR4:0:1jR36:3:1i-1R19oR20R21R22i1032R23i1030gR24r101ghR19oR20R21R22i1033R23i1023gR24jR10:5:2i2r11gR19oR20R21R22i1033R23i1013gR24jR10:5:2i2r11gR19oR20R21R22i1034R23i1012gR24r302goR3jR4:3:1oR3jR4:5:3jR13:3:0oR3jR4:9:2oR3jR4:1:1r23R19oR20R21R22i1046R23i1038gR24r24gar121hR19oR20R21R22i1048R23i1038gR24r101goR3jR4:0:1jR36:3:1d0.5R19oR20R21R22i1054R23i1051gR24r101gR19oR20R21R22i1054R23i1038gR24r101gR19oR20R21R22i1055R23i1037gR24r101gR19oR20R21R22i1055R23i1012gR24r302goR3jR4:9:2oR3jR4:1:1r259R19oR20R21R22i1075R23i1058gR24r260gajR37:2:0hR19oR20R21R22i1077R23i1058gR24r101gR19oR20R21R22i1077R23i1012gR24r302goR3jR4:1:1r42R19oR20R21R22i1096R23i1080gR24r43gR19oR20R21R22i1096R23i1012gR24jR10:5:2i2r11goR3jR4:1:1oR5r209R7y5:widthR9r101R12i-132gR19oR20R21R22i1104R23i1099gR24r101gR19oR20R21R22i1104R23i1012gR24r340gR19oR20R21R22i1104R23i988gR24r266ghR19oR20R21R22i1110R23i982gR24r56gR5jR44:0:0R45oR5r246R7y6:vertexR9jR10:13:1aoR1ahR39r56ghR12i-135gR39r56ghR7y21:h3d.shader.LineShadery4:varsar86r40r19oR5r10R7y6:outputR9jR10:12:1aoR5r10R7R17R9jR10:5:2i4r11R15r358R12i-127ghR12i-126gr218r189r259r208r342r60r245r352hg";
h3d_shader_Shadow.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:10:3oR3jR4:6:2jy15:haxe.macro.Unop:2:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:2:0y4:namey8:perPixely4:typejy9:hxsl.Type:2:0y10:qualifiersajy17:hxsl.VarQualifier:0:1nhy2:idi-158gy1:poy4:filey76:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FShadow.hxy3:maxi414y3:mini406gy1:tr12gR15oR16R17R18i414R19i405gR20r12goR3jR4:5:3jy16:haxe.macro.Binop:4:0oR3jR4:1:1oR6jR7:3:0R8y9:shadowPosR10jR11:5:2i3jy12:hxsl.VecType:1:0R12ajR13:1:0hR14i-157gR15oR16R17R18i426R19i417gR20r25goR3jR4:5:3jR21:0:0oR3jR4:5:3jR21:1:0oR3jR4:5:3r33oR3jR4:1:1oR6jR7:4:0R8y19:transformedPositionR10jR11:5:2i3r24R14i-155gR15oR16R17R18i448R19i429gR20r38goR3jR4:1:1oR6jR7:0:0R8y4:projR10jR11:8:0y6:parentoR6r43R8y6:shadowR10jR11:12:1aoR6r43R8y3:mapR10jR11:15:1i1R26r45R14i-149gr42oR6r43R8y5:colorR10jR11:5:2i3r24R26r45R14i-151goR6r43R8y5:powerR10jR11:3:0R26r45R14i-152goR6r43R8y4:biasR10r52R26r45R14i-153ghR14i-148gR14i-150gR15oR16R17R18i462R19i451gR20r44gR15oR16R17R18i462R19i429gR20jR11:5:2i3r24goR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:39:0R15oR16R17R18i469R19i465gR20jR11:13:1ahgaoR3jR4:0:1jy10:hxsl.Const:3:1d0.5R15oR16R17R18i473R19i470gR20r52goR3jR4:0:1jR33:3:1d-0.5R15oR16R17R18i479R19i475gR20r52goR3jR4:0:1jR33:3:1i1R15oR16R17R18i482R19i481gR20r52ghR15oR16R17R18i483R19i465gR20jR11:5:2i3r24gR15oR16R17R18i483R19i429gR20jR11:5:2i3r24goR3jR4:8:2oR3jR4:2:1r62R15oR16R17R18i490R19i486gR20r66gaoR3jR4:0:1jR33:3:1d0.5R15oR16R17R18i494R19i491gR20r52goR3jR4:0:1jR33:3:1d0.5R15oR16R17R18i499R19i496gR20r52goR3jR4:0:1jR33:3:1zR15oR16R17R18i502R19i501gR20r52ghR15oR16R17R18i503R19i486gR20jR11:5:2i3r24gR15oR16R17R18i503R19i429gR20jR11:5:2i3r24gR15oR16R17R18i503R19i417gR20r25gnR15oR16R17R18i503R19i401gR20jR11:0:0ghR15oR16R17R18i509R19i395gR20r113gR6jy17:hxsl.FunctionKind:0:0y3:refoR6jR7:6:0R8y6:vertexR10jR11:13:1aoR1ahy3:retr113ghR14i-159gR37r113goR1ahR2oR3jR4:4:1aoR3jR4:7:2oR6r37R8R22R10jR11:5:2i3r24R14i-161goR3jR4:10:3oR3jR4:1:1r10R15oR16R17R18i571R19i563gR20r12goR3jR4:5:3r31oR3jR4:5:3r33oR3jR4:5:3r33oR3jR4:1:1oR6r37R8y24:pixelTransformedPositionR10jR11:5:2i3r24R14i-156gR15oR16R17R18i598R19i574gR20r139goR3jR4:1:1r42R15oR16R17R18i612R19i601gR20r44gR15oR16R17R18i612R19i574gR20r59goR3jR4:8:2oR3jR4:2:1r62R15oR16R17R18i619R19i615gR20r66gaoR3jR4:0:1jR33:3:1d0.5R15oR16R17R18i623R19i620gR20r52goR3jR4:0:1jR33:3:1d-0.5R15oR16R17R18i629R19i625gR20r52goR3jR4:0:1jR33:3:1i1R15oR16R17R18i632R19i631gR20r52ghR15oR16R17R18i633R19i615gR20jR11:5:2i3r24gR15oR16R17R18i633R19i574gR20jR11:5:2i3r24goR3jR4:8:2oR3jR4:2:1r62R15oR16R17R18i640R19i636gR20r66gaoR3jR4:0:1jR33:3:1d0.5R15oR16R17R18i644R19i641gR20r52goR3jR4:0:1jR33:3:1d0.5R15oR16R17R18i649R19i646gR20r52goR3jR4:0:1jR33:3:1zR15oR16R17R18i652R19i651gR20r52ghR15oR16R17R18i653R19i636gR20jR11:5:2i3r24gR15oR16R17R18i653R19i574gR20r129goR3jR4:1:1r22R15oR16R17R18i668R19i659gR20r25gR15oR16R17R18i668R19i559gR20r129gR15oR16R17R18i669R19i543gR20r113goR3jR4:7:2oR6r37R8y5:depthR10r52R14i-162goR3jR4:8:2oR3jR4:2:1jR32:61:0R15oR16R17R18i698R19i688gR20jR11:13:1aoR1aoR8y1:_R10r48goR8y2:uvR10jR11:5:2i2r24ghR37r52ghgaoR3jR4:1:1r47R15oR16R17R18i698R19i688gR20r48goR3jR4:9:2oR3jR4:1:1r128R15oR16R17R18i712R19i703gR20r129gajy14:hxsl.Component:0:0jR42:1:0hR15oR16R17R18i715R19i703gR20jR11:5:2i2r24ghR15oR16R17R18i716R19i688gR20r52gR15oR16R17R18i717R19i676gR20r113goR3jR4:7:2oR6r37R8y4:zMaxR10r52R14i-163goR3jR4:8:2oR3jR4:2:1jR32:51:0R15oR16R17R18i909R19i898gR20jR11:13:1aoR1aoR8R40R10r52ghR37r52ghgaoR3jR4:9:2oR3jR4:1:1r128R15oR16R17R18i907R19i898gR20r129gajR42:2:0hR15oR16R17R18i909R19i898gR20r52ghR15oR16R17R18i920R19i898gR20r52gR15oR16R17R18i921R19i887gR20r113goR3jR4:7:2oR6r37R8y5:deltaR10r52R14i-164goR3jR4:5:3jR21:3:0oR3jR4:8:2oR3jR4:2:1jR32:21:0R15oR16R17R18i959R19i938gR20jR11:13:1aoR1aoR8R40R10r52goR8y1:bR10r52ghR37r52ghgaoR3jR4:3:1oR3jR4:5:3r31oR3jR4:1:1r200R15oR16R17R18i944R19i939gR20r52goR3jR4:1:1r53R15oR16R17R18i958R19i947gR20r52gR15oR16R17R18i958R19i939gR20r52gR15oR16R17R18i959R19i938gR20r52goR3jR4:1:1r232R15oR16R17R18i968R19i964gR20r52ghR15oR16R17R18i969R19i938gR20r52goR3jR4:1:1r232R15oR16R17R18i976R19i972gR20r52gR15oR16R17R18i976R19i938gR20r52gR15oR16R17R18i977R19i926gR20r113goR3jR4:7:2oR6r37R8y5:shadeR10r52R14i-165goR3jR4:8:2oR3jR4:2:1r235R15oR16R17R18i1022R19i994gR20jR11:13:1aoR1aoR8R40R10r52ghR37r52ghgaoR3jR4:8:2oR3jR4:2:1jR32:9:0R15oR16R17R18i997R19i994gR20jR11:13:1aoR1aoR8y5:valueR10r52ghR37r52ghgaoR3jR4:5:3r33oR3jR4:1:1r51R15oR16R17R18i1011R19i999gR20r52goR3jR4:1:1r257R15oR16R17R18i1019R19i1014gR20r52gR15oR16R17R18i1019R19i999gR20r52ghR15oR16R17R18i1022R19i994gR20r52ghR15oR16R17R18i1033R19i994gR20r52gR15oR16R17R18i1034R19i982gR20r113goR3jR4:5:3jR21:20:1r33oR3jR4:9:2oR3jR4:1:1oR6r37R8y10:pixelColorR10jR11:5:2i4r24R14i-154gR15oR16R17R18i1049R19i1039gR20r339gar222r223r249hR15oR16R17R18i1053R19i1039gR20jR11:5:2i3r24goR3jR4:5:3r31oR3jR4:5:3r33oR3jR4:3:1oR3jR4:5:3r259oR3jR4:0:1jR33:3:1i1R15oR16R17R18i1059R19i1058gR20r52goR3jR4:1:1r297R15oR16R17R18i1067R19i1062gR20r52gR15oR16R17R18i1067R19i1058gR20r52gR15oR16R17R18i1068R19i1057gR20r52goR3jR4:9:2oR3jR4:1:1r49R15oR16R17R18i1083R19i1071gR20r50gar222r223r249hR15oR16R17R18i1087R19i1071gR20jR11:5:2i3r24gR15oR16R17R18i1087R19i1057gR20r368goR3jR4:1:1r297R15oR16R17R18i1095R19i1090gR20r52gR15oR16R17R18i1095R19i1057gR20r368gR15oR16R17R18i1095R19i1039gR20r345ghR15oR16R17R18i1101R19i535gR20r113gR6jR34:1:0R35oR6r118R8y8:fragmentR10jR11:13:1aoR1ahR37r113ghR14i-160gR37r113ghR8y17:h3d.shader.Shadowy4:varsar45r338r36r138r22r10r117r381hg";
h3d_shader_Skin.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:4:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey19:transformedPositiony4:typejy9:hxsl.Type:5:2i3jy12:hxsl.VecType:1:0y2:idi-143gy1:poy4:filey74:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FSkin.hxy3:maxi546y3:mini527gy1:tr12goR3jR4:5:3jR5:0:0oR3jR4:5:3r16oR3jR4:5:3jR5:1:0oR3jR4:3:1oR3jR4:5:3r19oR3jR4:1:1oR6r10R8y16:relativePositionR10jR11:5:2i3r11R13i-142gR14oR15R16R17i571R18i555gR19r24goR3jR4:16:2oR3jR4:1:1oR6jR7:2:0R8y13:bonesMatrixesR10jR11:14:2jR11:8:0jy13:hxsl.SizeDecl:1:1oR6r30R8y8:MaxBonesR10jR11:1:0y10:qualifiersajy17:hxsl.VarQualifier:0:1nhR13i-145gR24ajR25:8:0hR13i-146gR14oR15R16R17i587R18i574gR19r37goR3jR4:9:2oR3jR4:1:1oR6jR7:1:0R8y7:indexesR10jR11:9:1i4y6:parentoR6r45R8y5:inputR10jR11:12:1aoR6r45R8y8:positionR10jR11:5:2i3r11R27r47R13i-138goR6r45R8y6:normalR10jR11:5:2i3r11R27r47R13i-139goR6r45R8y7:weightsR10jR11:5:2i3r11R27r47R13i-140gr44hR13i-137gR13i-141gR14oR15R16R17i601R18i588gR19r46gajy14:hxsl.Component:0:0hR14oR15R16R17i603R18i588gR19r33gR14oR15R16R17i604R18i574gR19r31gR14oR15R16R17i604R18i555gR19jR11:5:2i3r11gR14oR15R16R17i605R18i554gR19r66goR3jR4:9:2oR3jR4:1:1r53R14oR15R16R17i621R18i608gR19r54gar59hR14oR15R16R17i623R18i608gR19jR11:3:0gR14oR15R16R17i623R18i554gR19r66goR3jR4:5:3r19oR3jR4:3:1oR3jR4:5:3r19oR3jR4:1:1r23R14oR15R16R17i648R18i632gR19r24goR3jR4:16:2oR3jR4:1:1r29R14oR15R16R17i664R18i651gR19r37goR3jR4:9:2oR3jR4:1:1r44R14oR15R16R17i678R18i665gR19r46gajR32:1:0hR14oR15R16R17i680R18i665gR19r33gR14oR15R16R17i681R18i651gR19r31gR14oR15R16R17i681R18i632gR19r66gR14oR15R16R17i682R18i631gR19r66goR3jR4:9:2oR3jR4:1:1r53R14oR15R16R17i698R18i685gR19r54gar94hR14oR15R16R17i700R18i685gR19r76gR14oR15R16R17i700R18i631gR19r66gR14oR15R16R17i700R18i554gR19jR11:5:2i3r11goR3jR4:5:3r19oR3jR4:3:1oR3jR4:5:3r19oR3jR4:1:1r23R14oR15R16R17i725R18i709gR19r24goR3jR4:16:2oR3jR4:1:1r29R14oR15R16R17i741R18i728gR19r37goR3jR4:9:2oR3jR4:1:1r44R14oR15R16R17i755R18i742gR19r46gajR32:2:0hR14oR15R16R17i757R18i742gR19r33gR14oR15R16R17i758R18i728gR19r31gR14oR15R16R17i758R18i709gR19r66gR14oR15R16R17i759R18i708gR19r66goR3jR4:9:2oR3jR4:1:1r53R14oR15R16R17i775R18i762gR19r54gar130hR14oR15R16R17i777R18i762gR19r76gR14oR15R16R17i777R18i708gR19r66gR14oR15R16R17i777R18i554gR19jR11:5:2i3r11gR14oR15R16R17i777R18i527gR19r12goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y17:transformedNormalR10jR11:5:2i3r11R13i-144gR14oR15R16R17i800R18i783gR19r156goR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:31:0R14oR15R16R17i812R18i803gR19jR11:13:1aoR1aoR8y5:valueR10r66ghy3:retr66ghgaoR3jR4:5:3r16oR3jR4:5:3r16oR3jR4:5:3r19oR3jR4:3:1oR3jR4:5:3r19oR3jR4:1:1r51R14oR15R16R17i832R18i820gR19r52goR3jR4:8:2oR3jR4:2:1jR34:48:0R14oR15R16R17i839R18i835gR19jR11:13:1ahgaoR3jR4:16:2oR3jR4:1:1r29R14oR15R16R17i853R18i840gR19r37goR3jR4:9:2oR3jR4:1:1r44R14oR15R16R17i867R18i854gR19r46gar59hR14oR15R16R17i869R18i854gR19r33gR14oR15R16R17i870R18i840gR19r31ghR14oR15R16R17i871R18i835gR19jR11:6:0gR14oR15R16R17i871R18i820gR19r66gR14oR15R16R17i872R18i819gR19r66goR3jR4:9:2oR3jR4:1:1r53R14oR15R16R17i888R18i875gR19r54gar59hR14oR15R16R17i890R18i875gR19r76gR14oR15R16R17i890R18i819gR19r66goR3jR4:5:3r19oR3jR4:3:1oR3jR4:5:3r19oR3jR4:1:1r51R14oR15R16R17i911R18i899gR19r52goR3jR4:8:2oR3jR4:2:1r180R14oR15R16R17i918R18i914gR19r184gaoR3jR4:16:2oR3jR4:1:1r29R14oR15R16R17i932R18i919gR19r37goR3jR4:9:2oR3jR4:1:1r44R14oR15R16R17i946R18i933gR19r46gar94hR14oR15R16R17i948R18i933gR19r33gR14oR15R16R17i949R18i919gR19r31ghR14oR15R16R17i950R18i914gR19r201gR14oR15R16R17i950R18i899gR19r66gR14oR15R16R17i951R18i898gR19r66goR3jR4:9:2oR3jR4:1:1r53R14oR15R16R17i967R18i954gR19r54gar94hR14oR15R16R17i969R18i954gR19r76gR14oR15R16R17i969R18i898gR19r66gR14oR15R16R17i969R18i819gR19jR11:5:2i3r11goR3jR4:5:3r19oR3jR4:3:1oR3jR4:5:3r19oR3jR4:1:1r51R14oR15R16R17i990R18i978gR19r52goR3jR4:8:2oR3jR4:2:1r180R14oR15R16R17i997R18i993gR19r184gaoR3jR4:16:2oR3jR4:1:1r29R14oR15R16R17i1011R18i998gR19r37goR3jR4:9:2oR3jR4:1:1r44R14oR15R16R17i1025R18i1012gR19r46gar130hR14oR15R16R17i1027R18i1012gR19r33gR14oR15R16R17i1028R18i998gR19r31ghR14oR15R16R17i1029R18i993gR19r201gR14oR15R16R17i1029R18i978gR19r66gR14oR15R16R17i1030R18i977gR19r66goR3jR4:9:2oR3jR4:1:1r53R14oR15R16R17i1046R18i1033gR19r54gar130hR14oR15R16R17i1048R18i1033gR19r76gR14oR15R16R17i1048R18i977gR19r66gR14oR15R16R17i1048R18i819gR19jR11:5:2i3r11ghR14oR15R16R17i1049R18i803gR19r66gR14oR15R16R17i1049R18i783gR19r156ghR14oR15R16R17i1064R18i428gR19jR11:0:0gR6jy17:hxsl.FunctionKind:0:0y3:refoR6jR7:6:0R8y6:vertexR10jR11:13:1aoR1ahR36r305ghR13i-147gR36r305ghR8y15:h3d.shader.Skiny4:varsar47r23r9r155r32r29r307hg";
h3d_shader_SpecularTexture.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:20:1jR5:1:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey9:specColory4:typejy9:hxsl.Type:5:2i3jy12:hxsl.VecType:1:0y2:idi-59gy1:poy4:filey85:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FSpecularTexture.hxy3:maxi218y3:mini209gy1:tr13goR3jR4:9:2oR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:33:0R14oR15R16R17i229R18i222gR19jR11:13:1aoR1aoR8y1:_R10jR11:10:0goR8y2:uvR10jR11:5:2i2r12ghy3:retjR11:5:2i4r12ghgaoR3jR4:1:1oR6jR7:2:0R8y7:textureR10r26R13i-57gR14oR15R16R17i229R18i222gR19r26goR3jR4:1:1oR6r11R8y12:calculatedUVR10jR11:5:2i2r12R13i-58gR14oR15R16R17i246R18i234gR19r39ghR14oR15R16R17i247R18i222gR19r29gajy14:hxsl.Component:0:0jR26:1:0jR26:2:0hR14oR15R16R17i251R18i222gR19jR11:5:2i3r12gR14oR15R16R17i251R18i209gR19r13ghR14oR15R16R17i257R18i203gR19jR11:0:0gR6jy17:hxsl.FunctionKind:1:0y3:refoR6jR7:6:0R8y8:fragmentR10jR11:13:1aoR1ahR23r55ghR13i-60gR23r55ghR8y26:h3d.shader.SpecularTexturey4:varsar33r38r10r57hg";
h3d_shader_Texture.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:4:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey12:calculatedUVy4:typejy9:hxsl.Type:5:2i2jy12:hxsl.VecType:1:0y2:idi-68gy1:poy4:filey77:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FTexture.hxy3:maxi443y3:mini431gy1:tr12goR3jR4:1:1oR6jR7:1:0R8y2:uvR10jR11:5:2i2r11y6:parentoR6r17R8y5:inputR10jR11:12:1ar16hR13i-61gR13i-62gR14oR15R16R17i454R18i446gR19r18gR14oR15R16R17i454R18i431gR19r12ghR14oR15R16R17i460R18i425gR19jR11:0:0gR6jy17:hxsl.FunctionKind:0:0y3:refoR6jR7:6:0R8y6:vertexR10jR11:13:1aoR1ahy3:retr28ghR13i-71gR26r28goR1ahR2oR3jR4:4:1aoR3jR4:7:2oR6r10R8y1:cR10jR11:5:2i4r11R13i-73goR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:33:0R14oR15R16R17i507R18i500gR19jR11:13:1aoR1aoR8y1:_R10jR11:10:0goR8R20R10jR11:5:2i2r11ghR26r42ghgaoR3jR4:1:1oR6jR7:2:0R8y7:textureR10r52R13i-67gR14oR15R16R17i507R18i500gR19r52goR3jR4:1:1r9R14oR15R16R17i524R18i512gR19r12ghR14oR15R16R17i525R18i500gR19r42gR14oR15R16R17i526R18i492gR19r28goR3jR4:10:3oR3jR4:5:3jR5:14:0oR3jR4:1:1oR6r59R8y9:killAlphaR10jR11:2:0y10:qualifiersajy17:hxsl.VarQualifier:0:1nhR13i-64gR14oR15R16R17i544R18i535gR19r74goR3jR4:5:3jR5:9:0oR3jR4:5:3jR5:3:0oR3jR4:9:2oR3jR4:1:1r41R14oR15R16R17i549R18i548gR19r42gajy14:hxsl.Component:3:0hR14oR15R16R17i551R18i548gR19jR11:3:0goR3jR4:1:1oR6r59R8y18:killAlphaThresholdR10r91R32ajR33:7:2d0d1hR13i-66gR14oR15R16R17i572R18i554gR19r91gR14oR15R16R17i572R18i548gR19r91goR3jR4:0:1jy10:hxsl.Const:3:1zR14oR15R16R17i576R18i575gR19r91gR14oR15R16R17i576R18i548gR19r74gR14oR15R16R17i576R18i535gR19r74goR3jR4:11:0R14oR15R16R17i586R18i579gR19r28gnR14oR15R16R17i586R18i531gR19r28goR3jR4:10:3oR3jR4:1:1oR6r59R8y8:additiveR10r74R32ajR33:0:1nhR13i-63gR14oR15R16R17i604R18i596gR19r74goR3jR4:5:3jR5:20:1jR5:0:0oR3jR4:1:1oR6r10R8y10:pixelColorR10jR11:5:2i4r11R13i-69gR14oR15R16R17i622R18i612gR19r125goR3jR4:1:1r41R14oR15R16R17i627R18i626gR19r42gR14oR15R16R17i627R18i612gR19r125goR3jR4:5:3jR5:20:1jR5:1:0oR3jR4:1:1r124R14oR15R16R17i653R18i643gR19r125goR3jR4:1:1r41R14oR15R16R17i658R18i657gR19r42gR14oR15R16R17i658R18i643gR19r125gR14oR15R16R17i658R18i592gR19r28goR3jR4:10:3oR3jR4:1:1oR6r59R8y13:specularAlphaR10r74R32ajR33:0:1nhR13i-65gR14oR15R16R17i681R18i668gR19r74goR3jR4:5:3jR5:20:1r134oR3jR4:1:1oR6r10R8y9:specColorR10jR11:5:2i3r11R13i-70gR14oR15R16R17i698R18i689gR19r157goR3jR4:9:2oR3jR4:1:1r41R14oR15R16R17i703R18i702gR19r42gar88r88r88hR14oR15R16R17i707R18i702gR19jR11:5:2i3r11gR14oR15R16R17i707R18i689gR19r157gnR14oR15R16R17i707R18i664gR19r28ghR14oR15R16R17i713R18i486gR19r28gR6jR23:1:0R24oR6r31R8y8:fragmentR10jR11:13:1aoR1ahR26r28ghR13i-72gR26r28ghR8y18:h3d.shader.Texturey4:varsar19r115r73r148r93r58r9r124r156r30r175hg";
h3d_shader_UVDelta.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:4:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey12:calculatedUVy4:typejy9:hxsl.Type:5:2i2jy12:hxsl.VecType:1:0y2:idi-222gy1:poy4:filey77:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FUVDelta.hxy3:maxi209y3:mini197gy1:tr12goR3jR4:5:3jR5:0:0oR3jR4:5:3jR5:1:0oR3jR4:1:1r9R14oR15R16R17i224R18i212gR19r12goR3jR4:1:1oR6jR7:2:0R8y7:uvScaleR10jR11:5:2i2r11R13i-221gR14oR15R16R17i234R18i227gR19r25gR14oR15R16R17i234R18i212gR19jR11:5:2i2r11goR3jR4:1:1oR6r24R8y7:uvDeltaR10jR11:5:2i2r11R13i-220gR14oR15R16R17i244R18i237gR19r33gR14oR15R16R17i244R18i212gR19jR11:5:2i2r11gR14oR15R16R17i244R18i197gR19r12ghR14oR15R16R17i250R18i191gR19jR11:0:0gR6jy17:hxsl.FunctionKind:0:0y3:refoR6jR7:6:0R8y6:vertexR10jR11:13:1aoR1ahy3:retr43ghR13i-223gR25r43ghR8y18:h3d.shader.UVDeltay4:varsar32r23r9r45hg";
h3d_shader_VertexColorAlpha.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:10:3oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:2:0y4:namey8:additivey4:typejy9:hxsl.Type:2:0y10:qualifiersajy17:hxsl.VarQualifier:0:1nhy2:idi-218gy1:poy4:filey86:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FVertexColorAlpha.hxy3:maxi245y3:mini237gy1:tr10goR3jR4:5:3jy16:haxe.macro.Binop:20:1jR20:0:0oR3jR4:1:1oR5jR6:4:0R7y10:pixelColorR9jR10:5:2i4jy12:hxsl.VecType:1:0R13i-217gR14oR15R16R17i263R18i253gR19r22goR3jR4:1:1oR5jR6:1:0R7y5:colorR9jR10:5:2i4r21y6:parentoR5r27R7y5:inputR9jR10:12:1ar26hR13i-215gR13i-216gR14oR15R16R17i278R18i267gR19r28gR14oR15R16R17i278R18i253gR19r22goR3jR4:5:3jR20:20:1jR20:1:0oR3jR4:1:1r19R14oR15R16R17i304R18i294gR19r22goR3jR4:1:1r26R14oR15R16R17i319R18i308gR19r28gR14oR15R16R17i319R18i294gR19r22gR14oR15R16R17i319R18i233gR19jR10:0:0ghR14oR15R16R17i325R18i227gR19r49gR5jy17:hxsl.FunctionKind:1:0y3:refoR5jR6:6:0R7y8:fragmentR9jR10:13:1aoR1ahy3:retr49ghR13i-219gR29r49ghR7y27:h3d.shader.VertexColorAlphay4:varsar29r19r8r53hg";
h3d_shader_VolumeDecal.SRC = "oy4:funsaoy4:argsahy4:exproy1:ejy13:hxsl.TExprDef:4:1aoR3jR4:5:3jy16:haxe.macro.Binop:4:0oR3jR4:1:1oy4:kindjy12:hxsl.VarKind:4:0y4:namey17:transformedNormaly4:typejy9:hxsl.Type:5:2i3jy12:hxsl.VecType:1:0y2:idi-192gy1:poy4:filey81:%2Fhome%2Ftravis%2Fhaxe%2Flib%2Fheaps%2F1%2C1%2C0%2Fh3d%2Fshader%2FVolumeDecal.hxy3:maxi282y3:mini265gy1:tr12goR3jR4:1:1oR6jR7:2:0R8y6:normalR10jR11:5:2i3r11R13i-205gR14oR15R16R17i291R18i285gR19r18gR14oR15R16R17i291R18i265gR19r12ghR14oR15R16R17i297R18i259gR19jR11:0:0gR6jy17:hxsl.FunctionKind:0:0y3:refoR6jR7:6:0R8y6:vertexR10jR11:13:1aoR1ahy3:retr25ghR13i-207gR24r25goR1ahR2oR3jR4:4:1aoR3jR4:7:2oR6r10R8y6:matrixR10jR11:7:0R13i-209goR3jR4:5:3jR5:1:0oR3jR4:1:1oR6jR7:0:0R8y15:inverseViewProjR10r39y6:parentoR6r44R8y6:cameraR10jR11:12:1aoR6r44R8y4:viewR10r39R27r45R13i-167goR6r44R8y4:projR10r39R27r45R13i-168goR6r44R8y8:positionR10jR11:5:2i3r11R27r45R13i-169goR6r44R8y8:projDiagR10jR11:5:2i3r11R27r45R13i-170goR6r44R8y8:viewProjR10r39R27r45R13i-171gr43oR6r44R8y5:zNearR10jR11:3:0R27r45R13i-173goR6r44R8y4:zFarR10r55R27r45R13i-174goR6jR7:3:0R8y3:dirR10jR11:5:2i3r11R27r45R13i-175ghR13i-166gR13i-172gR14oR15R16R17i364R18i342gR19r39goR3jR4:1:1oR6r44R8y16:modelViewInverseR10r39R27oR6r44R8y6:globalR10jR11:12:1aoR6r44R8y4:timeR10r55R27r65R13i-177goR6r44R8y9:pixelSizeR10jR11:5:2i2r11R27r65R13i-178goR6r44R8y9:modelViewR10r39R27r65y10:qualifiersajy17:hxsl.VarQualifier:3:0hR13i-179gr64hR13i-176gR42ar72hR13i-180gR14oR15R16R17i390R18i367gR19r39gR14oR15R16R17i390R18i342gR19r39gR14oR15R16R17i391R18i329gR19r25goR3jR4:7:2oR6r10R8y9:screenPosR10jR11:5:2i2r11R13i-210goR3jR4:5:3jR5:2:0oR3jR4:9:2oR3jR4:1:1oR6r10R8y17:projectedPositionR10jR11:5:2i4r11R13i-193gR14oR15R16R17i429R18i412gR19r89gajy14:hxsl.Component:0:0jR46:1:0hR14oR15R16R17i432R18i412gR19r83goR3jR4:9:2oR3jR4:1:1r88R14oR15R16R17i452R18i435gR19r89gajR46:3:0hR14oR15R16R17i454R18i435gR19r55gR14oR15R16R17i454R18i412gR19r83gR14oR15R16R17i455R18i396gR19r25goR3jR4:7:2oR6r10R8y3:tuvR10jR11:5:2i2r11R13i-211goR3jR4:5:3jR5:0:0oR3jR4:5:3r41oR3jR4:1:1r82R14oR15R16R17i479R18i470gR19r83goR3jR4:8:2oR3jR4:2:1jy12:hxsl.TGlobal:38:0R14oR15R16R17i486R18i482gR19jR11:13:1ahgaoR3jR4:0:1jy10:hxsl.Const:3:1d0.5R14oR15R16R17i490R18i487gR19r55goR3jR4:0:1jR49:3:1d-0.5R14oR15R16R17i496R18i492gR19r55ghR14oR15R16R17i497R18i482gR19jR11:5:2i2r11gR14oR15R16R17i497R18i470gR19jR11:5:2i2r11goR3jR4:8:2oR3jR4:2:1r120R14oR15R16R17i504R18i500gR19r124gaoR3jR4:0:1jR49:3:1d0.5R14oR15R16R17i508R18i505gR19r55goR3jR4:0:1jR49:3:1d0.5R14oR15R16R17i513R18i510gR19r55ghR14oR15R16R17i514R18i500gR19jR11:5:2i2r11gR14oR15R16R17i514R18i470gR19r111gR14oR15R16R17i515R18i460gR19r25goR3jR4:7:2oR6r10R8y3:ruvR10jR11:5:2i4r11R13i-212goR3jR4:8:2oR3jR4:2:1jR48:40:0R14oR15R16R17i534R18i530gR19jR11:13:1ahgaoR3jR4:1:1r82R14oR15R16R17i550R18i541gR19r83goR3jR4:8:2oR3jR4:2:1jR48:53:0R14oR15R16R17i563R18i557gR19jR11:13:1aoR1aoR8y5:valueR10jR11:5:2i4r11ghR24r55ghgaoR3jR4:8:2oR3jR4:2:1jR48:33:0R14oR15R16R17i572R18i564gR19jR11:13:1aoR1aoR8y1:_R10jR11:10:0goR8y2:uvR10jR11:5:2i2r11ghR24jR11:5:2i4r11ghgaoR3jR4:1:1oR6r44R8y8:depthMapR10r195R13i-203gR14oR15R16R17i572R18i564gR19r195goR3jR4:1:1r110R14oR15R16R17i580R18i577gR19r111ghR14oR15R16R17i581R18i564gR19r198ghR14oR15R16R17i582R18i557gR19r55goR3jR4:0:1jR49:3:1i1R14oR15R16R17i590R18i589gR19r55ghR14oR15R16R17i596R18i530gR19r162gR14oR15R16R17i597R18i520gR19r25goR3jR4:7:2oR6r10R8y4:wposR10r198R13i-213goR3jR4:5:3r41oR3jR4:1:1r161R14oR15R16R17i616R18i613gR19r162goR3jR4:1:1r38R14oR15R16R17i625R18i619gR19r39gR14oR15R16R17i625R18i613gR19r198gR14oR15R16R17i626R18i602gR19r25goR3jR4:7:2oR6r10R8y4:pposR10r198R13i-214goR3jR4:5:3r41oR3jR4:1:1r161R14oR15R16R17i645R18i642gR19r162goR3jR4:1:1r43R14oR15R16R17i670R18i648gR19r39gR14oR15R16R17i670R18i642gR19r198gR14oR15R16R17i671R18i631gR19r25goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y24:pixelTransformedPositionR10jR11:5:2i3r11R13i-191gR14oR15R16R17i700R18i676gR19r249goR3jR4:5:3r85oR3jR4:9:2oR3jR4:1:1r234R14oR15R16R17i707R18i703gR19r198gar93r94jR46:2:0hR14oR15R16R17i711R18i703gR19jR11:5:2i3r11goR3jR4:9:2oR3jR4:1:1r234R14oR15R16R17i718R18i714gR19r198gar102hR14oR15R16R17i720R18i714gR19r55gR14oR15R16R17i720R18i703gR19r261gR14oR15R16R17i720R18i676gR19r249goR3jR4:5:3r7oR3jR4:1:1oR6r10R8y12:calculatedUVR10jR11:5:2i2r11R13i-206gR14oR15R16R17i738R18i726gR19r276goR3jR4:5:3r113oR3jR4:5:3r41oR3jR4:1:1oR6r17R8y5:scaleR10jR11:5:2i2r11R13i-204gR14oR15R16R17i746R18i741gR19r283goR3jR4:3:1oR3jR4:5:3r85oR3jR4:9:2oR3jR4:1:1r221R14oR15R16R17i754R18i750gR19r198gar93r94hR14oR15R16R17i757R18i750gR19jR11:5:2i2r11goR3jR4:9:2oR3jR4:1:1r221R14oR15R16R17i764R18i760gR19r198gar102hR14oR15R16R17i766R18i760gR19r55gR14oR15R16R17i766R18i750gR19r295gR14oR15R16R17i767R18i749gR19r295gR14oR15R16R17i767R18i741gR19jR11:5:2i2r11goR3jR4:0:1jR49:3:1d0.5R14oR15R16R17i773R18i770gR19r55gR14oR15R16R17i773R18i741gR19r309gR14oR15R16R17i773R18i726gR19r276goR3jR4:10:3oR3jR4:5:3jR5:9:0oR3jR4:8:2oR3jR4:2:1jR48:21:0R14oR15R16R17i786R18i783gR19jR11:13:1aoR1aoR8y1:aR10r55goR8y1:bR10r55ghR24r55ghgaoR3jR4:8:2oR3jR4:2:1r323R14oR15R16R17i790R18i787gR19jR11:13:1ar327hgaoR3jR4:9:2oR3jR4:1:1r275R14oR15R16R17i803R18i791gR19r276gar93hR14oR15R16R17i805R18i791gR19r55goR3jR4:9:2oR3jR4:1:1r275R14oR15R16R17i819R18i807gR19r276gar94hR14oR15R16R17i821R18i807gR19r55ghR14oR15R16R17i822R18i787gR19r55goR3jR4:8:2oR3jR4:2:1r323R14oR15R16R17i827R18i824gR19jR11:13:1ar327hgaoR3jR4:5:3jR5:3:0oR3jR4:0:1jR49:3:1i1R14oR15R16R17i829R18i828gR19r55goR3jR4:9:2oR3jR4:1:1r275R14oR15R16R17i844R18i832gR19r276gar93hR14oR15R16R17i846R18i832gR19r55gR14oR15R16R17i846R18i828gR19r55goR3jR4:5:3r364oR3jR4:0:1jR49:3:1i1R14oR15R16R17i849R18i848gR19r55goR3jR4:9:2oR3jR4:1:1r275R14oR15R16R17i864R18i852gR19r276gar94hR14oR15R16R17i866R18i852gR19r55gR14oR15R16R17i866R18i848gR19r55ghR14oR15R16R17i867R18i824gR19r55ghR14oR15R16R17i868R18i783gR19r55goR3jR4:0:1jR49:3:1zR14oR15R16R17i872R18i871gR19r55gR14oR15R16R17i872R18i783gR19jR11:2:0goR3jR4:11:0R14oR15R16R17i882R18i875gR19r25gnR14oR15R16R17i882R18i779gR19r25ghR14oR15R16R17i888R18i323gR19r25gR6jR21:1:0R22oR6r28R8y8:fragmentR10jR11:13:1aoR1ahR24r25ghR13i-208gR24r25ghR8y22:h3d.shader.VolumeDecaly4:varsar45r65oR6jR7:1:0R8y5:inputR10jR11:12:1aoR6r418R8R31R10jR11:5:2i3r11R27r417R13i-182goR6r418R8R20R10jR11:5:2i3r11R27r417R13i-183ghR13i-181goR6r10R8y6:outputR10jR11:12:1aoR6r10R8R31R10jR11:5:2i4r11R27r425R13i-185goR6r10R8y5:colorR10jR11:5:2i4r11R27r425R13i-186goR6r10R8y5:depthR10r55R27r425R13i-187goR6r10R8R20R10jR11:5:2i3r11R27r425R13i-188ghR13i-184goR6r10R8y16:relativePositionR10jR11:5:2i3r11R13i-189goR6r10R8y19:transformedPositionR10jR11:5:2i3r11R13i-190gr248r9r88oR6r10R8y10:pixelColorR10jR11:5:2i4r11R13i-194goR6r10R8R68R10r55R13i-195goR6r10R8y8:screenUVR10jR11:5:2i2r11R13i-196goR6r10R8y9:specPowerR10r55R13i-197goR6r10R8y9:specColorR10jR11:5:2i3r11R13i-198gr202r282r16r275r27r411hg";
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxbit_Macros.IN_ENUM_SER = false;
hxbit_Schema.__clid = hxbit_Serializer.registerClass(hxbit_Schema);
hxd_Charset.JP_KANA = "　あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわゐゑをんがぎぐげござじずぜぞだぢづでどばびぶべぼぱぴぷぺぽゃゅょアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヰヱヲンガギグゲゴザジズゼゾダヂヅデドバビブベボパピプペポヴャぇっッュョァィゥェォ・ー「」、。『』“”！：？％＆（）－０１２３４５６７８９";
hxd_Charset.ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
hxd_Charset.LATIN1 = "¡¢£¤¥¦§¨©ª«¬-®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ€";
hxd_Charset.CYRILLIC = "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя—";
hxd_Charset.DEFAULT_CHARS = hxd_Charset.ASCII + hxd_Charset.LATIN1;
hxd_Key.BACKSPACE = 8;
hxd_Key.TAB = 9;
hxd_Key.ENTER = 13;
hxd_Key.SHIFT = 16;
hxd_Key.CTRL = 17;
hxd_Key.ALT = 18;
hxd_Key.ESCAPE = 27;
hxd_Key.SPACE = 32;
hxd_Key.PGUP = 33;
hxd_Key.PGDOWN = 34;
hxd_Key.END = 35;
hxd_Key.HOME = 36;
hxd_Key.LEFT = 37;
hxd_Key.UP = 38;
hxd_Key.RIGHT = 39;
hxd_Key.DOWN = 40;
hxd_Key.INSERT = 45;
hxd_Key.DELETE = 46;
hxd_Key.NUMBER_0 = 48;
hxd_Key.NUMBER_1 = 49;
hxd_Key.NUMBER_2 = 50;
hxd_Key.NUMBER_3 = 51;
hxd_Key.NUMBER_4 = 52;
hxd_Key.NUMBER_5 = 53;
hxd_Key.NUMBER_6 = 54;
hxd_Key.NUMBER_7 = 55;
hxd_Key.NUMBER_8 = 56;
hxd_Key.NUMBER_9 = 57;
hxd_Key.NUMPAD_0 = 96;
hxd_Key.NUMPAD_1 = 97;
hxd_Key.NUMPAD_2 = 98;
hxd_Key.NUMPAD_3 = 99;
hxd_Key.NUMPAD_4 = 100;
hxd_Key.NUMPAD_5 = 101;
hxd_Key.NUMPAD_6 = 102;
hxd_Key.NUMPAD_7 = 103;
hxd_Key.NUMPAD_8 = 104;
hxd_Key.NUMPAD_9 = 105;
hxd_Key.A = 65;
hxd_Key.B = 66;
hxd_Key.C = 67;
hxd_Key.D = 68;
hxd_Key.E = 69;
hxd_Key.F = 70;
hxd_Key.G = 71;
hxd_Key.H = 72;
hxd_Key.I = 73;
hxd_Key.J = 74;
hxd_Key.K = 75;
hxd_Key.L = 76;
hxd_Key.M = 77;
hxd_Key.N = 78;
hxd_Key.O = 79;
hxd_Key.P = 80;
hxd_Key.Q = 81;
hxd_Key.R = 82;
hxd_Key.S = 83;
hxd_Key.T = 84;
hxd_Key.U = 85;
hxd_Key.V = 86;
hxd_Key.W = 87;
hxd_Key.X = 88;
hxd_Key.Y = 89;
hxd_Key.Z = 90;
hxd_Key.F1 = 112;
hxd_Key.F2 = 113;
hxd_Key.F3 = 114;
hxd_Key.F4 = 115;
hxd_Key.F5 = 116;
hxd_Key.F6 = 117;
hxd_Key.F7 = 118;
hxd_Key.F8 = 119;
hxd_Key.F9 = 120;
hxd_Key.F10 = 121;
hxd_Key.F11 = 122;
hxd_Key.F12 = 123;
hxd_Key.NUMPAD_MULT = 106;
hxd_Key.NUMPAD_ADD = 107;
hxd_Key.NUMPAD_ENTER = 108;
hxd_Key.NUMPAD_SUB = 109;
hxd_Key.NUMPAD_DOT = 110;
hxd_Key.NUMPAD_DIV = 111;
hxd_Key.MOUSE_LEFT = 0;
hxd_Key.MOUSE_RIGHT = 1;
hxd_Key.MOUSE_MIDDLE = 2;
hxd_Key.MOUSE_BACK = 3;
hxd_Key.MOUSE_FORWARD = 4;
hxd_Key.MOUSE_WHEEL_UP = 5;
hxd_Key.MOUSE_WHEEL_DOWN = 6;
hxd_Key.LOC_LEFT = 256;
hxd_Key.LOC_RIGHT = 512;
hxd_Key.LSHIFT = 272;
hxd_Key.RSHIFT = 528;
hxd_Key.LCTRL = 273;
hxd_Key.RCTRL = 529;
hxd_Key.LALT = 274;
hxd_Key.RALT = 530;
hxd_Key.initDone = false;
hxd_Key.keyPressed = [];
hxd_Key.ALLOW_KEY_REPEAT = false;
hxd_Math.PI = 3.14159265358979323;
hxd_Math.EPSILON = 1e-10;
hxd__$Pixels_Channel_$Impl_$.R = 0;
hxd__$Pixels_Channel_$Impl_$.G = 1;
hxd__$Pixels_Channel_$Impl_$.B = 2;
hxd__$Pixels_Channel_$Impl_$.A = 3;
hxd_System.setCursor = hxd_System.setNativeCursor;
hxd_System.loopInit = false;
hxd_Timer.wantedFPS = 60.;
hxd_Timer.maxDeltaTime = 0.5;
hxd_Timer.oldTime = new Date().getTime() / 1000;
hxd_Timer.tmod_factor = 0.95;
hxd_Timer.calc_tmod = 1;
hxd_Timer.tmod = 1;
hxd_Timer.deltaT = 1;
hxd_Timer.frameCount = 0;
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.DFloat = 1;
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.DVec2 = 2;
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.DVec3 = 3;
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.DVec4 = 4;
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.DBytes4 = 9;
hxd_fmt_hmd_Position.QTMP = new h3d_Quat();
hxd_fmt_hmd_Material.DEFAULT_FLAGS = (function($this) {
	var $r;
	var this1 = 0;
	var f = this1;
	f |= 1 << hxd_fmt_hmd_MaterialFlag.HasLighting[1];
	f |= 1 << hxd_fmt_hmd_MaterialFlag.CastShadows[1];
	f |= 1 << hxd_fmt_hmd_MaterialFlag.ReceiveShadows[1];
	$r = f;
	return $r;
}(this));
hxd_fmt_hmd_Data.CURRENT_VERSION = 2;
hxd_fmt_hmd_Reader.BLEND = h2d_BlendMode.__empty_constructs__;
hxd_fmt_hmd_Reader.CULLING = h3d_mat_Face.__empty_constructs__;
hxd_fs_EmbedFileSystem.invalidChars = new EReg("[^A-Za-z0-9_]","g");
hxd_impl_Memory.stack = [];
hxd_impl_Memory.inst = new hxd_impl_MemoryReader();
hxd_impl_Tmp.bytes = [];
hxd_poly2tri_Point.C_ID = 0;
hxd_res_Resource.LIVE_UPDATE = false;
hxd_res_FontBuilder.FONTS = new haxe_ds_StringMap();
hxd_res__$Image_ImageFormat_$Impl_$.Jpg = 0;
hxd_res__$Image_ImageFormat_$Impl_$.Png = 1;
hxd_res__$Image_ImageFormat_$Impl_$.Gif = 2;
hxd_res_Image.ALLOW_NPOT = true;
hxd_res_Image.DEFAULT_FILTER = h3d_mat_Filter.Linear;
hxd_res_Image.DEFAULT_ASYNC = false;
hxd_res_NanoJpeg.BLOCKSIZE = 64;
hxd_res_NanoJpeg.W1 = 2841;
hxd_res_NanoJpeg.W2 = 2676;
hxd_res_NanoJpeg.W3 = 2408;
hxd_res_NanoJpeg.W5 = 1609;
hxd_res_NanoJpeg.W6 = 1108;
hxd_res_NanoJpeg.W7 = 565;
hxd_res_NanoJpeg.CF4A = -9;
hxd_res_NanoJpeg.CF4B = 111;
hxd_res_NanoJpeg.CF4C = 29;
hxd_res_NanoJpeg.CF4D = -3;
hxd_res_NanoJpeg.CF3A = 28;
hxd_res_NanoJpeg.CF3B = 109;
hxd_res_NanoJpeg.CF3C = -9;
hxd_res_NanoJpeg.CF3X = 104;
hxd_res_NanoJpeg.CF3Y = 27;
hxd_res_NanoJpeg.CF3Z = -3;
hxd_res_NanoJpeg.CF2A = 139;
hxd_res_NanoJpeg.CF2B = -11;
hxd_snd__$ALEmulator_ALChannel.FADE_START = 10;
hxd_snd_ALSource.STOP_DELAY = 200;
hxd_snd_ALSource.CHANNEL_BUFSIZE = 4096;
hxd_snd_ALSource.ID = 0;
hxd_snd_ALSource.all = new haxe_ds_IntMap();
hxd_snd_ALBuffer.ID = 0;
hxd_snd_ALBuffer.all = new haxe_ds_IntMap();
hxd_snd_ALEmulator.NATIVE_FREQ = (hxd_snd_NativeChannel.getContext() == null ? 44100 : hxd_snd_NativeChannel.getContext().sampleRate) | 0;
hxd_snd_ALEmulator.FORMAT_MONOF32 = 4368;
hxd_snd_ALEmulator.FORMAT_STEREOF32 = 4369;
hxd_snd_ALEmulator.NONE = 0;
hxd_snd_ALEmulator.FALSE = 0;
hxd_snd_ALEmulator.TRUE = 1;
hxd_snd_ALEmulator.SOURCE_RELATIVE = 514;
hxd_snd_ALEmulator.CONE_INNER_ANGLE = 4097;
hxd_snd_ALEmulator.CONE_OUTER_ANGLE = 4098;
hxd_snd_ALEmulator.PITCH = 4099;
hxd_snd_ALEmulator.POSITION = 4100;
hxd_snd_ALEmulator.DIRECTION = 4101;
hxd_snd_ALEmulator.VELOCITY = 4102;
hxd_snd_ALEmulator.LOOPING = 4103;
hxd_snd_ALEmulator.BUFFER = 4105;
hxd_snd_ALEmulator.GAIN = 4106;
hxd_snd_ALEmulator.MIN_GAIN = 4109;
hxd_snd_ALEmulator.MAX_GAIN = 4110;
hxd_snd_ALEmulator.ORIENTATION = 4111;
hxd_snd_ALEmulator.SOURCE_STATE = 4112;
hxd_snd_ALEmulator.INITIAL = 4113;
hxd_snd_ALEmulator.PLAYING = 4114;
hxd_snd_ALEmulator.PAUSED = 4115;
hxd_snd_ALEmulator.STOPPED = 4116;
hxd_snd_ALEmulator.BUFFERS_QUEUED = 4117;
hxd_snd_ALEmulator.BUFFERS_PROCESSED = 4118;
hxd_snd_ALEmulator.REFERENCE_DISTANCE = 4128;
hxd_snd_ALEmulator.ROLLOFF_FACTOR = 4129;
hxd_snd_ALEmulator.CONE_OUTER_GAIN = 4130;
hxd_snd_ALEmulator.MAX_DISTANCE = 4131;
hxd_snd_ALEmulator.SEC_OFFSET = 4132;
hxd_snd_ALEmulator.SAMPLE_OFFSET = 4133;
hxd_snd_ALEmulator.BYTE_OFFSET = 4134;
hxd_snd_ALEmulator.SOURCE_TYPE = 4135;
hxd_snd_ALEmulator.STATIC = 4136;
hxd_snd_ALEmulator.STREAMING = 4137;
hxd_snd_ALEmulator.UNDETERMINED = 4144;
hxd_snd_ALEmulator.FORMAT_MONO8 = 4352;
hxd_snd_ALEmulator.FORMAT_MONO16 = 4353;
hxd_snd_ALEmulator.FORMAT_STEREO8 = 4354;
hxd_snd_ALEmulator.FORMAT_STEREO16 = 4355;
hxd_snd_ALEmulator.FREQUENCY = 8193;
hxd_snd_ALEmulator.BITS = 8194;
hxd_snd_ALEmulator.CHANNELS = 8195;
hxd_snd_ALEmulator.SIZE = 8196;
hxd_snd_ALEmulator.UNUSED = 8208;
hxd_snd_ALEmulator.PENDING = 8209;
hxd_snd_ALEmulator.PROCESSED = 8210;
hxd_snd_ALEmulator.NO_ERROR = 0;
hxd_snd_ALEmulator.INVALID_NAME = 40961;
hxd_snd_ALEmulator.INVALID_ENUM = 40962;
hxd_snd_ALEmulator.INVALID_VALUE = 40963;
hxd_snd_ALEmulator.INVALID_OPERATION = 40964;
hxd_snd_ALEmulator.OUT_OF_MEMORY = 40965;
hxd_snd_ALEmulator.VENDOR = 45057;
hxd_snd_ALEmulator.VERSION = 45058;
hxd_snd_ALEmulator.RENDERER = 45059;
hxd_snd_ALEmulator.EXTENSIONS = 45060;
hxd_snd_ALEmulator.DOPPLER_FACTOR = 49152;
hxd_snd_ALEmulator.DOPPLER_VELOCITY = 49153;
hxd_snd_ALEmulator.SPEED_OF_SOUND = 49155;
hxd_snd_ALEmulator.DISTANCE_MODEL = 53248;
hxd_snd_ALEmulator.INVERSE_DISTANCE = 53249;
hxd_snd_ALEmulator.INVERSE_DISTANCE_CLAMPED = 53250;
hxd_snd_ALEmulator.LINEAR_DISTANCE = 53251;
hxd_snd_ALEmulator.LINEAR_DISTANCE_CLAMPED = 53252;
hxd_snd_ALEmulator.EXPONENT_DISTANCE = 53253;
hxd_snd_ALEmulator.EXPONENT_DISTANCE_CLAMPED = 53254;
hxd_snd_ALCEmulator.FALSE = 0;
hxd_snd_ALCEmulator.TRUE = 1;
hxd_snd_ALCEmulator.FREQUENCY = 4103;
hxd_snd_ALCEmulator.REFRESH = 4104;
hxd_snd_ALCEmulator.SYNC = 4105;
hxd_snd_ALCEmulator.MONO_SOURCES = 4112;
hxd_snd_ALCEmulator.STEREO_SOURCES = 4113;
hxd_snd_ALCEmulator.NO_ERROR = 0;
hxd_snd_ALCEmulator.INVALID_DEVICE = 40961;
hxd_snd_ALCEmulator.INVALID_CONTEXT = 40962;
hxd_snd_ALCEmulator.INVALID_ENUM = 40963;
hxd_snd_ALCEmulator.INVALID_VALUE = 40964;
hxd_snd_ALCEmulator.OUT_OF_MEMORY = 40965;
hxd_snd_ALCEmulator.MAJOR_VERSION = 4096;
hxd_snd_ALCEmulator.MINOR_VERSION = 4097;
hxd_snd_ALCEmulator.ATTRIBUTES_SIZE = 4098;
hxd_snd_ALCEmulator.ALL_ATTRIBUTES = 4099;
hxd_snd_ALCEmulator.DEFAULT_DEVICE_SPECIFIER = 4100;
hxd_snd_ALCEmulator.DEVICE_SPECIFIER = 4101;
hxd_snd_ALCEmulator.EXTENSIONS = 4102;
hxd_snd_ALCEmulator.EXT_CAPTURE = 1;
hxd_snd_ALCEmulator.CAPTURE_DEVICE_SPECIFIER = 784;
hxd_snd_ALCEmulator.CAPTURE_DEFAULT_DEVICE_SPECIFIER = 785;
hxd_snd_ALCEmulator.CAPTURE_SAMPLES = 786;
hxd_snd_ALCEmulator.ENUMERATE_ALL_EXT = 1;
hxd_snd_ALCEmulator.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
hxd_snd_ALCEmulator.ALL_DEVICES_SPECIFIER = 4115;
hxd_snd_Channel.ID = 0;
hxd_snd_Driver.STREAM_BUFSIZE = 524288;
hxd_snd_Driver.STREAM_DURATION = 5.;
hxd_snd_Driver.AL_NUM_SOURCES = 16;
hxsl_Tools.UID = 0;
hxsl_Tools.SWIZ = hxsl_Component.__empty_constructs__;
hxsl_Tools.MAX_CHANNELS_BITS = 3;
js_Boot.__toStr = ({ }).toString;
hxsl_GlslOut.KWD_LIST = ["input","output","discard","dvec2","dvec3","dvec4"];
hxsl_GlslOut.KWDS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = 0;
		var _g2 = hxsl_GlslOut.KWD_LIST;
		while(_g1 < _g2.length) {
			var k = _g2[_g1];
			++_g1;
			if(__map_reserved[k] != null) {
				_g.setReserved(k,true);
			} else {
				_g.h[k] = true;
			}
		}
	}
	$r = _g;
	return $r;
}(this));
hxsl_GlslOut.GLOBALS = (function($this) {
	var $r;
	var m = new haxe_ds_EnumValueMap();
	{
		var _g = 0;
		var _g1 = hxsl_TGlobal.__empty_constructs__;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var n = "" + Std.string(g);
			n = n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
			m.set(g,n);
		}
	}
	m.set(hxsl_TGlobal.ToInt,"int");
	m.set(hxsl_TGlobal.ToFloat,"float");
	m.set(hxsl_TGlobal.ToBool,"bool");
	m.set(hxsl_TGlobal.Texture2D,"_texture2D");
	m.set(hxsl_TGlobal.LReflect,"reflect");
	m.set(hxsl_TGlobal.Mat3x4,"_mat3x4");
	{
		var g1 = m.iterator();
		while(g1.hasNext()) {
			var g2 = g1.next();
			var _this = hxsl_GlslOut.KWDS;
			if(__map_reserved[g2] != null) {
				_this.setReserved(g2,true);
			} else {
				_this.h[g2] = true;
			}
		}
	}
	$r = m;
	return $r;
}(this));
hxsl_GlslOut.MAT34 = "struct _mat3x4 { vec4 a; vec4 b; vec4 c; };";
hxsl_Printer.SWIZ = ["x","y","z","w"];
hxsl_RuntimeShader.UID = 0;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
{
	Bounds.main();
	haxe_EntryPoint.run();
}
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
